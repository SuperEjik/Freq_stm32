
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08008310  08008310  00018310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087fc  080087fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080087fc  080087fc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087fc  080087fc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087fc  080087fc  000187fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008800  08008800  00018800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  200001e0  080089e4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  080089e4  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a693  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a57  00000000  00000000  0002a89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  0002cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e5  00000000  00000000  0002daa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be3a  00000000  00000000  00045e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b71d  00000000  00000000  00051cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd3dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004880  00000000  00000000  000dd42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080082f4 	.word	0x080082f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080082f4 	.word	0x080082f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af04      	add	r7, sp, #16
 8000bde:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be8:	d104      	bne.n	8000bf4 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
    	gu32_TIM2_OVC++;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	4a2b      	ldr	r2, [pc, #172]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000bf2:	6013      	str	r3, [r2, #0]
    }

    if(htim == &htim1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a2b      	ldr	r2, [pc, #172]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d149      	bne.n	8000c90 <HAL_TIM_PeriodElapsedCallback+0xb8>
    {
    	T_avg = (long double)T_i/(long double)N;
 8000bfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fbef 	bl	80003e4 <__aeabi_ui2d>
 8000c06:	4604      	mov	r4, r0
 8000c08:	460d      	mov	r5, r1
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fbf8 	bl	8000404 <__aeabi_i2d>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
 8000c18:	4620      	mov	r0, r4
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	f7ff fd86 	bl	800072c <__aeabi_ddiv>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4922      	ldr	r1, [pc, #136]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000c26:	e9c1 2300 	strd	r2, r3, [r1]

    	/*snprintf(trans_str, 96, "T_avg %ld mks\n", T_avg);
    	HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);*/

    	F_avg = 72000000.0/(long double)T_avg;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c30:	a119      	add	r1, pc, #100	; (adr r1, 8000c98 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c36:	f7ff fd79 	bl	800072c <__aeabi_ddiv>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	491d      	ldr	r1, [pc, #116]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000c40:	e9c1 2300 	strd	r2, r3, [r1]

    	snprintf(trans_str, 96, "F_avg %Lf Hz | T_avg %Lf mks\n", (long double)F_avg, (long double)T_avg);
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4a:	4919      	ldr	r1, [pc, #100]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000c54:	e9cd 2300 	strd	r2, r3, [sp]
 8000c58:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000c5a:	2160      	movs	r1, #96	; 0x60
 8000c5c:	4817      	ldr	r0, [pc, #92]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000c5e:	f003 fd59 	bl	8004714 <sniprintf>
    	HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000c62:	4816      	ldr	r0, [pc, #88]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000c64:	f7ff fa74 	bl	8000150 <strlen>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c70:	4912      	ldr	r1, [pc, #72]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000c72:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000c74:	f002 fd3f 	bl	80036f6 <HAL_UART_Transmit>

        T_i = 0;
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
        N = 0;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]

    	HAL_TIM_Base_Stop_IT(&htim1);
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000c86:	f001 fc19 	bl	80024bc <HAL_TIM_Base_Stop_IT>
        //__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
        HAL_TIM_Base_Start_IT(&htim1);
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000c8c:	f001 fbc4 	bl	8002418 <HAL_TIM_Base_Start_IT>
    }
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bdb0      	pop	{r4, r5, r7, pc}
 8000c98:	00000000 	.word	0x00000000
 8000c9c:	41912a88 	.word	0x41912a88
 8000ca0:	200001fc 	.word	0x200001fc
 8000ca4:	20000230 	.word	0x20000230
 8000ca8:	20000200 	.word	0x20000200
 8000cac:	20000210 	.word	0x20000210
 8000cb0:	20000208 	.word	0x20000208
 8000cb4:	20000218 	.word	0x20000218
 8000cb8:	08008310 	.word	0x08008310
 8000cbc:	20000304 	.word	0x20000304
 8000cc0:	200002c0 	.word	0x200002c0
 8000cc4:	00000000 	.word	0x00000000

08000cc8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // колбек по захвату
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    				}
    			//}
    	}
    }*/

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7f1b      	ldrb	r3, [r3, #28]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d129      	bne.n	8000d2c <HAL_TIM_IC_CaptureCallback+0x64>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f002 f936 	bl	8002f4c <HAL_TIM_ReadCapturedValue>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000ce4:	6013      	str	r3, [r2, #0]

		if (ICValue != 0)
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d01e      	beq.n	8000d2c <HAL_TIM_IC_CaptureCallback+0x64>
		{
			// calculate the Duty Cycle
			//Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;

			Frequency = (long double)F_CLK/(long double)(ICValue + 2);
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fb75 	bl	80003e4 <__aeabi_ui2d>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	a10e      	add	r1, pc, #56	; (adr r1, 8000d38 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d04:	f7ff fd12 	bl	800072c <__aeabi_ddiv>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	490d      	ldr	r1, [pc, #52]	; (8000d44 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000d0e:	e9c1 2300 	strd	r2, r3, [r1]
			/*snprintf(trans_str, 96, "Freq_avg %ld Hz\n", Frequency);
			HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);*/

			T_i = T_i + (ICValue + 2);
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000d20:	6013      	str	r3, [r2, #0]
			N++;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_TIM_IC_CaptureCallback+0x84>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3301      	adds	r3, #1
 8000d28:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_TIM_IC_CaptureCallback+0x84>)
 8000d2a:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	f3af 8000 	nop.w
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	41912a88 	.word	0x41912a88
 8000d40:	20000220 	.word	0x20000220
 8000d44:	20000228 	.word	0x20000228
 8000d48:	20000200 	.word	0x20000200
 8000d4c:	20000210 	.word	0x20000210

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fbca 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f818 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 f982 	bl	8001064 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d60:	f000 f956 	bl	8001010 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d64:	f000 f8b8 	bl	8000ed8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000d68:	f000 f85c 	bl	8000e24 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <main+0x34>)
 8000d6e:	f001 fb53 	bl	8002418 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);   // main channel
 8000d72:	2100      	movs	r1, #0
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <main+0x38>)
 8000d76:	f001 fce7 	bl	8002748 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);   // indirect channel
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <main+0x38>)
 8000d7e:	f001 fc23 	bl	80025c8 <HAL_TIM_IC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <main+0x32>
 8000d84:	20000230 	.word	0x20000230
 8000d88:	20000278 	.word	0x20000278

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b090      	sub	sp, #64	; 0x40
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	2228      	movs	r2, #40	; 0x28
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fe40 	bl	8003a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd0:	f107 0318 	add.w	r3, r7, #24
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fe7d 	bl	8001ad4 <HAL_RCC_OscConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000de0:	f000 f978 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de4:	230f      	movs	r3, #15
 8000de6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de8:	2302      	movs	r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 f8ea 	bl	8001fd8 <HAL_RCC_ClockConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e0a:	f000 f963 	bl	80010d4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8000e14:	2000      	movs	r0, #0
 8000e16:	f001 f9c9 	bl	80021ac <HAL_RCC_MCOConfig>
}
 8000e1a:	bf00      	nop
 8000e1c:	3740      	adds	r7, #64	; 0x40
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <MX_TIM1_Init+0xac>)
 8000e42:	4a24      	ldr	r2, [pc, #144]	; (8000ed4 <MX_TIM1_Init+0xb0>)
 8000e44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_TIM1_Init+0xac>)
 8000e48:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000e4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_TIM1_Init+0xac>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_TIM1_Init+0xac>)
 8000e56:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <MX_TIM1_Init+0xac>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_TIM1_Init+0xac>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_TIM1_Init+0xac>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e6e:	4818      	ldr	r0, [pc, #96]	; (8000ed0 <MX_TIM1_Init+0xac>)
 8000e70:	f001 fa82 	bl	8002378 <HAL_TIM_Base_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e7a:	f000 f92b 	bl	80010d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <MX_TIM1_Init+0xac>)
 8000e8c:	f001 ff57 	bl	8002d3e <HAL_TIM_ConfigClockSource>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e96:	f000 f91d 	bl	80010d4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <MX_TIM1_Init+0xac>)
 8000e9e:	f001 fd59 	bl	8002954 <HAL_TIM_OnePulse_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000ea8:	f000 f914 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000eac:	2310      	movs	r3, #16
 8000eae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_TIM1_Init+0xac>)
 8000eba:	f002 fb5f 	bl	800357c <HAL_TIMEx_MasterConfigSynchronization>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ec4:	f000 f906 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000230 	.word	0x20000230
 8000ed4:	40012c00 	.word	0x40012c00

08000ed8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b090      	sub	sp, #64	; 0x40
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f12:	4b3e      	ldr	r3, [pc, #248]	; (800100c <MX_TIM2_Init+0x134>)
 8000f14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f1a:	4b3c      	ldr	r3, [pc, #240]	; (800100c <MX_TIM2_Init+0x134>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b3a      	ldr	r3, [pc, #232]	; (800100c <MX_TIM2_Init+0x134>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <MX_TIM2_Init+0x134>)
 8000f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b37      	ldr	r3, [pc, #220]	; (800100c <MX_TIM2_Init+0x134>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b35      	ldr	r3, [pc, #212]	; (800100c <MX_TIM2_Init+0x134>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f3a:	4834      	ldr	r0, [pc, #208]	; (800100c <MX_TIM2_Init+0x134>)
 8000f3c:	f001 fa1c 	bl	8002378 <HAL_TIM_Base_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f46:	f000 f8c5 	bl	80010d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f54:	4619      	mov	r1, r3
 8000f56:	482d      	ldr	r0, [pc, #180]	; (800100c <MX_TIM2_Init+0x134>)
 8000f58:	f001 fef1 	bl	8002d3e <HAL_TIM_ConfigClockSource>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f62:	f000 f8b7 	bl	80010d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f66:	4829      	ldr	r0, [pc, #164]	; (800100c <MX_TIM2_Init+0x134>)
 8000f68:	f001 fad6 	bl	8002518 <HAL_TIM_IC_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f72:	f000 f8af 	bl	80010d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f76:	2304      	movs	r3, #4
 8000f78:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f7a:	2350      	movs	r3, #80	; 0x50
 8000f7c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	481e      	ldr	r0, [pc, #120]	; (800100c <MX_TIM2_Init+0x134>)
 8000f92:	f001 ff98 	bl	8002ec6 <HAL_TIM_SlaveConfigSynchro>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000f9c:	f000 f89a 	bl	80010d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4814      	ldr	r0, [pc, #80]	; (800100c <MX_TIM2_Init+0x134>)
 8000fba:	f001 fe2c 	bl	8002c16 <HAL_TIM_IC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000fc4:	f000 f886 	bl	80010d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <MX_TIM2_Init+0x134>)
 8000fda:	f001 fe1c 	bl	8002c16 <HAL_TIM_IC_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8000fe4:	f000 f876 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_TIM2_Init+0x134>)
 8000ff6:	f002 fac1 	bl	800357c <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8001000:	f000 f868 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3740      	adds	r7, #64	; 0x40
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000278 	.word	0x20000278

08001010 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <MX_USART1_UART_Init+0x50>)
 8001018:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_USART1_UART_Init+0x4c>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USART1_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_USART1_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001048:	f002 fb08 	bl	800365c <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001052:	f000 f83f 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200002c0 	.word	0x200002c0
 8001060:	40013800 	.word	0x40013800

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_GPIO_Init+0x68>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a13      	ldr	r2, [pc, #76]	; (80010cc <MX_GPIO_Init+0x68>)
 800107e:	f043 0320 	orr.w	r3, r3, #32
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_GPIO_Init+0x68>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0320 	and.w	r3, r3, #32
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_GPIO_Init+0x68>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <MX_GPIO_Init+0x68>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_GPIO_Init+0x68>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	4619      	mov	r1, r3
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_GPIO_Init+0x6c>)
 80010be:	f000 fb85 	bl	80017cc <HAL_GPIO_Init>

}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010800 	.word	0x40010800

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	e7fe      	b.n	80010dc <Error_Handler+0x8>
	...

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_MspInit+0x5c>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	4a14      	ldr	r2, [pc, #80]	; (800113c <HAL_MspInit+0x5c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6193      	str	r3, [r2, #24]
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_MspInit+0x5c>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_MspInit+0x5c>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_MspInit+0x5c>)
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001108:	61d3      	str	r3, [r2, #28]
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_MspInit+0x5c>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_MspInit+0x60>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <HAL_MspInit+0x60>)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	40021000 	.word	0x40021000
 8001140:	40010000 	.word	0x40010000

08001144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <HAL_TIM_Base_MspInit+0xb4>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d114      	bne.n	800118e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a24      	ldr	r2, [pc, #144]	; (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 800116a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2019      	movs	r0, #25
 8001182:	f000 faec 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001186:	2019      	movs	r0, #25
 8001188:	f000 fb05 	bl	8001796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800118c:	e030      	b.n	80011f0 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM2)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001196:	d12b      	bne.n	80011f0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	4a17      	ldr	r2, [pc, #92]	; (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	61d3      	str	r3, [r2, #28]
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a11      	ldr	r2, [pc, #68]	; (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	4619      	mov	r1, r3
 80011da:	4809      	ldr	r0, [pc, #36]	; (8001200 <HAL_TIM_Base_MspInit+0xbc>)
 80011dc:	f000 faf6 	bl	80017cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	201c      	movs	r0, #28
 80011e6:	f000 faba 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ea:	201c      	movs	r0, #28
 80011ec:	f000 fad3 	bl	8001796 <HAL_NVIC_EnableIRQ>
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40012c00 	.word	0x40012c00
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010800 	.word	0x40010800

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <HAL_UART_MspInit+0x8c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d131      	bne.n	8001288 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_UART_MspInit+0x90>)
 800122a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_UART_MspInit+0x90>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_UART_MspInit+0x90>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4619      	mov	r1, r3
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <HAL_UART_MspInit+0x94>)
 800126a:	f000 faaf 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800126e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_UART_MspInit+0x94>)
 8001284:	f000 faa2 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40013800 	.word	0x40013800
 8001294:	40021000 	.word	0x40021000
 8001298:	40010800 	.word	0x40010800

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <NMI_Handler+0x4>

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e2:	f000 f949 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <TIM1_UP_IRQHandler+0x10>)
 80012f2:	f001 fb88 	bl	8002a06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000230 	.word	0x20000230

08001300 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <TIM2_IRQHandler+0x10>)
 8001306:	f001 fb7e 	bl	8002a06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000278 	.word	0x20000278

08001314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	return 1;
 8001318:	2301      	movs	r3, #1
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <_kill>:

int _kill(int pid, int sig)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800132c:	f002 fb4e 	bl	80039cc <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	2216      	movs	r2, #22
 8001334:	601a      	str	r2, [r3, #0]
	return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_exit>:

void _exit (int status)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800134a:	f04f 31ff 	mov.w	r1, #4294967295
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffe7 	bl	8001322 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001354:	e7fe      	b.n	8001354 <_exit+0x12>

08001356 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e00a      	b.n	800137e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001368:	f3af 8000 	nop.w
 800136c:	4601      	mov	r1, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	60ba      	str	r2, [r7, #8]
 8001374:	b2ca      	uxtb	r2, r1
 8001376:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	dbf0      	blt.n	8001368 <_read+0x12>
	}

return len;
 8001386:	687b      	ldr	r3, [r7, #4]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e009      	b.n	80013b6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	60ba      	str	r2, [r7, #8]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbf1      	blt.n	80013a2 <_write+0x12>
	}
	return len;
 80013be:	687b      	ldr	r3, [r7, #4]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_close>:

int _close(int file)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	return -1;
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ee:	605a      	str	r2, [r3, #4]
	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <_isatty>:

int _isatty(int file)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	return 1;
 8001404:	2301      	movs	r3, #1
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
	return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f002 fab8 	bl	80039cc <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20005000 	.word	0x20005000
 8001488:	00000400 	.word	0x00000400
 800148c:	20000364 	.word	0x20000364
 8001490:	20000380 	.word	0x20000380

08001494 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014a2:	490d      	ldr	r1, [pc, #52]	; (80014d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b8:	4c0a      	ldr	r4, [pc, #40]	; (80014e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014c6:	f7ff ffe5 	bl	8001494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ca:	f002 fa85 	bl	80039d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ce:	f7ff fc3f 	bl	8000d50 <main>
  bx lr
 80014d2:	4770      	bx	lr
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80014dc:	08008804 	.word	0x08008804
  ldr r2, =_sbss
 80014e0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80014e4:	2000037c 	.word	0x2000037c

080014e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_2_IRQHandler>
	...

080014ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_Init+0x28>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_Init+0x28>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 f923 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001502:	200f      	movs	r0, #15
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001508:	f7ff fdea 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f93b 	bl	80017b2 <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 f903 	bl	800175e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000000 	.word	0x20000000
 8001570:	20000008 	.word	0x20000008
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_IncTick+0x1c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x20>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a03      	ldr	r2, [pc, #12]	; (8001598 <HAL_IncTick+0x20>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	20000008 	.word	0x20000008
 8001598:	20000368 	.word	0x20000368

0800159c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b02      	ldr	r3, [pc, #8]	; (80015ac <HAL_GetTick+0x10>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000368 	.word	0x20000368

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db0b      	blt.n	800163e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4906      	ldr	r1, [pc, #24]	; (8001648 <__NVIC_EnableIRQ+0x34>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2001      	movs	r0, #1
 8001636:	fa00 f202 	lsl.w	r2, r0, r2
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100

0800164c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	; (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001714:	d301      	bcc.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e00f      	b.n	800173a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <SysTick_Config+0x40>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	210f      	movs	r1, #15
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f7ff ff90 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <SysTick_Config+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <SysTick_Config+0x40>)
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff2d 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff42 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff90 	bl	80016a0 <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5f 	bl	800164c <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff35 	bl	8001614 <__NVIC_EnableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffa2 	bl	8001704 <SysTick_Config>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b08b      	sub	sp, #44	; 0x2c
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017de:	e169      	b.n	8001ab4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017e0:	2201      	movs	r2, #1
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	f040 8158 	bne.w	8001aae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4a9a      	ldr	r2, [pc, #616]	; (8001a6c <HAL_GPIO_Init+0x2a0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d05e      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 8001808:	4a98      	ldr	r2, [pc, #608]	; (8001a6c <HAL_GPIO_Init+0x2a0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d875      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 800180e:	4a98      	ldr	r2, [pc, #608]	; (8001a70 <HAL_GPIO_Init+0x2a4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d058      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 8001814:	4a96      	ldr	r2, [pc, #600]	; (8001a70 <HAL_GPIO_Init+0x2a4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d86f      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 800181a:	4a96      	ldr	r2, [pc, #600]	; (8001a74 <HAL_GPIO_Init+0x2a8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d052      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 8001820:	4a94      	ldr	r2, [pc, #592]	; (8001a74 <HAL_GPIO_Init+0x2a8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d869      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 8001826:	4a94      	ldr	r2, [pc, #592]	; (8001a78 <HAL_GPIO_Init+0x2ac>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d04c      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 800182c:	4a92      	ldr	r2, [pc, #584]	; (8001a78 <HAL_GPIO_Init+0x2ac>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d863      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 8001832:	4a92      	ldr	r2, [pc, #584]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d046      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 8001838:	4a90      	ldr	r2, [pc, #576]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d85d      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 800183e:	2b12      	cmp	r3, #18
 8001840:	d82a      	bhi.n	8001898 <HAL_GPIO_Init+0xcc>
 8001842:	2b12      	cmp	r3, #18
 8001844:	d859      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 8001846:	a201      	add	r2, pc, #4	; (adr r2, 800184c <HAL_GPIO_Init+0x80>)
 8001848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184c:	080018c7 	.word	0x080018c7
 8001850:	080018a1 	.word	0x080018a1
 8001854:	080018b3 	.word	0x080018b3
 8001858:	080018f5 	.word	0x080018f5
 800185c:	080018fb 	.word	0x080018fb
 8001860:	080018fb 	.word	0x080018fb
 8001864:	080018fb 	.word	0x080018fb
 8001868:	080018fb 	.word	0x080018fb
 800186c:	080018fb 	.word	0x080018fb
 8001870:	080018fb 	.word	0x080018fb
 8001874:	080018fb 	.word	0x080018fb
 8001878:	080018fb 	.word	0x080018fb
 800187c:	080018fb 	.word	0x080018fb
 8001880:	080018fb 	.word	0x080018fb
 8001884:	080018fb 	.word	0x080018fb
 8001888:	080018fb 	.word	0x080018fb
 800188c:	080018fb 	.word	0x080018fb
 8001890:	080018a9 	.word	0x080018a9
 8001894:	080018bd 	.word	0x080018bd
 8001898:	4a79      	ldr	r2, [pc, #484]	; (8001a80 <HAL_GPIO_Init+0x2b4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800189e:	e02c      	b.n	80018fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e029      	b.n	80018fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	3304      	adds	r3, #4
 80018ae:	623b      	str	r3, [r7, #32]
          break;
 80018b0:	e024      	b.n	80018fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	3308      	adds	r3, #8
 80018b8:	623b      	str	r3, [r7, #32]
          break;
 80018ba:	e01f      	b.n	80018fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	330c      	adds	r3, #12
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	e01a      	b.n	80018fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ce:	2304      	movs	r3, #4
 80018d0:	623b      	str	r3, [r7, #32]
          break;
 80018d2:	e013      	b.n	80018fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018dc:	2308      	movs	r3, #8
 80018de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	611a      	str	r2, [r3, #16]
          break;
 80018e6:	e009      	b.n	80018fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e8:	2308      	movs	r3, #8
 80018ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	615a      	str	r2, [r3, #20]
          break;
 80018f2:	e003      	b.n	80018fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e000      	b.n	80018fc <HAL_GPIO_Init+0x130>
          break;
 80018fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2bff      	cmp	r3, #255	; 0xff
 8001900:	d801      	bhi.n	8001906 <HAL_GPIO_Init+0x13a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	e001      	b.n	800190a <HAL_GPIO_Init+0x13e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3304      	adds	r3, #4
 800190a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2bff      	cmp	r3, #255	; 0xff
 8001910:	d802      	bhi.n	8001918 <HAL_GPIO_Init+0x14c>
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	e002      	b.n	800191e <HAL_GPIO_Init+0x152>
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	3b08      	subs	r3, #8
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	210f      	movs	r1, #15
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	401a      	ands	r2, r3
 8001930:	6a39      	ldr	r1, [r7, #32]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	431a      	orrs	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80b1 	beq.w	8001aae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800194c:	4b4d      	ldr	r3, [pc, #308]	; (8001a84 <HAL_GPIO_Init+0x2b8>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a4c      	ldr	r2, [pc, #304]	; (8001a84 <HAL_GPIO_Init+0x2b8>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b4a      	ldr	r3, [pc, #296]	; (8001a84 <HAL_GPIO_Init+0x2b8>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001964:	4a48      	ldr	r2, [pc, #288]	; (8001a88 <HAL_GPIO_Init+0x2bc>)
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4013      	ands	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a40      	ldr	r2, [pc, #256]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d013      	beq.n	80019b8 <HAL_GPIO_Init+0x1ec>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3f      	ldr	r2, [pc, #252]	; (8001a90 <HAL_GPIO_Init+0x2c4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d00d      	beq.n	80019b4 <HAL_GPIO_Init+0x1e8>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a3e      	ldr	r2, [pc, #248]	; (8001a94 <HAL_GPIO_Init+0x2c8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d007      	beq.n	80019b0 <HAL_GPIO_Init+0x1e4>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a3d      	ldr	r2, [pc, #244]	; (8001a98 <HAL_GPIO_Init+0x2cc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d101      	bne.n	80019ac <HAL_GPIO_Init+0x1e0>
 80019a8:	2303      	movs	r3, #3
 80019aa:	e006      	b.n	80019ba <HAL_GPIO_Init+0x1ee>
 80019ac:	2304      	movs	r3, #4
 80019ae:	e004      	b.n	80019ba <HAL_GPIO_Init+0x1ee>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_Init+0x1ee>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_GPIO_Init+0x1ee>
 80019b8:	2300      	movs	r3, #0
 80019ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019bc:	f002 0203 	and.w	r2, r2, #3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4093      	lsls	r3, r2
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ca:	492f      	ldr	r1, [pc, #188]	; (8001a88 <HAL_GPIO_Init+0x2bc>)
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	492c      	ldr	r1, [pc, #176]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019f2:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4928      	ldr	r1, [pc, #160]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4922      	ldr	r1, [pc, #136]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	491e      	ldr	r1, [pc, #120]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	4918      	ldr	r1, [pc, #96]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	4914      	ldr	r1, [pc, #80]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d021      	beq.n	8001aa0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	490e      	ldr	r1, [pc, #56]	; (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60cb      	str	r3, [r1, #12]
 8001a68:	e021      	b.n	8001aae <HAL_GPIO_Init+0x2e2>
 8001a6a:	bf00      	nop
 8001a6c:	10320000 	.word	0x10320000
 8001a70:	10310000 	.word	0x10310000
 8001a74:	10220000 	.word	0x10220000
 8001a78:	10210000 	.word	0x10210000
 8001a7c:	10120000 	.word	0x10120000
 8001a80:	10110000 	.word	0x10110000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	40010800 	.word	0x40010800
 8001a90:	40010c00 	.word	0x40010c00
 8001a94:	40011000 	.word	0x40011000
 8001a98:	40011400 	.word	0x40011400
 8001a9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_GPIO_Init+0x304>)
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	4909      	ldr	r1, [pc, #36]	; (8001ad0 <HAL_GPIO_Init+0x304>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f47f ae8e 	bne.w	80017e0 <HAL_GPIO_Init+0x14>
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	372c      	adds	r7, #44	; 0x2c
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e272      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8087 	beq.w	8001c02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af4:	4b92      	ldr	r3, [pc, #584]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d00c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b00:	4b8f      	ldr	r3, [pc, #572]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d112      	bne.n	8001b32 <HAL_RCC_OscConfig+0x5e>
 8001b0c:	4b8c      	ldr	r3, [pc, #560]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b18:	d10b      	bne.n	8001b32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1a:	4b89      	ldr	r3, [pc, #548]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d06c      	beq.n	8001c00 <HAL_RCC_OscConfig+0x12c>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d168      	bne.n	8001c00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e24c      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x76>
 8001b3c:	4b80      	ldr	r3, [pc, #512]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a7f      	ldr	r2, [pc, #508]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e02e      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x98>
 8001b52:	4b7b      	ldr	r3, [pc, #492]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a7a      	ldr	r2, [pc, #488]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b78      	ldr	r3, [pc, #480]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a77      	ldr	r2, [pc, #476]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e01d      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0xbc>
 8001b76:	4b72      	ldr	r3, [pc, #456]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a71      	ldr	r2, [pc, #452]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b6f      	ldr	r3, [pc, #444]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6e      	ldr	r2, [pc, #440]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
 8001b90:	4b6b      	ldr	r3, [pc, #428]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a6a      	ldr	r2, [pc, #424]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a67      	ldr	r2, [pc, #412]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d013      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fcf4 	bl	800159c <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff fcf0 	bl	800159c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e200      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xe4>
 8001bd6:	e014      	b.n	8001c02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fce0 	bl	800159c <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff fcdc 	bl	800159c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	; 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e1ec      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf2:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x10c>
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d063      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0e:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c1a:	4b49      	ldr	r3, [pc, #292]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d11c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x18c>
 8001c26:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d116      	bne.n	8001c60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c32:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_RCC_OscConfig+0x176>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e1c0      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4939      	ldr	r1, [pc, #228]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	e03a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c68:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fc95 	bl	800159c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c76:	f7ff fc91 	bl	800159c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e1a1      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4927      	ldr	r1, [pc, #156]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
 8001ca8:	e015      	b.n	8001cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001caa:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fc74 	bl	800159c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fc70 	bl	800159c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e180      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d03a      	beq.n	8001d58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d019      	beq.n	8001d1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_RCC_OscConfig+0x274>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff fc54 	bl	800159c <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7ff fc50 	bl	800159c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e160      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f000 fb10 	bl	800233c <RCC_Delay>
 8001d1c:	e01c      	b.n	8001d58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_RCC_OscConfig+0x274>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7ff fc3a 	bl	800159c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fc36 	bl	800159c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d908      	bls.n	8001d4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e146      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	42420000 	.word	0x42420000
 8001d48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	4b92      	ldr	r3, [pc, #584]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e9      	bne.n	8001d2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80a6 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6a:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10d      	bne.n	8001d92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a87      	ldr	r2, [pc, #540]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	61d3      	str	r3, [r2, #28]
 8001d82:	4b85      	ldr	r3, [pc, #532]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d92:	4b82      	ldr	r3, [pc, #520]	; (8001f9c <HAL_RCC_OscConfig+0x4c8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d118      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <HAL_RCC_OscConfig+0x4c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7e      	ldr	r2, [pc, #504]	; (8001f9c <HAL_RCC_OscConfig+0x4c8>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001daa:	f7ff fbf7 	bl	800159c <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db2:	f7ff fbf3 	bl	800159c <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b64      	cmp	r3, #100	; 0x64
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e103      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	4b75      	ldr	r3, [pc, #468]	; (8001f9c <HAL_RCC_OscConfig+0x4c8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x312>
 8001dd8:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a6e      	ldr	r2, [pc, #440]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	e02d      	b.n	8001e42 <HAL_RCC_OscConfig+0x36e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x334>
 8001dee:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a69      	ldr	r2, [pc, #420]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	4b67      	ldr	r3, [pc, #412]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a66      	ldr	r2, [pc, #408]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	e01c      	b.n	8001e42 <HAL_RCC_OscConfig+0x36e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x356>
 8001e10:	4b61      	ldr	r3, [pc, #388]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	4b5e      	ldr	r3, [pc, #376]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a5d      	ldr	r2, [pc, #372]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	e00b      	b.n	8001e42 <HAL_RCC_OscConfig+0x36e>
 8001e2a:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a5a      	ldr	r2, [pc, #360]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	4b58      	ldr	r3, [pc, #352]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a57      	ldr	r2, [pc, #348]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d015      	beq.n	8001e76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fba7 	bl	800159c <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff fba3 	bl	800159c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0b1      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	4b4b      	ldr	r3, [pc, #300]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ee      	beq.n	8001e52 <HAL_RCC_OscConfig+0x37e>
 8001e74:	e014      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fb91 	bl	800159c <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff fb8d 	bl	800159c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e09b      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e94:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a3b      	ldr	r2, [pc, #236]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8087 	beq.w	8001fca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebc:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d061      	beq.n	8001f8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d146      	bne.n	8001f5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fb61 	bl	800159c <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ede:	f7ff fb5d 	bl	800159c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e06d      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef0:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f04:	d108      	bne.n	8001f18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4921      	ldr	r1, [pc, #132]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f18:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a19      	ldr	r1, [r3, #32]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	491b      	ldr	r1, [pc, #108]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff fb31 	bl	800159c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7ff fb2d 	bl	800159c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e03d      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x46a>
 8001f5c:	e035      	b.n	8001fca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fb1a 	bl	800159c <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7ff fb16 	bl	800159c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e026      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x498>
 8001f8a:	e01e      	b.n	8001fca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d107      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e019      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_OscConfig+0x500>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0d0      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d910      	bls.n	800201c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 0207 	bic.w	r2, r3, #7
 8002002:	4965      	ldr	r1, [pc, #404]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b8      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a58      	ldr	r2, [pc, #352]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800203e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002056:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b50      	ldr	r3, [pc, #320]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	494d      	ldr	r1, [pc, #308]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d040      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b47      	ldr	r3, [pc, #284]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d115      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07f      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e073      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e06b      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b6:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f023 0203 	bic.w	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4936      	ldr	r1, [pc, #216]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c8:	f7ff fa68 	bl	800159c <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d0:	f7ff fa64 	bl	800159c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e053      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 020c 	and.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1eb      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d210      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	4922      	ldr	r1, [pc, #136]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e032      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4916      	ldr	r1, [pc, #88]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	490e      	ldr	r1, [pc, #56]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002166:	f000 f859 	bl	800221c <HAL_RCC_GetSysClockFreq>
 800216a:	4602      	mov	r2, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	490a      	ldr	r1, [pc, #40]	; (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	5ccb      	ldrb	r3, [r1, r3]
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f9c6 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40022000 	.word	0x40022000
 800219c:	40021000 	.word	0x40021000
 80021a0:	08008340 	.word	0x08008340
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80021b8:	f107 0318 	add.w	r3, r7, #24
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80021ca:	2303      	movs	r3, #3
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80021d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d6:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_RCC_MCOConfig+0x68>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <HAL_RCC_MCOConfig+0x68>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_MCOConfig+0x68>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80021f0:	f107 0318 	add.w	r3, r7, #24
 80021f4:	4619      	mov	r1, r3
 80021f6:	4808      	ldr	r0, [pc, #32]	; (8002218 <HAL_RCC_MCOConfig+0x6c>)
 80021f8:	f7ff fae8 	bl	80017cc <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_RCC_MCOConfig+0x68>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002204:	4903      	ldr	r1, [pc, #12]	; (8002214 <HAL_RCC_MCOConfig+0x68>)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
}
 800220c:	bf00      	nop
 800220e:	3728      	adds	r7, #40	; 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	40010800 	.word	0x40010800

0800221c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	b490      	push	{r4, r7}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002224:	1d3c      	adds	r4, r7, #4
 8002226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800222c:	f240 2301 	movw	r3, #513	; 0x201
 8002230:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002246:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b04      	cmp	r3, #4
 8002254:	d002      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x40>
 8002256:	2b08      	cmp	r3, #8
 8002258:	d003      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0x46>
 800225a:	e02b      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800225e:	623b      	str	r3, [r7, #32]
      break;
 8002260:	e02b      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	0c9b      	lsrs	r3, r3, #18
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3328      	adds	r3, #40	; 0x28
 800226c:	443b      	add	r3, r7
 800226e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002272:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d012      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	0c5b      	lsrs	r3, r3, #17
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	3328      	adds	r3, #40	; 0x28
 800228a:	443b      	add	r3, r7
 800228c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002290:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002296:	fb03 f202 	mul.w	r2, r3, r2
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	e004      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	623b      	str	r3, [r7, #32]
      break;
 80022b2:	e002      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022b6:	623b      	str	r3, [r7, #32]
      break;
 80022b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ba:	6a3b      	ldr	r3, [r7, #32]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3728      	adds	r7, #40	; 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc90      	pop	{r4, r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	08008330 	.word	0x08008330
 80022cc:	40021000 	.word	0x40021000
 80022d0:	007a1200 	.word	0x007a1200
 80022d4:	003d0900 	.word	0x003d0900

080022d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000000 	.word	0x20000000

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022f0:	f7ff fff2 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4903      	ldr	r1, [pc, #12]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	08008350 	.word	0x08008350

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002318:	f7ff ffde 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	0adb      	lsrs	r3, r3, #11
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	08008350 	.word	0x08008350

0800233c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <RCC_Delay+0x34>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <RCC_Delay+0x38>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0a5b      	lsrs	r3, r3, #9
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	fb02 f303 	mul.w	r3, r2, r3
 8002356:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002358:	bf00      	nop
  }
  while (Delay --);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1e5a      	subs	r2, r3, #1
 800235e:	60fa      	str	r2, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f9      	bne.n	8002358 <RCC_Delay+0x1c>
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000000 	.word	0x20000000
 8002374:	10624dd3 	.word	0x10624dd3

08002378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e041      	b.n	800240e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fed0 	bl	8001144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3304      	adds	r3, #4
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f000 fe28 	bl	800300c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d001      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e03a      	b.n	80024a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <HAL_TIM_Base_Start_IT+0x98>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00e      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x58>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245a:	d009      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x58>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x58>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d111      	bne.n	8002494 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b06      	cmp	r3, #6
 8002480:	d010      	beq.n	80024a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002492:	e007      	b.n	80024a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40000800 	.word	0x40000800

080024bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a1a      	ldr	r2, [r3, #32]
 80024da:	f241 1311 	movw	r3, #4369	; 0x1111
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10f      	bne.n	8002504 <HAL_TIM_Base_Stop_IT+0x48>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6a1a      	ldr	r2, [r3, #32]
 80024ea:	f240 4344 	movw	r3, #1092	; 0x444
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d107      	bne.n	8002504 <HAL_TIM_Base_Stop_IT+0x48>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e041      	b.n	80025ae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f839 	bl	80025b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f000 fd58 	bl	800300c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d104      	bne.n	80025e2 <HAL_TIM_IC_Start+0x1a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	e013      	b.n	800260a <HAL_TIM_IC_Start+0x42>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d104      	bne.n	80025f2 <HAL_TIM_IC_Start+0x2a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	e00b      	b.n	800260a <HAL_TIM_IC_Start+0x42>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d104      	bne.n	8002602 <HAL_TIM_IC_Start+0x3a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	e003      	b.n	800260a <HAL_TIM_IC_Start+0x42>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002608:	b2db      	uxtb	r3, r3
 800260a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d104      	bne.n	800261c <HAL_TIM_IC_Start+0x54>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002618:	b2db      	uxtb	r3, r3
 800261a:	e013      	b.n	8002644 <HAL_TIM_IC_Start+0x7c>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b04      	cmp	r3, #4
 8002620:	d104      	bne.n	800262c <HAL_TIM_IC_Start+0x64>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e00b      	b.n	8002644 <HAL_TIM_IC_Start+0x7c>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b08      	cmp	r3, #8
 8002630:	d104      	bne.n	800263c <HAL_TIM_IC_Start+0x74>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e003      	b.n	8002644 <HAL_TIM_IC_Start+0x7c>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002642:	b2db      	uxtb	r3, r3
 8002644:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d102      	bne.n	8002652 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e06d      	b.n	8002732 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d104      	bne.n	8002666 <HAL_TIM_IC_Start+0x9e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002664:	e013      	b.n	800268e <HAL_TIM_IC_Start+0xc6>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b04      	cmp	r3, #4
 800266a:	d104      	bne.n	8002676 <HAL_TIM_IC_Start+0xae>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002674:	e00b      	b.n	800268e <HAL_TIM_IC_Start+0xc6>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b08      	cmp	r3, #8
 800267a:	d104      	bne.n	8002686 <HAL_TIM_IC_Start+0xbe>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002684:	e003      	b.n	800268e <HAL_TIM_IC_Start+0xc6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2202      	movs	r2, #2
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <HAL_TIM_IC_Start+0xd6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800269c:	e013      	b.n	80026c6 <HAL_TIM_IC_Start+0xfe>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d104      	bne.n	80026ae <HAL_TIM_IC_Start+0xe6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026ac:	e00b      	b.n	80026c6 <HAL_TIM_IC_Start+0xfe>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d104      	bne.n	80026be <HAL_TIM_IC_Start+0xf6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026bc:	e003      	b.n	80026c6 <HAL_TIM_IC_Start+0xfe>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2202      	movs	r2, #2
 80026c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 ff2f 	bl	8003532 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a18      	ldr	r2, [pc, #96]	; (800273c <HAL_TIM_IC_Start+0x174>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00e      	beq.n	80026fc <HAL_TIM_IC_Start+0x134>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e6:	d009      	beq.n	80026fc <HAL_TIM_IC_Start+0x134>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_TIM_IC_Start+0x178>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_TIM_IC_Start+0x134>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a13      	ldr	r2, [pc, #76]	; (8002744 <HAL_TIM_IC_Start+0x17c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d111      	bne.n	8002720 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b06      	cmp	r3, #6
 800270c:	d010      	beq.n	8002730 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271e:	e007      	b.n	8002730 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40000400 	.word	0x40000400
 8002744:	40000800 	.word	0x40000800

08002748 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d104      	bne.n	8002762 <HAL_TIM_IC_Start_IT+0x1a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800275e:	b2db      	uxtb	r3, r3
 8002760:	e013      	b.n	800278a <HAL_TIM_IC_Start_IT+0x42>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d104      	bne.n	8002772 <HAL_TIM_IC_Start_IT+0x2a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800276e:	b2db      	uxtb	r3, r3
 8002770:	e00b      	b.n	800278a <HAL_TIM_IC_Start_IT+0x42>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b08      	cmp	r3, #8
 8002776:	d104      	bne.n	8002782 <HAL_TIM_IC_Start_IT+0x3a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800277e:	b2db      	uxtb	r3, r3
 8002780:	e003      	b.n	800278a <HAL_TIM_IC_Start_IT+0x42>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002788:	b2db      	uxtb	r3, r3
 800278a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d104      	bne.n	800279c <HAL_TIM_IC_Start_IT+0x54>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e013      	b.n	80027c4 <HAL_TIM_IC_Start_IT+0x7c>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d104      	bne.n	80027ac <HAL_TIM_IC_Start_IT+0x64>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	e00b      	b.n	80027c4 <HAL_TIM_IC_Start_IT+0x7c>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d104      	bne.n	80027bc <HAL_TIM_IC_Start_IT+0x74>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e003      	b.n	80027c4 <HAL_TIM_IC_Start_IT+0x7c>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d102      	bne.n	80027d2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80027cc:	7bbb      	ldrb	r3, [r7, #14]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0b3      	b.n	800293e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d104      	bne.n	80027e6 <HAL_TIM_IC_Start_IT+0x9e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027e4:	e013      	b.n	800280e <HAL_TIM_IC_Start_IT+0xc6>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d104      	bne.n	80027f6 <HAL_TIM_IC_Start_IT+0xae>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027f4:	e00b      	b.n	800280e <HAL_TIM_IC_Start_IT+0xc6>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d104      	bne.n	8002806 <HAL_TIM_IC_Start_IT+0xbe>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002804:	e003      	b.n	800280e <HAL_TIM_IC_Start_IT+0xc6>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2202      	movs	r2, #2
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d104      	bne.n	800281e <HAL_TIM_IC_Start_IT+0xd6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800281c:	e013      	b.n	8002846 <HAL_TIM_IC_Start_IT+0xfe>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b04      	cmp	r3, #4
 8002822:	d104      	bne.n	800282e <HAL_TIM_IC_Start_IT+0xe6>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800282c:	e00b      	b.n	8002846 <HAL_TIM_IC_Start_IT+0xfe>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d104      	bne.n	800283e <HAL_TIM_IC_Start_IT+0xf6>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800283c:	e003      	b.n	8002846 <HAL_TIM_IC_Start_IT+0xfe>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2202      	movs	r2, #2
 8002842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b0c      	cmp	r3, #12
 800284a:	d841      	bhi.n	80028d0 <HAL_TIM_IC_Start_IT+0x188>
 800284c:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <HAL_TIM_IC_Start_IT+0x10c>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	08002889 	.word	0x08002889
 8002858:	080028d1 	.word	0x080028d1
 800285c:	080028d1 	.word	0x080028d1
 8002860:	080028d1 	.word	0x080028d1
 8002864:	0800289b 	.word	0x0800289b
 8002868:	080028d1 	.word	0x080028d1
 800286c:	080028d1 	.word	0x080028d1
 8002870:	080028d1 	.word	0x080028d1
 8002874:	080028ad 	.word	0x080028ad
 8002878:	080028d1 	.word	0x080028d1
 800287c:	080028d1 	.word	0x080028d1
 8002880:	080028d1 	.word	0x080028d1
 8002884:	080028bf 	.word	0x080028bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0202 	orr.w	r2, r2, #2
 8002896:	60da      	str	r2, [r3, #12]
      break;
 8002898:	e01b      	b.n	80028d2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0204 	orr.w	r2, r2, #4
 80028a8:	60da      	str	r2, [r3, #12]
      break;
 80028aa:	e012      	b.n	80028d2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0208 	orr.w	r2, r2, #8
 80028ba:	60da      	str	r2, [r3, #12]
      break;
 80028bc:	e009      	b.n	80028d2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0210 	orr.w	r2, r2, #16
 80028cc:	60da      	str	r2, [r3, #12]
      break;
 80028ce:	e000      	b.n	80028d2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80028d0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2201      	movs	r2, #1
 80028d8:	6839      	ldr	r1, [r7, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fe29 	bl	8003532 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a18      	ldr	r2, [pc, #96]	; (8002948 <HAL_TIM_IC_Start_IT+0x200>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00e      	beq.n	8002908 <HAL_TIM_IC_Start_IT+0x1c0>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f2:	d009      	beq.n	8002908 <HAL_TIM_IC_Start_IT+0x1c0>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <HAL_TIM_IC_Start_IT+0x204>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_TIM_IC_Start_IT+0x1c0>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a13      	ldr	r2, [pc, #76]	; (8002950 <HAL_TIM_IC_Start_IT+0x208>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d111      	bne.n	800292c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b06      	cmp	r3, #6
 8002918:	d010      	beq.n	800293c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292a:	e007      	b.n	800293c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40000400 	.word	0x40000400
 8002950:	40000800 	.word	0x40000800

08002954 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e041      	b.n	80029ec <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d106      	bne.n	8002982 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f839 	bl	80029f4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	4619      	mov	r1, r3
 8002994:	4610      	mov	r0, r2
 8002996:	f000 fb39 	bl	800300c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0208 	bic.w	r2, r2, #8
 80029a8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d122      	bne.n	8002a62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d11b      	bne.n	8002a62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f06f 0202 	mvn.w	r2, #2
 8002a32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7fe f93d 	bl	8000cc8 <HAL_TIM_IC_CaptureCallback>
 8002a4e:	e005      	b.n	8002a5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fabf 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fac5 	bl	8002fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d122      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d11b      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f06f 0204 	mvn.w	r2, #4
 8002a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7fe f913 	bl	8000cc8 <HAL_TIM_IC_CaptureCallback>
 8002aa2:	e005      	b.n	8002ab0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fa95 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa9b 	bl	8002fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d122      	bne.n	8002b0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11b      	bne.n	8002b0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0208 	mvn.w	r2, #8
 8002ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7fe f8e9 	bl	8000cc8 <HAL_TIM_IC_CaptureCallback>
 8002af6:	e005      	b.n	8002b04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fa6b 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa71 	bl	8002fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d122      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d11b      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f06f 0210 	mvn.w	r2, #16
 8002b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2208      	movs	r2, #8
 8002b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7fe f8bf 	bl	8000cc8 <HAL_TIM_IC_CaptureCallback>
 8002b4a:	e005      	b.n	8002b58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fa41 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fa47 	bl	8002fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d10e      	bne.n	8002b8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f06f 0201 	mvn.w	r2, #1
 8002b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fe f827 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b80      	cmp	r3, #128	; 0x80
 8002b96:	d10e      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b80      	cmp	r3, #128	; 0x80
 8002ba4:	d107      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fd4a 	bl	800364a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d10e      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b40      	cmp	r3, #64	; 0x40
 8002bd0:	d107      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fa0b 	bl	8002ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d10e      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d107      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f06f 0220 	mvn.w	r2, #32
 8002c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fd15 	bl	8003638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e082      	b.n	8002d36 <HAL_TIM_IC_ConfigChannel+0x120>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d11b      	bne.n	8002c76 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6819      	ldr	r1, [r3, #0]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f000 facd 	bl	80031ec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 020c 	bic.w	r2, r2, #12
 8002c60:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6999      	ldr	r1, [r3, #24]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	619a      	str	r2, [r3, #24]
 8002c74:	e05a      	b.n	8002d2c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d11c      	bne.n	8002cb6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f000 fb36 	bl	80032fc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c9e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6999      	ldr	r1, [r3, #24]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	021a      	lsls	r2, r3, #8
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	619a      	str	r2, [r3, #24]
 8002cb4:	e03a      	b.n	8002d2c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	6819      	ldr	r1, [r3, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f000 fb81 	bl	80033d2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 020c 	bic.w	r2, r2, #12
 8002cde:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	69d9      	ldr	r1, [r3, #28]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	61da      	str	r2, [r3, #28]
 8002cf2:	e01b      	b.n	8002d2c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6819      	ldr	r1, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f000 fba0 	bl	8003448 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d16:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69d9      	ldr	r1, [r3, #28]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_TIM_ConfigClockSource+0x18>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e0b3      	b.n	8002ebe <HAL_TIM_ConfigClockSource+0x180>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2202      	movs	r2, #2
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d74:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d7c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8e:	d03e      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0xd0>
 8002d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d94:	f200 8087 	bhi.w	8002ea6 <HAL_TIM_ConfigClockSource+0x168>
 8002d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9c:	f000 8085 	beq.w	8002eaa <HAL_TIM_ConfigClockSource+0x16c>
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da4:	d87f      	bhi.n	8002ea6 <HAL_TIM_ConfigClockSource+0x168>
 8002da6:	2b70      	cmp	r3, #112	; 0x70
 8002da8:	d01a      	beq.n	8002de0 <HAL_TIM_ConfigClockSource+0xa2>
 8002daa:	2b70      	cmp	r3, #112	; 0x70
 8002dac:	d87b      	bhi.n	8002ea6 <HAL_TIM_ConfigClockSource+0x168>
 8002dae:	2b60      	cmp	r3, #96	; 0x60
 8002db0:	d050      	beq.n	8002e54 <HAL_TIM_ConfigClockSource+0x116>
 8002db2:	2b60      	cmp	r3, #96	; 0x60
 8002db4:	d877      	bhi.n	8002ea6 <HAL_TIM_ConfigClockSource+0x168>
 8002db6:	2b50      	cmp	r3, #80	; 0x50
 8002db8:	d03c      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0xf6>
 8002dba:	2b50      	cmp	r3, #80	; 0x50
 8002dbc:	d873      	bhi.n	8002ea6 <HAL_TIM_ConfigClockSource+0x168>
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d058      	beq.n	8002e74 <HAL_TIM_ConfigClockSource+0x136>
 8002dc2:	2b40      	cmp	r3, #64	; 0x40
 8002dc4:	d86f      	bhi.n	8002ea6 <HAL_TIM_ConfigClockSource+0x168>
 8002dc6:	2b30      	cmp	r3, #48	; 0x30
 8002dc8:	d064      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0x156>
 8002dca:	2b30      	cmp	r3, #48	; 0x30
 8002dcc:	d86b      	bhi.n	8002ea6 <HAL_TIM_ConfigClockSource+0x168>
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d060      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0x156>
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d867      	bhi.n	8002ea6 <HAL_TIM_ConfigClockSource+0x168>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d05c      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0x156>
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d05a      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002dde:	e062      	b.n	8002ea6 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6899      	ldr	r1, [r3, #8]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f000 fb80 	bl	80034f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	609a      	str	r2, [r3, #8]
      break;
 8002e0c:	e04e      	b.n	8002eac <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f000 fb69 	bl	80034f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e30:	609a      	str	r2, [r3, #8]
      break;
 8002e32:	e03b      	b.n	8002eac <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f000 fa2d 	bl	80032a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2150      	movs	r1, #80	; 0x50
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fb37 	bl	80034c0 <TIM_ITRx_SetConfig>
      break;
 8002e52:	e02b      	b.n	8002eac <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	461a      	mov	r2, r3
 8002e62:	f000 fa87 	bl	8003374 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2160      	movs	r1, #96	; 0x60
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fb27 	bl	80034c0 <TIM_ITRx_SetConfig>
      break;
 8002e72:	e01b      	b.n	8002eac <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	461a      	mov	r2, r3
 8002e82:	f000 fa0d 	bl	80032a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2140      	movs	r1, #64	; 0x40
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fb17 	bl	80034c0 <TIM_ITRx_SetConfig>
      break;
 8002e92:	e00b      	b.n	8002eac <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	f000 fb0e 	bl	80034c0 <TIM_ITRx_SetConfig>
        break;
 8002ea4:	e002      	b.n	8002eac <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e000      	b.n	8002eac <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_TIM_SlaveConfigSynchro+0x18>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e031      	b.n	8002f42 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002eee:	6839      	ldr	r1, [r7, #0]
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f8ed 	bl	80030d0 <TIM_SlaveTimer_SetConfig>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e018      	b.n	8002f42 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f2e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d831      	bhi.n	8002fc4 <HAL_TIM_ReadCapturedValue+0x78>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f9d 	.word	0x08002f9d
 8002f6c:	08002fc5 	.word	0x08002fc5
 8002f70:	08002fc5 	.word	0x08002fc5
 8002f74:	08002fc5 	.word	0x08002fc5
 8002f78:	08002fa7 	.word	0x08002fa7
 8002f7c:	08002fc5 	.word	0x08002fc5
 8002f80:	08002fc5 	.word	0x08002fc5
 8002f84:	08002fc5 	.word	0x08002fc5
 8002f88:	08002fb1 	.word	0x08002fb1
 8002f8c:	08002fc5 	.word	0x08002fc5
 8002f90:	08002fc5 	.word	0x08002fc5
 8002f94:	08002fc5 	.word	0x08002fc5
 8002f98:	08002fbb 	.word	0x08002fbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa2:	60fb      	str	r3, [r7, #12]

      break;
 8002fa4:	e00f      	b.n	8002fc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	60fb      	str	r3, [r7, #12]

      break;
 8002fae:	e00a      	b.n	8002fc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	60fb      	str	r3, [r7, #12]

      break;
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	60fb      	str	r3, [r7, #12]

      break;
 8002fc2:	e000      	b.n	8002fc6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002fc4:	bf00      	nop
  }

  return tmpreg;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop

08002fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
	...

0800300c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <TIM_Base_SetConfig+0xb8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00b      	beq.n	800303c <TIM_Base_SetConfig+0x30>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302a:	d007      	beq.n	800303c <TIM_Base_SetConfig+0x30>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a26      	ldr	r2, [pc, #152]	; (80030c8 <TIM_Base_SetConfig+0xbc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_Base_SetConfig+0x30>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a25      	ldr	r2, [pc, #148]	; (80030cc <TIM_Base_SetConfig+0xc0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d108      	bne.n	800304e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <TIM_Base_SetConfig+0xb8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00b      	beq.n	800306e <TIM_Base_SetConfig+0x62>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d007      	beq.n	800306e <TIM_Base_SetConfig+0x62>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <TIM_Base_SetConfig+0xbc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d003      	beq.n	800306e <TIM_Base_SetConfig+0x62>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a18      	ldr	r2, [pc, #96]	; (80030cc <TIM_Base_SetConfig+0xc0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d108      	bne.n	8003080 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <TIM_Base_SetConfig+0xb8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d103      	bne.n	80030b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	615a      	str	r2, [r3, #20]
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	40012c00 	.word	0x40012c00
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800

080030d0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0307 	bic.w	r3, r3, #7
 80030fa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b70      	cmp	r3, #112	; 0x70
 8003114:	d01a      	beq.n	800314c <TIM_SlaveTimer_SetConfig+0x7c>
 8003116:	2b70      	cmp	r3, #112	; 0x70
 8003118:	d860      	bhi.n	80031dc <TIM_SlaveTimer_SetConfig+0x10c>
 800311a:	2b60      	cmp	r3, #96	; 0x60
 800311c:	d054      	beq.n	80031c8 <TIM_SlaveTimer_SetConfig+0xf8>
 800311e:	2b60      	cmp	r3, #96	; 0x60
 8003120:	d85c      	bhi.n	80031dc <TIM_SlaveTimer_SetConfig+0x10c>
 8003122:	2b50      	cmp	r3, #80	; 0x50
 8003124:	d046      	beq.n	80031b4 <TIM_SlaveTimer_SetConfig+0xe4>
 8003126:	2b50      	cmp	r3, #80	; 0x50
 8003128:	d858      	bhi.n	80031dc <TIM_SlaveTimer_SetConfig+0x10c>
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d019      	beq.n	8003162 <TIM_SlaveTimer_SetConfig+0x92>
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d854      	bhi.n	80031dc <TIM_SlaveTimer_SetConfig+0x10c>
 8003132:	2b30      	cmp	r3, #48	; 0x30
 8003134:	d054      	beq.n	80031e0 <TIM_SlaveTimer_SetConfig+0x110>
 8003136:	2b30      	cmp	r3, #48	; 0x30
 8003138:	d850      	bhi.n	80031dc <TIM_SlaveTimer_SetConfig+0x10c>
 800313a:	2b20      	cmp	r3, #32
 800313c:	d050      	beq.n	80031e0 <TIM_SlaveTimer_SetConfig+0x110>
 800313e:	2b20      	cmp	r3, #32
 8003140:	d84c      	bhi.n	80031dc <TIM_SlaveTimer_SetConfig+0x10c>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d04c      	beq.n	80031e0 <TIM_SlaveTimer_SetConfig+0x110>
 8003146:	2b10      	cmp	r3, #16
 8003148:	d04a      	beq.n	80031e0 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800314a:	e047      	b.n	80031dc <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68d9      	ldr	r1, [r3, #12]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f000 f9ca 	bl	80034f4 <TIM_ETR_SetConfig>
      break;
 8003160:	e03f      	b.n	80031e2 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b05      	cmp	r3, #5
 8003168:	d101      	bne.n	800316e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e03a      	b.n	80031e4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003194:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	621a      	str	r2, [r3, #32]
      break;
 80031b2:	e016      	b.n	80031e2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	461a      	mov	r2, r3
 80031c2:	f000 f86d 	bl	80032a0 <TIM_TI1_ConfigInputStage>
      break;
 80031c6:	e00c      	b.n	80031e2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	6899      	ldr	r1, [r3, #8]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	461a      	mov	r2, r3
 80031d6:	f000 f8cd 	bl	8003374 <TIM_TI2_ConfigInputStage>
      break;
 80031da:	e002      	b.n	80031e2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80031dc:	bf00      	nop
 80031de:	e000      	b.n	80031e2 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80031e0:	bf00      	nop
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	f023 0201 	bic.w	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <TIM_TI1_SetConfig+0xa8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00b      	beq.n	8003232 <TIM_TI1_SetConfig+0x46>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d007      	beq.n	8003232 <TIM_TI1_SetConfig+0x46>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <TIM_TI1_SetConfig+0xac>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_TI1_SetConfig+0x46>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <TIM_TI1_SetConfig+0xb0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <TIM_TI1_SetConfig+0x4a>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <TIM_TI1_SetConfig+0x4c>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	e003      	b.n	8003256 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800325c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	b2db      	uxtb	r3, r3
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f023 030a 	bic.w	r3, r3, #10
 8003270:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f003 030a 	and.w	r3, r3, #10
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	621a      	str	r2, [r3, #32]
}
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800

080032a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f023 0201 	bic.w	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f023 030a 	bic.w	r3, r3, #10
 80032dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0210 	bic.w	r2, r3, #16
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800333a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	031b      	lsls	r3, r3, #12
 8003340:	b29b      	uxth	r3, r3
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800334e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f023 0210 	bic.w	r2, r3, #16
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800339e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	031b      	lsls	r3, r3, #12
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b087      	sub	sp, #28
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0303 	bic.w	r3, r3, #3
 80033fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800340e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	b2db      	uxtb	r3, r3
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003422:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003474:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003486:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	031b      	lsls	r3, r3, #12
 800348c:	b29b      	uxth	r3, r3
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800349a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	031b      	lsls	r3, r3, #12
 80034a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	f043 0307 	orr.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	609a      	str	r2, [r3, #8]
}
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800350e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	021a      	lsls	r2, r3, #8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	431a      	orrs	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	609a      	str	r2, [r3, #8]
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003532:	b480      	push	{r7}
 8003534:	b087      	sub	sp, #28
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	2201      	movs	r2, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1a      	ldr	r2, [r3, #32]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	43db      	mvns	r3, r3
 8003554:	401a      	ands	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	431a      	orrs	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	621a      	str	r2, [r3, #32]
}
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
	...

0800357c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003590:	2302      	movs	r3, #2
 8003592:	e046      	b.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a16      	ldr	r2, [pc, #88]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d009      	beq.n	80035f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d004      	beq.n	80035f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a10      	ldr	r2, [pc, #64]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10c      	bne.n	8003610 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	4313      	orrs	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40000400 	.word	0x40000400
 8003634:	40000800 	.word	0x40000800

08003638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e03f      	b.n	80036ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd fdbe 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2224      	movs	r2, #36	; 0x24
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800369e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f905 	bl	80038b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b08a      	sub	sp, #40	; 0x28
 80036fa:	af02      	add	r7, sp, #8
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b20      	cmp	r3, #32
 8003714:	d17c      	bne.n	8003810 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_UART_Transmit+0x2c>
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e075      	b.n	8003812 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_UART_Transmit+0x3e>
 8003730:	2302      	movs	r3, #2
 8003732:	e06e      	b.n	8003812 <HAL_UART_Transmit+0x11c>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2221      	movs	r2, #33	; 0x21
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800374a:	f7fd ff27 	bl	800159c <HAL_GetTick>
 800374e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	88fa      	ldrh	r2, [r7, #6]
 8003754:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	88fa      	ldrh	r2, [r7, #6]
 800375a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003764:	d108      	bne.n	8003778 <HAL_UART_Transmit+0x82>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d104      	bne.n	8003778 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	e003      	b.n	8003780 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800377c:	2300      	movs	r3, #0
 800377e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003788:	e02a      	b.n	80037e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2200      	movs	r2, #0
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f840 	bl	800381a <UART_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e036      	b.n	8003812 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	3302      	adds	r3, #2
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	e007      	b.n	80037d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	3301      	adds	r3, #1
 80037d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1cf      	bne.n	800378a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2200      	movs	r2, #0
 80037f2:	2140      	movs	r1, #64	; 0x40
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f810 	bl	800381a <UART_WaitOnFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e006      	b.n	8003812 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e000      	b.n	8003812 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	4613      	mov	r3, r2
 8003828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382a:	e02c      	b.n	8003886 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003832:	d028      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <UART_WaitOnFlagUntilTimeout+0x30>
 800383a:	f7fd feaf 	bl	800159c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	429a      	cmp	r2, r3
 8003848:	d21d      	bcs.n	8003886 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003858:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e00f      	b.n	80038a6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4013      	ands	r3, r2
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	bf0c      	ite	eq
 8003896:	2301      	moveq	r3, #1
 8003898:	2300      	movne	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d0c3      	beq.n	800382c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038ea:	f023 030c 	bic.w	r3, r3, #12
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	430b      	orrs	r3, r1
 80038f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2c      	ldr	r2, [pc, #176]	; (80039c4 <UART_SetConfig+0x114>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d103      	bne.n	8003920 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003918:	f7fe fcfc 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	e002      	b.n	8003926 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003920:	f7fe fce4 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8003924:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	009a      	lsls	r2, r3, #2
 8003930:	441a      	add	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <UART_SetConfig+0x118>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	0119      	lsls	r1, r3, #4
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	009a      	lsls	r2, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fbb2 f2f3 	udiv	r2, r2, r3
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <UART_SetConfig+0x118>)
 800395e:	fba3 0302 	umull	r0, r3, r3, r2
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2064      	movs	r0, #100	; 0x64
 8003966:	fb00 f303 	mul.w	r3, r0, r3
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	3332      	adds	r3, #50	; 0x32
 8003970:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <UART_SetConfig+0x118>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800397c:	4419      	add	r1, r3
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	009a      	lsls	r2, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	fbb2 f2f3 	udiv	r2, r2, r3
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <UART_SetConfig+0x118>)
 8003996:	fba3 0302 	umull	r0, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2064      	movs	r0, #100	; 0x64
 800399e:	fb00 f303 	mul.w	r3, r0, r3
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	3332      	adds	r3, #50	; 0x32
 80039a8:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <UART_SetConfig+0x118>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	f003 020f 	and.w	r2, r3, #15
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	440a      	add	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40013800 	.word	0x40013800
 80039c8:	51eb851f 	.word	0x51eb851f

080039cc <__errno>:
 80039cc:	4b01      	ldr	r3, [pc, #4]	; (80039d4 <__errno+0x8>)
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	2000000c 	.word	0x2000000c

080039d8 <__libc_init_array>:
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	2600      	movs	r6, #0
 80039dc:	4d0c      	ldr	r5, [pc, #48]	; (8003a10 <__libc_init_array+0x38>)
 80039de:	4c0d      	ldr	r4, [pc, #52]	; (8003a14 <__libc_init_array+0x3c>)
 80039e0:	1b64      	subs	r4, r4, r5
 80039e2:	10a4      	asrs	r4, r4, #2
 80039e4:	42a6      	cmp	r6, r4
 80039e6:	d109      	bne.n	80039fc <__libc_init_array+0x24>
 80039e8:	f004 fc84 	bl	80082f4 <_init>
 80039ec:	2600      	movs	r6, #0
 80039ee:	4d0a      	ldr	r5, [pc, #40]	; (8003a18 <__libc_init_array+0x40>)
 80039f0:	4c0a      	ldr	r4, [pc, #40]	; (8003a1c <__libc_init_array+0x44>)
 80039f2:	1b64      	subs	r4, r4, r5
 80039f4:	10a4      	asrs	r4, r4, #2
 80039f6:	42a6      	cmp	r6, r4
 80039f8:	d105      	bne.n	8003a06 <__libc_init_array+0x2e>
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a00:	4798      	blx	r3
 8003a02:	3601      	adds	r6, #1
 8003a04:	e7ee      	b.n	80039e4 <__libc_init_array+0xc>
 8003a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0a:	4798      	blx	r3
 8003a0c:	3601      	adds	r6, #1
 8003a0e:	e7f2      	b.n	80039f6 <__libc_init_array+0x1e>
 8003a10:	080087fc 	.word	0x080087fc
 8003a14:	080087fc 	.word	0x080087fc
 8003a18:	080087fc 	.word	0x080087fc
 8003a1c:	08008800 	.word	0x08008800

08003a20 <memset>:
 8003a20:	4603      	mov	r3, r0
 8003a22:	4402      	add	r2, r0
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d100      	bne.n	8003a2a <memset+0xa>
 8003a28:	4770      	bx	lr
 8003a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2e:	e7f9      	b.n	8003a24 <memset+0x4>

08003a30 <__cvt>:
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a36:	461f      	mov	r7, r3
 8003a38:	bfbb      	ittet	lt
 8003a3a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003a3e:	461f      	movlt	r7, r3
 8003a40:	2300      	movge	r3, #0
 8003a42:	232d      	movlt	r3, #45	; 0x2d
 8003a44:	b088      	sub	sp, #32
 8003a46:	4614      	mov	r4, r2
 8003a48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003a4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003a4c:	7013      	strb	r3, [r2, #0]
 8003a4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a50:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003a54:	f023 0820 	bic.w	r8, r3, #32
 8003a58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a5c:	d005      	beq.n	8003a6a <__cvt+0x3a>
 8003a5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003a62:	d100      	bne.n	8003a66 <__cvt+0x36>
 8003a64:	3501      	adds	r5, #1
 8003a66:	2302      	movs	r3, #2
 8003a68:	e000      	b.n	8003a6c <__cvt+0x3c>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	aa07      	add	r2, sp, #28
 8003a6e:	9204      	str	r2, [sp, #16]
 8003a70:	aa06      	add	r2, sp, #24
 8003a72:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003a76:	e9cd 3500 	strd	r3, r5, [sp]
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	f001 fdb7 	bl	80055f0 <_dtoa_r>
 8003a82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a86:	4606      	mov	r6, r0
 8003a88:	d102      	bne.n	8003a90 <__cvt+0x60>
 8003a8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a8c:	07db      	lsls	r3, r3, #31
 8003a8e:	d522      	bpl.n	8003ad6 <__cvt+0xa6>
 8003a90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a94:	eb06 0905 	add.w	r9, r6, r5
 8003a98:	d110      	bne.n	8003abc <__cvt+0x8c>
 8003a9a:	7833      	ldrb	r3, [r6, #0]
 8003a9c:	2b30      	cmp	r3, #48	; 0x30
 8003a9e:	d10a      	bne.n	8003ab6 <__cvt+0x86>
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	4639      	mov	r1, r7
 8003aa8:	f7fc ff7e 	bl	80009a8 <__aeabi_dcmpeq>
 8003aac:	b918      	cbnz	r0, 8003ab6 <__cvt+0x86>
 8003aae:	f1c5 0501 	rsb	r5, r5, #1
 8003ab2:	f8ca 5000 	str.w	r5, [sl]
 8003ab6:	f8da 3000 	ldr.w	r3, [sl]
 8003aba:	4499      	add	r9, r3
 8003abc:	2200      	movs	r2, #0
 8003abe:	2300      	movs	r3, #0
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	4639      	mov	r1, r7
 8003ac4:	f7fc ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8003ac8:	b108      	cbz	r0, 8003ace <__cvt+0x9e>
 8003aca:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ace:	2230      	movs	r2, #48	; 0x30
 8003ad0:	9b07      	ldr	r3, [sp, #28]
 8003ad2:	454b      	cmp	r3, r9
 8003ad4:	d307      	bcc.n	8003ae6 <__cvt+0xb6>
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	9b07      	ldr	r3, [sp, #28]
 8003ada:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003adc:	1b9b      	subs	r3, r3, r6
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	b008      	add	sp, #32
 8003ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	9107      	str	r1, [sp, #28]
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e7f0      	b.n	8003ad0 <__cvt+0xa0>

08003aee <__exponent>:
 8003aee:	4603      	mov	r3, r0
 8003af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003af2:	2900      	cmp	r1, #0
 8003af4:	f803 2b02 	strb.w	r2, [r3], #2
 8003af8:	bfb6      	itet	lt
 8003afa:	222d      	movlt	r2, #45	; 0x2d
 8003afc:	222b      	movge	r2, #43	; 0x2b
 8003afe:	4249      	neglt	r1, r1
 8003b00:	2909      	cmp	r1, #9
 8003b02:	7042      	strb	r2, [r0, #1]
 8003b04:	dd2b      	ble.n	8003b5e <__exponent+0x70>
 8003b06:	f10d 0407 	add.w	r4, sp, #7
 8003b0a:	46a4      	mov	ip, r4
 8003b0c:	270a      	movs	r7, #10
 8003b0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003b12:	460a      	mov	r2, r1
 8003b14:	46a6      	mov	lr, r4
 8003b16:	fb07 1516 	mls	r5, r7, r6, r1
 8003b1a:	2a63      	cmp	r2, #99	; 0x63
 8003b1c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003b20:	4631      	mov	r1, r6
 8003b22:	f104 34ff 	add.w	r4, r4, #4294967295
 8003b26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003b2a:	dcf0      	bgt.n	8003b0e <__exponent+0x20>
 8003b2c:	3130      	adds	r1, #48	; 0x30
 8003b2e:	f1ae 0502 	sub.w	r5, lr, #2
 8003b32:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003b36:	4629      	mov	r1, r5
 8003b38:	1c44      	adds	r4, r0, #1
 8003b3a:	4561      	cmp	r1, ip
 8003b3c:	d30a      	bcc.n	8003b54 <__exponent+0x66>
 8003b3e:	f10d 0209 	add.w	r2, sp, #9
 8003b42:	eba2 020e 	sub.w	r2, r2, lr
 8003b46:	4565      	cmp	r5, ip
 8003b48:	bf88      	it	hi
 8003b4a:	2200      	movhi	r2, #0
 8003b4c:	4413      	add	r3, r2
 8003b4e:	1a18      	subs	r0, r3, r0
 8003b50:	b003      	add	sp, #12
 8003b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b58:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003b5c:	e7ed      	b.n	8003b3a <__exponent+0x4c>
 8003b5e:	2330      	movs	r3, #48	; 0x30
 8003b60:	3130      	adds	r1, #48	; 0x30
 8003b62:	7083      	strb	r3, [r0, #2]
 8003b64:	70c1      	strb	r1, [r0, #3]
 8003b66:	1d03      	adds	r3, r0, #4
 8003b68:	e7f1      	b.n	8003b4e <__exponent+0x60>
	...

08003b6c <_printf_float>:
 8003b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b70:	b091      	sub	sp, #68	; 0x44
 8003b72:	460c      	mov	r4, r1
 8003b74:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003b78:	4616      	mov	r6, r2
 8003b7a:	461f      	mov	r7, r3
 8003b7c:	4605      	mov	r5, r0
 8003b7e:	f002 fe8b 	bl	8006898 <_localeconv_r>
 8003b82:	6803      	ldr	r3, [r0, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	9309      	str	r3, [sp, #36]	; 0x24
 8003b88:	f7fc fae2 	bl	8000150 <strlen>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	930e      	str	r3, [sp, #56]	; 0x38
 8003b90:	f8d8 3000 	ldr.w	r3, [r8]
 8003b94:	900a      	str	r0, [sp, #40]	; 0x28
 8003b96:	3307      	adds	r3, #7
 8003b98:	f023 0307 	bic.w	r3, r3, #7
 8003b9c:	f103 0208 	add.w	r2, r3, #8
 8003ba0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003ba4:	f8d4 b000 	ldr.w	fp, [r4]
 8003ba8:	f8c8 2000 	str.w	r2, [r8]
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003bb4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003bb8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003bbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	4b9c      	ldr	r3, [pc, #624]	; (8003e38 <_printf_float+0x2cc>)
 8003bc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bc8:	f7fc ff20 	bl	8000a0c <__aeabi_dcmpun>
 8003bcc:	bb70      	cbnz	r0, 8003c2c <_printf_float+0xc0>
 8003bce:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	4b98      	ldr	r3, [pc, #608]	; (8003e38 <_printf_float+0x2cc>)
 8003bd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bd8:	f7fc fefa 	bl	80009d0 <__aeabi_dcmple>
 8003bdc:	bb30      	cbnz	r0, 8003c2c <_printf_float+0xc0>
 8003bde:	2200      	movs	r2, #0
 8003be0:	2300      	movs	r3, #0
 8003be2:	4640      	mov	r0, r8
 8003be4:	4651      	mov	r1, sl
 8003be6:	f7fc fee9 	bl	80009bc <__aeabi_dcmplt>
 8003bea:	b110      	cbz	r0, 8003bf2 <_printf_float+0x86>
 8003bec:	232d      	movs	r3, #45	; 0x2d
 8003bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf2:	4b92      	ldr	r3, [pc, #584]	; (8003e3c <_printf_float+0x2d0>)
 8003bf4:	4892      	ldr	r0, [pc, #584]	; (8003e40 <_printf_float+0x2d4>)
 8003bf6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003bfa:	bf94      	ite	ls
 8003bfc:	4698      	movls	r8, r3
 8003bfe:	4680      	movhi	r8, r0
 8003c00:	2303      	movs	r3, #3
 8003c02:	f04f 0a00 	mov.w	sl, #0
 8003c06:	6123      	str	r3, [r4, #16]
 8003c08:	f02b 0304 	bic.w	r3, fp, #4
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	4633      	mov	r3, r6
 8003c10:	4621      	mov	r1, r4
 8003c12:	4628      	mov	r0, r5
 8003c14:	9700      	str	r7, [sp, #0]
 8003c16:	aa0f      	add	r2, sp, #60	; 0x3c
 8003c18:	f000 f9d4 	bl	8003fc4 <_printf_common>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	f040 8090 	bne.w	8003d42 <_printf_float+0x1d6>
 8003c22:	f04f 30ff 	mov.w	r0, #4294967295
 8003c26:	b011      	add	sp, #68	; 0x44
 8003c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	4653      	mov	r3, sl
 8003c30:	4640      	mov	r0, r8
 8003c32:	4651      	mov	r1, sl
 8003c34:	f7fc feea 	bl	8000a0c <__aeabi_dcmpun>
 8003c38:	b148      	cbz	r0, 8003c4e <_printf_float+0xe2>
 8003c3a:	f1ba 0f00 	cmp.w	sl, #0
 8003c3e:	bfb8      	it	lt
 8003c40:	232d      	movlt	r3, #45	; 0x2d
 8003c42:	4880      	ldr	r0, [pc, #512]	; (8003e44 <_printf_float+0x2d8>)
 8003c44:	bfb8      	it	lt
 8003c46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003c4a:	4b7f      	ldr	r3, [pc, #508]	; (8003e48 <_printf_float+0x2dc>)
 8003c4c:	e7d3      	b.n	8003bf6 <_printf_float+0x8a>
 8003c4e:	6863      	ldr	r3, [r4, #4]
 8003c50:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	d142      	bne.n	8003cde <_printf_float+0x172>
 8003c58:	2306      	movs	r3, #6
 8003c5a:	6063      	str	r3, [r4, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	9206      	str	r2, [sp, #24]
 8003c60:	aa0e      	add	r2, sp, #56	; 0x38
 8003c62:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003c66:	aa0d      	add	r2, sp, #52	; 0x34
 8003c68:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003c6c:	9203      	str	r2, [sp, #12]
 8003c6e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003c72:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	6863      	ldr	r3, [r4, #4]
 8003c7a:	4642      	mov	r2, r8
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	4628      	mov	r0, r5
 8003c80:	4653      	mov	r3, sl
 8003c82:	910b      	str	r1, [sp, #44]	; 0x2c
 8003c84:	f7ff fed4 	bl	8003a30 <__cvt>
 8003c88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c8a:	4680      	mov	r8, r0
 8003c8c:	2947      	cmp	r1, #71	; 0x47
 8003c8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c90:	d108      	bne.n	8003ca4 <_printf_float+0x138>
 8003c92:	1cc8      	adds	r0, r1, #3
 8003c94:	db02      	blt.n	8003c9c <_printf_float+0x130>
 8003c96:	6863      	ldr	r3, [r4, #4]
 8003c98:	4299      	cmp	r1, r3
 8003c9a:	dd40      	ble.n	8003d1e <_printf_float+0x1b2>
 8003c9c:	f1a9 0902 	sub.w	r9, r9, #2
 8003ca0:	fa5f f989 	uxtb.w	r9, r9
 8003ca4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003ca8:	d81f      	bhi.n	8003cea <_printf_float+0x17e>
 8003caa:	464a      	mov	r2, r9
 8003cac:	3901      	subs	r1, #1
 8003cae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003cb2:	910d      	str	r1, [sp, #52]	; 0x34
 8003cb4:	f7ff ff1b 	bl	8003aee <__exponent>
 8003cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cba:	4682      	mov	sl, r0
 8003cbc:	1813      	adds	r3, r2, r0
 8003cbe:	2a01      	cmp	r2, #1
 8003cc0:	6123      	str	r3, [r4, #16]
 8003cc2:	dc02      	bgt.n	8003cca <_printf_float+0x15e>
 8003cc4:	6822      	ldr	r2, [r4, #0]
 8003cc6:	07d2      	lsls	r2, r2, #31
 8003cc8:	d501      	bpl.n	8003cce <_printf_float+0x162>
 8003cca:	3301      	adds	r3, #1
 8003ccc:	6123      	str	r3, [r4, #16]
 8003cce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d09b      	beq.n	8003c0e <_printf_float+0xa2>
 8003cd6:	232d      	movs	r3, #45	; 0x2d
 8003cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cdc:	e797      	b.n	8003c0e <_printf_float+0xa2>
 8003cde:	2947      	cmp	r1, #71	; 0x47
 8003ce0:	d1bc      	bne.n	8003c5c <_printf_float+0xf0>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1ba      	bne.n	8003c5c <_printf_float+0xf0>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e7b7      	b.n	8003c5a <_printf_float+0xee>
 8003cea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003cee:	d118      	bne.n	8003d22 <_printf_float+0x1b6>
 8003cf0:	2900      	cmp	r1, #0
 8003cf2:	6863      	ldr	r3, [r4, #4]
 8003cf4:	dd0b      	ble.n	8003d0e <_printf_float+0x1a2>
 8003cf6:	6121      	str	r1, [r4, #16]
 8003cf8:	b913      	cbnz	r3, 8003d00 <_printf_float+0x194>
 8003cfa:	6822      	ldr	r2, [r4, #0]
 8003cfc:	07d0      	lsls	r0, r2, #31
 8003cfe:	d502      	bpl.n	8003d06 <_printf_float+0x19a>
 8003d00:	3301      	adds	r3, #1
 8003d02:	440b      	add	r3, r1
 8003d04:	6123      	str	r3, [r4, #16]
 8003d06:	f04f 0a00 	mov.w	sl, #0
 8003d0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d0c:	e7df      	b.n	8003cce <_printf_float+0x162>
 8003d0e:	b913      	cbnz	r3, 8003d16 <_printf_float+0x1aa>
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	07d2      	lsls	r2, r2, #31
 8003d14:	d501      	bpl.n	8003d1a <_printf_float+0x1ae>
 8003d16:	3302      	adds	r3, #2
 8003d18:	e7f4      	b.n	8003d04 <_printf_float+0x198>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e7f2      	b.n	8003d04 <_printf_float+0x198>
 8003d1e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d24:	4299      	cmp	r1, r3
 8003d26:	db05      	blt.n	8003d34 <_printf_float+0x1c8>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	6121      	str	r1, [r4, #16]
 8003d2c:	07d8      	lsls	r0, r3, #31
 8003d2e:	d5ea      	bpl.n	8003d06 <_printf_float+0x19a>
 8003d30:	1c4b      	adds	r3, r1, #1
 8003d32:	e7e7      	b.n	8003d04 <_printf_float+0x198>
 8003d34:	2900      	cmp	r1, #0
 8003d36:	bfcc      	ite	gt
 8003d38:	2201      	movgt	r2, #1
 8003d3a:	f1c1 0202 	rsble	r2, r1, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	e7e0      	b.n	8003d04 <_printf_float+0x198>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	055a      	lsls	r2, r3, #21
 8003d46:	d407      	bmi.n	8003d58 <_printf_float+0x1ec>
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	4631      	mov	r1, r6
 8003d4e:	4628      	mov	r0, r5
 8003d50:	47b8      	blx	r7
 8003d52:	3001      	adds	r0, #1
 8003d54:	d12b      	bne.n	8003dae <_printf_float+0x242>
 8003d56:	e764      	b.n	8003c22 <_printf_float+0xb6>
 8003d58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d5c:	f240 80dd 	bls.w	8003f1a <_printf_float+0x3ae>
 8003d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d64:	2200      	movs	r2, #0
 8003d66:	2300      	movs	r3, #0
 8003d68:	f7fc fe1e 	bl	80009a8 <__aeabi_dcmpeq>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d033      	beq.n	8003dd8 <_printf_float+0x26c>
 8003d70:	2301      	movs	r3, #1
 8003d72:	4631      	mov	r1, r6
 8003d74:	4628      	mov	r0, r5
 8003d76:	4a35      	ldr	r2, [pc, #212]	; (8003e4c <_printf_float+0x2e0>)
 8003d78:	47b8      	blx	r7
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	f43f af51 	beq.w	8003c22 <_printf_float+0xb6>
 8003d80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d84:	429a      	cmp	r2, r3
 8003d86:	db02      	blt.n	8003d8e <_printf_float+0x222>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	07d8      	lsls	r0, r3, #31
 8003d8c:	d50f      	bpl.n	8003dae <_printf_float+0x242>
 8003d8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d92:	4631      	mov	r1, r6
 8003d94:	4628      	mov	r0, r5
 8003d96:	47b8      	blx	r7
 8003d98:	3001      	adds	r0, #1
 8003d9a:	f43f af42 	beq.w	8003c22 <_printf_float+0xb6>
 8003d9e:	f04f 0800 	mov.w	r8, #0
 8003da2:	f104 091a 	add.w	r9, r4, #26
 8003da6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003da8:	3b01      	subs	r3, #1
 8003daa:	4543      	cmp	r3, r8
 8003dac:	dc09      	bgt.n	8003dc2 <_printf_float+0x256>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	079b      	lsls	r3, r3, #30
 8003db2:	f100 8102 	bmi.w	8003fba <_printf_float+0x44e>
 8003db6:	68e0      	ldr	r0, [r4, #12]
 8003db8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003dba:	4298      	cmp	r0, r3
 8003dbc:	bfb8      	it	lt
 8003dbe:	4618      	movlt	r0, r3
 8003dc0:	e731      	b.n	8003c26 <_printf_float+0xba>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	464a      	mov	r2, r9
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	4628      	mov	r0, r5
 8003dca:	47b8      	blx	r7
 8003dcc:	3001      	adds	r0, #1
 8003dce:	f43f af28 	beq.w	8003c22 <_printf_float+0xb6>
 8003dd2:	f108 0801 	add.w	r8, r8, #1
 8003dd6:	e7e6      	b.n	8003da6 <_printf_float+0x23a>
 8003dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	dc38      	bgt.n	8003e50 <_printf_float+0x2e4>
 8003dde:	2301      	movs	r3, #1
 8003de0:	4631      	mov	r1, r6
 8003de2:	4628      	mov	r0, r5
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <_printf_float+0x2e0>)
 8003de6:	47b8      	blx	r7
 8003de8:	3001      	adds	r0, #1
 8003dea:	f43f af1a 	beq.w	8003c22 <_printf_float+0xb6>
 8003dee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003df2:	4313      	orrs	r3, r2
 8003df4:	d102      	bne.n	8003dfc <_printf_float+0x290>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	07d9      	lsls	r1, r3, #31
 8003dfa:	d5d8      	bpl.n	8003dae <_printf_float+0x242>
 8003dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e00:	4631      	mov	r1, r6
 8003e02:	4628      	mov	r0, r5
 8003e04:	47b8      	blx	r7
 8003e06:	3001      	adds	r0, #1
 8003e08:	f43f af0b 	beq.w	8003c22 <_printf_float+0xb6>
 8003e0c:	f04f 0900 	mov.w	r9, #0
 8003e10:	f104 0a1a 	add.w	sl, r4, #26
 8003e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e16:	425b      	negs	r3, r3
 8003e18:	454b      	cmp	r3, r9
 8003e1a:	dc01      	bgt.n	8003e20 <_printf_float+0x2b4>
 8003e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e1e:	e794      	b.n	8003d4a <_printf_float+0x1de>
 8003e20:	2301      	movs	r3, #1
 8003e22:	4652      	mov	r2, sl
 8003e24:	4631      	mov	r1, r6
 8003e26:	4628      	mov	r0, r5
 8003e28:	47b8      	blx	r7
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	f43f aef9 	beq.w	8003c22 <_printf_float+0xb6>
 8003e30:	f109 0901 	add.w	r9, r9, #1
 8003e34:	e7ee      	b.n	8003e14 <_printf_float+0x2a8>
 8003e36:	bf00      	nop
 8003e38:	7fefffff 	.word	0x7fefffff
 8003e3c:	0800835c 	.word	0x0800835c
 8003e40:	08008360 	.word	0x08008360
 8003e44:	08008368 	.word	0x08008368
 8003e48:	08008364 	.word	0x08008364
 8003e4c:	0800836c 	.word	0x0800836c
 8003e50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e54:	429a      	cmp	r2, r3
 8003e56:	bfa8      	it	ge
 8003e58:	461a      	movge	r2, r3
 8003e5a:	2a00      	cmp	r2, #0
 8003e5c:	4691      	mov	r9, r2
 8003e5e:	dc37      	bgt.n	8003ed0 <_printf_float+0x364>
 8003e60:	f04f 0b00 	mov.w	fp, #0
 8003e64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e68:	f104 021a 	add.w	r2, r4, #26
 8003e6c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003e70:	ebaa 0309 	sub.w	r3, sl, r9
 8003e74:	455b      	cmp	r3, fp
 8003e76:	dc33      	bgt.n	8003ee0 <_printf_float+0x374>
 8003e78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	db3b      	blt.n	8003ef8 <_printf_float+0x38c>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	07da      	lsls	r2, r3, #31
 8003e84:	d438      	bmi.n	8003ef8 <_printf_float+0x38c>
 8003e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e88:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003e8a:	eba3 020a 	sub.w	r2, r3, sl
 8003e8e:	eba3 0901 	sub.w	r9, r3, r1
 8003e92:	4591      	cmp	r9, r2
 8003e94:	bfa8      	it	ge
 8003e96:	4691      	movge	r9, r2
 8003e98:	f1b9 0f00 	cmp.w	r9, #0
 8003e9c:	dc34      	bgt.n	8003f08 <_printf_float+0x39c>
 8003e9e:	f04f 0800 	mov.w	r8, #0
 8003ea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ea6:	f104 0a1a 	add.w	sl, r4, #26
 8003eaa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	eba3 0309 	sub.w	r3, r3, r9
 8003eb4:	4543      	cmp	r3, r8
 8003eb6:	f77f af7a 	ble.w	8003dae <_printf_float+0x242>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	4652      	mov	r2, sl
 8003ebe:	4631      	mov	r1, r6
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	47b8      	blx	r7
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	f43f aeac 	beq.w	8003c22 <_printf_float+0xb6>
 8003eca:	f108 0801 	add.w	r8, r8, #1
 8003ece:	e7ec      	b.n	8003eaa <_printf_float+0x33e>
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	4631      	mov	r1, r6
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	47b8      	blx	r7
 8003eda:	3001      	adds	r0, #1
 8003edc:	d1c0      	bne.n	8003e60 <_printf_float+0x2f4>
 8003ede:	e6a0      	b.n	8003c22 <_printf_float+0xb6>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	920b      	str	r2, [sp, #44]	; 0x2c
 8003ee8:	47b8      	blx	r7
 8003eea:	3001      	adds	r0, #1
 8003eec:	f43f ae99 	beq.w	8003c22 <_printf_float+0xb6>
 8003ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ef2:	f10b 0b01 	add.w	fp, fp, #1
 8003ef6:	e7b9      	b.n	8003e6c <_printf_float+0x300>
 8003ef8:	4631      	mov	r1, r6
 8003efa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003efe:	4628      	mov	r0, r5
 8003f00:	47b8      	blx	r7
 8003f02:	3001      	adds	r0, #1
 8003f04:	d1bf      	bne.n	8003e86 <_printf_float+0x31a>
 8003f06:	e68c      	b.n	8003c22 <_printf_float+0xb6>
 8003f08:	464b      	mov	r3, r9
 8003f0a:	4631      	mov	r1, r6
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	eb08 020a 	add.w	r2, r8, sl
 8003f12:	47b8      	blx	r7
 8003f14:	3001      	adds	r0, #1
 8003f16:	d1c2      	bne.n	8003e9e <_printf_float+0x332>
 8003f18:	e683      	b.n	8003c22 <_printf_float+0xb6>
 8003f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f1c:	2a01      	cmp	r2, #1
 8003f1e:	dc01      	bgt.n	8003f24 <_printf_float+0x3b8>
 8003f20:	07db      	lsls	r3, r3, #31
 8003f22:	d537      	bpl.n	8003f94 <_printf_float+0x428>
 8003f24:	2301      	movs	r3, #1
 8003f26:	4642      	mov	r2, r8
 8003f28:	4631      	mov	r1, r6
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	47b8      	blx	r7
 8003f2e:	3001      	adds	r0, #1
 8003f30:	f43f ae77 	beq.w	8003c22 <_printf_float+0xb6>
 8003f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f38:	4631      	mov	r1, r6
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	47b8      	blx	r7
 8003f3e:	3001      	adds	r0, #1
 8003f40:	f43f ae6f 	beq.w	8003c22 <_printf_float+0xb6>
 8003f44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f7fc fd2c 	bl	80009a8 <__aeabi_dcmpeq>
 8003f50:	b9d8      	cbnz	r0, 8003f8a <_printf_float+0x41e>
 8003f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f54:	f108 0201 	add.w	r2, r8, #1
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	47b8      	blx	r7
 8003f60:	3001      	adds	r0, #1
 8003f62:	d10e      	bne.n	8003f82 <_printf_float+0x416>
 8003f64:	e65d      	b.n	8003c22 <_printf_float+0xb6>
 8003f66:	2301      	movs	r3, #1
 8003f68:	464a      	mov	r2, r9
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b8      	blx	r7
 8003f70:	3001      	adds	r0, #1
 8003f72:	f43f ae56 	beq.w	8003c22 <_printf_float+0xb6>
 8003f76:	f108 0801 	add.w	r8, r8, #1
 8003f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	4543      	cmp	r3, r8
 8003f80:	dcf1      	bgt.n	8003f66 <_printf_float+0x3fa>
 8003f82:	4653      	mov	r3, sl
 8003f84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003f88:	e6e0      	b.n	8003d4c <_printf_float+0x1e0>
 8003f8a:	f04f 0800 	mov.w	r8, #0
 8003f8e:	f104 091a 	add.w	r9, r4, #26
 8003f92:	e7f2      	b.n	8003f7a <_printf_float+0x40e>
 8003f94:	2301      	movs	r3, #1
 8003f96:	4642      	mov	r2, r8
 8003f98:	e7df      	b.n	8003f5a <_printf_float+0x3ee>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	464a      	mov	r2, r9
 8003f9e:	4631      	mov	r1, r6
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	47b8      	blx	r7
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	f43f ae3c 	beq.w	8003c22 <_printf_float+0xb6>
 8003faa:	f108 0801 	add.w	r8, r8, #1
 8003fae:	68e3      	ldr	r3, [r4, #12]
 8003fb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003fb2:	1a5b      	subs	r3, r3, r1
 8003fb4:	4543      	cmp	r3, r8
 8003fb6:	dcf0      	bgt.n	8003f9a <_printf_float+0x42e>
 8003fb8:	e6fd      	b.n	8003db6 <_printf_float+0x24a>
 8003fba:	f04f 0800 	mov.w	r8, #0
 8003fbe:	f104 0919 	add.w	r9, r4, #25
 8003fc2:	e7f4      	b.n	8003fae <_printf_float+0x442>

08003fc4 <_printf_common>:
 8003fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	4616      	mov	r6, r2
 8003fca:	4699      	mov	r9, r3
 8003fcc:	688a      	ldr	r2, [r1, #8]
 8003fce:	690b      	ldr	r3, [r1, #16]
 8003fd0:	4607      	mov	r7, r0
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	bfb8      	it	lt
 8003fd6:	4613      	movlt	r3, r2
 8003fd8:	6033      	str	r3, [r6, #0]
 8003fda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fde:	460c      	mov	r4, r1
 8003fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fe4:	b10a      	cbz	r2, 8003fea <_printf_common+0x26>
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	6033      	str	r3, [r6, #0]
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	0699      	lsls	r1, r3, #26
 8003fee:	bf42      	ittt	mi
 8003ff0:	6833      	ldrmi	r3, [r6, #0]
 8003ff2:	3302      	addmi	r3, #2
 8003ff4:	6033      	strmi	r3, [r6, #0]
 8003ff6:	6825      	ldr	r5, [r4, #0]
 8003ff8:	f015 0506 	ands.w	r5, r5, #6
 8003ffc:	d106      	bne.n	800400c <_printf_common+0x48>
 8003ffe:	f104 0a19 	add.w	sl, r4, #25
 8004002:	68e3      	ldr	r3, [r4, #12]
 8004004:	6832      	ldr	r2, [r6, #0]
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	42ab      	cmp	r3, r5
 800400a:	dc28      	bgt.n	800405e <_printf_common+0x9a>
 800400c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004010:	1e13      	subs	r3, r2, #0
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	bf18      	it	ne
 8004016:	2301      	movne	r3, #1
 8004018:	0692      	lsls	r2, r2, #26
 800401a:	d42d      	bmi.n	8004078 <_printf_common+0xb4>
 800401c:	4649      	mov	r1, r9
 800401e:	4638      	mov	r0, r7
 8004020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004024:	47c0      	blx	r8
 8004026:	3001      	adds	r0, #1
 8004028:	d020      	beq.n	800406c <_printf_common+0xa8>
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	68e5      	ldr	r5, [r4, #12]
 800402e:	f003 0306 	and.w	r3, r3, #6
 8004032:	2b04      	cmp	r3, #4
 8004034:	bf18      	it	ne
 8004036:	2500      	movne	r5, #0
 8004038:	6832      	ldr	r2, [r6, #0]
 800403a:	f04f 0600 	mov.w	r6, #0
 800403e:	68a3      	ldr	r3, [r4, #8]
 8004040:	bf08      	it	eq
 8004042:	1aad      	subeq	r5, r5, r2
 8004044:	6922      	ldr	r2, [r4, #16]
 8004046:	bf08      	it	eq
 8004048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800404c:	4293      	cmp	r3, r2
 800404e:	bfc4      	itt	gt
 8004050:	1a9b      	subgt	r3, r3, r2
 8004052:	18ed      	addgt	r5, r5, r3
 8004054:	341a      	adds	r4, #26
 8004056:	42b5      	cmp	r5, r6
 8004058:	d11a      	bne.n	8004090 <_printf_common+0xcc>
 800405a:	2000      	movs	r0, #0
 800405c:	e008      	b.n	8004070 <_printf_common+0xac>
 800405e:	2301      	movs	r3, #1
 8004060:	4652      	mov	r2, sl
 8004062:	4649      	mov	r1, r9
 8004064:	4638      	mov	r0, r7
 8004066:	47c0      	blx	r8
 8004068:	3001      	adds	r0, #1
 800406a:	d103      	bne.n	8004074 <_printf_common+0xb0>
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004074:	3501      	adds	r5, #1
 8004076:	e7c4      	b.n	8004002 <_printf_common+0x3e>
 8004078:	2030      	movs	r0, #48	; 0x30
 800407a:	18e1      	adds	r1, r4, r3
 800407c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004086:	4422      	add	r2, r4
 8004088:	3302      	adds	r3, #2
 800408a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800408e:	e7c5      	b.n	800401c <_printf_common+0x58>
 8004090:	2301      	movs	r3, #1
 8004092:	4622      	mov	r2, r4
 8004094:	4649      	mov	r1, r9
 8004096:	4638      	mov	r0, r7
 8004098:	47c0      	blx	r8
 800409a:	3001      	adds	r0, #1
 800409c:	d0e6      	beq.n	800406c <_printf_common+0xa8>
 800409e:	3601      	adds	r6, #1
 80040a0:	e7d9      	b.n	8004056 <_printf_common+0x92>
	...

080040a4 <_printf_i>:
 80040a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040a8:	7e0f      	ldrb	r7, [r1, #24]
 80040aa:	4691      	mov	r9, r2
 80040ac:	2f78      	cmp	r7, #120	; 0x78
 80040ae:	4680      	mov	r8, r0
 80040b0:	460c      	mov	r4, r1
 80040b2:	469a      	mov	sl, r3
 80040b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040ba:	d807      	bhi.n	80040cc <_printf_i+0x28>
 80040bc:	2f62      	cmp	r7, #98	; 0x62
 80040be:	d80a      	bhi.n	80040d6 <_printf_i+0x32>
 80040c0:	2f00      	cmp	r7, #0
 80040c2:	f000 80d9 	beq.w	8004278 <_printf_i+0x1d4>
 80040c6:	2f58      	cmp	r7, #88	; 0x58
 80040c8:	f000 80a4 	beq.w	8004214 <_printf_i+0x170>
 80040cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040d4:	e03a      	b.n	800414c <_printf_i+0xa8>
 80040d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040da:	2b15      	cmp	r3, #21
 80040dc:	d8f6      	bhi.n	80040cc <_printf_i+0x28>
 80040de:	a101      	add	r1, pc, #4	; (adr r1, 80040e4 <_printf_i+0x40>)
 80040e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040e4:	0800413d 	.word	0x0800413d
 80040e8:	08004151 	.word	0x08004151
 80040ec:	080040cd 	.word	0x080040cd
 80040f0:	080040cd 	.word	0x080040cd
 80040f4:	080040cd 	.word	0x080040cd
 80040f8:	080040cd 	.word	0x080040cd
 80040fc:	08004151 	.word	0x08004151
 8004100:	080040cd 	.word	0x080040cd
 8004104:	080040cd 	.word	0x080040cd
 8004108:	080040cd 	.word	0x080040cd
 800410c:	080040cd 	.word	0x080040cd
 8004110:	0800425f 	.word	0x0800425f
 8004114:	08004181 	.word	0x08004181
 8004118:	08004241 	.word	0x08004241
 800411c:	080040cd 	.word	0x080040cd
 8004120:	080040cd 	.word	0x080040cd
 8004124:	08004281 	.word	0x08004281
 8004128:	080040cd 	.word	0x080040cd
 800412c:	08004181 	.word	0x08004181
 8004130:	080040cd 	.word	0x080040cd
 8004134:	080040cd 	.word	0x080040cd
 8004138:	08004249 	.word	0x08004249
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	1d1a      	adds	r2, r3, #4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	602a      	str	r2, [r5, #0]
 8004144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800414c:	2301      	movs	r3, #1
 800414e:	e0a4      	b.n	800429a <_printf_i+0x1f6>
 8004150:	6820      	ldr	r0, [r4, #0]
 8004152:	6829      	ldr	r1, [r5, #0]
 8004154:	0606      	lsls	r6, r0, #24
 8004156:	f101 0304 	add.w	r3, r1, #4
 800415a:	d50a      	bpl.n	8004172 <_printf_i+0xce>
 800415c:	680e      	ldr	r6, [r1, #0]
 800415e:	602b      	str	r3, [r5, #0]
 8004160:	2e00      	cmp	r6, #0
 8004162:	da03      	bge.n	800416c <_printf_i+0xc8>
 8004164:	232d      	movs	r3, #45	; 0x2d
 8004166:	4276      	negs	r6, r6
 8004168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800416c:	230a      	movs	r3, #10
 800416e:	485e      	ldr	r0, [pc, #376]	; (80042e8 <_printf_i+0x244>)
 8004170:	e019      	b.n	80041a6 <_printf_i+0x102>
 8004172:	680e      	ldr	r6, [r1, #0]
 8004174:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004178:	602b      	str	r3, [r5, #0]
 800417a:	bf18      	it	ne
 800417c:	b236      	sxthne	r6, r6
 800417e:	e7ef      	b.n	8004160 <_printf_i+0xbc>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	6820      	ldr	r0, [r4, #0]
 8004184:	1d19      	adds	r1, r3, #4
 8004186:	6029      	str	r1, [r5, #0]
 8004188:	0601      	lsls	r1, r0, #24
 800418a:	d501      	bpl.n	8004190 <_printf_i+0xec>
 800418c:	681e      	ldr	r6, [r3, #0]
 800418e:	e002      	b.n	8004196 <_printf_i+0xf2>
 8004190:	0646      	lsls	r6, r0, #25
 8004192:	d5fb      	bpl.n	800418c <_printf_i+0xe8>
 8004194:	881e      	ldrh	r6, [r3, #0]
 8004196:	2f6f      	cmp	r7, #111	; 0x6f
 8004198:	bf0c      	ite	eq
 800419a:	2308      	moveq	r3, #8
 800419c:	230a      	movne	r3, #10
 800419e:	4852      	ldr	r0, [pc, #328]	; (80042e8 <_printf_i+0x244>)
 80041a0:	2100      	movs	r1, #0
 80041a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041a6:	6865      	ldr	r5, [r4, #4]
 80041a8:	2d00      	cmp	r5, #0
 80041aa:	bfa8      	it	ge
 80041ac:	6821      	ldrge	r1, [r4, #0]
 80041ae:	60a5      	str	r5, [r4, #8]
 80041b0:	bfa4      	itt	ge
 80041b2:	f021 0104 	bicge.w	r1, r1, #4
 80041b6:	6021      	strge	r1, [r4, #0]
 80041b8:	b90e      	cbnz	r6, 80041be <_printf_i+0x11a>
 80041ba:	2d00      	cmp	r5, #0
 80041bc:	d04d      	beq.n	800425a <_printf_i+0x1b6>
 80041be:	4615      	mov	r5, r2
 80041c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80041c4:	fb03 6711 	mls	r7, r3, r1, r6
 80041c8:	5dc7      	ldrb	r7, [r0, r7]
 80041ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041ce:	4637      	mov	r7, r6
 80041d0:	42bb      	cmp	r3, r7
 80041d2:	460e      	mov	r6, r1
 80041d4:	d9f4      	bls.n	80041c0 <_printf_i+0x11c>
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d10b      	bne.n	80041f2 <_printf_i+0x14e>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	07de      	lsls	r6, r3, #31
 80041de:	d508      	bpl.n	80041f2 <_printf_i+0x14e>
 80041e0:	6923      	ldr	r3, [r4, #16]
 80041e2:	6861      	ldr	r1, [r4, #4]
 80041e4:	4299      	cmp	r1, r3
 80041e6:	bfde      	ittt	le
 80041e8:	2330      	movle	r3, #48	; 0x30
 80041ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041f2:	1b52      	subs	r2, r2, r5
 80041f4:	6122      	str	r2, [r4, #16]
 80041f6:	464b      	mov	r3, r9
 80041f8:	4621      	mov	r1, r4
 80041fa:	4640      	mov	r0, r8
 80041fc:	f8cd a000 	str.w	sl, [sp]
 8004200:	aa03      	add	r2, sp, #12
 8004202:	f7ff fedf 	bl	8003fc4 <_printf_common>
 8004206:	3001      	adds	r0, #1
 8004208:	d14c      	bne.n	80042a4 <_printf_i+0x200>
 800420a:	f04f 30ff 	mov.w	r0, #4294967295
 800420e:	b004      	add	sp, #16
 8004210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004214:	4834      	ldr	r0, [pc, #208]	; (80042e8 <_printf_i+0x244>)
 8004216:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800421a:	6829      	ldr	r1, [r5, #0]
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004222:	6029      	str	r1, [r5, #0]
 8004224:	061d      	lsls	r5, r3, #24
 8004226:	d514      	bpl.n	8004252 <_printf_i+0x1ae>
 8004228:	07df      	lsls	r7, r3, #31
 800422a:	bf44      	itt	mi
 800422c:	f043 0320 	orrmi.w	r3, r3, #32
 8004230:	6023      	strmi	r3, [r4, #0]
 8004232:	b91e      	cbnz	r6, 800423c <_printf_i+0x198>
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	f023 0320 	bic.w	r3, r3, #32
 800423a:	6023      	str	r3, [r4, #0]
 800423c:	2310      	movs	r3, #16
 800423e:	e7af      	b.n	80041a0 <_printf_i+0xfc>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	f043 0320 	orr.w	r3, r3, #32
 8004246:	6023      	str	r3, [r4, #0]
 8004248:	2378      	movs	r3, #120	; 0x78
 800424a:	4828      	ldr	r0, [pc, #160]	; (80042ec <_printf_i+0x248>)
 800424c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004250:	e7e3      	b.n	800421a <_printf_i+0x176>
 8004252:	0659      	lsls	r1, r3, #25
 8004254:	bf48      	it	mi
 8004256:	b2b6      	uxthmi	r6, r6
 8004258:	e7e6      	b.n	8004228 <_printf_i+0x184>
 800425a:	4615      	mov	r5, r2
 800425c:	e7bb      	b.n	80041d6 <_printf_i+0x132>
 800425e:	682b      	ldr	r3, [r5, #0]
 8004260:	6826      	ldr	r6, [r4, #0]
 8004262:	1d18      	adds	r0, r3, #4
 8004264:	6961      	ldr	r1, [r4, #20]
 8004266:	6028      	str	r0, [r5, #0]
 8004268:	0635      	lsls	r5, r6, #24
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	d501      	bpl.n	8004272 <_printf_i+0x1ce>
 800426e:	6019      	str	r1, [r3, #0]
 8004270:	e002      	b.n	8004278 <_printf_i+0x1d4>
 8004272:	0670      	lsls	r0, r6, #25
 8004274:	d5fb      	bpl.n	800426e <_printf_i+0x1ca>
 8004276:	8019      	strh	r1, [r3, #0]
 8004278:	2300      	movs	r3, #0
 800427a:	4615      	mov	r5, r2
 800427c:	6123      	str	r3, [r4, #16]
 800427e:	e7ba      	b.n	80041f6 <_printf_i+0x152>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	2100      	movs	r1, #0
 8004284:	1d1a      	adds	r2, r3, #4
 8004286:	602a      	str	r2, [r5, #0]
 8004288:	681d      	ldr	r5, [r3, #0]
 800428a:	6862      	ldr	r2, [r4, #4]
 800428c:	4628      	mov	r0, r5
 800428e:	f002 fb21 	bl	80068d4 <memchr>
 8004292:	b108      	cbz	r0, 8004298 <_printf_i+0x1f4>
 8004294:	1b40      	subs	r0, r0, r5
 8004296:	6060      	str	r0, [r4, #4]
 8004298:	6863      	ldr	r3, [r4, #4]
 800429a:	6123      	str	r3, [r4, #16]
 800429c:	2300      	movs	r3, #0
 800429e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a2:	e7a8      	b.n	80041f6 <_printf_i+0x152>
 80042a4:	462a      	mov	r2, r5
 80042a6:	4649      	mov	r1, r9
 80042a8:	4640      	mov	r0, r8
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	47d0      	blx	sl
 80042ae:	3001      	adds	r0, #1
 80042b0:	d0ab      	beq.n	800420a <_printf_i+0x166>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	079b      	lsls	r3, r3, #30
 80042b6:	d413      	bmi.n	80042e0 <_printf_i+0x23c>
 80042b8:	68e0      	ldr	r0, [r4, #12]
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	4298      	cmp	r0, r3
 80042be:	bfb8      	it	lt
 80042c0:	4618      	movlt	r0, r3
 80042c2:	e7a4      	b.n	800420e <_printf_i+0x16a>
 80042c4:	2301      	movs	r3, #1
 80042c6:	4632      	mov	r2, r6
 80042c8:	4649      	mov	r1, r9
 80042ca:	4640      	mov	r0, r8
 80042cc:	47d0      	blx	sl
 80042ce:	3001      	adds	r0, #1
 80042d0:	d09b      	beq.n	800420a <_printf_i+0x166>
 80042d2:	3501      	adds	r5, #1
 80042d4:	68e3      	ldr	r3, [r4, #12]
 80042d6:	9903      	ldr	r1, [sp, #12]
 80042d8:	1a5b      	subs	r3, r3, r1
 80042da:	42ab      	cmp	r3, r5
 80042dc:	dcf2      	bgt.n	80042c4 <_printf_i+0x220>
 80042de:	e7eb      	b.n	80042b8 <_printf_i+0x214>
 80042e0:	2500      	movs	r5, #0
 80042e2:	f104 0619 	add.w	r6, r4, #25
 80042e6:	e7f5      	b.n	80042d4 <_printf_i+0x230>
 80042e8:	0800836e 	.word	0x0800836e
 80042ec:	0800837f 	.word	0x0800837f

080042f0 <_scanf_float>:
 80042f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f4:	b087      	sub	sp, #28
 80042f6:	9303      	str	r3, [sp, #12]
 80042f8:	688b      	ldr	r3, [r1, #8]
 80042fa:	4617      	mov	r7, r2
 80042fc:	1e5a      	subs	r2, r3, #1
 80042fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004302:	bf85      	ittet	hi
 8004304:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004308:	195b      	addhi	r3, r3, r5
 800430a:	2300      	movls	r3, #0
 800430c:	9302      	strhi	r3, [sp, #8]
 800430e:	bf88      	it	hi
 8004310:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004314:	468b      	mov	fp, r1
 8004316:	f04f 0500 	mov.w	r5, #0
 800431a:	bf8c      	ite	hi
 800431c:	608b      	strhi	r3, [r1, #8]
 800431e:	9302      	strls	r3, [sp, #8]
 8004320:	680b      	ldr	r3, [r1, #0]
 8004322:	4680      	mov	r8, r0
 8004324:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004328:	f84b 3b1c 	str.w	r3, [fp], #28
 800432c:	460c      	mov	r4, r1
 800432e:	465e      	mov	r6, fp
 8004330:	46aa      	mov	sl, r5
 8004332:	46a9      	mov	r9, r5
 8004334:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004338:	9501      	str	r5, [sp, #4]
 800433a:	68a2      	ldr	r2, [r4, #8]
 800433c:	b152      	cbz	r2, 8004354 <_scanf_float+0x64>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b4e      	cmp	r3, #78	; 0x4e
 8004344:	d864      	bhi.n	8004410 <_scanf_float+0x120>
 8004346:	2b40      	cmp	r3, #64	; 0x40
 8004348:	d83c      	bhi.n	80043c4 <_scanf_float+0xd4>
 800434a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800434e:	b2c8      	uxtb	r0, r1
 8004350:	280e      	cmp	r0, #14
 8004352:	d93a      	bls.n	80043ca <_scanf_float+0xda>
 8004354:	f1b9 0f00 	cmp.w	r9, #0
 8004358:	d003      	beq.n	8004362 <_scanf_float+0x72>
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004366:	f1ba 0f01 	cmp.w	sl, #1
 800436a:	f200 8113 	bhi.w	8004594 <_scanf_float+0x2a4>
 800436e:	455e      	cmp	r6, fp
 8004370:	f200 8105 	bhi.w	800457e <_scanf_float+0x28e>
 8004374:	2501      	movs	r5, #1
 8004376:	4628      	mov	r0, r5
 8004378:	b007      	add	sp, #28
 800437a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004382:	2a0d      	cmp	r2, #13
 8004384:	d8e6      	bhi.n	8004354 <_scanf_float+0x64>
 8004386:	a101      	add	r1, pc, #4	; (adr r1, 800438c <_scanf_float+0x9c>)
 8004388:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800438c:	080044cb 	.word	0x080044cb
 8004390:	08004355 	.word	0x08004355
 8004394:	08004355 	.word	0x08004355
 8004398:	08004355 	.word	0x08004355
 800439c:	0800452b 	.word	0x0800452b
 80043a0:	08004503 	.word	0x08004503
 80043a4:	08004355 	.word	0x08004355
 80043a8:	08004355 	.word	0x08004355
 80043ac:	080044d9 	.word	0x080044d9
 80043b0:	08004355 	.word	0x08004355
 80043b4:	08004355 	.word	0x08004355
 80043b8:	08004355 	.word	0x08004355
 80043bc:	08004355 	.word	0x08004355
 80043c0:	08004491 	.word	0x08004491
 80043c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80043c8:	e7db      	b.n	8004382 <_scanf_float+0x92>
 80043ca:	290e      	cmp	r1, #14
 80043cc:	d8c2      	bhi.n	8004354 <_scanf_float+0x64>
 80043ce:	a001      	add	r0, pc, #4	; (adr r0, 80043d4 <_scanf_float+0xe4>)
 80043d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80043d4:	08004483 	.word	0x08004483
 80043d8:	08004355 	.word	0x08004355
 80043dc:	08004483 	.word	0x08004483
 80043e0:	08004517 	.word	0x08004517
 80043e4:	08004355 	.word	0x08004355
 80043e8:	08004431 	.word	0x08004431
 80043ec:	0800446d 	.word	0x0800446d
 80043f0:	0800446d 	.word	0x0800446d
 80043f4:	0800446d 	.word	0x0800446d
 80043f8:	0800446d 	.word	0x0800446d
 80043fc:	0800446d 	.word	0x0800446d
 8004400:	0800446d 	.word	0x0800446d
 8004404:	0800446d 	.word	0x0800446d
 8004408:	0800446d 	.word	0x0800446d
 800440c:	0800446d 	.word	0x0800446d
 8004410:	2b6e      	cmp	r3, #110	; 0x6e
 8004412:	d809      	bhi.n	8004428 <_scanf_float+0x138>
 8004414:	2b60      	cmp	r3, #96	; 0x60
 8004416:	d8b2      	bhi.n	800437e <_scanf_float+0x8e>
 8004418:	2b54      	cmp	r3, #84	; 0x54
 800441a:	d077      	beq.n	800450c <_scanf_float+0x21c>
 800441c:	2b59      	cmp	r3, #89	; 0x59
 800441e:	d199      	bne.n	8004354 <_scanf_float+0x64>
 8004420:	2d07      	cmp	r5, #7
 8004422:	d197      	bne.n	8004354 <_scanf_float+0x64>
 8004424:	2508      	movs	r5, #8
 8004426:	e029      	b.n	800447c <_scanf_float+0x18c>
 8004428:	2b74      	cmp	r3, #116	; 0x74
 800442a:	d06f      	beq.n	800450c <_scanf_float+0x21c>
 800442c:	2b79      	cmp	r3, #121	; 0x79
 800442e:	e7f6      	b.n	800441e <_scanf_float+0x12e>
 8004430:	6821      	ldr	r1, [r4, #0]
 8004432:	05c8      	lsls	r0, r1, #23
 8004434:	d51a      	bpl.n	800446c <_scanf_float+0x17c>
 8004436:	9b02      	ldr	r3, [sp, #8]
 8004438:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800443c:	6021      	str	r1, [r4, #0]
 800443e:	f109 0901 	add.w	r9, r9, #1
 8004442:	b11b      	cbz	r3, 800444c <_scanf_float+0x15c>
 8004444:	3b01      	subs	r3, #1
 8004446:	3201      	adds	r2, #1
 8004448:	9302      	str	r3, [sp, #8]
 800444a:	60a2      	str	r2, [r4, #8]
 800444c:	68a3      	ldr	r3, [r4, #8]
 800444e:	3b01      	subs	r3, #1
 8004450:	60a3      	str	r3, [r4, #8]
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	3301      	adds	r3, #1
 8004456:	6123      	str	r3, [r4, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3b01      	subs	r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	f340 8084 	ble.w	800456c <_scanf_float+0x27c>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	3301      	adds	r3, #1
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	e766      	b.n	800433a <_scanf_float+0x4a>
 800446c:	eb1a 0f05 	cmn.w	sl, r5
 8004470:	f47f af70 	bne.w	8004354 <_scanf_float+0x64>
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800447a:	6022      	str	r2, [r4, #0]
 800447c:	f806 3b01 	strb.w	r3, [r6], #1
 8004480:	e7e4      	b.n	800444c <_scanf_float+0x15c>
 8004482:	6822      	ldr	r2, [r4, #0]
 8004484:	0610      	lsls	r0, r2, #24
 8004486:	f57f af65 	bpl.w	8004354 <_scanf_float+0x64>
 800448a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800448e:	e7f4      	b.n	800447a <_scanf_float+0x18a>
 8004490:	f1ba 0f00 	cmp.w	sl, #0
 8004494:	d10e      	bne.n	80044b4 <_scanf_float+0x1c4>
 8004496:	f1b9 0f00 	cmp.w	r9, #0
 800449a:	d10e      	bne.n	80044ba <_scanf_float+0x1ca>
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80044a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80044a6:	d108      	bne.n	80044ba <_scanf_float+0x1ca>
 80044a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80044ac:	f04f 0a01 	mov.w	sl, #1
 80044b0:	6022      	str	r2, [r4, #0]
 80044b2:	e7e3      	b.n	800447c <_scanf_float+0x18c>
 80044b4:	f1ba 0f02 	cmp.w	sl, #2
 80044b8:	d055      	beq.n	8004566 <_scanf_float+0x276>
 80044ba:	2d01      	cmp	r5, #1
 80044bc:	d002      	beq.n	80044c4 <_scanf_float+0x1d4>
 80044be:	2d04      	cmp	r5, #4
 80044c0:	f47f af48 	bne.w	8004354 <_scanf_float+0x64>
 80044c4:	3501      	adds	r5, #1
 80044c6:	b2ed      	uxtb	r5, r5
 80044c8:	e7d8      	b.n	800447c <_scanf_float+0x18c>
 80044ca:	f1ba 0f01 	cmp.w	sl, #1
 80044ce:	f47f af41 	bne.w	8004354 <_scanf_float+0x64>
 80044d2:	f04f 0a02 	mov.w	sl, #2
 80044d6:	e7d1      	b.n	800447c <_scanf_float+0x18c>
 80044d8:	b97d      	cbnz	r5, 80044fa <_scanf_float+0x20a>
 80044da:	f1b9 0f00 	cmp.w	r9, #0
 80044de:	f47f af3c 	bne.w	800435a <_scanf_float+0x6a>
 80044e2:	6822      	ldr	r2, [r4, #0]
 80044e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80044e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80044ec:	f47f af39 	bne.w	8004362 <_scanf_float+0x72>
 80044f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80044f4:	2501      	movs	r5, #1
 80044f6:	6022      	str	r2, [r4, #0]
 80044f8:	e7c0      	b.n	800447c <_scanf_float+0x18c>
 80044fa:	2d03      	cmp	r5, #3
 80044fc:	d0e2      	beq.n	80044c4 <_scanf_float+0x1d4>
 80044fe:	2d05      	cmp	r5, #5
 8004500:	e7de      	b.n	80044c0 <_scanf_float+0x1d0>
 8004502:	2d02      	cmp	r5, #2
 8004504:	f47f af26 	bne.w	8004354 <_scanf_float+0x64>
 8004508:	2503      	movs	r5, #3
 800450a:	e7b7      	b.n	800447c <_scanf_float+0x18c>
 800450c:	2d06      	cmp	r5, #6
 800450e:	f47f af21 	bne.w	8004354 <_scanf_float+0x64>
 8004512:	2507      	movs	r5, #7
 8004514:	e7b2      	b.n	800447c <_scanf_float+0x18c>
 8004516:	6822      	ldr	r2, [r4, #0]
 8004518:	0591      	lsls	r1, r2, #22
 800451a:	f57f af1b 	bpl.w	8004354 <_scanf_float+0x64>
 800451e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004522:	6022      	str	r2, [r4, #0]
 8004524:	f8cd 9004 	str.w	r9, [sp, #4]
 8004528:	e7a8      	b.n	800447c <_scanf_float+0x18c>
 800452a:	6822      	ldr	r2, [r4, #0]
 800452c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004530:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004534:	d006      	beq.n	8004544 <_scanf_float+0x254>
 8004536:	0550      	lsls	r0, r2, #21
 8004538:	f57f af0c 	bpl.w	8004354 <_scanf_float+0x64>
 800453c:	f1b9 0f00 	cmp.w	r9, #0
 8004540:	f43f af0f 	beq.w	8004362 <_scanf_float+0x72>
 8004544:	0591      	lsls	r1, r2, #22
 8004546:	bf58      	it	pl
 8004548:	9901      	ldrpl	r1, [sp, #4]
 800454a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800454e:	bf58      	it	pl
 8004550:	eba9 0101 	subpl.w	r1, r9, r1
 8004554:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004558:	f04f 0900 	mov.w	r9, #0
 800455c:	bf58      	it	pl
 800455e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004562:	6022      	str	r2, [r4, #0]
 8004564:	e78a      	b.n	800447c <_scanf_float+0x18c>
 8004566:	f04f 0a03 	mov.w	sl, #3
 800456a:	e787      	b.n	800447c <_scanf_float+0x18c>
 800456c:	4639      	mov	r1, r7
 800456e:	4640      	mov	r0, r8
 8004570:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004574:	4798      	blx	r3
 8004576:	2800      	cmp	r0, #0
 8004578:	f43f aedf 	beq.w	800433a <_scanf_float+0x4a>
 800457c:	e6ea      	b.n	8004354 <_scanf_float+0x64>
 800457e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004582:	463a      	mov	r2, r7
 8004584:	4640      	mov	r0, r8
 8004586:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800458a:	4798      	blx	r3
 800458c:	6923      	ldr	r3, [r4, #16]
 800458e:	3b01      	subs	r3, #1
 8004590:	6123      	str	r3, [r4, #16]
 8004592:	e6ec      	b.n	800436e <_scanf_float+0x7e>
 8004594:	1e6b      	subs	r3, r5, #1
 8004596:	2b06      	cmp	r3, #6
 8004598:	d825      	bhi.n	80045e6 <_scanf_float+0x2f6>
 800459a:	2d02      	cmp	r5, #2
 800459c:	d836      	bhi.n	800460c <_scanf_float+0x31c>
 800459e:	455e      	cmp	r6, fp
 80045a0:	f67f aee8 	bls.w	8004374 <_scanf_float+0x84>
 80045a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045a8:	463a      	mov	r2, r7
 80045aa:	4640      	mov	r0, r8
 80045ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80045b0:	4798      	blx	r3
 80045b2:	6923      	ldr	r3, [r4, #16]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	6123      	str	r3, [r4, #16]
 80045b8:	e7f1      	b.n	800459e <_scanf_float+0x2ae>
 80045ba:	9802      	ldr	r0, [sp, #8]
 80045bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80045c4:	463a      	mov	r2, r7
 80045c6:	9002      	str	r0, [sp, #8]
 80045c8:	4640      	mov	r0, r8
 80045ca:	4798      	blx	r3
 80045cc:	6923      	ldr	r3, [r4, #16]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	6123      	str	r3, [r4, #16]
 80045d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045d6:	fa5f fa8a 	uxtb.w	sl, sl
 80045da:	f1ba 0f02 	cmp.w	sl, #2
 80045de:	d1ec      	bne.n	80045ba <_scanf_float+0x2ca>
 80045e0:	3d03      	subs	r5, #3
 80045e2:	b2ed      	uxtb	r5, r5
 80045e4:	1b76      	subs	r6, r6, r5
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	05da      	lsls	r2, r3, #23
 80045ea:	d52f      	bpl.n	800464c <_scanf_float+0x35c>
 80045ec:	055b      	lsls	r3, r3, #21
 80045ee:	d510      	bpl.n	8004612 <_scanf_float+0x322>
 80045f0:	455e      	cmp	r6, fp
 80045f2:	f67f aebf 	bls.w	8004374 <_scanf_float+0x84>
 80045f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045fa:	463a      	mov	r2, r7
 80045fc:	4640      	mov	r0, r8
 80045fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004602:	4798      	blx	r3
 8004604:	6923      	ldr	r3, [r4, #16]
 8004606:	3b01      	subs	r3, #1
 8004608:	6123      	str	r3, [r4, #16]
 800460a:	e7f1      	b.n	80045f0 <_scanf_float+0x300>
 800460c:	46aa      	mov	sl, r5
 800460e:	9602      	str	r6, [sp, #8]
 8004610:	e7df      	b.n	80045d2 <_scanf_float+0x2e2>
 8004612:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004616:	6923      	ldr	r3, [r4, #16]
 8004618:	2965      	cmp	r1, #101	; 0x65
 800461a:	f103 33ff 	add.w	r3, r3, #4294967295
 800461e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004622:	6123      	str	r3, [r4, #16]
 8004624:	d00c      	beq.n	8004640 <_scanf_float+0x350>
 8004626:	2945      	cmp	r1, #69	; 0x45
 8004628:	d00a      	beq.n	8004640 <_scanf_float+0x350>
 800462a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800462e:	463a      	mov	r2, r7
 8004630:	4640      	mov	r0, r8
 8004632:	4798      	blx	r3
 8004634:	6923      	ldr	r3, [r4, #16]
 8004636:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800463a:	3b01      	subs	r3, #1
 800463c:	1eb5      	subs	r5, r6, #2
 800463e:	6123      	str	r3, [r4, #16]
 8004640:	463a      	mov	r2, r7
 8004642:	4640      	mov	r0, r8
 8004644:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004648:	4798      	blx	r3
 800464a:	462e      	mov	r6, r5
 800464c:	6825      	ldr	r5, [r4, #0]
 800464e:	f015 0510 	ands.w	r5, r5, #16
 8004652:	d155      	bne.n	8004700 <_scanf_float+0x410>
 8004654:	7035      	strb	r5, [r6, #0]
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800465c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004660:	d11b      	bne.n	800469a <_scanf_float+0x3aa>
 8004662:	9b01      	ldr	r3, [sp, #4]
 8004664:	454b      	cmp	r3, r9
 8004666:	eba3 0209 	sub.w	r2, r3, r9
 800466a:	d123      	bne.n	80046b4 <_scanf_float+0x3c4>
 800466c:	2200      	movs	r2, #0
 800466e:	4659      	mov	r1, fp
 8004670:	4640      	mov	r0, r8
 8004672:	f000 fead 	bl	80053d0 <_strtod_r>
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	9b03      	ldr	r3, [sp, #12]
 800467a:	f012 0f02 	tst.w	r2, #2
 800467e:	4606      	mov	r6, r0
 8004680:	460f      	mov	r7, r1
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	d021      	beq.n	80046ca <_scanf_float+0x3da>
 8004686:	1d1a      	adds	r2, r3, #4
 8004688:	9903      	ldr	r1, [sp, #12]
 800468a:	600a      	str	r2, [r1, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	e9c3 6700 	strd	r6, r7, [r3]
 8004692:	68e3      	ldr	r3, [r4, #12]
 8004694:	3301      	adds	r3, #1
 8004696:	60e3      	str	r3, [r4, #12]
 8004698:	e66d      	b.n	8004376 <_scanf_float+0x86>
 800469a:	9b04      	ldr	r3, [sp, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0e5      	beq.n	800466c <_scanf_float+0x37c>
 80046a0:	9905      	ldr	r1, [sp, #20]
 80046a2:	230a      	movs	r3, #10
 80046a4:	462a      	mov	r2, r5
 80046a6:	4640      	mov	r0, r8
 80046a8:	3101      	adds	r1, #1
 80046aa:	f000 ff13 	bl	80054d4 <_strtol_r>
 80046ae:	9b04      	ldr	r3, [sp, #16]
 80046b0:	9e05      	ldr	r6, [sp, #20]
 80046b2:	1ac2      	subs	r2, r0, r3
 80046b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80046b8:	429e      	cmp	r6, r3
 80046ba:	bf28      	it	cs
 80046bc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80046c0:	4630      	mov	r0, r6
 80046c2:	4910      	ldr	r1, [pc, #64]	; (8004704 <_scanf_float+0x414>)
 80046c4:	f000 f85a 	bl	800477c <siprintf>
 80046c8:	e7d0      	b.n	800466c <_scanf_float+0x37c>
 80046ca:	f012 0f04 	tst.w	r2, #4
 80046ce:	f103 0204 	add.w	r2, r3, #4
 80046d2:	d1d9      	bne.n	8004688 <_scanf_float+0x398>
 80046d4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80046d8:	f8cc 2000 	str.w	r2, [ip]
 80046dc:	f8d3 8000 	ldr.w	r8, [r3]
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	f7fc f992 	bl	8000a0c <__aeabi_dcmpun>
 80046e8:	b128      	cbz	r0, 80046f6 <_scanf_float+0x406>
 80046ea:	4807      	ldr	r0, [pc, #28]	; (8004708 <_scanf_float+0x418>)
 80046ec:	f000 f80e 	bl	800470c <nanf>
 80046f0:	f8c8 0000 	str.w	r0, [r8]
 80046f4:	e7cd      	b.n	8004692 <_scanf_float+0x3a2>
 80046f6:	4630      	mov	r0, r6
 80046f8:	4639      	mov	r1, r7
 80046fa:	f7fc f9e5 	bl	8000ac8 <__aeabi_d2f>
 80046fe:	e7f7      	b.n	80046f0 <_scanf_float+0x400>
 8004700:	2500      	movs	r5, #0
 8004702:	e638      	b.n	8004376 <_scanf_float+0x86>
 8004704:	08008390 	.word	0x08008390
 8004708:	08008798 	.word	0x08008798

0800470c <nanf>:
 800470c:	4800      	ldr	r0, [pc, #0]	; (8004710 <nanf+0x4>)
 800470e:	4770      	bx	lr
 8004710:	7fc00000 	.word	0x7fc00000

08004714 <sniprintf>:
 8004714:	b40c      	push	{r2, r3}
 8004716:	b530      	push	{r4, r5, lr}
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <sniprintf+0x64>)
 800471a:	1e0c      	subs	r4, r1, #0
 800471c:	681d      	ldr	r5, [r3, #0]
 800471e:	b09d      	sub	sp, #116	; 0x74
 8004720:	da08      	bge.n	8004734 <sniprintf+0x20>
 8004722:	238b      	movs	r3, #139	; 0x8b
 8004724:	f04f 30ff 	mov.w	r0, #4294967295
 8004728:	602b      	str	r3, [r5, #0]
 800472a:	b01d      	add	sp, #116	; 0x74
 800472c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004730:	b002      	add	sp, #8
 8004732:	4770      	bx	lr
 8004734:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004738:	f8ad 3014 	strh.w	r3, [sp, #20]
 800473c:	bf0c      	ite	eq
 800473e:	4623      	moveq	r3, r4
 8004740:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004744:	9304      	str	r3, [sp, #16]
 8004746:	9307      	str	r3, [sp, #28]
 8004748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800474c:	9002      	str	r0, [sp, #8]
 800474e:	9006      	str	r0, [sp, #24]
 8004750:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004754:	4628      	mov	r0, r5
 8004756:	ab21      	add	r3, sp, #132	; 0x84
 8004758:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800475a:	a902      	add	r1, sp, #8
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	f002 fed9 	bl	8007514 <_svfiprintf_r>
 8004762:	1c43      	adds	r3, r0, #1
 8004764:	bfbc      	itt	lt
 8004766:	238b      	movlt	r3, #139	; 0x8b
 8004768:	602b      	strlt	r3, [r5, #0]
 800476a:	2c00      	cmp	r4, #0
 800476c:	d0dd      	beq.n	800472a <sniprintf+0x16>
 800476e:	2200      	movs	r2, #0
 8004770:	9b02      	ldr	r3, [sp, #8]
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	e7d9      	b.n	800472a <sniprintf+0x16>
 8004776:	bf00      	nop
 8004778:	2000000c 	.word	0x2000000c

0800477c <siprintf>:
 800477c:	b40e      	push	{r1, r2, r3}
 800477e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004782:	b500      	push	{lr}
 8004784:	b09c      	sub	sp, #112	; 0x70
 8004786:	ab1d      	add	r3, sp, #116	; 0x74
 8004788:	9002      	str	r0, [sp, #8]
 800478a:	9006      	str	r0, [sp, #24]
 800478c:	9107      	str	r1, [sp, #28]
 800478e:	9104      	str	r1, [sp, #16]
 8004790:	4808      	ldr	r0, [pc, #32]	; (80047b4 <siprintf+0x38>)
 8004792:	4909      	ldr	r1, [pc, #36]	; (80047b8 <siprintf+0x3c>)
 8004794:	f853 2b04 	ldr.w	r2, [r3], #4
 8004798:	9105      	str	r1, [sp, #20]
 800479a:	6800      	ldr	r0, [r0, #0]
 800479c:	a902      	add	r1, sp, #8
 800479e:	9301      	str	r3, [sp, #4]
 80047a0:	f002 feb8 	bl	8007514 <_svfiprintf_r>
 80047a4:	2200      	movs	r2, #0
 80047a6:	9b02      	ldr	r3, [sp, #8]
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	b01c      	add	sp, #112	; 0x70
 80047ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80047b0:	b003      	add	sp, #12
 80047b2:	4770      	bx	lr
 80047b4:	2000000c 	.word	0x2000000c
 80047b8:	ffff0208 	.word	0xffff0208

080047bc <sulp>:
 80047bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c0:	460f      	mov	r7, r1
 80047c2:	4690      	mov	r8, r2
 80047c4:	f002 fc12 	bl	8006fec <__ulp>
 80047c8:	4604      	mov	r4, r0
 80047ca:	460d      	mov	r5, r1
 80047cc:	f1b8 0f00 	cmp.w	r8, #0
 80047d0:	d011      	beq.n	80047f6 <sulp+0x3a>
 80047d2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80047d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80047da:	2b00      	cmp	r3, #0
 80047dc:	dd0b      	ble.n	80047f6 <sulp+0x3a>
 80047de:	2400      	movs	r4, #0
 80047e0:	051b      	lsls	r3, r3, #20
 80047e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80047e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80047ea:	4622      	mov	r2, r4
 80047ec:	462b      	mov	r3, r5
 80047ee:	f7fb fe73 	bl	80004d8 <__aeabi_dmul>
 80047f2:	4604      	mov	r4, r0
 80047f4:	460d      	mov	r5, r1
 80047f6:	4620      	mov	r0, r4
 80047f8:	4629      	mov	r1, r5
 80047fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004800 <_strtod_l>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	469b      	mov	fp, r3
 8004806:	2300      	movs	r3, #0
 8004808:	b09f      	sub	sp, #124	; 0x7c
 800480a:	931a      	str	r3, [sp, #104]	; 0x68
 800480c:	4b9e      	ldr	r3, [pc, #632]	; (8004a88 <_strtod_l+0x288>)
 800480e:	4682      	mov	sl, r0
 8004810:	681f      	ldr	r7, [r3, #0]
 8004812:	460e      	mov	r6, r1
 8004814:	4638      	mov	r0, r7
 8004816:	9215      	str	r2, [sp, #84]	; 0x54
 8004818:	f7fb fc9a 	bl	8000150 <strlen>
 800481c:	f04f 0800 	mov.w	r8, #0
 8004820:	4604      	mov	r4, r0
 8004822:	f04f 0900 	mov.w	r9, #0
 8004826:	9619      	str	r6, [sp, #100]	; 0x64
 8004828:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800482a:	781a      	ldrb	r2, [r3, #0]
 800482c:	2a2b      	cmp	r2, #43	; 0x2b
 800482e:	d04c      	beq.n	80048ca <_strtod_l+0xca>
 8004830:	d83a      	bhi.n	80048a8 <_strtod_l+0xa8>
 8004832:	2a0d      	cmp	r2, #13
 8004834:	d833      	bhi.n	800489e <_strtod_l+0x9e>
 8004836:	2a08      	cmp	r2, #8
 8004838:	d833      	bhi.n	80048a2 <_strtod_l+0xa2>
 800483a:	2a00      	cmp	r2, #0
 800483c:	d03d      	beq.n	80048ba <_strtod_l+0xba>
 800483e:	2300      	movs	r3, #0
 8004840:	930a      	str	r3, [sp, #40]	; 0x28
 8004842:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004844:	782b      	ldrb	r3, [r5, #0]
 8004846:	2b30      	cmp	r3, #48	; 0x30
 8004848:	f040 80aa 	bne.w	80049a0 <_strtod_l+0x1a0>
 800484c:	786b      	ldrb	r3, [r5, #1]
 800484e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004852:	2b58      	cmp	r3, #88	; 0x58
 8004854:	d166      	bne.n	8004924 <_strtod_l+0x124>
 8004856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004858:	4650      	mov	r0, sl
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	ab1a      	add	r3, sp, #104	; 0x68
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	4a8a      	ldr	r2, [pc, #552]	; (8004a8c <_strtod_l+0x28c>)
 8004862:	f8cd b008 	str.w	fp, [sp, #8]
 8004866:	ab1b      	add	r3, sp, #108	; 0x6c
 8004868:	a919      	add	r1, sp, #100	; 0x64
 800486a:	f001 fd17 	bl	800629c <__gethex>
 800486e:	f010 0607 	ands.w	r6, r0, #7
 8004872:	4604      	mov	r4, r0
 8004874:	d005      	beq.n	8004882 <_strtod_l+0x82>
 8004876:	2e06      	cmp	r6, #6
 8004878:	d129      	bne.n	80048ce <_strtod_l+0xce>
 800487a:	2300      	movs	r3, #0
 800487c:	3501      	adds	r5, #1
 800487e:	9519      	str	r5, [sp, #100]	; 0x64
 8004880:	930a      	str	r3, [sp, #40]	; 0x28
 8004882:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004884:	2b00      	cmp	r3, #0
 8004886:	f040 858a 	bne.w	800539e <_strtod_l+0xb9e>
 800488a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800488c:	b1d3      	cbz	r3, 80048c4 <_strtod_l+0xc4>
 800488e:	4642      	mov	r2, r8
 8004890:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004894:	4610      	mov	r0, r2
 8004896:	4619      	mov	r1, r3
 8004898:	b01f      	add	sp, #124	; 0x7c
 800489a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489e:	2a20      	cmp	r2, #32
 80048a0:	d1cd      	bne.n	800483e <_strtod_l+0x3e>
 80048a2:	3301      	adds	r3, #1
 80048a4:	9319      	str	r3, [sp, #100]	; 0x64
 80048a6:	e7bf      	b.n	8004828 <_strtod_l+0x28>
 80048a8:	2a2d      	cmp	r2, #45	; 0x2d
 80048aa:	d1c8      	bne.n	800483e <_strtod_l+0x3e>
 80048ac:	2201      	movs	r2, #1
 80048ae:	920a      	str	r2, [sp, #40]	; 0x28
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	9219      	str	r2, [sp, #100]	; 0x64
 80048b4:	785b      	ldrb	r3, [r3, #1]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1c3      	bne.n	8004842 <_strtod_l+0x42>
 80048ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80048bc:	9619      	str	r6, [sp, #100]	; 0x64
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 856b 	bne.w	800539a <_strtod_l+0xb9a>
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	e7e4      	b.n	8004894 <_strtod_l+0x94>
 80048ca:	2200      	movs	r2, #0
 80048cc:	e7ef      	b.n	80048ae <_strtod_l+0xae>
 80048ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80048d0:	b13a      	cbz	r2, 80048e2 <_strtod_l+0xe2>
 80048d2:	2135      	movs	r1, #53	; 0x35
 80048d4:	a81c      	add	r0, sp, #112	; 0x70
 80048d6:	f002 fc8d 	bl	80071f4 <__copybits>
 80048da:	4650      	mov	r0, sl
 80048dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80048de:	f002 f855 	bl	800698c <_Bfree>
 80048e2:	3e01      	subs	r6, #1
 80048e4:	2e04      	cmp	r6, #4
 80048e6:	d806      	bhi.n	80048f6 <_strtod_l+0xf6>
 80048e8:	e8df f006 	tbb	[pc, r6]
 80048ec:	1714030a 	.word	0x1714030a
 80048f0:	0a          	.byte	0x0a
 80048f1:	00          	.byte	0x00
 80048f2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80048f6:	0721      	lsls	r1, r4, #28
 80048f8:	d5c3      	bpl.n	8004882 <_strtod_l+0x82>
 80048fa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80048fe:	e7c0      	b.n	8004882 <_strtod_l+0x82>
 8004900:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004902:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004906:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800490a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800490e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004912:	e7f0      	b.n	80048f6 <_strtod_l+0xf6>
 8004914:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004a90 <_strtod_l+0x290>
 8004918:	e7ed      	b.n	80048f6 <_strtod_l+0xf6>
 800491a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800491e:	f04f 38ff 	mov.w	r8, #4294967295
 8004922:	e7e8      	b.n	80048f6 <_strtod_l+0xf6>
 8004924:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	9219      	str	r2, [sp, #100]	; 0x64
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b30      	cmp	r3, #48	; 0x30
 800492e:	d0f9      	beq.n	8004924 <_strtod_l+0x124>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0a6      	beq.n	8004882 <_strtod_l+0x82>
 8004934:	2301      	movs	r3, #1
 8004936:	9307      	str	r3, [sp, #28]
 8004938:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800493a:	220a      	movs	r2, #10
 800493c:	9308      	str	r3, [sp, #32]
 800493e:	2300      	movs	r3, #0
 8004940:	469b      	mov	fp, r3
 8004942:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004946:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004948:	7805      	ldrb	r5, [r0, #0]
 800494a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800494e:	b2d9      	uxtb	r1, r3
 8004950:	2909      	cmp	r1, #9
 8004952:	d927      	bls.n	80049a4 <_strtod_l+0x1a4>
 8004954:	4622      	mov	r2, r4
 8004956:	4639      	mov	r1, r7
 8004958:	f002 fef2 	bl	8007740 <strncmp>
 800495c:	2800      	cmp	r0, #0
 800495e:	d033      	beq.n	80049c8 <_strtod_l+0x1c8>
 8004960:	2000      	movs	r0, #0
 8004962:	462a      	mov	r2, r5
 8004964:	465c      	mov	r4, fp
 8004966:	4603      	mov	r3, r0
 8004968:	9004      	str	r0, [sp, #16]
 800496a:	2a65      	cmp	r2, #101	; 0x65
 800496c:	d001      	beq.n	8004972 <_strtod_l+0x172>
 800496e:	2a45      	cmp	r2, #69	; 0x45
 8004970:	d114      	bne.n	800499c <_strtod_l+0x19c>
 8004972:	b91c      	cbnz	r4, 800497c <_strtod_l+0x17c>
 8004974:	9a07      	ldr	r2, [sp, #28]
 8004976:	4302      	orrs	r2, r0
 8004978:	d09f      	beq.n	80048ba <_strtod_l+0xba>
 800497a:	2400      	movs	r4, #0
 800497c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800497e:	1c72      	adds	r2, r6, #1
 8004980:	9219      	str	r2, [sp, #100]	; 0x64
 8004982:	7872      	ldrb	r2, [r6, #1]
 8004984:	2a2b      	cmp	r2, #43	; 0x2b
 8004986:	d079      	beq.n	8004a7c <_strtod_l+0x27c>
 8004988:	2a2d      	cmp	r2, #45	; 0x2d
 800498a:	f000 8083 	beq.w	8004a94 <_strtod_l+0x294>
 800498e:	2700      	movs	r7, #0
 8004990:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004994:	2909      	cmp	r1, #9
 8004996:	f240 8083 	bls.w	8004aa0 <_strtod_l+0x2a0>
 800499a:	9619      	str	r6, [sp, #100]	; 0x64
 800499c:	2500      	movs	r5, #0
 800499e:	e09f      	b.n	8004ae0 <_strtod_l+0x2e0>
 80049a0:	2300      	movs	r3, #0
 80049a2:	e7c8      	b.n	8004936 <_strtod_l+0x136>
 80049a4:	f1bb 0f08 	cmp.w	fp, #8
 80049a8:	bfd5      	itete	le
 80049aa:	9906      	ldrle	r1, [sp, #24]
 80049ac:	9905      	ldrgt	r1, [sp, #20]
 80049ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80049b2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80049b6:	f100 0001 	add.w	r0, r0, #1
 80049ba:	bfd4      	ite	le
 80049bc:	9306      	strle	r3, [sp, #24]
 80049be:	9305      	strgt	r3, [sp, #20]
 80049c0:	f10b 0b01 	add.w	fp, fp, #1
 80049c4:	9019      	str	r0, [sp, #100]	; 0x64
 80049c6:	e7be      	b.n	8004946 <_strtod_l+0x146>
 80049c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80049ca:	191a      	adds	r2, r3, r4
 80049cc:	9219      	str	r2, [sp, #100]	; 0x64
 80049ce:	5d1a      	ldrb	r2, [r3, r4]
 80049d0:	f1bb 0f00 	cmp.w	fp, #0
 80049d4:	d036      	beq.n	8004a44 <_strtod_l+0x244>
 80049d6:	465c      	mov	r4, fp
 80049d8:	9004      	str	r0, [sp, #16]
 80049da:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80049de:	2b09      	cmp	r3, #9
 80049e0:	d912      	bls.n	8004a08 <_strtod_l+0x208>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e7c1      	b.n	800496a <_strtod_l+0x16a>
 80049e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80049e8:	3001      	adds	r0, #1
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	9219      	str	r2, [sp, #100]	; 0x64
 80049ee:	785a      	ldrb	r2, [r3, #1]
 80049f0:	2a30      	cmp	r2, #48	; 0x30
 80049f2:	d0f8      	beq.n	80049e6 <_strtod_l+0x1e6>
 80049f4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	f200 84d5 	bhi.w	80053a8 <_strtod_l+0xba8>
 80049fe:	9004      	str	r0, [sp, #16]
 8004a00:	2000      	movs	r0, #0
 8004a02:	4604      	mov	r4, r0
 8004a04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a06:	9308      	str	r3, [sp, #32]
 8004a08:	3a30      	subs	r2, #48	; 0x30
 8004a0a:	f100 0301 	add.w	r3, r0, #1
 8004a0e:	d013      	beq.n	8004a38 <_strtod_l+0x238>
 8004a10:	9904      	ldr	r1, [sp, #16]
 8004a12:	1905      	adds	r5, r0, r4
 8004a14:	4419      	add	r1, r3
 8004a16:	9104      	str	r1, [sp, #16]
 8004a18:	4623      	mov	r3, r4
 8004a1a:	210a      	movs	r1, #10
 8004a1c:	42ab      	cmp	r3, r5
 8004a1e:	d113      	bne.n	8004a48 <_strtod_l+0x248>
 8004a20:	1823      	adds	r3, r4, r0
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	f104 0401 	add.w	r4, r4, #1
 8004a28:	4404      	add	r4, r0
 8004a2a:	dc1b      	bgt.n	8004a64 <_strtod_l+0x264>
 8004a2c:	230a      	movs	r3, #10
 8004a2e:	9906      	ldr	r1, [sp, #24]
 8004a30:	fb03 2301 	mla	r3, r3, r1, r2
 8004a34:	9306      	str	r3, [sp, #24]
 8004a36:	2300      	movs	r3, #0
 8004a38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	1c51      	adds	r1, r2, #1
 8004a3e:	9119      	str	r1, [sp, #100]	; 0x64
 8004a40:	7852      	ldrb	r2, [r2, #1]
 8004a42:	e7ca      	b.n	80049da <_strtod_l+0x1da>
 8004a44:	4658      	mov	r0, fp
 8004a46:	e7d3      	b.n	80049f0 <_strtod_l+0x1f0>
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	dc04      	bgt.n	8004a56 <_strtod_l+0x256>
 8004a4c:	9f06      	ldr	r7, [sp, #24]
 8004a4e:	434f      	muls	r7, r1
 8004a50:	9706      	str	r7, [sp, #24]
 8004a52:	3301      	adds	r3, #1
 8004a54:	e7e2      	b.n	8004a1c <_strtod_l+0x21c>
 8004a56:	1c5f      	adds	r7, r3, #1
 8004a58:	2f10      	cmp	r7, #16
 8004a5a:	bfde      	ittt	le
 8004a5c:	9f05      	ldrle	r7, [sp, #20]
 8004a5e:	434f      	mulle	r7, r1
 8004a60:	9705      	strle	r7, [sp, #20]
 8004a62:	e7f6      	b.n	8004a52 <_strtod_l+0x252>
 8004a64:	2c10      	cmp	r4, #16
 8004a66:	bfdf      	itttt	le
 8004a68:	230a      	movle	r3, #10
 8004a6a:	9905      	ldrle	r1, [sp, #20]
 8004a6c:	fb03 2301 	mlale	r3, r3, r1, r2
 8004a70:	9305      	strle	r3, [sp, #20]
 8004a72:	e7e0      	b.n	8004a36 <_strtod_l+0x236>
 8004a74:	2300      	movs	r3, #0
 8004a76:	9304      	str	r3, [sp, #16]
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e77b      	b.n	8004974 <_strtod_l+0x174>
 8004a7c:	2700      	movs	r7, #0
 8004a7e:	1cb2      	adds	r2, r6, #2
 8004a80:	9219      	str	r2, [sp, #100]	; 0x64
 8004a82:	78b2      	ldrb	r2, [r6, #2]
 8004a84:	e784      	b.n	8004990 <_strtod_l+0x190>
 8004a86:	bf00      	nop
 8004a88:	080085e0 	.word	0x080085e0
 8004a8c:	08008398 	.word	0x08008398
 8004a90:	7ff00000 	.word	0x7ff00000
 8004a94:	2701      	movs	r7, #1
 8004a96:	e7f2      	b.n	8004a7e <_strtod_l+0x27e>
 8004a98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004a9a:	1c51      	adds	r1, r2, #1
 8004a9c:	9119      	str	r1, [sp, #100]	; 0x64
 8004a9e:	7852      	ldrb	r2, [r2, #1]
 8004aa0:	2a30      	cmp	r2, #48	; 0x30
 8004aa2:	d0f9      	beq.n	8004a98 <_strtod_l+0x298>
 8004aa4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004aa8:	2908      	cmp	r1, #8
 8004aaa:	f63f af77 	bhi.w	800499c <_strtod_l+0x19c>
 8004aae:	f04f 0e0a 	mov.w	lr, #10
 8004ab2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004ab6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8004aba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004abc:	1c51      	adds	r1, r2, #1
 8004abe:	9119      	str	r1, [sp, #100]	; 0x64
 8004ac0:	7852      	ldrb	r2, [r2, #1]
 8004ac2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004ac6:	2d09      	cmp	r5, #9
 8004ac8:	d935      	bls.n	8004b36 <_strtod_l+0x336>
 8004aca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004acc:	1b49      	subs	r1, r1, r5
 8004ace:	2908      	cmp	r1, #8
 8004ad0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004ad4:	dc02      	bgt.n	8004adc <_strtod_l+0x2dc>
 8004ad6:	4565      	cmp	r5, ip
 8004ad8:	bfa8      	it	ge
 8004ada:	4665      	movge	r5, ip
 8004adc:	b107      	cbz	r7, 8004ae0 <_strtod_l+0x2e0>
 8004ade:	426d      	negs	r5, r5
 8004ae0:	2c00      	cmp	r4, #0
 8004ae2:	d14c      	bne.n	8004b7e <_strtod_l+0x37e>
 8004ae4:	9907      	ldr	r1, [sp, #28]
 8004ae6:	4301      	orrs	r1, r0
 8004ae8:	f47f aecb 	bne.w	8004882 <_strtod_l+0x82>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f47f aee4 	bne.w	80048ba <_strtod_l+0xba>
 8004af2:	2a69      	cmp	r2, #105	; 0x69
 8004af4:	d026      	beq.n	8004b44 <_strtod_l+0x344>
 8004af6:	dc23      	bgt.n	8004b40 <_strtod_l+0x340>
 8004af8:	2a49      	cmp	r2, #73	; 0x49
 8004afa:	d023      	beq.n	8004b44 <_strtod_l+0x344>
 8004afc:	2a4e      	cmp	r2, #78	; 0x4e
 8004afe:	f47f aedc 	bne.w	80048ba <_strtod_l+0xba>
 8004b02:	499d      	ldr	r1, [pc, #628]	; (8004d78 <_strtod_l+0x578>)
 8004b04:	a819      	add	r0, sp, #100	; 0x64
 8004b06:	f001 fe17 	bl	8006738 <__match>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	f43f aed5 	beq.w	80048ba <_strtod_l+0xba>
 8004b10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b28      	cmp	r3, #40	; 0x28
 8004b16:	d12c      	bne.n	8004b72 <_strtod_l+0x372>
 8004b18:	4998      	ldr	r1, [pc, #608]	; (8004d7c <_strtod_l+0x57c>)
 8004b1a:	aa1c      	add	r2, sp, #112	; 0x70
 8004b1c:	a819      	add	r0, sp, #100	; 0x64
 8004b1e:	f001 fe1f 	bl	8006760 <__hexnan>
 8004b22:	2805      	cmp	r0, #5
 8004b24:	d125      	bne.n	8004b72 <_strtod_l+0x372>
 8004b26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004b28:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004b2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004b30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004b34:	e6a5      	b.n	8004882 <_strtod_l+0x82>
 8004b36:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004b3a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004b3e:	e7bc      	b.n	8004aba <_strtod_l+0x2ba>
 8004b40:	2a6e      	cmp	r2, #110	; 0x6e
 8004b42:	e7dc      	b.n	8004afe <_strtod_l+0x2fe>
 8004b44:	498e      	ldr	r1, [pc, #568]	; (8004d80 <_strtod_l+0x580>)
 8004b46:	a819      	add	r0, sp, #100	; 0x64
 8004b48:	f001 fdf6 	bl	8006738 <__match>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	f43f aeb4 	beq.w	80048ba <_strtod_l+0xba>
 8004b52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b54:	498b      	ldr	r1, [pc, #556]	; (8004d84 <_strtod_l+0x584>)
 8004b56:	3b01      	subs	r3, #1
 8004b58:	a819      	add	r0, sp, #100	; 0x64
 8004b5a:	9319      	str	r3, [sp, #100]	; 0x64
 8004b5c:	f001 fdec 	bl	8006738 <__match>
 8004b60:	b910      	cbnz	r0, 8004b68 <_strtod_l+0x368>
 8004b62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b64:	3301      	adds	r3, #1
 8004b66:	9319      	str	r3, [sp, #100]	; 0x64
 8004b68:	f04f 0800 	mov.w	r8, #0
 8004b6c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004d88 <_strtod_l+0x588>
 8004b70:	e687      	b.n	8004882 <_strtod_l+0x82>
 8004b72:	4886      	ldr	r0, [pc, #536]	; (8004d8c <_strtod_l+0x58c>)
 8004b74:	f002 fdce 	bl	8007714 <nan>
 8004b78:	4680      	mov	r8, r0
 8004b7a:	4689      	mov	r9, r1
 8004b7c:	e681      	b.n	8004882 <_strtod_l+0x82>
 8004b7e:	9b04      	ldr	r3, [sp, #16]
 8004b80:	f1bb 0f00 	cmp.w	fp, #0
 8004b84:	bf08      	it	eq
 8004b86:	46a3      	moveq	fp, r4
 8004b88:	1aeb      	subs	r3, r5, r3
 8004b8a:	2c10      	cmp	r4, #16
 8004b8c:	9806      	ldr	r0, [sp, #24]
 8004b8e:	4626      	mov	r6, r4
 8004b90:	9307      	str	r3, [sp, #28]
 8004b92:	bfa8      	it	ge
 8004b94:	2610      	movge	r6, #16
 8004b96:	f7fb fc25 	bl	80003e4 <__aeabi_ui2d>
 8004b9a:	2c09      	cmp	r4, #9
 8004b9c:	4680      	mov	r8, r0
 8004b9e:	4689      	mov	r9, r1
 8004ba0:	dd13      	ble.n	8004bca <_strtod_l+0x3ca>
 8004ba2:	4b7b      	ldr	r3, [pc, #492]	; (8004d90 <_strtod_l+0x590>)
 8004ba4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004ba8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004bac:	f7fb fc94 	bl	80004d8 <__aeabi_dmul>
 8004bb0:	4680      	mov	r8, r0
 8004bb2:	9805      	ldr	r0, [sp, #20]
 8004bb4:	4689      	mov	r9, r1
 8004bb6:	f7fb fc15 	bl	80003e4 <__aeabi_ui2d>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	4649      	mov	r1, r9
 8004bc2:	f7fb fad3 	bl	800016c <__adddf3>
 8004bc6:	4680      	mov	r8, r0
 8004bc8:	4689      	mov	r9, r1
 8004bca:	2c0f      	cmp	r4, #15
 8004bcc:	dc36      	bgt.n	8004c3c <_strtod_l+0x43c>
 8004bce:	9b07      	ldr	r3, [sp, #28]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f43f ae56 	beq.w	8004882 <_strtod_l+0x82>
 8004bd6:	dd22      	ble.n	8004c1e <_strtod_l+0x41e>
 8004bd8:	2b16      	cmp	r3, #22
 8004bda:	dc09      	bgt.n	8004bf0 <_strtod_l+0x3f0>
 8004bdc:	496c      	ldr	r1, [pc, #432]	; (8004d90 <_strtod_l+0x590>)
 8004bde:	4642      	mov	r2, r8
 8004be0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004be4:	464b      	mov	r3, r9
 8004be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bea:	f7fb fc75 	bl	80004d8 <__aeabi_dmul>
 8004bee:	e7c3      	b.n	8004b78 <_strtod_l+0x378>
 8004bf0:	9a07      	ldr	r2, [sp, #28]
 8004bf2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	db20      	blt.n	8004c3c <_strtod_l+0x43c>
 8004bfa:	4d65      	ldr	r5, [pc, #404]	; (8004d90 <_strtod_l+0x590>)
 8004bfc:	f1c4 040f 	rsb	r4, r4, #15
 8004c00:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004c04:	4642      	mov	r2, r8
 8004c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	f7fb fc64 	bl	80004d8 <__aeabi_dmul>
 8004c10:	9b07      	ldr	r3, [sp, #28]
 8004c12:	1b1c      	subs	r4, r3, r4
 8004c14:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004c18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c1c:	e7e5      	b.n	8004bea <_strtod_l+0x3ea>
 8004c1e:	9b07      	ldr	r3, [sp, #28]
 8004c20:	3316      	adds	r3, #22
 8004c22:	db0b      	blt.n	8004c3c <_strtod_l+0x43c>
 8004c24:	9b04      	ldr	r3, [sp, #16]
 8004c26:	4640      	mov	r0, r8
 8004c28:	1b5d      	subs	r5, r3, r5
 8004c2a:	4b59      	ldr	r3, [pc, #356]	; (8004d90 <_strtod_l+0x590>)
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004c32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c36:	f7fb fd79 	bl	800072c <__aeabi_ddiv>
 8004c3a:	e79d      	b.n	8004b78 <_strtod_l+0x378>
 8004c3c:	9b07      	ldr	r3, [sp, #28]
 8004c3e:	1ba6      	subs	r6, r4, r6
 8004c40:	441e      	add	r6, r3
 8004c42:	2e00      	cmp	r6, #0
 8004c44:	dd74      	ble.n	8004d30 <_strtod_l+0x530>
 8004c46:	f016 030f 	ands.w	r3, r6, #15
 8004c4a:	d00a      	beq.n	8004c62 <_strtod_l+0x462>
 8004c4c:	4950      	ldr	r1, [pc, #320]	; (8004d90 <_strtod_l+0x590>)
 8004c4e:	4642      	mov	r2, r8
 8004c50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c58:	464b      	mov	r3, r9
 8004c5a:	f7fb fc3d 	bl	80004d8 <__aeabi_dmul>
 8004c5e:	4680      	mov	r8, r0
 8004c60:	4689      	mov	r9, r1
 8004c62:	f036 060f 	bics.w	r6, r6, #15
 8004c66:	d052      	beq.n	8004d0e <_strtod_l+0x50e>
 8004c68:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004c6c:	dd27      	ble.n	8004cbe <_strtod_l+0x4be>
 8004c6e:	f04f 0b00 	mov.w	fp, #0
 8004c72:	f8cd b010 	str.w	fp, [sp, #16]
 8004c76:	f8cd b020 	str.w	fp, [sp, #32]
 8004c7a:	f8cd b018 	str.w	fp, [sp, #24]
 8004c7e:	2322      	movs	r3, #34	; 0x22
 8004c80:	f04f 0800 	mov.w	r8, #0
 8004c84:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004d88 <_strtod_l+0x588>
 8004c88:	f8ca 3000 	str.w	r3, [sl]
 8004c8c:	9b08      	ldr	r3, [sp, #32]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f43f adf7 	beq.w	8004882 <_strtod_l+0x82>
 8004c94:	4650      	mov	r0, sl
 8004c96:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004c98:	f001 fe78 	bl	800698c <_Bfree>
 8004c9c:	4650      	mov	r0, sl
 8004c9e:	9906      	ldr	r1, [sp, #24]
 8004ca0:	f001 fe74 	bl	800698c <_Bfree>
 8004ca4:	4650      	mov	r0, sl
 8004ca6:	9904      	ldr	r1, [sp, #16]
 8004ca8:	f001 fe70 	bl	800698c <_Bfree>
 8004cac:	4650      	mov	r0, sl
 8004cae:	9908      	ldr	r1, [sp, #32]
 8004cb0:	f001 fe6c 	bl	800698c <_Bfree>
 8004cb4:	4659      	mov	r1, fp
 8004cb6:	4650      	mov	r0, sl
 8004cb8:	f001 fe68 	bl	800698c <_Bfree>
 8004cbc:	e5e1      	b.n	8004882 <_strtod_l+0x82>
 8004cbe:	4b35      	ldr	r3, [pc, #212]	; (8004d94 <_strtod_l+0x594>)
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	9305      	str	r3, [sp, #20]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	461f      	mov	r7, r3
 8004cca:	1136      	asrs	r6, r6, #4
 8004ccc:	2e01      	cmp	r6, #1
 8004cce:	dc21      	bgt.n	8004d14 <_strtod_l+0x514>
 8004cd0:	b10b      	cbz	r3, 8004cd6 <_strtod_l+0x4d6>
 8004cd2:	4680      	mov	r8, r0
 8004cd4:	4689      	mov	r9, r1
 8004cd6:	4b2f      	ldr	r3, [pc, #188]	; (8004d94 <_strtod_l+0x594>)
 8004cd8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004cdc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	f7fb fbf6 	bl	80004d8 <__aeabi_dmul>
 8004cec:	4b26      	ldr	r3, [pc, #152]	; (8004d88 <_strtod_l+0x588>)
 8004cee:	460a      	mov	r2, r1
 8004cf0:	400b      	ands	r3, r1
 8004cf2:	4929      	ldr	r1, [pc, #164]	; (8004d98 <_strtod_l+0x598>)
 8004cf4:	4680      	mov	r8, r0
 8004cf6:	428b      	cmp	r3, r1
 8004cf8:	d8b9      	bhi.n	8004c6e <_strtod_l+0x46e>
 8004cfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004cfe:	428b      	cmp	r3, r1
 8004d00:	bf86      	itte	hi
 8004d02:	f04f 38ff 	movhi.w	r8, #4294967295
 8004d06:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004d9c <_strtod_l+0x59c>
 8004d0a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004d0e:	2300      	movs	r3, #0
 8004d10:	9305      	str	r3, [sp, #20]
 8004d12:	e07f      	b.n	8004e14 <_strtod_l+0x614>
 8004d14:	07f2      	lsls	r2, r6, #31
 8004d16:	d505      	bpl.n	8004d24 <_strtod_l+0x524>
 8004d18:	9b05      	ldr	r3, [sp, #20]
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f7fb fbdb 	bl	80004d8 <__aeabi_dmul>
 8004d22:	2301      	movs	r3, #1
 8004d24:	9a05      	ldr	r2, [sp, #20]
 8004d26:	3701      	adds	r7, #1
 8004d28:	3208      	adds	r2, #8
 8004d2a:	1076      	asrs	r6, r6, #1
 8004d2c:	9205      	str	r2, [sp, #20]
 8004d2e:	e7cd      	b.n	8004ccc <_strtod_l+0x4cc>
 8004d30:	d0ed      	beq.n	8004d0e <_strtod_l+0x50e>
 8004d32:	4276      	negs	r6, r6
 8004d34:	f016 020f 	ands.w	r2, r6, #15
 8004d38:	d00a      	beq.n	8004d50 <_strtod_l+0x550>
 8004d3a:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <_strtod_l+0x590>)
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d42:	4649      	mov	r1, r9
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f7fb fcf0 	bl	800072c <__aeabi_ddiv>
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	4689      	mov	r9, r1
 8004d50:	1136      	asrs	r6, r6, #4
 8004d52:	d0dc      	beq.n	8004d0e <_strtod_l+0x50e>
 8004d54:	2e1f      	cmp	r6, #31
 8004d56:	dd23      	ble.n	8004da0 <_strtod_l+0x5a0>
 8004d58:	f04f 0b00 	mov.w	fp, #0
 8004d5c:	f8cd b010 	str.w	fp, [sp, #16]
 8004d60:	f8cd b020 	str.w	fp, [sp, #32]
 8004d64:	f8cd b018 	str.w	fp, [sp, #24]
 8004d68:	2322      	movs	r3, #34	; 0x22
 8004d6a:	f04f 0800 	mov.w	r8, #0
 8004d6e:	f04f 0900 	mov.w	r9, #0
 8004d72:	f8ca 3000 	str.w	r3, [sl]
 8004d76:	e789      	b.n	8004c8c <_strtod_l+0x48c>
 8004d78:	08008369 	.word	0x08008369
 8004d7c:	080083ac 	.word	0x080083ac
 8004d80:	08008361 	.word	0x08008361
 8004d84:	080084ec 	.word	0x080084ec
 8004d88:	7ff00000 	.word	0x7ff00000
 8004d8c:	08008798 	.word	0x08008798
 8004d90:	08008678 	.word	0x08008678
 8004d94:	08008650 	.word	0x08008650
 8004d98:	7ca00000 	.word	0x7ca00000
 8004d9c:	7fefffff 	.word	0x7fefffff
 8004da0:	f016 0310 	ands.w	r3, r6, #16
 8004da4:	bf18      	it	ne
 8004da6:	236a      	movne	r3, #106	; 0x6a
 8004da8:	4640      	mov	r0, r8
 8004daa:	9305      	str	r3, [sp, #20]
 8004dac:	4649      	mov	r1, r9
 8004dae:	2300      	movs	r3, #0
 8004db0:	4fb0      	ldr	r7, [pc, #704]	; (8005074 <_strtod_l+0x874>)
 8004db2:	07f2      	lsls	r2, r6, #31
 8004db4:	d504      	bpl.n	8004dc0 <_strtod_l+0x5c0>
 8004db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dba:	f7fb fb8d 	bl	80004d8 <__aeabi_dmul>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	1076      	asrs	r6, r6, #1
 8004dc2:	f107 0708 	add.w	r7, r7, #8
 8004dc6:	d1f4      	bne.n	8004db2 <_strtod_l+0x5b2>
 8004dc8:	b10b      	cbz	r3, 8004dce <_strtod_l+0x5ce>
 8004dca:	4680      	mov	r8, r0
 8004dcc:	4689      	mov	r9, r1
 8004dce:	9b05      	ldr	r3, [sp, #20]
 8004dd0:	b1c3      	cbz	r3, 8004e04 <_strtod_l+0x604>
 8004dd2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004dd6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	4649      	mov	r1, r9
 8004dde:	dd11      	ble.n	8004e04 <_strtod_l+0x604>
 8004de0:	2b1f      	cmp	r3, #31
 8004de2:	f340 8127 	ble.w	8005034 <_strtod_l+0x834>
 8004de6:	2b34      	cmp	r3, #52	; 0x34
 8004de8:	bfd8      	it	le
 8004dea:	f04f 33ff 	movle.w	r3, #4294967295
 8004dee:	f04f 0800 	mov.w	r8, #0
 8004df2:	bfcf      	iteee	gt
 8004df4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004df8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004dfc:	fa03 f202 	lslle.w	r2, r3, r2
 8004e00:	ea02 0901 	andle.w	r9, r2, r1
 8004e04:	2200      	movs	r2, #0
 8004e06:	2300      	movs	r3, #0
 8004e08:	4640      	mov	r0, r8
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	f7fb fdcc 	bl	80009a8 <__aeabi_dcmpeq>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d1a1      	bne.n	8004d58 <_strtod_l+0x558>
 8004e14:	9b06      	ldr	r3, [sp, #24]
 8004e16:	465a      	mov	r2, fp
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	4650      	mov	r0, sl
 8004e1c:	4623      	mov	r3, r4
 8004e1e:	9908      	ldr	r1, [sp, #32]
 8004e20:	f001 fe1c 	bl	8006a5c <__s2b>
 8004e24:	9008      	str	r0, [sp, #32]
 8004e26:	2800      	cmp	r0, #0
 8004e28:	f43f af21 	beq.w	8004c6e <_strtod_l+0x46e>
 8004e2c:	9b04      	ldr	r3, [sp, #16]
 8004e2e:	f04f 0b00 	mov.w	fp, #0
 8004e32:	1b5d      	subs	r5, r3, r5
 8004e34:	9b07      	ldr	r3, [sp, #28]
 8004e36:	f8cd b010 	str.w	fp, [sp, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bfb4      	ite	lt
 8004e3e:	462b      	movlt	r3, r5
 8004e40:	2300      	movge	r3, #0
 8004e42:	930e      	str	r3, [sp, #56]	; 0x38
 8004e44:	9b07      	ldr	r3, [sp, #28]
 8004e46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004e4a:	9314      	str	r3, [sp, #80]	; 0x50
 8004e4c:	9b08      	ldr	r3, [sp, #32]
 8004e4e:	4650      	mov	r0, sl
 8004e50:	6859      	ldr	r1, [r3, #4]
 8004e52:	f001 fd5b 	bl	800690c <_Balloc>
 8004e56:	9006      	str	r0, [sp, #24]
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	f43f af10 	beq.w	8004c7e <_strtod_l+0x47e>
 8004e5e:	9b08      	ldr	r3, [sp, #32]
 8004e60:	300c      	adds	r0, #12
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	f103 010c 	add.w	r1, r3, #12
 8004e68:	3202      	adds	r2, #2
 8004e6a:	0092      	lsls	r2, r2, #2
 8004e6c:	f001 fd40 	bl	80068f0 <memcpy>
 8004e70:	ab1c      	add	r3, sp, #112	; 0x70
 8004e72:	9301      	str	r3, [sp, #4]
 8004e74:	ab1b      	add	r3, sp, #108	; 0x6c
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	4642      	mov	r2, r8
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	4650      	mov	r0, sl
 8004e7e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004e82:	f002 f92d 	bl	80070e0 <__d2b>
 8004e86:	901a      	str	r0, [sp, #104]	; 0x68
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	f43f aef8 	beq.w	8004c7e <_strtod_l+0x47e>
 8004e8e:	2101      	movs	r1, #1
 8004e90:	4650      	mov	r0, sl
 8004e92:	f001 fe7b 	bl	8006b8c <__i2b>
 8004e96:	4603      	mov	r3, r0
 8004e98:	9004      	str	r0, [sp, #16]
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	f43f aeef 	beq.w	8004c7e <_strtod_l+0x47e>
 8004ea0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004ea2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	bfab      	itete	ge
 8004ea8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004eaa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004eac:	18ee      	addge	r6, r5, r3
 8004eae:	1b5c      	sublt	r4, r3, r5
 8004eb0:	9b05      	ldr	r3, [sp, #20]
 8004eb2:	bfa8      	it	ge
 8004eb4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004eb6:	eba5 0503 	sub.w	r5, r5, r3
 8004eba:	4415      	add	r5, r2
 8004ebc:	4b6e      	ldr	r3, [pc, #440]	; (8005078 <_strtod_l+0x878>)
 8004ebe:	f105 35ff 	add.w	r5, r5, #4294967295
 8004ec2:	bfb8      	it	lt
 8004ec4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004ec6:	429d      	cmp	r5, r3
 8004ec8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004ecc:	f280 80c4 	bge.w	8005058 <_strtod_l+0x858>
 8004ed0:	1b5b      	subs	r3, r3, r5
 8004ed2:	2b1f      	cmp	r3, #31
 8004ed4:	f04f 0701 	mov.w	r7, #1
 8004ed8:	eba2 0203 	sub.w	r2, r2, r3
 8004edc:	f300 80b1 	bgt.w	8005042 <_strtod_l+0x842>
 8004ee0:	2500      	movs	r5, #0
 8004ee2:	fa07 f303 	lsl.w	r3, r7, r3
 8004ee6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ee8:	18b7      	adds	r7, r6, r2
 8004eea:	9b05      	ldr	r3, [sp, #20]
 8004eec:	42be      	cmp	r6, r7
 8004eee:	4414      	add	r4, r2
 8004ef0:	441c      	add	r4, r3
 8004ef2:	4633      	mov	r3, r6
 8004ef4:	bfa8      	it	ge
 8004ef6:	463b      	movge	r3, r7
 8004ef8:	42a3      	cmp	r3, r4
 8004efa:	bfa8      	it	ge
 8004efc:	4623      	movge	r3, r4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bfc2      	ittt	gt
 8004f02:	1aff      	subgt	r7, r7, r3
 8004f04:	1ae4      	subgt	r4, r4, r3
 8004f06:	1af6      	subgt	r6, r6, r3
 8004f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	dd17      	ble.n	8004f3e <_strtod_l+0x73e>
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4650      	mov	r0, sl
 8004f12:	9904      	ldr	r1, [sp, #16]
 8004f14:	f001 fef8 	bl	8006d08 <__pow5mult>
 8004f18:	9004      	str	r0, [sp, #16]
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	f43f aeaf 	beq.w	8004c7e <_strtod_l+0x47e>
 8004f20:	4601      	mov	r1, r0
 8004f22:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004f24:	4650      	mov	r0, sl
 8004f26:	f001 fe47 	bl	8006bb8 <__multiply>
 8004f2a:	9009      	str	r0, [sp, #36]	; 0x24
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	f43f aea6 	beq.w	8004c7e <_strtod_l+0x47e>
 8004f32:	4650      	mov	r0, sl
 8004f34:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004f36:	f001 fd29 	bl	800698c <_Bfree>
 8004f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f3e:	2f00      	cmp	r7, #0
 8004f40:	f300 808e 	bgt.w	8005060 <_strtod_l+0x860>
 8004f44:	9b07      	ldr	r3, [sp, #28]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	dd08      	ble.n	8004f5c <_strtod_l+0x75c>
 8004f4a:	4650      	mov	r0, sl
 8004f4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004f4e:	9906      	ldr	r1, [sp, #24]
 8004f50:	f001 feda 	bl	8006d08 <__pow5mult>
 8004f54:	9006      	str	r0, [sp, #24]
 8004f56:	2800      	cmp	r0, #0
 8004f58:	f43f ae91 	beq.w	8004c7e <_strtod_l+0x47e>
 8004f5c:	2c00      	cmp	r4, #0
 8004f5e:	dd08      	ble.n	8004f72 <_strtod_l+0x772>
 8004f60:	4622      	mov	r2, r4
 8004f62:	4650      	mov	r0, sl
 8004f64:	9906      	ldr	r1, [sp, #24]
 8004f66:	f001 ff29 	bl	8006dbc <__lshift>
 8004f6a:	9006      	str	r0, [sp, #24]
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	f43f ae86 	beq.w	8004c7e <_strtod_l+0x47e>
 8004f72:	2e00      	cmp	r6, #0
 8004f74:	dd08      	ble.n	8004f88 <_strtod_l+0x788>
 8004f76:	4632      	mov	r2, r6
 8004f78:	4650      	mov	r0, sl
 8004f7a:	9904      	ldr	r1, [sp, #16]
 8004f7c:	f001 ff1e 	bl	8006dbc <__lshift>
 8004f80:	9004      	str	r0, [sp, #16]
 8004f82:	2800      	cmp	r0, #0
 8004f84:	f43f ae7b 	beq.w	8004c7e <_strtod_l+0x47e>
 8004f88:	4650      	mov	r0, sl
 8004f8a:	9a06      	ldr	r2, [sp, #24]
 8004f8c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004f8e:	f001 ffa1 	bl	8006ed4 <__mdiff>
 8004f92:	4683      	mov	fp, r0
 8004f94:	2800      	cmp	r0, #0
 8004f96:	f43f ae72 	beq.w	8004c7e <_strtod_l+0x47e>
 8004f9a:	2400      	movs	r4, #0
 8004f9c:	68c3      	ldr	r3, [r0, #12]
 8004f9e:	9904      	ldr	r1, [sp, #16]
 8004fa0:	60c4      	str	r4, [r0, #12]
 8004fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fa4:	f001 ff7a 	bl	8006e9c <__mcmp>
 8004fa8:	42a0      	cmp	r0, r4
 8004faa:	da6b      	bge.n	8005084 <_strtod_l+0x884>
 8004fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fae:	ea53 0308 	orrs.w	r3, r3, r8
 8004fb2:	f040 8091 	bne.w	80050d8 <_strtod_l+0x8d8>
 8004fb6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 808c 	bne.w	80050d8 <_strtod_l+0x8d8>
 8004fc0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fc4:	0d1b      	lsrs	r3, r3, #20
 8004fc6:	051b      	lsls	r3, r3, #20
 8004fc8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004fcc:	f240 8084 	bls.w	80050d8 <_strtod_l+0x8d8>
 8004fd0:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004fd4:	b91b      	cbnz	r3, 8004fde <_strtod_l+0x7de>
 8004fd6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	dd7c      	ble.n	80050d8 <_strtod_l+0x8d8>
 8004fde:	4659      	mov	r1, fp
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	f001 feea 	bl	8006dbc <__lshift>
 8004fe8:	9904      	ldr	r1, [sp, #16]
 8004fea:	4683      	mov	fp, r0
 8004fec:	f001 ff56 	bl	8006e9c <__mcmp>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	dd71      	ble.n	80050d8 <_strtod_l+0x8d8>
 8004ff4:	9905      	ldr	r1, [sp, #20]
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	4a20      	ldr	r2, [pc, #128]	; (800507c <_strtod_l+0x87c>)
 8004ffa:	2900      	cmp	r1, #0
 8004ffc:	f000 808c 	beq.w	8005118 <_strtod_l+0x918>
 8005000:	ea02 0109 	and.w	r1, r2, r9
 8005004:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005008:	f300 8086 	bgt.w	8005118 <_strtod_l+0x918>
 800500c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005010:	f77f aeaa 	ble.w	8004d68 <_strtod_l+0x568>
 8005014:	4640      	mov	r0, r8
 8005016:	4649      	mov	r1, r9
 8005018:	4b19      	ldr	r3, [pc, #100]	; (8005080 <_strtod_l+0x880>)
 800501a:	2200      	movs	r2, #0
 800501c:	f7fb fa5c 	bl	80004d8 <__aeabi_dmul>
 8005020:	460b      	mov	r3, r1
 8005022:	4303      	orrs	r3, r0
 8005024:	bf08      	it	eq
 8005026:	2322      	moveq	r3, #34	; 0x22
 8005028:	4680      	mov	r8, r0
 800502a:	4689      	mov	r9, r1
 800502c:	bf08      	it	eq
 800502e:	f8ca 3000 	streq.w	r3, [sl]
 8005032:	e62f      	b.n	8004c94 <_strtod_l+0x494>
 8005034:	f04f 32ff 	mov.w	r2, #4294967295
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	ea03 0808 	and.w	r8, r3, r8
 8005040:	e6e0      	b.n	8004e04 <_strtod_l+0x604>
 8005042:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005046:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800504a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800504e:	35e2      	adds	r5, #226	; 0xe2
 8005050:	fa07 f505 	lsl.w	r5, r7, r5
 8005054:	970f      	str	r7, [sp, #60]	; 0x3c
 8005056:	e747      	b.n	8004ee8 <_strtod_l+0x6e8>
 8005058:	2301      	movs	r3, #1
 800505a:	2500      	movs	r5, #0
 800505c:	930f      	str	r3, [sp, #60]	; 0x3c
 800505e:	e743      	b.n	8004ee8 <_strtod_l+0x6e8>
 8005060:	463a      	mov	r2, r7
 8005062:	4650      	mov	r0, sl
 8005064:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005066:	f001 fea9 	bl	8006dbc <__lshift>
 800506a:	901a      	str	r0, [sp, #104]	; 0x68
 800506c:	2800      	cmp	r0, #0
 800506e:	f47f af69 	bne.w	8004f44 <_strtod_l+0x744>
 8005072:	e604      	b.n	8004c7e <_strtod_l+0x47e>
 8005074:	080083c0 	.word	0x080083c0
 8005078:	fffffc02 	.word	0xfffffc02
 800507c:	7ff00000 	.word	0x7ff00000
 8005080:	39500000 	.word	0x39500000
 8005084:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005088:	d165      	bne.n	8005156 <_strtod_l+0x956>
 800508a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800508c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005090:	b35a      	cbz	r2, 80050ea <_strtod_l+0x8ea>
 8005092:	4a99      	ldr	r2, [pc, #612]	; (80052f8 <_strtod_l+0xaf8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d12b      	bne.n	80050f0 <_strtod_l+0x8f0>
 8005098:	9b05      	ldr	r3, [sp, #20]
 800509a:	4641      	mov	r1, r8
 800509c:	b303      	cbz	r3, 80050e0 <_strtod_l+0x8e0>
 800509e:	464a      	mov	r2, r9
 80050a0:	4b96      	ldr	r3, [pc, #600]	; (80052fc <_strtod_l+0xafc>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80050a8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ac:	d81b      	bhi.n	80050e6 <_strtod_l+0x8e6>
 80050ae:	0d1b      	lsrs	r3, r3, #20
 80050b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	4299      	cmp	r1, r3
 80050ba:	d119      	bne.n	80050f0 <_strtod_l+0x8f0>
 80050bc:	4b90      	ldr	r3, [pc, #576]	; (8005300 <_strtod_l+0xb00>)
 80050be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d102      	bne.n	80050ca <_strtod_l+0x8ca>
 80050c4:	3101      	adds	r1, #1
 80050c6:	f43f adda 	beq.w	8004c7e <_strtod_l+0x47e>
 80050ca:	f04f 0800 	mov.w	r8, #0
 80050ce:	4b8b      	ldr	r3, [pc, #556]	; (80052fc <_strtod_l+0xafc>)
 80050d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050d2:	401a      	ands	r2, r3
 80050d4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80050d8:	9b05      	ldr	r3, [sp, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d19a      	bne.n	8005014 <_strtod_l+0x814>
 80050de:	e5d9      	b.n	8004c94 <_strtod_l+0x494>
 80050e0:	f04f 33ff 	mov.w	r3, #4294967295
 80050e4:	e7e8      	b.n	80050b8 <_strtod_l+0x8b8>
 80050e6:	4613      	mov	r3, r2
 80050e8:	e7e6      	b.n	80050b8 <_strtod_l+0x8b8>
 80050ea:	ea53 0308 	orrs.w	r3, r3, r8
 80050ee:	d081      	beq.n	8004ff4 <_strtod_l+0x7f4>
 80050f0:	b1e5      	cbz	r5, 800512c <_strtod_l+0x92c>
 80050f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f4:	421d      	tst	r5, r3
 80050f6:	d0ef      	beq.n	80050d8 <_strtod_l+0x8d8>
 80050f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050fa:	4640      	mov	r0, r8
 80050fc:	4649      	mov	r1, r9
 80050fe:	9a05      	ldr	r2, [sp, #20]
 8005100:	b1c3      	cbz	r3, 8005134 <_strtod_l+0x934>
 8005102:	f7ff fb5b 	bl	80047bc <sulp>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800510e:	f7fb f82d 	bl	800016c <__adddf3>
 8005112:	4680      	mov	r8, r0
 8005114:	4689      	mov	r9, r1
 8005116:	e7df      	b.n	80050d8 <_strtod_l+0x8d8>
 8005118:	4013      	ands	r3, r2
 800511a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800511e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005122:	f04f 38ff 	mov.w	r8, #4294967295
 8005126:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800512a:	e7d5      	b.n	80050d8 <_strtod_l+0x8d8>
 800512c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800512e:	ea13 0f08 	tst.w	r3, r8
 8005132:	e7e0      	b.n	80050f6 <_strtod_l+0x8f6>
 8005134:	f7ff fb42 	bl	80047bc <sulp>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005140:	f7fb f812 	bl	8000168 <__aeabi_dsub>
 8005144:	2200      	movs	r2, #0
 8005146:	2300      	movs	r3, #0
 8005148:	4680      	mov	r8, r0
 800514a:	4689      	mov	r9, r1
 800514c:	f7fb fc2c 	bl	80009a8 <__aeabi_dcmpeq>
 8005150:	2800      	cmp	r0, #0
 8005152:	d0c1      	beq.n	80050d8 <_strtod_l+0x8d8>
 8005154:	e608      	b.n	8004d68 <_strtod_l+0x568>
 8005156:	4658      	mov	r0, fp
 8005158:	9904      	ldr	r1, [sp, #16]
 800515a:	f002 f81d 	bl	8007198 <__ratio>
 800515e:	2200      	movs	r2, #0
 8005160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005164:	4606      	mov	r6, r0
 8005166:	460f      	mov	r7, r1
 8005168:	f7fb fc32 	bl	80009d0 <__aeabi_dcmple>
 800516c:	2800      	cmp	r0, #0
 800516e:	d070      	beq.n	8005252 <_strtod_l+0xa52>
 8005170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d042      	beq.n	80051fc <_strtod_l+0x9fc>
 8005176:	2600      	movs	r6, #0
 8005178:	4f62      	ldr	r7, [pc, #392]	; (8005304 <_strtod_l+0xb04>)
 800517a:	4d62      	ldr	r5, [pc, #392]	; (8005304 <_strtod_l+0xb04>)
 800517c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800517e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005182:	0d1b      	lsrs	r3, r3, #20
 8005184:	051b      	lsls	r3, r3, #20
 8005186:	930f      	str	r3, [sp, #60]	; 0x3c
 8005188:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800518a:	4b5f      	ldr	r3, [pc, #380]	; (8005308 <_strtod_l+0xb08>)
 800518c:	429a      	cmp	r2, r3
 800518e:	f040 80c3 	bne.w	8005318 <_strtod_l+0xb18>
 8005192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005194:	4640      	mov	r0, r8
 8005196:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800519a:	4649      	mov	r1, r9
 800519c:	f001 ff26 	bl	8006fec <__ulp>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4630      	mov	r0, r6
 80051a6:	4639      	mov	r1, r7
 80051a8:	f7fb f996 	bl	80004d8 <__aeabi_dmul>
 80051ac:	4642      	mov	r2, r8
 80051ae:	464b      	mov	r3, r9
 80051b0:	f7fa ffdc 	bl	800016c <__adddf3>
 80051b4:	460b      	mov	r3, r1
 80051b6:	4951      	ldr	r1, [pc, #324]	; (80052fc <_strtod_l+0xafc>)
 80051b8:	4a54      	ldr	r2, [pc, #336]	; (800530c <_strtod_l+0xb0c>)
 80051ba:	4019      	ands	r1, r3
 80051bc:	4291      	cmp	r1, r2
 80051be:	4680      	mov	r8, r0
 80051c0:	d95d      	bls.n	800527e <_strtod_l+0xa7e>
 80051c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051c4:	4b4e      	ldr	r3, [pc, #312]	; (8005300 <_strtod_l+0xb00>)
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d103      	bne.n	80051d2 <_strtod_l+0x9d2>
 80051ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051cc:	3301      	adds	r3, #1
 80051ce:	f43f ad56 	beq.w	8004c7e <_strtod_l+0x47e>
 80051d2:	f04f 38ff 	mov.w	r8, #4294967295
 80051d6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005300 <_strtod_l+0xb00>
 80051da:	4650      	mov	r0, sl
 80051dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80051de:	f001 fbd5 	bl	800698c <_Bfree>
 80051e2:	4650      	mov	r0, sl
 80051e4:	9906      	ldr	r1, [sp, #24]
 80051e6:	f001 fbd1 	bl	800698c <_Bfree>
 80051ea:	4650      	mov	r0, sl
 80051ec:	9904      	ldr	r1, [sp, #16]
 80051ee:	f001 fbcd 	bl	800698c <_Bfree>
 80051f2:	4659      	mov	r1, fp
 80051f4:	4650      	mov	r0, sl
 80051f6:	f001 fbc9 	bl	800698c <_Bfree>
 80051fa:	e627      	b.n	8004e4c <_strtod_l+0x64c>
 80051fc:	f1b8 0f00 	cmp.w	r8, #0
 8005200:	d119      	bne.n	8005236 <_strtod_l+0xa36>
 8005202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005208:	b9e3      	cbnz	r3, 8005244 <_strtod_l+0xa44>
 800520a:	2200      	movs	r2, #0
 800520c:	4630      	mov	r0, r6
 800520e:	4639      	mov	r1, r7
 8005210:	4b3c      	ldr	r3, [pc, #240]	; (8005304 <_strtod_l+0xb04>)
 8005212:	f7fb fbd3 	bl	80009bc <__aeabi_dcmplt>
 8005216:	b9c8      	cbnz	r0, 800524c <_strtod_l+0xa4c>
 8005218:	2200      	movs	r2, #0
 800521a:	4630      	mov	r0, r6
 800521c:	4639      	mov	r1, r7
 800521e:	4b3c      	ldr	r3, [pc, #240]	; (8005310 <_strtod_l+0xb10>)
 8005220:	f7fb f95a 	bl	80004d8 <__aeabi_dmul>
 8005224:	4604      	mov	r4, r0
 8005226:	460d      	mov	r5, r1
 8005228:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800522c:	9416      	str	r4, [sp, #88]	; 0x58
 800522e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005230:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005234:	e7a2      	b.n	800517c <_strtod_l+0x97c>
 8005236:	f1b8 0f01 	cmp.w	r8, #1
 800523a:	d103      	bne.n	8005244 <_strtod_l+0xa44>
 800523c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	f43f ad92 	beq.w	8004d68 <_strtod_l+0x568>
 8005244:	2600      	movs	r6, #0
 8005246:	2400      	movs	r4, #0
 8005248:	4f32      	ldr	r7, [pc, #200]	; (8005314 <_strtod_l+0xb14>)
 800524a:	e796      	b.n	800517a <_strtod_l+0x97a>
 800524c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800524e:	4d30      	ldr	r5, [pc, #192]	; (8005310 <_strtod_l+0xb10>)
 8005250:	e7ea      	b.n	8005228 <_strtod_l+0xa28>
 8005252:	4b2f      	ldr	r3, [pc, #188]	; (8005310 <_strtod_l+0xb10>)
 8005254:	2200      	movs	r2, #0
 8005256:	4630      	mov	r0, r6
 8005258:	4639      	mov	r1, r7
 800525a:	f7fb f93d 	bl	80004d8 <__aeabi_dmul>
 800525e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005260:	4604      	mov	r4, r0
 8005262:	460d      	mov	r5, r1
 8005264:	b933      	cbnz	r3, 8005274 <_strtod_l+0xa74>
 8005266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800526a:	9010      	str	r0, [sp, #64]	; 0x40
 800526c:	9311      	str	r3, [sp, #68]	; 0x44
 800526e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005272:	e783      	b.n	800517c <_strtod_l+0x97c>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800527c:	e7f7      	b.n	800526e <_strtod_l+0xa6e>
 800527e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005282:	9b05      	ldr	r3, [sp, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1a8      	bne.n	80051da <_strtod_l+0x9da>
 8005288:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800528c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800528e:	0d1b      	lsrs	r3, r3, #20
 8005290:	051b      	lsls	r3, r3, #20
 8005292:	429a      	cmp	r2, r3
 8005294:	d1a1      	bne.n	80051da <_strtod_l+0x9da>
 8005296:	4620      	mov	r0, r4
 8005298:	4629      	mov	r1, r5
 800529a:	f7fb fc65 	bl	8000b68 <__aeabi_d2lz>
 800529e:	f7fb f8ed 	bl	800047c <__aeabi_l2d>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4620      	mov	r0, r4
 80052a8:	4629      	mov	r1, r5
 80052aa:	f7fa ff5d 	bl	8000168 <__aeabi_dsub>
 80052ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052b4:	ea43 0308 	orr.w	r3, r3, r8
 80052b8:	4313      	orrs	r3, r2
 80052ba:	4604      	mov	r4, r0
 80052bc:	460d      	mov	r5, r1
 80052be:	d066      	beq.n	800538e <_strtod_l+0xb8e>
 80052c0:	a309      	add	r3, pc, #36	; (adr r3, 80052e8 <_strtod_l+0xae8>)
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f7fb fb79 	bl	80009bc <__aeabi_dcmplt>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	f47f ace2 	bne.w	8004c94 <_strtod_l+0x494>
 80052d0:	a307      	add	r3, pc, #28	; (adr r3, 80052f0 <_strtod_l+0xaf0>)
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	4620      	mov	r0, r4
 80052d8:	4629      	mov	r1, r5
 80052da:	f7fb fb8d 	bl	80009f8 <__aeabi_dcmpgt>
 80052de:	2800      	cmp	r0, #0
 80052e0:	f43f af7b 	beq.w	80051da <_strtod_l+0x9da>
 80052e4:	e4d6      	b.n	8004c94 <_strtod_l+0x494>
 80052e6:	bf00      	nop
 80052e8:	94a03595 	.word	0x94a03595
 80052ec:	3fdfffff 	.word	0x3fdfffff
 80052f0:	35afe535 	.word	0x35afe535
 80052f4:	3fe00000 	.word	0x3fe00000
 80052f8:	000fffff 	.word	0x000fffff
 80052fc:	7ff00000 	.word	0x7ff00000
 8005300:	7fefffff 	.word	0x7fefffff
 8005304:	3ff00000 	.word	0x3ff00000
 8005308:	7fe00000 	.word	0x7fe00000
 800530c:	7c9fffff 	.word	0x7c9fffff
 8005310:	3fe00000 	.word	0x3fe00000
 8005314:	bff00000 	.word	0xbff00000
 8005318:	9b05      	ldr	r3, [sp, #20]
 800531a:	b313      	cbz	r3, 8005362 <_strtod_l+0xb62>
 800531c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800531e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005322:	d81e      	bhi.n	8005362 <_strtod_l+0xb62>
 8005324:	a326      	add	r3, pc, #152	; (adr r3, 80053c0 <_strtod_l+0xbc0>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	4620      	mov	r0, r4
 800532c:	4629      	mov	r1, r5
 800532e:	f7fb fb4f 	bl	80009d0 <__aeabi_dcmple>
 8005332:	b190      	cbz	r0, 800535a <_strtod_l+0xb5a>
 8005334:	4629      	mov	r1, r5
 8005336:	4620      	mov	r0, r4
 8005338:	f7fb fba6 	bl	8000a88 <__aeabi_d2uiz>
 800533c:	2801      	cmp	r0, #1
 800533e:	bf38      	it	cc
 8005340:	2001      	movcc	r0, #1
 8005342:	f7fb f84f 	bl	80003e4 <__aeabi_ui2d>
 8005346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005348:	4604      	mov	r4, r0
 800534a:	460d      	mov	r5, r1
 800534c:	b9d3      	cbnz	r3, 8005384 <_strtod_l+0xb84>
 800534e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005352:	9012      	str	r0, [sp, #72]	; 0x48
 8005354:	9313      	str	r3, [sp, #76]	; 0x4c
 8005356:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800535a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800535c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005360:	1a9f      	subs	r7, r3, r2
 8005362:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005366:	f001 fe41 	bl	8006fec <__ulp>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4630      	mov	r0, r6
 8005370:	4639      	mov	r1, r7
 8005372:	f7fb f8b1 	bl	80004d8 <__aeabi_dmul>
 8005376:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800537a:	f7fa fef7 	bl	800016c <__adddf3>
 800537e:	4680      	mov	r8, r0
 8005380:	4689      	mov	r9, r1
 8005382:	e77e      	b.n	8005282 <_strtod_l+0xa82>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800538c:	e7e3      	b.n	8005356 <_strtod_l+0xb56>
 800538e:	a30e      	add	r3, pc, #56	; (adr r3, 80053c8 <_strtod_l+0xbc8>)
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f7fb fb12 	bl	80009bc <__aeabi_dcmplt>
 8005398:	e7a1      	b.n	80052de <_strtod_l+0xade>
 800539a:	2300      	movs	r3, #0
 800539c:	930a      	str	r3, [sp, #40]	; 0x28
 800539e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80053a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	f7ff ba71 	b.w	800488a <_strtod_l+0x8a>
 80053a8:	2a65      	cmp	r2, #101	; 0x65
 80053aa:	f43f ab63 	beq.w	8004a74 <_strtod_l+0x274>
 80053ae:	2a45      	cmp	r2, #69	; 0x45
 80053b0:	f43f ab60 	beq.w	8004a74 <_strtod_l+0x274>
 80053b4:	2301      	movs	r3, #1
 80053b6:	f7ff bb95 	b.w	8004ae4 <_strtod_l+0x2e4>
 80053ba:	bf00      	nop
 80053bc:	f3af 8000 	nop.w
 80053c0:	ffc00000 	.word	0xffc00000
 80053c4:	41dfffff 	.word	0x41dfffff
 80053c8:	94a03595 	.word	0x94a03595
 80053cc:	3fcfffff 	.word	0x3fcfffff

080053d0 <_strtod_r>:
 80053d0:	4b01      	ldr	r3, [pc, #4]	; (80053d8 <_strtod_r+0x8>)
 80053d2:	f7ff ba15 	b.w	8004800 <_strtod_l>
 80053d6:	bf00      	nop
 80053d8:	20000074 	.word	0x20000074

080053dc <_strtol_l.constprop.0>:
 80053dc:	2b01      	cmp	r3, #1
 80053de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e2:	4680      	mov	r8, r0
 80053e4:	d001      	beq.n	80053ea <_strtol_l.constprop.0+0xe>
 80053e6:	2b24      	cmp	r3, #36	; 0x24
 80053e8:	d906      	bls.n	80053f8 <_strtol_l.constprop.0+0x1c>
 80053ea:	f7fe faef 	bl	80039cc <__errno>
 80053ee:	2316      	movs	r3, #22
 80053f0:	6003      	str	r3, [r0, #0]
 80053f2:	2000      	movs	r0, #0
 80053f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f8:	460d      	mov	r5, r1
 80053fa:	4f35      	ldr	r7, [pc, #212]	; (80054d0 <_strtol_l.constprop.0+0xf4>)
 80053fc:	4628      	mov	r0, r5
 80053fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005402:	5de6      	ldrb	r6, [r4, r7]
 8005404:	f016 0608 	ands.w	r6, r6, #8
 8005408:	d1f8      	bne.n	80053fc <_strtol_l.constprop.0+0x20>
 800540a:	2c2d      	cmp	r4, #45	; 0x2d
 800540c:	d12f      	bne.n	800546e <_strtol_l.constprop.0+0x92>
 800540e:	2601      	movs	r6, #1
 8005410:	782c      	ldrb	r4, [r5, #0]
 8005412:	1c85      	adds	r5, r0, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d057      	beq.n	80054c8 <_strtol_l.constprop.0+0xec>
 8005418:	2b10      	cmp	r3, #16
 800541a:	d109      	bne.n	8005430 <_strtol_l.constprop.0+0x54>
 800541c:	2c30      	cmp	r4, #48	; 0x30
 800541e:	d107      	bne.n	8005430 <_strtol_l.constprop.0+0x54>
 8005420:	7828      	ldrb	r0, [r5, #0]
 8005422:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005426:	2858      	cmp	r0, #88	; 0x58
 8005428:	d149      	bne.n	80054be <_strtol_l.constprop.0+0xe2>
 800542a:	2310      	movs	r3, #16
 800542c:	786c      	ldrb	r4, [r5, #1]
 800542e:	3502      	adds	r5, #2
 8005430:	2700      	movs	r7, #0
 8005432:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005436:	f10e 3eff 	add.w	lr, lr, #4294967295
 800543a:	fbbe f9f3 	udiv	r9, lr, r3
 800543e:	4638      	mov	r0, r7
 8005440:	fb03 ea19 	mls	sl, r3, r9, lr
 8005444:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005448:	f1bc 0f09 	cmp.w	ip, #9
 800544c:	d814      	bhi.n	8005478 <_strtol_l.constprop.0+0x9c>
 800544e:	4664      	mov	r4, ip
 8005450:	42a3      	cmp	r3, r4
 8005452:	dd22      	ble.n	800549a <_strtol_l.constprop.0+0xbe>
 8005454:	2f00      	cmp	r7, #0
 8005456:	db1d      	blt.n	8005494 <_strtol_l.constprop.0+0xb8>
 8005458:	4581      	cmp	r9, r0
 800545a:	d31b      	bcc.n	8005494 <_strtol_l.constprop.0+0xb8>
 800545c:	d101      	bne.n	8005462 <_strtol_l.constprop.0+0x86>
 800545e:	45a2      	cmp	sl, r4
 8005460:	db18      	blt.n	8005494 <_strtol_l.constprop.0+0xb8>
 8005462:	2701      	movs	r7, #1
 8005464:	fb00 4003 	mla	r0, r0, r3, r4
 8005468:	f815 4b01 	ldrb.w	r4, [r5], #1
 800546c:	e7ea      	b.n	8005444 <_strtol_l.constprop.0+0x68>
 800546e:	2c2b      	cmp	r4, #43	; 0x2b
 8005470:	bf04      	itt	eq
 8005472:	782c      	ldrbeq	r4, [r5, #0]
 8005474:	1c85      	addeq	r5, r0, #2
 8005476:	e7cd      	b.n	8005414 <_strtol_l.constprop.0+0x38>
 8005478:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800547c:	f1bc 0f19 	cmp.w	ip, #25
 8005480:	d801      	bhi.n	8005486 <_strtol_l.constprop.0+0xaa>
 8005482:	3c37      	subs	r4, #55	; 0x37
 8005484:	e7e4      	b.n	8005450 <_strtol_l.constprop.0+0x74>
 8005486:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800548a:	f1bc 0f19 	cmp.w	ip, #25
 800548e:	d804      	bhi.n	800549a <_strtol_l.constprop.0+0xbe>
 8005490:	3c57      	subs	r4, #87	; 0x57
 8005492:	e7dd      	b.n	8005450 <_strtol_l.constprop.0+0x74>
 8005494:	f04f 37ff 	mov.w	r7, #4294967295
 8005498:	e7e6      	b.n	8005468 <_strtol_l.constprop.0+0x8c>
 800549a:	2f00      	cmp	r7, #0
 800549c:	da07      	bge.n	80054ae <_strtol_l.constprop.0+0xd2>
 800549e:	2322      	movs	r3, #34	; 0x22
 80054a0:	4670      	mov	r0, lr
 80054a2:	f8c8 3000 	str.w	r3, [r8]
 80054a6:	2a00      	cmp	r2, #0
 80054a8:	d0a4      	beq.n	80053f4 <_strtol_l.constprop.0+0x18>
 80054aa:	1e69      	subs	r1, r5, #1
 80054ac:	e005      	b.n	80054ba <_strtol_l.constprop.0+0xde>
 80054ae:	b106      	cbz	r6, 80054b2 <_strtol_l.constprop.0+0xd6>
 80054b0:	4240      	negs	r0, r0
 80054b2:	2a00      	cmp	r2, #0
 80054b4:	d09e      	beq.n	80053f4 <_strtol_l.constprop.0+0x18>
 80054b6:	2f00      	cmp	r7, #0
 80054b8:	d1f7      	bne.n	80054aa <_strtol_l.constprop.0+0xce>
 80054ba:	6011      	str	r1, [r2, #0]
 80054bc:	e79a      	b.n	80053f4 <_strtol_l.constprop.0+0x18>
 80054be:	2430      	movs	r4, #48	; 0x30
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1b5      	bne.n	8005430 <_strtol_l.constprop.0+0x54>
 80054c4:	2308      	movs	r3, #8
 80054c6:	e7b3      	b.n	8005430 <_strtol_l.constprop.0+0x54>
 80054c8:	2c30      	cmp	r4, #48	; 0x30
 80054ca:	d0a9      	beq.n	8005420 <_strtol_l.constprop.0+0x44>
 80054cc:	230a      	movs	r3, #10
 80054ce:	e7af      	b.n	8005430 <_strtol_l.constprop.0+0x54>
 80054d0:	080083e9 	.word	0x080083e9

080054d4 <_strtol_r>:
 80054d4:	f7ff bf82 	b.w	80053dc <_strtol_l.constprop.0>

080054d8 <quorem>:
 80054d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	6903      	ldr	r3, [r0, #16]
 80054de:	690c      	ldr	r4, [r1, #16]
 80054e0:	4607      	mov	r7, r0
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	f2c0 8082 	blt.w	80055ec <quorem+0x114>
 80054e8:	3c01      	subs	r4, #1
 80054ea:	f100 0514 	add.w	r5, r0, #20
 80054ee:	f101 0814 	add.w	r8, r1, #20
 80054f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005500:	3301      	adds	r3, #1
 8005502:	429a      	cmp	r2, r3
 8005504:	fbb2 f6f3 	udiv	r6, r2, r3
 8005508:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800550c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005510:	d331      	bcc.n	8005576 <quorem+0x9e>
 8005512:	f04f 0e00 	mov.w	lr, #0
 8005516:	4640      	mov	r0, r8
 8005518:	46ac      	mov	ip, r5
 800551a:	46f2      	mov	sl, lr
 800551c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005520:	b293      	uxth	r3, r2
 8005522:	fb06 e303 	mla	r3, r6, r3, lr
 8005526:	0c12      	lsrs	r2, r2, #16
 8005528:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800552c:	b29b      	uxth	r3, r3
 800552e:	fb06 e202 	mla	r2, r6, r2, lr
 8005532:	ebaa 0303 	sub.w	r3, sl, r3
 8005536:	f8dc a000 	ldr.w	sl, [ip]
 800553a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800553e:	fa1f fa8a 	uxth.w	sl, sl
 8005542:	4453      	add	r3, sl
 8005544:	f8dc a000 	ldr.w	sl, [ip]
 8005548:	b292      	uxth	r2, r2
 800554a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800554e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005552:	b29b      	uxth	r3, r3
 8005554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005558:	4581      	cmp	r9, r0
 800555a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800555e:	f84c 3b04 	str.w	r3, [ip], #4
 8005562:	d2db      	bcs.n	800551c <quorem+0x44>
 8005564:	f855 300b 	ldr.w	r3, [r5, fp]
 8005568:	b92b      	cbnz	r3, 8005576 <quorem+0x9e>
 800556a:	9b01      	ldr	r3, [sp, #4]
 800556c:	3b04      	subs	r3, #4
 800556e:	429d      	cmp	r5, r3
 8005570:	461a      	mov	r2, r3
 8005572:	d32f      	bcc.n	80055d4 <quorem+0xfc>
 8005574:	613c      	str	r4, [r7, #16]
 8005576:	4638      	mov	r0, r7
 8005578:	f001 fc90 	bl	8006e9c <__mcmp>
 800557c:	2800      	cmp	r0, #0
 800557e:	db25      	blt.n	80055cc <quorem+0xf4>
 8005580:	4628      	mov	r0, r5
 8005582:	f04f 0c00 	mov.w	ip, #0
 8005586:	3601      	adds	r6, #1
 8005588:	f858 1b04 	ldr.w	r1, [r8], #4
 800558c:	f8d0 e000 	ldr.w	lr, [r0]
 8005590:	b28b      	uxth	r3, r1
 8005592:	ebac 0303 	sub.w	r3, ip, r3
 8005596:	fa1f f28e 	uxth.w	r2, lr
 800559a:	4413      	add	r3, r2
 800559c:	0c0a      	lsrs	r2, r1, #16
 800559e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055ac:	45c1      	cmp	r9, r8
 80055ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055b2:	f840 3b04 	str.w	r3, [r0], #4
 80055b6:	d2e7      	bcs.n	8005588 <quorem+0xb0>
 80055b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055c0:	b922      	cbnz	r2, 80055cc <quorem+0xf4>
 80055c2:	3b04      	subs	r3, #4
 80055c4:	429d      	cmp	r5, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	d30a      	bcc.n	80055e0 <quorem+0x108>
 80055ca:	613c      	str	r4, [r7, #16]
 80055cc:	4630      	mov	r0, r6
 80055ce:	b003      	add	sp, #12
 80055d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	3b04      	subs	r3, #4
 80055d8:	2a00      	cmp	r2, #0
 80055da:	d1cb      	bne.n	8005574 <quorem+0x9c>
 80055dc:	3c01      	subs	r4, #1
 80055de:	e7c6      	b.n	800556e <quorem+0x96>
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	3b04      	subs	r3, #4
 80055e4:	2a00      	cmp	r2, #0
 80055e6:	d1f0      	bne.n	80055ca <quorem+0xf2>
 80055e8:	3c01      	subs	r4, #1
 80055ea:	e7eb      	b.n	80055c4 <quorem+0xec>
 80055ec:	2000      	movs	r0, #0
 80055ee:	e7ee      	b.n	80055ce <quorem+0xf6>

080055f0 <_dtoa_r>:
 80055f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	4616      	mov	r6, r2
 80055f6:	461f      	mov	r7, r3
 80055f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80055fa:	b099      	sub	sp, #100	; 0x64
 80055fc:	4605      	mov	r5, r0
 80055fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005602:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005606:	b974      	cbnz	r4, 8005626 <_dtoa_r+0x36>
 8005608:	2010      	movs	r0, #16
 800560a:	f001 f949 	bl	80068a0 <malloc>
 800560e:	4602      	mov	r2, r0
 8005610:	6268      	str	r0, [r5, #36]	; 0x24
 8005612:	b920      	cbnz	r0, 800561e <_dtoa_r+0x2e>
 8005614:	21ea      	movs	r1, #234	; 0xea
 8005616:	4ba8      	ldr	r3, [pc, #672]	; (80058b8 <_dtoa_r+0x2c8>)
 8005618:	48a8      	ldr	r0, [pc, #672]	; (80058bc <_dtoa_r+0x2cc>)
 800561a:	f002 f8b3 	bl	8007784 <__assert_func>
 800561e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005622:	6004      	str	r4, [r0, #0]
 8005624:	60c4      	str	r4, [r0, #12]
 8005626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	b151      	cbz	r1, 8005642 <_dtoa_r+0x52>
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	2301      	movs	r3, #1
 8005630:	4093      	lsls	r3, r2
 8005632:	604a      	str	r2, [r1, #4]
 8005634:	608b      	str	r3, [r1, #8]
 8005636:	4628      	mov	r0, r5
 8005638:	f001 f9a8 	bl	800698c <_Bfree>
 800563c:	2200      	movs	r2, #0
 800563e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	1e3b      	subs	r3, r7, #0
 8005644:	bfaf      	iteee	ge
 8005646:	2300      	movge	r3, #0
 8005648:	2201      	movlt	r2, #1
 800564a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800564e:	9305      	strlt	r3, [sp, #20]
 8005650:	bfa8      	it	ge
 8005652:	f8c8 3000 	strge.w	r3, [r8]
 8005656:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800565a:	4b99      	ldr	r3, [pc, #612]	; (80058c0 <_dtoa_r+0x2d0>)
 800565c:	bfb8      	it	lt
 800565e:	f8c8 2000 	strlt.w	r2, [r8]
 8005662:	ea33 0309 	bics.w	r3, r3, r9
 8005666:	d119      	bne.n	800569c <_dtoa_r+0xac>
 8005668:	f242 730f 	movw	r3, #9999	; 0x270f
 800566c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005674:	4333      	orrs	r3, r6
 8005676:	f000 857f 	beq.w	8006178 <_dtoa_r+0xb88>
 800567a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800567c:	b953      	cbnz	r3, 8005694 <_dtoa_r+0xa4>
 800567e:	4b91      	ldr	r3, [pc, #580]	; (80058c4 <_dtoa_r+0x2d4>)
 8005680:	e022      	b.n	80056c8 <_dtoa_r+0xd8>
 8005682:	4b91      	ldr	r3, [pc, #580]	; (80058c8 <_dtoa_r+0x2d8>)
 8005684:	9303      	str	r3, [sp, #12]
 8005686:	3308      	adds	r3, #8
 8005688:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	9803      	ldr	r0, [sp, #12]
 800568e:	b019      	add	sp, #100	; 0x64
 8005690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005694:	4b8b      	ldr	r3, [pc, #556]	; (80058c4 <_dtoa_r+0x2d4>)
 8005696:	9303      	str	r3, [sp, #12]
 8005698:	3303      	adds	r3, #3
 800569a:	e7f5      	b.n	8005688 <_dtoa_r+0x98>
 800569c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80056a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80056a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056a8:	2200      	movs	r2, #0
 80056aa:	2300      	movs	r3, #0
 80056ac:	f7fb f97c 	bl	80009a8 <__aeabi_dcmpeq>
 80056b0:	4680      	mov	r8, r0
 80056b2:	b158      	cbz	r0, 80056cc <_dtoa_r+0xdc>
 80056b4:	2301      	movs	r3, #1
 80056b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8558 	beq.w	8006172 <_dtoa_r+0xb82>
 80056c2:	4882      	ldr	r0, [pc, #520]	; (80058cc <_dtoa_r+0x2dc>)
 80056c4:	6018      	str	r0, [r3, #0]
 80056c6:	1e43      	subs	r3, r0, #1
 80056c8:	9303      	str	r3, [sp, #12]
 80056ca:	e7df      	b.n	800568c <_dtoa_r+0x9c>
 80056cc:	ab16      	add	r3, sp, #88	; 0x58
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	ab17      	add	r3, sp, #92	; 0x5c
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	4628      	mov	r0, r5
 80056d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056da:	f001 fd01 	bl	80070e0 <__d2b>
 80056de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80056e2:	4683      	mov	fp, r0
 80056e4:	2c00      	cmp	r4, #0
 80056e6:	d07f      	beq.n	80057e8 <_dtoa_r+0x1f8>
 80056e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056ee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80056f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80056fa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80056fe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005702:	2200      	movs	r2, #0
 8005704:	4b72      	ldr	r3, [pc, #456]	; (80058d0 <_dtoa_r+0x2e0>)
 8005706:	f7fa fd2f 	bl	8000168 <__aeabi_dsub>
 800570a:	a365      	add	r3, pc, #404	; (adr r3, 80058a0 <_dtoa_r+0x2b0>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f7fa fee2 	bl	80004d8 <__aeabi_dmul>
 8005714:	a364      	add	r3, pc, #400	; (adr r3, 80058a8 <_dtoa_r+0x2b8>)
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f7fa fd27 	bl	800016c <__adddf3>
 800571e:	4606      	mov	r6, r0
 8005720:	4620      	mov	r0, r4
 8005722:	460f      	mov	r7, r1
 8005724:	f7fa fe6e 	bl	8000404 <__aeabi_i2d>
 8005728:	a361      	add	r3, pc, #388	; (adr r3, 80058b0 <_dtoa_r+0x2c0>)
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f7fa fed3 	bl	80004d8 <__aeabi_dmul>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4630      	mov	r0, r6
 8005738:	4639      	mov	r1, r7
 800573a:	f7fa fd17 	bl	800016c <__adddf3>
 800573e:	4606      	mov	r6, r0
 8005740:	460f      	mov	r7, r1
 8005742:	f7fb f979 	bl	8000a38 <__aeabi_d2iz>
 8005746:	2200      	movs	r2, #0
 8005748:	4682      	mov	sl, r0
 800574a:	2300      	movs	r3, #0
 800574c:	4630      	mov	r0, r6
 800574e:	4639      	mov	r1, r7
 8005750:	f7fb f934 	bl	80009bc <__aeabi_dcmplt>
 8005754:	b148      	cbz	r0, 800576a <_dtoa_r+0x17a>
 8005756:	4650      	mov	r0, sl
 8005758:	f7fa fe54 	bl	8000404 <__aeabi_i2d>
 800575c:	4632      	mov	r2, r6
 800575e:	463b      	mov	r3, r7
 8005760:	f7fb f922 	bl	80009a8 <__aeabi_dcmpeq>
 8005764:	b908      	cbnz	r0, 800576a <_dtoa_r+0x17a>
 8005766:	f10a 3aff 	add.w	sl, sl, #4294967295
 800576a:	f1ba 0f16 	cmp.w	sl, #22
 800576e:	d858      	bhi.n	8005822 <_dtoa_r+0x232>
 8005770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005774:	4b57      	ldr	r3, [pc, #348]	; (80058d4 <_dtoa_r+0x2e4>)
 8005776:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f7fb f91d 	bl	80009bc <__aeabi_dcmplt>
 8005782:	2800      	cmp	r0, #0
 8005784:	d04f      	beq.n	8005826 <_dtoa_r+0x236>
 8005786:	2300      	movs	r3, #0
 8005788:	f10a 3aff 	add.w	sl, sl, #4294967295
 800578c:	930f      	str	r3, [sp, #60]	; 0x3c
 800578e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005790:	1b1c      	subs	r4, r3, r4
 8005792:	1e63      	subs	r3, r4, #1
 8005794:	9309      	str	r3, [sp, #36]	; 0x24
 8005796:	bf49      	itett	mi
 8005798:	f1c4 0301 	rsbmi	r3, r4, #1
 800579c:	2300      	movpl	r3, #0
 800579e:	9306      	strmi	r3, [sp, #24]
 80057a0:	2300      	movmi	r3, #0
 80057a2:	bf54      	ite	pl
 80057a4:	9306      	strpl	r3, [sp, #24]
 80057a6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80057a8:	f1ba 0f00 	cmp.w	sl, #0
 80057ac:	db3d      	blt.n	800582a <_dtoa_r+0x23a>
 80057ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80057b4:	4453      	add	r3, sl
 80057b6:	9309      	str	r3, [sp, #36]	; 0x24
 80057b8:	2300      	movs	r3, #0
 80057ba:	930a      	str	r3, [sp, #40]	; 0x28
 80057bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057be:	2b09      	cmp	r3, #9
 80057c0:	f200 808c 	bhi.w	80058dc <_dtoa_r+0x2ec>
 80057c4:	2b05      	cmp	r3, #5
 80057c6:	bfc4      	itt	gt
 80057c8:	3b04      	subgt	r3, #4
 80057ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 80057cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057ce:	bfc8      	it	gt
 80057d0:	2400      	movgt	r4, #0
 80057d2:	f1a3 0302 	sub.w	r3, r3, #2
 80057d6:	bfd8      	it	le
 80057d8:	2401      	movle	r4, #1
 80057da:	2b03      	cmp	r3, #3
 80057dc:	f200 808a 	bhi.w	80058f4 <_dtoa_r+0x304>
 80057e0:	e8df f003 	tbb	[pc, r3]
 80057e4:	5b4d4f2d 	.word	0x5b4d4f2d
 80057e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80057ec:	441c      	add	r4, r3
 80057ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	bfc3      	ittte	gt
 80057f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80057fa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80057fe:	fa09 f303 	lslgt.w	r3, r9, r3
 8005802:	f1c3 0320 	rsble	r3, r3, #32
 8005806:	bfc6      	itte	gt
 8005808:	fa26 f000 	lsrgt.w	r0, r6, r0
 800580c:	4318      	orrgt	r0, r3
 800580e:	fa06 f003 	lslle.w	r0, r6, r3
 8005812:	f7fa fde7 	bl	80003e4 <__aeabi_ui2d>
 8005816:	2301      	movs	r3, #1
 8005818:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800581c:	3c01      	subs	r4, #1
 800581e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005820:	e76f      	b.n	8005702 <_dtoa_r+0x112>
 8005822:	2301      	movs	r3, #1
 8005824:	e7b2      	b.n	800578c <_dtoa_r+0x19c>
 8005826:	900f      	str	r0, [sp, #60]	; 0x3c
 8005828:	e7b1      	b.n	800578e <_dtoa_r+0x19e>
 800582a:	9b06      	ldr	r3, [sp, #24]
 800582c:	eba3 030a 	sub.w	r3, r3, sl
 8005830:	9306      	str	r3, [sp, #24]
 8005832:	f1ca 0300 	rsb	r3, sl, #0
 8005836:	930a      	str	r3, [sp, #40]	; 0x28
 8005838:	2300      	movs	r3, #0
 800583a:	930e      	str	r3, [sp, #56]	; 0x38
 800583c:	e7be      	b.n	80057bc <_dtoa_r+0x1cc>
 800583e:	2300      	movs	r3, #0
 8005840:	930b      	str	r3, [sp, #44]	; 0x2c
 8005842:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005844:	2b00      	cmp	r3, #0
 8005846:	dc58      	bgt.n	80058fa <_dtoa_r+0x30a>
 8005848:	f04f 0901 	mov.w	r9, #1
 800584c:	464b      	mov	r3, r9
 800584e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005852:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005856:	2200      	movs	r2, #0
 8005858:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800585a:	6042      	str	r2, [r0, #4]
 800585c:	2204      	movs	r2, #4
 800585e:	f102 0614 	add.w	r6, r2, #20
 8005862:	429e      	cmp	r6, r3
 8005864:	6841      	ldr	r1, [r0, #4]
 8005866:	d94e      	bls.n	8005906 <_dtoa_r+0x316>
 8005868:	4628      	mov	r0, r5
 800586a:	f001 f84f 	bl	800690c <_Balloc>
 800586e:	9003      	str	r0, [sp, #12]
 8005870:	2800      	cmp	r0, #0
 8005872:	d14c      	bne.n	800590e <_dtoa_r+0x31e>
 8005874:	4602      	mov	r2, r0
 8005876:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800587a:	4b17      	ldr	r3, [pc, #92]	; (80058d8 <_dtoa_r+0x2e8>)
 800587c:	e6cc      	b.n	8005618 <_dtoa_r+0x28>
 800587e:	2301      	movs	r3, #1
 8005880:	e7de      	b.n	8005840 <_dtoa_r+0x250>
 8005882:	2300      	movs	r3, #0
 8005884:	930b      	str	r3, [sp, #44]	; 0x2c
 8005886:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005888:	eb0a 0903 	add.w	r9, sl, r3
 800588c:	f109 0301 	add.w	r3, r9, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	9308      	str	r3, [sp, #32]
 8005894:	bfb8      	it	lt
 8005896:	2301      	movlt	r3, #1
 8005898:	e7dd      	b.n	8005856 <_dtoa_r+0x266>
 800589a:	2301      	movs	r3, #1
 800589c:	e7f2      	b.n	8005884 <_dtoa_r+0x294>
 800589e:	bf00      	nop
 80058a0:	636f4361 	.word	0x636f4361
 80058a4:	3fd287a7 	.word	0x3fd287a7
 80058a8:	8b60c8b3 	.word	0x8b60c8b3
 80058ac:	3fc68a28 	.word	0x3fc68a28
 80058b0:	509f79fb 	.word	0x509f79fb
 80058b4:	3fd34413 	.word	0x3fd34413
 80058b8:	080084f6 	.word	0x080084f6
 80058bc:	0800850d 	.word	0x0800850d
 80058c0:	7ff00000 	.word	0x7ff00000
 80058c4:	080084f2 	.word	0x080084f2
 80058c8:	080084e9 	.word	0x080084e9
 80058cc:	0800836d 	.word	0x0800836d
 80058d0:	3ff80000 	.word	0x3ff80000
 80058d4:	08008678 	.word	0x08008678
 80058d8:	08008568 	.word	0x08008568
 80058dc:	2401      	movs	r4, #1
 80058de:	2300      	movs	r3, #0
 80058e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80058e2:	9322      	str	r3, [sp, #136]	; 0x88
 80058e4:	f04f 39ff 	mov.w	r9, #4294967295
 80058e8:	2200      	movs	r2, #0
 80058ea:	2312      	movs	r3, #18
 80058ec:	f8cd 9020 	str.w	r9, [sp, #32]
 80058f0:	9223      	str	r2, [sp, #140]	; 0x8c
 80058f2:	e7b0      	b.n	8005856 <_dtoa_r+0x266>
 80058f4:	2301      	movs	r3, #1
 80058f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058f8:	e7f4      	b.n	80058e4 <_dtoa_r+0x2f4>
 80058fa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80058fe:	464b      	mov	r3, r9
 8005900:	f8cd 9020 	str.w	r9, [sp, #32]
 8005904:	e7a7      	b.n	8005856 <_dtoa_r+0x266>
 8005906:	3101      	adds	r1, #1
 8005908:	6041      	str	r1, [r0, #4]
 800590a:	0052      	lsls	r2, r2, #1
 800590c:	e7a7      	b.n	800585e <_dtoa_r+0x26e>
 800590e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005910:	9a03      	ldr	r2, [sp, #12]
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	9b08      	ldr	r3, [sp, #32]
 8005916:	2b0e      	cmp	r3, #14
 8005918:	f200 80a8 	bhi.w	8005a6c <_dtoa_r+0x47c>
 800591c:	2c00      	cmp	r4, #0
 800591e:	f000 80a5 	beq.w	8005a6c <_dtoa_r+0x47c>
 8005922:	f1ba 0f00 	cmp.w	sl, #0
 8005926:	dd34      	ble.n	8005992 <_dtoa_r+0x3a2>
 8005928:	4a9a      	ldr	r2, [pc, #616]	; (8005b94 <_dtoa_r+0x5a4>)
 800592a:	f00a 030f 	and.w	r3, sl, #15
 800592e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005932:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005936:	e9d3 3400 	ldrd	r3, r4, [r3]
 800593a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800593e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005942:	d016      	beq.n	8005972 <_dtoa_r+0x382>
 8005944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005948:	4b93      	ldr	r3, [pc, #588]	; (8005b98 <_dtoa_r+0x5a8>)
 800594a:	2703      	movs	r7, #3
 800594c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005950:	f7fa feec 	bl	800072c <__aeabi_ddiv>
 8005954:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005958:	f004 040f 	and.w	r4, r4, #15
 800595c:	4e8e      	ldr	r6, [pc, #568]	; (8005b98 <_dtoa_r+0x5a8>)
 800595e:	b954      	cbnz	r4, 8005976 <_dtoa_r+0x386>
 8005960:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005968:	f7fa fee0 	bl	800072c <__aeabi_ddiv>
 800596c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005970:	e029      	b.n	80059c6 <_dtoa_r+0x3d6>
 8005972:	2702      	movs	r7, #2
 8005974:	e7f2      	b.n	800595c <_dtoa_r+0x36c>
 8005976:	07e1      	lsls	r1, r4, #31
 8005978:	d508      	bpl.n	800598c <_dtoa_r+0x39c>
 800597a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800597e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005982:	f7fa fda9 	bl	80004d8 <__aeabi_dmul>
 8005986:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800598a:	3701      	adds	r7, #1
 800598c:	1064      	asrs	r4, r4, #1
 800598e:	3608      	adds	r6, #8
 8005990:	e7e5      	b.n	800595e <_dtoa_r+0x36e>
 8005992:	f000 80a5 	beq.w	8005ae0 <_dtoa_r+0x4f0>
 8005996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800599a:	f1ca 0400 	rsb	r4, sl, #0
 800599e:	4b7d      	ldr	r3, [pc, #500]	; (8005b94 <_dtoa_r+0x5a4>)
 80059a0:	f004 020f 	and.w	r2, r4, #15
 80059a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	f7fa fd94 	bl	80004d8 <__aeabi_dmul>
 80059b0:	2702      	movs	r7, #2
 80059b2:	2300      	movs	r3, #0
 80059b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059b8:	4e77      	ldr	r6, [pc, #476]	; (8005b98 <_dtoa_r+0x5a8>)
 80059ba:	1124      	asrs	r4, r4, #4
 80059bc:	2c00      	cmp	r4, #0
 80059be:	f040 8084 	bne.w	8005aca <_dtoa_r+0x4da>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1d2      	bne.n	800596c <_dtoa_r+0x37c>
 80059c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 808b 	beq.w	8005ae4 <_dtoa_r+0x4f4>
 80059ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80059d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80059d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059da:	2200      	movs	r2, #0
 80059dc:	4b6f      	ldr	r3, [pc, #444]	; (8005b9c <_dtoa_r+0x5ac>)
 80059de:	f7fa ffed 	bl	80009bc <__aeabi_dcmplt>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d07e      	beq.n	8005ae4 <_dtoa_r+0x4f4>
 80059e6:	9b08      	ldr	r3, [sp, #32]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d07b      	beq.n	8005ae4 <_dtoa_r+0x4f4>
 80059ec:	f1b9 0f00 	cmp.w	r9, #0
 80059f0:	dd38      	ble.n	8005a64 <_dtoa_r+0x474>
 80059f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059f6:	2200      	movs	r2, #0
 80059f8:	4b69      	ldr	r3, [pc, #420]	; (8005ba0 <_dtoa_r+0x5b0>)
 80059fa:	f7fa fd6d 	bl	80004d8 <__aeabi_dmul>
 80059fe:	464c      	mov	r4, r9
 8005a00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a04:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005a08:	3701      	adds	r7, #1
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	f7fa fcfa 	bl	8000404 <__aeabi_i2d>
 8005a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a14:	f7fa fd60 	bl	80004d8 <__aeabi_dmul>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4b62      	ldr	r3, [pc, #392]	; (8005ba4 <_dtoa_r+0x5b4>)
 8005a1c:	f7fa fba6 	bl	800016c <__adddf3>
 8005a20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005a24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a28:	9611      	str	r6, [sp, #68]	; 0x44
 8005a2a:	2c00      	cmp	r4, #0
 8005a2c:	d15d      	bne.n	8005aea <_dtoa_r+0x4fa>
 8005a2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a32:	2200      	movs	r2, #0
 8005a34:	4b5c      	ldr	r3, [pc, #368]	; (8005ba8 <_dtoa_r+0x5b8>)
 8005a36:	f7fa fb97 	bl	8000168 <__aeabi_dsub>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a42:	4633      	mov	r3, r6
 8005a44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a46:	f7fa ffd7 	bl	80009f8 <__aeabi_dcmpgt>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	f040 829c 	bne.w	8005f88 <_dtoa_r+0x998>
 8005a50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a56:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005a5a:	f7fa ffaf 	bl	80009bc <__aeabi_dcmplt>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	f040 8290 	bne.w	8005f84 <_dtoa_r+0x994>
 8005a64:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005a68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f2c0 8152 	blt.w	8005d18 <_dtoa_r+0x728>
 8005a74:	f1ba 0f0e 	cmp.w	sl, #14
 8005a78:	f300 814e 	bgt.w	8005d18 <_dtoa_r+0x728>
 8005a7c:	4b45      	ldr	r3, [pc, #276]	; (8005b94 <_dtoa_r+0x5a4>)
 8005a7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a86:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005a8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f280 80db 	bge.w	8005c48 <_dtoa_r+0x658>
 8005a92:	9b08      	ldr	r3, [sp, #32]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f300 80d7 	bgt.w	8005c48 <_dtoa_r+0x658>
 8005a9a:	f040 8272 	bne.w	8005f82 <_dtoa_r+0x992>
 8005a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	4b40      	ldr	r3, [pc, #256]	; (8005ba8 <_dtoa_r+0x5b8>)
 8005aa6:	f7fa fd17 	bl	80004d8 <__aeabi_dmul>
 8005aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aae:	f7fa ff99 	bl	80009e4 <__aeabi_dcmpge>
 8005ab2:	9c08      	ldr	r4, [sp, #32]
 8005ab4:	4626      	mov	r6, r4
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f040 8248 	bne.w	8005f4c <_dtoa_r+0x95c>
 8005abc:	2331      	movs	r3, #49	; 0x31
 8005abe:	9f03      	ldr	r7, [sp, #12]
 8005ac0:	f10a 0a01 	add.w	sl, sl, #1
 8005ac4:	f807 3b01 	strb.w	r3, [r7], #1
 8005ac8:	e244      	b.n	8005f54 <_dtoa_r+0x964>
 8005aca:	07e2      	lsls	r2, r4, #31
 8005acc:	d505      	bpl.n	8005ada <_dtoa_r+0x4ea>
 8005ace:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ad2:	f7fa fd01 	bl	80004d8 <__aeabi_dmul>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	3701      	adds	r7, #1
 8005ada:	1064      	asrs	r4, r4, #1
 8005adc:	3608      	adds	r6, #8
 8005ade:	e76d      	b.n	80059bc <_dtoa_r+0x3cc>
 8005ae0:	2702      	movs	r7, #2
 8005ae2:	e770      	b.n	80059c6 <_dtoa_r+0x3d6>
 8005ae4:	46d0      	mov	r8, sl
 8005ae6:	9c08      	ldr	r4, [sp, #32]
 8005ae8:	e78f      	b.n	8005a0a <_dtoa_r+0x41a>
 8005aea:	9903      	ldr	r1, [sp, #12]
 8005aec:	4b29      	ldr	r3, [pc, #164]	; (8005b94 <_dtoa_r+0x5a4>)
 8005aee:	4421      	add	r1, r4
 8005af0:	9112      	str	r1, [sp, #72]	; 0x48
 8005af2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005af4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005af8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005afc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b00:	2900      	cmp	r1, #0
 8005b02:	d055      	beq.n	8005bb0 <_dtoa_r+0x5c0>
 8005b04:	2000      	movs	r0, #0
 8005b06:	4929      	ldr	r1, [pc, #164]	; (8005bac <_dtoa_r+0x5bc>)
 8005b08:	f7fa fe10 	bl	800072c <__aeabi_ddiv>
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	4632      	mov	r2, r6
 8005b10:	f7fa fb2a 	bl	8000168 <__aeabi_dsub>
 8005b14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b18:	9f03      	ldr	r7, [sp, #12]
 8005b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b1e:	f7fa ff8b 	bl	8000a38 <__aeabi_d2iz>
 8005b22:	4604      	mov	r4, r0
 8005b24:	f7fa fc6e 	bl	8000404 <__aeabi_i2d>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b30:	f7fa fb1a 	bl	8000168 <__aeabi_dsub>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	3430      	adds	r4, #48	; 0x30
 8005b3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b42:	f807 4b01 	strb.w	r4, [r7], #1
 8005b46:	f7fa ff39 	bl	80009bc <__aeabi_dcmplt>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d174      	bne.n	8005c38 <_dtoa_r+0x648>
 8005b4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b52:	2000      	movs	r0, #0
 8005b54:	4911      	ldr	r1, [pc, #68]	; (8005b9c <_dtoa_r+0x5ac>)
 8005b56:	f7fa fb07 	bl	8000168 <__aeabi_dsub>
 8005b5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b5e:	f7fa ff2d 	bl	80009bc <__aeabi_dcmplt>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	f040 80b7 	bne.w	8005cd6 <_dtoa_r+0x6e6>
 8005b68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b6a:	429f      	cmp	r7, r3
 8005b6c:	f43f af7a 	beq.w	8005a64 <_dtoa_r+0x474>
 8005b70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b74:	2200      	movs	r2, #0
 8005b76:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <_dtoa_r+0x5b0>)
 8005b78:	f7fa fcae 	bl	80004d8 <__aeabi_dmul>
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b86:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <_dtoa_r+0x5b0>)
 8005b88:	f7fa fca6 	bl	80004d8 <__aeabi_dmul>
 8005b8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b90:	e7c3      	b.n	8005b1a <_dtoa_r+0x52a>
 8005b92:	bf00      	nop
 8005b94:	08008678 	.word	0x08008678
 8005b98:	08008650 	.word	0x08008650
 8005b9c:	3ff00000 	.word	0x3ff00000
 8005ba0:	40240000 	.word	0x40240000
 8005ba4:	401c0000 	.word	0x401c0000
 8005ba8:	40140000 	.word	0x40140000
 8005bac:	3fe00000 	.word	0x3fe00000
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f7fa fc90 	bl	80004d8 <__aeabi_dmul>
 8005bb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bbe:	9c03      	ldr	r4, [sp, #12]
 8005bc0:	9314      	str	r3, [sp, #80]	; 0x50
 8005bc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bc6:	f7fa ff37 	bl	8000a38 <__aeabi_d2iz>
 8005bca:	9015      	str	r0, [sp, #84]	; 0x54
 8005bcc:	f7fa fc1a 	bl	8000404 <__aeabi_i2d>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bd8:	f7fa fac6 	bl	8000168 <__aeabi_dsub>
 8005bdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bde:	4606      	mov	r6, r0
 8005be0:	3330      	adds	r3, #48	; 0x30
 8005be2:	f804 3b01 	strb.w	r3, [r4], #1
 8005be6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005be8:	460f      	mov	r7, r1
 8005bea:	429c      	cmp	r4, r3
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	d124      	bne.n	8005c3c <_dtoa_r+0x64c>
 8005bf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bf6:	4bb0      	ldr	r3, [pc, #704]	; (8005eb8 <_dtoa_r+0x8c8>)
 8005bf8:	f7fa fab8 	bl	800016c <__adddf3>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4630      	mov	r0, r6
 8005c02:	4639      	mov	r1, r7
 8005c04:	f7fa fef8 	bl	80009f8 <__aeabi_dcmpgt>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d163      	bne.n	8005cd4 <_dtoa_r+0x6e4>
 8005c0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c10:	2000      	movs	r0, #0
 8005c12:	49a9      	ldr	r1, [pc, #676]	; (8005eb8 <_dtoa_r+0x8c8>)
 8005c14:	f7fa faa8 	bl	8000168 <__aeabi_dsub>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	4639      	mov	r1, r7
 8005c20:	f7fa fecc 	bl	80009bc <__aeabi_dcmplt>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	f43f af1d 	beq.w	8005a64 <_dtoa_r+0x474>
 8005c2a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c2c:	1e7b      	subs	r3, r7, #1
 8005c2e:	9314      	str	r3, [sp, #80]	; 0x50
 8005c30:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005c34:	2b30      	cmp	r3, #48	; 0x30
 8005c36:	d0f8      	beq.n	8005c2a <_dtoa_r+0x63a>
 8005c38:	46c2      	mov	sl, r8
 8005c3a:	e03b      	b.n	8005cb4 <_dtoa_r+0x6c4>
 8005c3c:	4b9f      	ldr	r3, [pc, #636]	; (8005ebc <_dtoa_r+0x8cc>)
 8005c3e:	f7fa fc4b 	bl	80004d8 <__aeabi_dmul>
 8005c42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c46:	e7bc      	b.n	8005bc2 <_dtoa_r+0x5d2>
 8005c48:	9f03      	ldr	r7, [sp, #12]
 8005c4a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005c4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c52:	4640      	mov	r0, r8
 8005c54:	4649      	mov	r1, r9
 8005c56:	f7fa fd69 	bl	800072c <__aeabi_ddiv>
 8005c5a:	f7fa feed 	bl	8000a38 <__aeabi_d2iz>
 8005c5e:	4604      	mov	r4, r0
 8005c60:	f7fa fbd0 	bl	8000404 <__aeabi_i2d>
 8005c64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c68:	f7fa fc36 	bl	80004d8 <__aeabi_dmul>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4640      	mov	r0, r8
 8005c72:	4649      	mov	r1, r9
 8005c74:	f7fa fa78 	bl	8000168 <__aeabi_dsub>
 8005c78:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005c7c:	f807 6b01 	strb.w	r6, [r7], #1
 8005c80:	9e03      	ldr	r6, [sp, #12]
 8005c82:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005c86:	1bbe      	subs	r6, r7, r6
 8005c88:	45b4      	cmp	ip, r6
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	d136      	bne.n	8005cfe <_dtoa_r+0x70e>
 8005c90:	f7fa fa6c 	bl	800016c <__adddf3>
 8005c94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c98:	4680      	mov	r8, r0
 8005c9a:	4689      	mov	r9, r1
 8005c9c:	f7fa feac 	bl	80009f8 <__aeabi_dcmpgt>
 8005ca0:	bb58      	cbnz	r0, 8005cfa <_dtoa_r+0x70a>
 8005ca2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	4649      	mov	r1, r9
 8005caa:	f7fa fe7d 	bl	80009a8 <__aeabi_dcmpeq>
 8005cae:	b108      	cbz	r0, 8005cb4 <_dtoa_r+0x6c4>
 8005cb0:	07e1      	lsls	r1, r4, #31
 8005cb2:	d422      	bmi.n	8005cfa <_dtoa_r+0x70a>
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	f000 fe68 	bl	800698c <_Bfree>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	703b      	strb	r3, [r7, #0]
 8005cc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005cc2:	f10a 0001 	add.w	r0, sl, #1
 8005cc6:	6018      	str	r0, [r3, #0]
 8005cc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f43f acde 	beq.w	800568c <_dtoa_r+0x9c>
 8005cd0:	601f      	str	r7, [r3, #0]
 8005cd2:	e4db      	b.n	800568c <_dtoa_r+0x9c>
 8005cd4:	4627      	mov	r7, r4
 8005cd6:	463b      	mov	r3, r7
 8005cd8:	461f      	mov	r7, r3
 8005cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cde:	2a39      	cmp	r2, #57	; 0x39
 8005ce0:	d107      	bne.n	8005cf2 <_dtoa_r+0x702>
 8005ce2:	9a03      	ldr	r2, [sp, #12]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d1f7      	bne.n	8005cd8 <_dtoa_r+0x6e8>
 8005ce8:	2230      	movs	r2, #48	; 0x30
 8005cea:	9903      	ldr	r1, [sp, #12]
 8005cec:	f108 0801 	add.w	r8, r8, #1
 8005cf0:	700a      	strb	r2, [r1, #0]
 8005cf2:	781a      	ldrb	r2, [r3, #0]
 8005cf4:	3201      	adds	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	e79e      	b.n	8005c38 <_dtoa_r+0x648>
 8005cfa:	46d0      	mov	r8, sl
 8005cfc:	e7eb      	b.n	8005cd6 <_dtoa_r+0x6e6>
 8005cfe:	2200      	movs	r2, #0
 8005d00:	4b6e      	ldr	r3, [pc, #440]	; (8005ebc <_dtoa_r+0x8cc>)
 8005d02:	f7fa fbe9 	bl	80004d8 <__aeabi_dmul>
 8005d06:	2200      	movs	r2, #0
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4680      	mov	r8, r0
 8005d0c:	4689      	mov	r9, r1
 8005d0e:	f7fa fe4b 	bl	80009a8 <__aeabi_dcmpeq>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d09b      	beq.n	8005c4e <_dtoa_r+0x65e>
 8005d16:	e7cd      	b.n	8005cb4 <_dtoa_r+0x6c4>
 8005d18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d1a:	2a00      	cmp	r2, #0
 8005d1c:	f000 80d0 	beq.w	8005ec0 <_dtoa_r+0x8d0>
 8005d20:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d22:	2a01      	cmp	r2, #1
 8005d24:	f300 80ae 	bgt.w	8005e84 <_dtoa_r+0x894>
 8005d28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d2a:	2a00      	cmp	r2, #0
 8005d2c:	f000 80a6 	beq.w	8005e7c <_dtoa_r+0x88c>
 8005d30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d36:	9f06      	ldr	r7, [sp, #24]
 8005d38:	9a06      	ldr	r2, [sp, #24]
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	441a      	add	r2, r3
 8005d3e:	9206      	str	r2, [sp, #24]
 8005d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d42:	4628      	mov	r0, r5
 8005d44:	441a      	add	r2, r3
 8005d46:	9209      	str	r2, [sp, #36]	; 0x24
 8005d48:	f000 ff20 	bl	8006b8c <__i2b>
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	2f00      	cmp	r7, #0
 8005d50:	dd0c      	ble.n	8005d6c <_dtoa_r+0x77c>
 8005d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	dd09      	ble.n	8005d6c <_dtoa_r+0x77c>
 8005d58:	42bb      	cmp	r3, r7
 8005d5a:	bfa8      	it	ge
 8005d5c:	463b      	movge	r3, r7
 8005d5e:	9a06      	ldr	r2, [sp, #24]
 8005d60:	1aff      	subs	r7, r7, r3
 8005d62:	1ad2      	subs	r2, r2, r3
 8005d64:	9206      	str	r2, [sp, #24]
 8005d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d6e:	b1f3      	cbz	r3, 8005dae <_dtoa_r+0x7be>
 8005d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 80a8 	beq.w	8005ec8 <_dtoa_r+0x8d8>
 8005d78:	2c00      	cmp	r4, #0
 8005d7a:	dd10      	ble.n	8005d9e <_dtoa_r+0x7ae>
 8005d7c:	4631      	mov	r1, r6
 8005d7e:	4622      	mov	r2, r4
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 ffc1 	bl	8006d08 <__pow5mult>
 8005d86:	465a      	mov	r2, fp
 8005d88:	4601      	mov	r1, r0
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 ff13 	bl	8006bb8 <__multiply>
 8005d92:	4680      	mov	r8, r0
 8005d94:	4659      	mov	r1, fp
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 fdf8 	bl	800698c <_Bfree>
 8005d9c:	46c3      	mov	fp, r8
 8005d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da0:	1b1a      	subs	r2, r3, r4
 8005da2:	d004      	beq.n	8005dae <_dtoa_r+0x7be>
 8005da4:	4659      	mov	r1, fp
 8005da6:	4628      	mov	r0, r5
 8005da8:	f000 ffae 	bl	8006d08 <__pow5mult>
 8005dac:	4683      	mov	fp, r0
 8005dae:	2101      	movs	r1, #1
 8005db0:	4628      	mov	r0, r5
 8005db2:	f000 feeb 	bl	8006b8c <__i2b>
 8005db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005db8:	4604      	mov	r4, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f340 8086 	ble.w	8005ecc <_dtoa_r+0x8dc>
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	f000 ff9f 	bl	8006d08 <__pow5mult>
 8005dca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dcc:	4604      	mov	r4, r0
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	dd7f      	ble.n	8005ed2 <_dtoa_r+0x8e2>
 8005dd2:	f04f 0800 	mov.w	r8, #0
 8005dd6:	6923      	ldr	r3, [r4, #16]
 8005dd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ddc:	6918      	ldr	r0, [r3, #16]
 8005dde:	f000 fe87 	bl	8006af0 <__hi0bits>
 8005de2:	f1c0 0020 	rsb	r0, r0, #32
 8005de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de8:	4418      	add	r0, r3
 8005dea:	f010 001f 	ands.w	r0, r0, #31
 8005dee:	f000 8092 	beq.w	8005f16 <_dtoa_r+0x926>
 8005df2:	f1c0 0320 	rsb	r3, r0, #32
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	f340 808a 	ble.w	8005f10 <_dtoa_r+0x920>
 8005dfc:	f1c0 001c 	rsb	r0, r0, #28
 8005e00:	9b06      	ldr	r3, [sp, #24]
 8005e02:	4407      	add	r7, r0
 8005e04:	4403      	add	r3, r0
 8005e06:	9306      	str	r3, [sp, #24]
 8005e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0a:	4403      	add	r3, r0
 8005e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e0e:	9b06      	ldr	r3, [sp, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	dd05      	ble.n	8005e20 <_dtoa_r+0x830>
 8005e14:	4659      	mov	r1, fp
 8005e16:	461a      	mov	r2, r3
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f000 ffcf 	bl	8006dbc <__lshift>
 8005e1e:	4683      	mov	fp, r0
 8005e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	dd05      	ble.n	8005e32 <_dtoa_r+0x842>
 8005e26:	4621      	mov	r1, r4
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	f000 ffc6 	bl	8006dbc <__lshift>
 8005e30:	4604      	mov	r4, r0
 8005e32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d070      	beq.n	8005f1a <_dtoa_r+0x92a>
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4658      	mov	r0, fp
 8005e3c:	f001 f82e 	bl	8006e9c <__mcmp>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	da6a      	bge.n	8005f1a <_dtoa_r+0x92a>
 8005e44:	2300      	movs	r3, #0
 8005e46:	4659      	mov	r1, fp
 8005e48:	220a      	movs	r2, #10
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f000 fdc0 	bl	80069d0 <__multadd>
 8005e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e52:	4683      	mov	fp, r0
 8005e54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 8194 	beq.w	8006186 <_dtoa_r+0xb96>
 8005e5e:	4631      	mov	r1, r6
 8005e60:	2300      	movs	r3, #0
 8005e62:	220a      	movs	r2, #10
 8005e64:	4628      	mov	r0, r5
 8005e66:	f000 fdb3 	bl	80069d0 <__multadd>
 8005e6a:	f1b9 0f00 	cmp.w	r9, #0
 8005e6e:	4606      	mov	r6, r0
 8005e70:	f300 8093 	bgt.w	8005f9a <_dtoa_r+0x9aa>
 8005e74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	dc57      	bgt.n	8005f2a <_dtoa_r+0x93a>
 8005e7a:	e08e      	b.n	8005f9a <_dtoa_r+0x9aa>
 8005e7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e82:	e757      	b.n	8005d34 <_dtoa_r+0x744>
 8005e84:	9b08      	ldr	r3, [sp, #32]
 8005e86:	1e5c      	subs	r4, r3, #1
 8005e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	bfb7      	itett	lt
 8005e8e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005e90:	1b1c      	subge	r4, r3, r4
 8005e92:	1ae2      	sublt	r2, r4, r3
 8005e94:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005e96:	bfbe      	ittt	lt
 8005e98:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005e9a:	189b      	addlt	r3, r3, r2
 8005e9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005e9e:	9b08      	ldr	r3, [sp, #32]
 8005ea0:	bfb8      	it	lt
 8005ea2:	2400      	movlt	r4, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bfbb      	ittet	lt
 8005ea8:	9b06      	ldrlt	r3, [sp, #24]
 8005eaa:	9a08      	ldrlt	r2, [sp, #32]
 8005eac:	9f06      	ldrge	r7, [sp, #24]
 8005eae:	1a9f      	sublt	r7, r3, r2
 8005eb0:	bfac      	ite	ge
 8005eb2:	9b08      	ldrge	r3, [sp, #32]
 8005eb4:	2300      	movlt	r3, #0
 8005eb6:	e73f      	b.n	8005d38 <_dtoa_r+0x748>
 8005eb8:	3fe00000 	.word	0x3fe00000
 8005ebc:	40240000 	.word	0x40240000
 8005ec0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ec2:	9f06      	ldr	r7, [sp, #24]
 8005ec4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005ec6:	e742      	b.n	8005d4e <_dtoa_r+0x75e>
 8005ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eca:	e76b      	b.n	8005da4 <_dtoa_r+0x7b4>
 8005ecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	dc19      	bgt.n	8005f06 <_dtoa_r+0x916>
 8005ed2:	9b04      	ldr	r3, [sp, #16]
 8005ed4:	b9bb      	cbnz	r3, 8005f06 <_dtoa_r+0x916>
 8005ed6:	9b05      	ldr	r3, [sp, #20]
 8005ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005edc:	b99b      	cbnz	r3, 8005f06 <_dtoa_r+0x916>
 8005ede:	9b05      	ldr	r3, [sp, #20]
 8005ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ee4:	0d1b      	lsrs	r3, r3, #20
 8005ee6:	051b      	lsls	r3, r3, #20
 8005ee8:	b183      	cbz	r3, 8005f0c <_dtoa_r+0x91c>
 8005eea:	f04f 0801 	mov.w	r8, #1
 8005eee:	9b06      	ldr	r3, [sp, #24]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	9306      	str	r3, [sp, #24]
 8005ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8005efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f47f af6a 	bne.w	8005dd6 <_dtoa_r+0x7e6>
 8005f02:	2001      	movs	r0, #1
 8005f04:	e76f      	b.n	8005de6 <_dtoa_r+0x7f6>
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	e7f6      	b.n	8005efa <_dtoa_r+0x90a>
 8005f0c:	4698      	mov	r8, r3
 8005f0e:	e7f4      	b.n	8005efa <_dtoa_r+0x90a>
 8005f10:	f43f af7d 	beq.w	8005e0e <_dtoa_r+0x81e>
 8005f14:	4618      	mov	r0, r3
 8005f16:	301c      	adds	r0, #28
 8005f18:	e772      	b.n	8005e00 <_dtoa_r+0x810>
 8005f1a:	9b08      	ldr	r3, [sp, #32]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	dc36      	bgt.n	8005f8e <_dtoa_r+0x99e>
 8005f20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	dd33      	ble.n	8005f8e <_dtoa_r+0x99e>
 8005f26:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f2a:	f1b9 0f00 	cmp.w	r9, #0
 8005f2e:	d10d      	bne.n	8005f4c <_dtoa_r+0x95c>
 8005f30:	4621      	mov	r1, r4
 8005f32:	464b      	mov	r3, r9
 8005f34:	2205      	movs	r2, #5
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 fd4a 	bl	80069d0 <__multadd>
 8005f3c:	4601      	mov	r1, r0
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4658      	mov	r0, fp
 8005f42:	f000 ffab 	bl	8006e9c <__mcmp>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	f73f adb8 	bgt.w	8005abc <_dtoa_r+0x4cc>
 8005f4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f4e:	9f03      	ldr	r7, [sp, #12]
 8005f50:	ea6f 0a03 	mvn.w	sl, r3
 8005f54:	f04f 0800 	mov.w	r8, #0
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f000 fd16 	bl	800698c <_Bfree>
 8005f60:	2e00      	cmp	r6, #0
 8005f62:	f43f aea7 	beq.w	8005cb4 <_dtoa_r+0x6c4>
 8005f66:	f1b8 0f00 	cmp.w	r8, #0
 8005f6a:	d005      	beq.n	8005f78 <_dtoa_r+0x988>
 8005f6c:	45b0      	cmp	r8, r6
 8005f6e:	d003      	beq.n	8005f78 <_dtoa_r+0x988>
 8005f70:	4641      	mov	r1, r8
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 fd0a 	bl	800698c <_Bfree>
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f000 fd06 	bl	800698c <_Bfree>
 8005f80:	e698      	b.n	8005cb4 <_dtoa_r+0x6c4>
 8005f82:	2400      	movs	r4, #0
 8005f84:	4626      	mov	r6, r4
 8005f86:	e7e1      	b.n	8005f4c <_dtoa_r+0x95c>
 8005f88:	46c2      	mov	sl, r8
 8005f8a:	4626      	mov	r6, r4
 8005f8c:	e596      	b.n	8005abc <_dtoa_r+0x4cc>
 8005f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 80fd 	beq.w	8006194 <_dtoa_r+0xba4>
 8005f9a:	2f00      	cmp	r7, #0
 8005f9c:	dd05      	ble.n	8005faa <_dtoa_r+0x9ba>
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	463a      	mov	r2, r7
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f000 ff0a 	bl	8006dbc <__lshift>
 8005fa8:	4606      	mov	r6, r0
 8005faa:	f1b8 0f00 	cmp.w	r8, #0
 8005fae:	d05c      	beq.n	800606a <_dtoa_r+0xa7a>
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	6871      	ldr	r1, [r6, #4]
 8005fb4:	f000 fcaa 	bl	800690c <_Balloc>
 8005fb8:	4607      	mov	r7, r0
 8005fba:	b928      	cbnz	r0, 8005fc8 <_dtoa_r+0x9d8>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005fc2:	4b7f      	ldr	r3, [pc, #508]	; (80061c0 <_dtoa_r+0xbd0>)
 8005fc4:	f7ff bb28 	b.w	8005618 <_dtoa_r+0x28>
 8005fc8:	6932      	ldr	r2, [r6, #16]
 8005fca:	f106 010c 	add.w	r1, r6, #12
 8005fce:	3202      	adds	r2, #2
 8005fd0:	0092      	lsls	r2, r2, #2
 8005fd2:	300c      	adds	r0, #12
 8005fd4:	f000 fc8c 	bl	80068f0 <memcpy>
 8005fd8:	2201      	movs	r2, #1
 8005fda:	4639      	mov	r1, r7
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 feed 	bl	8006dbc <__lshift>
 8005fe2:	46b0      	mov	r8, r6
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	9b03      	ldr	r3, [sp, #12]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	9308      	str	r3, [sp, #32]
 8005fec:	9b03      	ldr	r3, [sp, #12]
 8005fee:	444b      	add	r3, r9
 8005ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ff2:	9b04      	ldr	r3, [sp, #16]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8005ffa:	9b08      	ldr	r3, [sp, #32]
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	3b01      	subs	r3, #1
 8006000:	4658      	mov	r0, fp
 8006002:	9304      	str	r3, [sp, #16]
 8006004:	f7ff fa68 	bl	80054d8 <quorem>
 8006008:	4603      	mov	r3, r0
 800600a:	4641      	mov	r1, r8
 800600c:	3330      	adds	r3, #48	; 0x30
 800600e:	9006      	str	r0, [sp, #24]
 8006010:	4658      	mov	r0, fp
 8006012:	930b      	str	r3, [sp, #44]	; 0x2c
 8006014:	f000 ff42 	bl	8006e9c <__mcmp>
 8006018:	4632      	mov	r2, r6
 800601a:	4681      	mov	r9, r0
 800601c:	4621      	mov	r1, r4
 800601e:	4628      	mov	r0, r5
 8006020:	f000 ff58 	bl	8006ed4 <__mdiff>
 8006024:	68c2      	ldr	r2, [r0, #12]
 8006026:	4607      	mov	r7, r0
 8006028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800602a:	bb02      	cbnz	r2, 800606e <_dtoa_r+0xa7e>
 800602c:	4601      	mov	r1, r0
 800602e:	4658      	mov	r0, fp
 8006030:	f000 ff34 	bl	8006e9c <__mcmp>
 8006034:	4602      	mov	r2, r0
 8006036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006038:	4639      	mov	r1, r7
 800603a:	4628      	mov	r0, r5
 800603c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006040:	f000 fca4 	bl	800698c <_Bfree>
 8006044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006048:	9f08      	ldr	r7, [sp, #32]
 800604a:	ea43 0102 	orr.w	r1, r3, r2
 800604e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006050:	430b      	orrs	r3, r1
 8006052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006054:	d10d      	bne.n	8006072 <_dtoa_r+0xa82>
 8006056:	2b39      	cmp	r3, #57	; 0x39
 8006058:	d029      	beq.n	80060ae <_dtoa_r+0xabe>
 800605a:	f1b9 0f00 	cmp.w	r9, #0
 800605e:	dd01      	ble.n	8006064 <_dtoa_r+0xa74>
 8006060:	9b06      	ldr	r3, [sp, #24]
 8006062:	3331      	adds	r3, #49	; 0x31
 8006064:	9a04      	ldr	r2, [sp, #16]
 8006066:	7013      	strb	r3, [r2, #0]
 8006068:	e776      	b.n	8005f58 <_dtoa_r+0x968>
 800606a:	4630      	mov	r0, r6
 800606c:	e7b9      	b.n	8005fe2 <_dtoa_r+0x9f2>
 800606e:	2201      	movs	r2, #1
 8006070:	e7e2      	b.n	8006038 <_dtoa_r+0xa48>
 8006072:	f1b9 0f00 	cmp.w	r9, #0
 8006076:	db06      	blt.n	8006086 <_dtoa_r+0xa96>
 8006078:	9922      	ldr	r1, [sp, #136]	; 0x88
 800607a:	ea41 0909 	orr.w	r9, r1, r9
 800607e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006080:	ea59 0101 	orrs.w	r1, r9, r1
 8006084:	d120      	bne.n	80060c8 <_dtoa_r+0xad8>
 8006086:	2a00      	cmp	r2, #0
 8006088:	ddec      	ble.n	8006064 <_dtoa_r+0xa74>
 800608a:	4659      	mov	r1, fp
 800608c:	2201      	movs	r2, #1
 800608e:	4628      	mov	r0, r5
 8006090:	9308      	str	r3, [sp, #32]
 8006092:	f000 fe93 	bl	8006dbc <__lshift>
 8006096:	4621      	mov	r1, r4
 8006098:	4683      	mov	fp, r0
 800609a:	f000 feff 	bl	8006e9c <__mcmp>
 800609e:	2800      	cmp	r0, #0
 80060a0:	9b08      	ldr	r3, [sp, #32]
 80060a2:	dc02      	bgt.n	80060aa <_dtoa_r+0xaba>
 80060a4:	d1de      	bne.n	8006064 <_dtoa_r+0xa74>
 80060a6:	07da      	lsls	r2, r3, #31
 80060a8:	d5dc      	bpl.n	8006064 <_dtoa_r+0xa74>
 80060aa:	2b39      	cmp	r3, #57	; 0x39
 80060ac:	d1d8      	bne.n	8006060 <_dtoa_r+0xa70>
 80060ae:	2339      	movs	r3, #57	; 0x39
 80060b0:	9a04      	ldr	r2, [sp, #16]
 80060b2:	7013      	strb	r3, [r2, #0]
 80060b4:	463b      	mov	r3, r7
 80060b6:	461f      	mov	r7, r3
 80060b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80060bc:	3b01      	subs	r3, #1
 80060be:	2a39      	cmp	r2, #57	; 0x39
 80060c0:	d050      	beq.n	8006164 <_dtoa_r+0xb74>
 80060c2:	3201      	adds	r2, #1
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	e747      	b.n	8005f58 <_dtoa_r+0x968>
 80060c8:	2a00      	cmp	r2, #0
 80060ca:	dd03      	ble.n	80060d4 <_dtoa_r+0xae4>
 80060cc:	2b39      	cmp	r3, #57	; 0x39
 80060ce:	d0ee      	beq.n	80060ae <_dtoa_r+0xabe>
 80060d0:	3301      	adds	r3, #1
 80060d2:	e7c7      	b.n	8006064 <_dtoa_r+0xa74>
 80060d4:	9a08      	ldr	r2, [sp, #32]
 80060d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060dc:	428a      	cmp	r2, r1
 80060de:	d02a      	beq.n	8006136 <_dtoa_r+0xb46>
 80060e0:	4659      	mov	r1, fp
 80060e2:	2300      	movs	r3, #0
 80060e4:	220a      	movs	r2, #10
 80060e6:	4628      	mov	r0, r5
 80060e8:	f000 fc72 	bl	80069d0 <__multadd>
 80060ec:	45b0      	cmp	r8, r6
 80060ee:	4683      	mov	fp, r0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	f04f 020a 	mov.w	r2, #10
 80060f8:	4641      	mov	r1, r8
 80060fa:	4628      	mov	r0, r5
 80060fc:	d107      	bne.n	800610e <_dtoa_r+0xb1e>
 80060fe:	f000 fc67 	bl	80069d0 <__multadd>
 8006102:	4680      	mov	r8, r0
 8006104:	4606      	mov	r6, r0
 8006106:	9b08      	ldr	r3, [sp, #32]
 8006108:	3301      	adds	r3, #1
 800610a:	9308      	str	r3, [sp, #32]
 800610c:	e775      	b.n	8005ffa <_dtoa_r+0xa0a>
 800610e:	f000 fc5f 	bl	80069d0 <__multadd>
 8006112:	4631      	mov	r1, r6
 8006114:	4680      	mov	r8, r0
 8006116:	2300      	movs	r3, #0
 8006118:	220a      	movs	r2, #10
 800611a:	4628      	mov	r0, r5
 800611c:	f000 fc58 	bl	80069d0 <__multadd>
 8006120:	4606      	mov	r6, r0
 8006122:	e7f0      	b.n	8006106 <_dtoa_r+0xb16>
 8006124:	f1b9 0f00 	cmp.w	r9, #0
 8006128:	bfcc      	ite	gt
 800612a:	464f      	movgt	r7, r9
 800612c:	2701      	movle	r7, #1
 800612e:	f04f 0800 	mov.w	r8, #0
 8006132:	9a03      	ldr	r2, [sp, #12]
 8006134:	4417      	add	r7, r2
 8006136:	4659      	mov	r1, fp
 8006138:	2201      	movs	r2, #1
 800613a:	4628      	mov	r0, r5
 800613c:	9308      	str	r3, [sp, #32]
 800613e:	f000 fe3d 	bl	8006dbc <__lshift>
 8006142:	4621      	mov	r1, r4
 8006144:	4683      	mov	fp, r0
 8006146:	f000 fea9 	bl	8006e9c <__mcmp>
 800614a:	2800      	cmp	r0, #0
 800614c:	dcb2      	bgt.n	80060b4 <_dtoa_r+0xac4>
 800614e:	d102      	bne.n	8006156 <_dtoa_r+0xb66>
 8006150:	9b08      	ldr	r3, [sp, #32]
 8006152:	07db      	lsls	r3, r3, #31
 8006154:	d4ae      	bmi.n	80060b4 <_dtoa_r+0xac4>
 8006156:	463b      	mov	r3, r7
 8006158:	461f      	mov	r7, r3
 800615a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800615e:	2a30      	cmp	r2, #48	; 0x30
 8006160:	d0fa      	beq.n	8006158 <_dtoa_r+0xb68>
 8006162:	e6f9      	b.n	8005f58 <_dtoa_r+0x968>
 8006164:	9a03      	ldr	r2, [sp, #12]
 8006166:	429a      	cmp	r2, r3
 8006168:	d1a5      	bne.n	80060b6 <_dtoa_r+0xac6>
 800616a:	2331      	movs	r3, #49	; 0x31
 800616c:	f10a 0a01 	add.w	sl, sl, #1
 8006170:	e779      	b.n	8006066 <_dtoa_r+0xa76>
 8006172:	4b14      	ldr	r3, [pc, #80]	; (80061c4 <_dtoa_r+0xbd4>)
 8006174:	f7ff baa8 	b.w	80056c8 <_dtoa_r+0xd8>
 8006178:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800617a:	2b00      	cmp	r3, #0
 800617c:	f47f aa81 	bne.w	8005682 <_dtoa_r+0x92>
 8006180:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <_dtoa_r+0xbd8>)
 8006182:	f7ff baa1 	b.w	80056c8 <_dtoa_r+0xd8>
 8006186:	f1b9 0f00 	cmp.w	r9, #0
 800618a:	dc03      	bgt.n	8006194 <_dtoa_r+0xba4>
 800618c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800618e:	2b02      	cmp	r3, #2
 8006190:	f73f aecb 	bgt.w	8005f2a <_dtoa_r+0x93a>
 8006194:	9f03      	ldr	r7, [sp, #12]
 8006196:	4621      	mov	r1, r4
 8006198:	4658      	mov	r0, fp
 800619a:	f7ff f99d 	bl	80054d8 <quorem>
 800619e:	9a03      	ldr	r2, [sp, #12]
 80061a0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80061a4:	f807 3b01 	strb.w	r3, [r7], #1
 80061a8:	1aba      	subs	r2, r7, r2
 80061aa:	4591      	cmp	r9, r2
 80061ac:	ddba      	ble.n	8006124 <_dtoa_r+0xb34>
 80061ae:	4659      	mov	r1, fp
 80061b0:	2300      	movs	r3, #0
 80061b2:	220a      	movs	r2, #10
 80061b4:	4628      	mov	r0, r5
 80061b6:	f000 fc0b 	bl	80069d0 <__multadd>
 80061ba:	4683      	mov	fp, r0
 80061bc:	e7eb      	b.n	8006196 <_dtoa_r+0xba6>
 80061be:	bf00      	nop
 80061c0:	08008568 	.word	0x08008568
 80061c4:	0800836c 	.word	0x0800836c
 80061c8:	080084e9 	.word	0x080084e9

080061cc <rshift>:
 80061cc:	6903      	ldr	r3, [r0, #16]
 80061ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80061d6:	f100 0414 	add.w	r4, r0, #20
 80061da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80061de:	dd46      	ble.n	800626e <rshift+0xa2>
 80061e0:	f011 011f 	ands.w	r1, r1, #31
 80061e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80061e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80061ec:	d10c      	bne.n	8006208 <rshift+0x3c>
 80061ee:	4629      	mov	r1, r5
 80061f0:	f100 0710 	add.w	r7, r0, #16
 80061f4:	42b1      	cmp	r1, r6
 80061f6:	d335      	bcc.n	8006264 <rshift+0x98>
 80061f8:	1a9b      	subs	r3, r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	1eea      	subs	r2, r5, #3
 80061fe:	4296      	cmp	r6, r2
 8006200:	bf38      	it	cc
 8006202:	2300      	movcc	r3, #0
 8006204:	4423      	add	r3, r4
 8006206:	e015      	b.n	8006234 <rshift+0x68>
 8006208:	46a1      	mov	r9, r4
 800620a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800620e:	f1c1 0820 	rsb	r8, r1, #32
 8006212:	40cf      	lsrs	r7, r1
 8006214:	f105 0e04 	add.w	lr, r5, #4
 8006218:	4576      	cmp	r6, lr
 800621a:	46f4      	mov	ip, lr
 800621c:	d816      	bhi.n	800624c <rshift+0x80>
 800621e:	1a9a      	subs	r2, r3, r2
 8006220:	0092      	lsls	r2, r2, #2
 8006222:	3a04      	subs	r2, #4
 8006224:	3501      	adds	r5, #1
 8006226:	42ae      	cmp	r6, r5
 8006228:	bf38      	it	cc
 800622a:	2200      	movcc	r2, #0
 800622c:	18a3      	adds	r3, r4, r2
 800622e:	50a7      	str	r7, [r4, r2]
 8006230:	b107      	cbz	r7, 8006234 <rshift+0x68>
 8006232:	3304      	adds	r3, #4
 8006234:	42a3      	cmp	r3, r4
 8006236:	eba3 0204 	sub.w	r2, r3, r4
 800623a:	bf08      	it	eq
 800623c:	2300      	moveq	r3, #0
 800623e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006242:	6102      	str	r2, [r0, #16]
 8006244:	bf08      	it	eq
 8006246:	6143      	streq	r3, [r0, #20]
 8006248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800624c:	f8dc c000 	ldr.w	ip, [ip]
 8006250:	fa0c fc08 	lsl.w	ip, ip, r8
 8006254:	ea4c 0707 	orr.w	r7, ip, r7
 8006258:	f849 7b04 	str.w	r7, [r9], #4
 800625c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006260:	40cf      	lsrs	r7, r1
 8006262:	e7d9      	b.n	8006218 <rshift+0x4c>
 8006264:	f851 cb04 	ldr.w	ip, [r1], #4
 8006268:	f847 cf04 	str.w	ip, [r7, #4]!
 800626c:	e7c2      	b.n	80061f4 <rshift+0x28>
 800626e:	4623      	mov	r3, r4
 8006270:	e7e0      	b.n	8006234 <rshift+0x68>

08006272 <__hexdig_fun>:
 8006272:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006276:	2b09      	cmp	r3, #9
 8006278:	d802      	bhi.n	8006280 <__hexdig_fun+0xe>
 800627a:	3820      	subs	r0, #32
 800627c:	b2c0      	uxtb	r0, r0
 800627e:	4770      	bx	lr
 8006280:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006284:	2b05      	cmp	r3, #5
 8006286:	d801      	bhi.n	800628c <__hexdig_fun+0x1a>
 8006288:	3847      	subs	r0, #71	; 0x47
 800628a:	e7f7      	b.n	800627c <__hexdig_fun+0xa>
 800628c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006290:	2b05      	cmp	r3, #5
 8006292:	d801      	bhi.n	8006298 <__hexdig_fun+0x26>
 8006294:	3827      	subs	r0, #39	; 0x27
 8006296:	e7f1      	b.n	800627c <__hexdig_fun+0xa>
 8006298:	2000      	movs	r0, #0
 800629a:	4770      	bx	lr

0800629c <__gethex>:
 800629c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a0:	b08b      	sub	sp, #44	; 0x2c
 80062a2:	9305      	str	r3, [sp, #20]
 80062a4:	4bb2      	ldr	r3, [pc, #712]	; (8006570 <__gethex+0x2d4>)
 80062a6:	9002      	str	r0, [sp, #8]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	468b      	mov	fp, r1
 80062ac:	4618      	mov	r0, r3
 80062ae:	4690      	mov	r8, r2
 80062b0:	9303      	str	r3, [sp, #12]
 80062b2:	f7f9 ff4d 	bl	8000150 <strlen>
 80062b6:	4682      	mov	sl, r0
 80062b8:	9b03      	ldr	r3, [sp, #12]
 80062ba:	f8db 2000 	ldr.w	r2, [fp]
 80062be:	4403      	add	r3, r0
 80062c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80062c4:	9306      	str	r3, [sp, #24]
 80062c6:	1c93      	adds	r3, r2, #2
 80062c8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80062cc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80062d0:	32fe      	adds	r2, #254	; 0xfe
 80062d2:	18d1      	adds	r1, r2, r3
 80062d4:	461f      	mov	r7, r3
 80062d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80062da:	9101      	str	r1, [sp, #4]
 80062dc:	2830      	cmp	r0, #48	; 0x30
 80062de:	d0f8      	beq.n	80062d2 <__gethex+0x36>
 80062e0:	f7ff ffc7 	bl	8006272 <__hexdig_fun>
 80062e4:	4604      	mov	r4, r0
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d13a      	bne.n	8006360 <__gethex+0xc4>
 80062ea:	4652      	mov	r2, sl
 80062ec:	4638      	mov	r0, r7
 80062ee:	9903      	ldr	r1, [sp, #12]
 80062f0:	f001 fa26 	bl	8007740 <strncmp>
 80062f4:	4605      	mov	r5, r0
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d166      	bne.n	80063c8 <__gethex+0x12c>
 80062fa:	f817 000a 	ldrb.w	r0, [r7, sl]
 80062fe:	eb07 060a 	add.w	r6, r7, sl
 8006302:	f7ff ffb6 	bl	8006272 <__hexdig_fun>
 8006306:	2800      	cmp	r0, #0
 8006308:	d060      	beq.n	80063cc <__gethex+0x130>
 800630a:	4633      	mov	r3, r6
 800630c:	7818      	ldrb	r0, [r3, #0]
 800630e:	461f      	mov	r7, r3
 8006310:	2830      	cmp	r0, #48	; 0x30
 8006312:	f103 0301 	add.w	r3, r3, #1
 8006316:	d0f9      	beq.n	800630c <__gethex+0x70>
 8006318:	f7ff ffab 	bl	8006272 <__hexdig_fun>
 800631c:	2301      	movs	r3, #1
 800631e:	fab0 f480 	clz	r4, r0
 8006322:	4635      	mov	r5, r6
 8006324:	0964      	lsrs	r4, r4, #5
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	463a      	mov	r2, r7
 800632a:	4616      	mov	r6, r2
 800632c:	7830      	ldrb	r0, [r6, #0]
 800632e:	3201      	adds	r2, #1
 8006330:	f7ff ff9f 	bl	8006272 <__hexdig_fun>
 8006334:	2800      	cmp	r0, #0
 8006336:	d1f8      	bne.n	800632a <__gethex+0x8e>
 8006338:	4652      	mov	r2, sl
 800633a:	4630      	mov	r0, r6
 800633c:	9903      	ldr	r1, [sp, #12]
 800633e:	f001 f9ff 	bl	8007740 <strncmp>
 8006342:	b980      	cbnz	r0, 8006366 <__gethex+0xca>
 8006344:	b94d      	cbnz	r5, 800635a <__gethex+0xbe>
 8006346:	eb06 050a 	add.w	r5, r6, sl
 800634a:	462a      	mov	r2, r5
 800634c:	4616      	mov	r6, r2
 800634e:	7830      	ldrb	r0, [r6, #0]
 8006350:	3201      	adds	r2, #1
 8006352:	f7ff ff8e 	bl	8006272 <__hexdig_fun>
 8006356:	2800      	cmp	r0, #0
 8006358:	d1f8      	bne.n	800634c <__gethex+0xb0>
 800635a:	1bad      	subs	r5, r5, r6
 800635c:	00ad      	lsls	r5, r5, #2
 800635e:	e004      	b.n	800636a <__gethex+0xce>
 8006360:	2400      	movs	r4, #0
 8006362:	4625      	mov	r5, r4
 8006364:	e7e0      	b.n	8006328 <__gethex+0x8c>
 8006366:	2d00      	cmp	r5, #0
 8006368:	d1f7      	bne.n	800635a <__gethex+0xbe>
 800636a:	7833      	ldrb	r3, [r6, #0]
 800636c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006370:	2b50      	cmp	r3, #80	; 0x50
 8006372:	d139      	bne.n	80063e8 <__gethex+0x14c>
 8006374:	7873      	ldrb	r3, [r6, #1]
 8006376:	2b2b      	cmp	r3, #43	; 0x2b
 8006378:	d02a      	beq.n	80063d0 <__gethex+0x134>
 800637a:	2b2d      	cmp	r3, #45	; 0x2d
 800637c:	d02c      	beq.n	80063d8 <__gethex+0x13c>
 800637e:	f04f 0900 	mov.w	r9, #0
 8006382:	1c71      	adds	r1, r6, #1
 8006384:	7808      	ldrb	r0, [r1, #0]
 8006386:	f7ff ff74 	bl	8006272 <__hexdig_fun>
 800638a:	1e43      	subs	r3, r0, #1
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b18      	cmp	r3, #24
 8006390:	d82a      	bhi.n	80063e8 <__gethex+0x14c>
 8006392:	f1a0 0210 	sub.w	r2, r0, #16
 8006396:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800639a:	f7ff ff6a 	bl	8006272 <__hexdig_fun>
 800639e:	1e43      	subs	r3, r0, #1
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b18      	cmp	r3, #24
 80063a4:	d91b      	bls.n	80063de <__gethex+0x142>
 80063a6:	f1b9 0f00 	cmp.w	r9, #0
 80063aa:	d000      	beq.n	80063ae <__gethex+0x112>
 80063ac:	4252      	negs	r2, r2
 80063ae:	4415      	add	r5, r2
 80063b0:	f8cb 1000 	str.w	r1, [fp]
 80063b4:	b1d4      	cbz	r4, 80063ec <__gethex+0x150>
 80063b6:	9b01      	ldr	r3, [sp, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bf14      	ite	ne
 80063bc:	2700      	movne	r7, #0
 80063be:	2706      	moveq	r7, #6
 80063c0:	4638      	mov	r0, r7
 80063c2:	b00b      	add	sp, #44	; 0x2c
 80063c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c8:	463e      	mov	r6, r7
 80063ca:	4625      	mov	r5, r4
 80063cc:	2401      	movs	r4, #1
 80063ce:	e7cc      	b.n	800636a <__gethex+0xce>
 80063d0:	f04f 0900 	mov.w	r9, #0
 80063d4:	1cb1      	adds	r1, r6, #2
 80063d6:	e7d5      	b.n	8006384 <__gethex+0xe8>
 80063d8:	f04f 0901 	mov.w	r9, #1
 80063dc:	e7fa      	b.n	80063d4 <__gethex+0x138>
 80063de:	230a      	movs	r3, #10
 80063e0:	fb03 0202 	mla	r2, r3, r2, r0
 80063e4:	3a10      	subs	r2, #16
 80063e6:	e7d6      	b.n	8006396 <__gethex+0xfa>
 80063e8:	4631      	mov	r1, r6
 80063ea:	e7e1      	b.n	80063b0 <__gethex+0x114>
 80063ec:	4621      	mov	r1, r4
 80063ee:	1bf3      	subs	r3, r6, r7
 80063f0:	3b01      	subs	r3, #1
 80063f2:	2b07      	cmp	r3, #7
 80063f4:	dc0a      	bgt.n	800640c <__gethex+0x170>
 80063f6:	9802      	ldr	r0, [sp, #8]
 80063f8:	f000 fa88 	bl	800690c <_Balloc>
 80063fc:	4604      	mov	r4, r0
 80063fe:	b940      	cbnz	r0, 8006412 <__gethex+0x176>
 8006400:	4602      	mov	r2, r0
 8006402:	21de      	movs	r1, #222	; 0xde
 8006404:	4b5b      	ldr	r3, [pc, #364]	; (8006574 <__gethex+0x2d8>)
 8006406:	485c      	ldr	r0, [pc, #368]	; (8006578 <__gethex+0x2dc>)
 8006408:	f001 f9bc 	bl	8007784 <__assert_func>
 800640c:	3101      	adds	r1, #1
 800640e:	105b      	asrs	r3, r3, #1
 8006410:	e7ef      	b.n	80063f2 <__gethex+0x156>
 8006412:	f04f 0b00 	mov.w	fp, #0
 8006416:	f100 0914 	add.w	r9, r0, #20
 800641a:	f1ca 0301 	rsb	r3, sl, #1
 800641e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006422:	f8cd b004 	str.w	fp, [sp, #4]
 8006426:	9308      	str	r3, [sp, #32]
 8006428:	42b7      	cmp	r7, r6
 800642a:	d33f      	bcc.n	80064ac <__gethex+0x210>
 800642c:	9f04      	ldr	r7, [sp, #16]
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	f847 3b04 	str.w	r3, [r7], #4
 8006434:	eba7 0709 	sub.w	r7, r7, r9
 8006438:	10bf      	asrs	r7, r7, #2
 800643a:	6127      	str	r7, [r4, #16]
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fb57 	bl	8006af0 <__hi0bits>
 8006442:	017f      	lsls	r7, r7, #5
 8006444:	f8d8 6000 	ldr.w	r6, [r8]
 8006448:	1a3f      	subs	r7, r7, r0
 800644a:	42b7      	cmp	r7, r6
 800644c:	dd62      	ble.n	8006514 <__gethex+0x278>
 800644e:	1bbf      	subs	r7, r7, r6
 8006450:	4639      	mov	r1, r7
 8006452:	4620      	mov	r0, r4
 8006454:	f000 fef1 	bl	800723a <__any_on>
 8006458:	4682      	mov	sl, r0
 800645a:	b1a8      	cbz	r0, 8006488 <__gethex+0x1ec>
 800645c:	f04f 0a01 	mov.w	sl, #1
 8006460:	1e7b      	subs	r3, r7, #1
 8006462:	1159      	asrs	r1, r3, #5
 8006464:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006468:	f003 021f 	and.w	r2, r3, #31
 800646c:	fa0a f202 	lsl.w	r2, sl, r2
 8006470:	420a      	tst	r2, r1
 8006472:	d009      	beq.n	8006488 <__gethex+0x1ec>
 8006474:	4553      	cmp	r3, sl
 8006476:	dd05      	ble.n	8006484 <__gethex+0x1e8>
 8006478:	4620      	mov	r0, r4
 800647a:	1eb9      	subs	r1, r7, #2
 800647c:	f000 fedd 	bl	800723a <__any_on>
 8006480:	2800      	cmp	r0, #0
 8006482:	d144      	bne.n	800650e <__gethex+0x272>
 8006484:	f04f 0a02 	mov.w	sl, #2
 8006488:	4639      	mov	r1, r7
 800648a:	4620      	mov	r0, r4
 800648c:	f7ff fe9e 	bl	80061cc <rshift>
 8006490:	443d      	add	r5, r7
 8006492:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006496:	42ab      	cmp	r3, r5
 8006498:	da4a      	bge.n	8006530 <__gethex+0x294>
 800649a:	4621      	mov	r1, r4
 800649c:	9802      	ldr	r0, [sp, #8]
 800649e:	f000 fa75 	bl	800698c <_Bfree>
 80064a2:	2300      	movs	r3, #0
 80064a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80064a6:	27a3      	movs	r7, #163	; 0xa3
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e789      	b.n	80063c0 <__gethex+0x124>
 80064ac:	1e73      	subs	r3, r6, #1
 80064ae:	9a06      	ldr	r2, [sp, #24]
 80064b0:	9307      	str	r3, [sp, #28]
 80064b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d019      	beq.n	80064ee <__gethex+0x252>
 80064ba:	f1bb 0f20 	cmp.w	fp, #32
 80064be:	d107      	bne.n	80064d0 <__gethex+0x234>
 80064c0:	9b04      	ldr	r3, [sp, #16]
 80064c2:	9a01      	ldr	r2, [sp, #4]
 80064c4:	f843 2b04 	str.w	r2, [r3], #4
 80064c8:	9304      	str	r3, [sp, #16]
 80064ca:	2300      	movs	r3, #0
 80064cc:	469b      	mov	fp, r3
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80064d4:	f7ff fecd 	bl	8006272 <__hexdig_fun>
 80064d8:	9b01      	ldr	r3, [sp, #4]
 80064da:	f000 000f 	and.w	r0, r0, #15
 80064de:	fa00 f00b 	lsl.w	r0, r0, fp
 80064e2:	4303      	orrs	r3, r0
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	f10b 0b04 	add.w	fp, fp, #4
 80064ea:	9b07      	ldr	r3, [sp, #28]
 80064ec:	e00d      	b.n	800650a <__gethex+0x26e>
 80064ee:	9a08      	ldr	r2, [sp, #32]
 80064f0:	1e73      	subs	r3, r6, #1
 80064f2:	4413      	add	r3, r2
 80064f4:	42bb      	cmp	r3, r7
 80064f6:	d3e0      	bcc.n	80064ba <__gethex+0x21e>
 80064f8:	4618      	mov	r0, r3
 80064fa:	4652      	mov	r2, sl
 80064fc:	9903      	ldr	r1, [sp, #12]
 80064fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006500:	f001 f91e 	bl	8007740 <strncmp>
 8006504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006506:	2800      	cmp	r0, #0
 8006508:	d1d7      	bne.n	80064ba <__gethex+0x21e>
 800650a:	461e      	mov	r6, r3
 800650c:	e78c      	b.n	8006428 <__gethex+0x18c>
 800650e:	f04f 0a03 	mov.w	sl, #3
 8006512:	e7b9      	b.n	8006488 <__gethex+0x1ec>
 8006514:	da09      	bge.n	800652a <__gethex+0x28e>
 8006516:	1bf7      	subs	r7, r6, r7
 8006518:	4621      	mov	r1, r4
 800651a:	463a      	mov	r2, r7
 800651c:	9802      	ldr	r0, [sp, #8]
 800651e:	f000 fc4d 	bl	8006dbc <__lshift>
 8006522:	4604      	mov	r4, r0
 8006524:	1bed      	subs	r5, r5, r7
 8006526:	f100 0914 	add.w	r9, r0, #20
 800652a:	f04f 0a00 	mov.w	sl, #0
 800652e:	e7b0      	b.n	8006492 <__gethex+0x1f6>
 8006530:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006534:	42a8      	cmp	r0, r5
 8006536:	dd72      	ble.n	800661e <__gethex+0x382>
 8006538:	1b45      	subs	r5, r0, r5
 800653a:	42ae      	cmp	r6, r5
 800653c:	dc35      	bgt.n	80065aa <__gethex+0x30e>
 800653e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d029      	beq.n	800659a <__gethex+0x2fe>
 8006546:	2b03      	cmp	r3, #3
 8006548:	d02b      	beq.n	80065a2 <__gethex+0x306>
 800654a:	2b01      	cmp	r3, #1
 800654c:	d11c      	bne.n	8006588 <__gethex+0x2ec>
 800654e:	42ae      	cmp	r6, r5
 8006550:	d11a      	bne.n	8006588 <__gethex+0x2ec>
 8006552:	2e01      	cmp	r6, #1
 8006554:	d112      	bne.n	800657c <__gethex+0x2e0>
 8006556:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800655a:	9a05      	ldr	r2, [sp, #20]
 800655c:	2762      	movs	r7, #98	; 0x62
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	2301      	movs	r3, #1
 8006562:	6123      	str	r3, [r4, #16]
 8006564:	f8c9 3000 	str.w	r3, [r9]
 8006568:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800656a:	601c      	str	r4, [r3, #0]
 800656c:	e728      	b.n	80063c0 <__gethex+0x124>
 800656e:	bf00      	nop
 8006570:	080085e0 	.word	0x080085e0
 8006574:	08008568 	.word	0x08008568
 8006578:	08008579 	.word	0x08008579
 800657c:	4620      	mov	r0, r4
 800657e:	1e71      	subs	r1, r6, #1
 8006580:	f000 fe5b 	bl	800723a <__any_on>
 8006584:	2800      	cmp	r0, #0
 8006586:	d1e6      	bne.n	8006556 <__gethex+0x2ba>
 8006588:	4621      	mov	r1, r4
 800658a:	9802      	ldr	r0, [sp, #8]
 800658c:	f000 f9fe 	bl	800698c <_Bfree>
 8006590:	2300      	movs	r3, #0
 8006592:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006594:	2750      	movs	r7, #80	; 0x50
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	e712      	b.n	80063c0 <__gethex+0x124>
 800659a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f3      	bne.n	8006588 <__gethex+0x2ec>
 80065a0:	e7d9      	b.n	8006556 <__gethex+0x2ba>
 80065a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1d6      	bne.n	8006556 <__gethex+0x2ba>
 80065a8:	e7ee      	b.n	8006588 <__gethex+0x2ec>
 80065aa:	1e6f      	subs	r7, r5, #1
 80065ac:	f1ba 0f00 	cmp.w	sl, #0
 80065b0:	d132      	bne.n	8006618 <__gethex+0x37c>
 80065b2:	b127      	cbz	r7, 80065be <__gethex+0x322>
 80065b4:	4639      	mov	r1, r7
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 fe3f 	bl	800723a <__any_on>
 80065bc:	4682      	mov	sl, r0
 80065be:	2101      	movs	r1, #1
 80065c0:	117b      	asrs	r3, r7, #5
 80065c2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80065c6:	f007 071f 	and.w	r7, r7, #31
 80065ca:	fa01 f707 	lsl.w	r7, r1, r7
 80065ce:	421f      	tst	r7, r3
 80065d0:	f04f 0702 	mov.w	r7, #2
 80065d4:	4629      	mov	r1, r5
 80065d6:	4620      	mov	r0, r4
 80065d8:	bf18      	it	ne
 80065da:	f04a 0a02 	orrne.w	sl, sl, #2
 80065de:	1b76      	subs	r6, r6, r5
 80065e0:	f7ff fdf4 	bl	80061cc <rshift>
 80065e4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80065e8:	f1ba 0f00 	cmp.w	sl, #0
 80065ec:	d048      	beq.n	8006680 <__gethex+0x3e4>
 80065ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d015      	beq.n	8006622 <__gethex+0x386>
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d017      	beq.n	800662a <__gethex+0x38e>
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d109      	bne.n	8006612 <__gethex+0x376>
 80065fe:	f01a 0f02 	tst.w	sl, #2
 8006602:	d006      	beq.n	8006612 <__gethex+0x376>
 8006604:	f8d9 0000 	ldr.w	r0, [r9]
 8006608:	ea4a 0a00 	orr.w	sl, sl, r0
 800660c:	f01a 0f01 	tst.w	sl, #1
 8006610:	d10e      	bne.n	8006630 <__gethex+0x394>
 8006612:	f047 0710 	orr.w	r7, r7, #16
 8006616:	e033      	b.n	8006680 <__gethex+0x3e4>
 8006618:	f04f 0a01 	mov.w	sl, #1
 800661c:	e7cf      	b.n	80065be <__gethex+0x322>
 800661e:	2701      	movs	r7, #1
 8006620:	e7e2      	b.n	80065e8 <__gethex+0x34c>
 8006622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006624:	f1c3 0301 	rsb	r3, r3, #1
 8006628:	9315      	str	r3, [sp, #84]	; 0x54
 800662a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0f0      	beq.n	8006612 <__gethex+0x376>
 8006630:	f04f 0c00 	mov.w	ip, #0
 8006634:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006638:	f104 0314 	add.w	r3, r4, #20
 800663c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006640:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006644:	4618      	mov	r0, r3
 8006646:	f853 2b04 	ldr.w	r2, [r3], #4
 800664a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800664e:	d01c      	beq.n	800668a <__gethex+0x3ee>
 8006650:	3201      	adds	r2, #1
 8006652:	6002      	str	r2, [r0, #0]
 8006654:	2f02      	cmp	r7, #2
 8006656:	f104 0314 	add.w	r3, r4, #20
 800665a:	d13d      	bne.n	80066d8 <__gethex+0x43c>
 800665c:	f8d8 2000 	ldr.w	r2, [r8]
 8006660:	3a01      	subs	r2, #1
 8006662:	42b2      	cmp	r2, r6
 8006664:	d10a      	bne.n	800667c <__gethex+0x3e0>
 8006666:	2201      	movs	r2, #1
 8006668:	1171      	asrs	r1, r6, #5
 800666a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800666e:	f006 061f 	and.w	r6, r6, #31
 8006672:	fa02 f606 	lsl.w	r6, r2, r6
 8006676:	421e      	tst	r6, r3
 8006678:	bf18      	it	ne
 800667a:	4617      	movne	r7, r2
 800667c:	f047 0720 	orr.w	r7, r7, #32
 8006680:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006682:	601c      	str	r4, [r3, #0]
 8006684:	9b05      	ldr	r3, [sp, #20]
 8006686:	601d      	str	r5, [r3, #0]
 8006688:	e69a      	b.n	80063c0 <__gethex+0x124>
 800668a:	4299      	cmp	r1, r3
 800668c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006690:	d8d8      	bhi.n	8006644 <__gethex+0x3a8>
 8006692:	68a3      	ldr	r3, [r4, #8]
 8006694:	459b      	cmp	fp, r3
 8006696:	db17      	blt.n	80066c8 <__gethex+0x42c>
 8006698:	6861      	ldr	r1, [r4, #4]
 800669a:	9802      	ldr	r0, [sp, #8]
 800669c:	3101      	adds	r1, #1
 800669e:	f000 f935 	bl	800690c <_Balloc>
 80066a2:	4681      	mov	r9, r0
 80066a4:	b918      	cbnz	r0, 80066ae <__gethex+0x412>
 80066a6:	4602      	mov	r2, r0
 80066a8:	2184      	movs	r1, #132	; 0x84
 80066aa:	4b19      	ldr	r3, [pc, #100]	; (8006710 <__gethex+0x474>)
 80066ac:	e6ab      	b.n	8006406 <__gethex+0x16a>
 80066ae:	6922      	ldr	r2, [r4, #16]
 80066b0:	f104 010c 	add.w	r1, r4, #12
 80066b4:	3202      	adds	r2, #2
 80066b6:	0092      	lsls	r2, r2, #2
 80066b8:	300c      	adds	r0, #12
 80066ba:	f000 f919 	bl	80068f0 <memcpy>
 80066be:	4621      	mov	r1, r4
 80066c0:	9802      	ldr	r0, [sp, #8]
 80066c2:	f000 f963 	bl	800698c <_Bfree>
 80066c6:	464c      	mov	r4, r9
 80066c8:	6923      	ldr	r3, [r4, #16]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	6122      	str	r2, [r4, #16]
 80066ce:	2201      	movs	r2, #1
 80066d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066d4:	615a      	str	r2, [r3, #20]
 80066d6:	e7bd      	b.n	8006654 <__gethex+0x3b8>
 80066d8:	6922      	ldr	r2, [r4, #16]
 80066da:	455a      	cmp	r2, fp
 80066dc:	dd0b      	ble.n	80066f6 <__gethex+0x45a>
 80066de:	2101      	movs	r1, #1
 80066e0:	4620      	mov	r0, r4
 80066e2:	f7ff fd73 	bl	80061cc <rshift>
 80066e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80066ea:	3501      	adds	r5, #1
 80066ec:	42ab      	cmp	r3, r5
 80066ee:	f6ff aed4 	blt.w	800649a <__gethex+0x1fe>
 80066f2:	2701      	movs	r7, #1
 80066f4:	e7c2      	b.n	800667c <__gethex+0x3e0>
 80066f6:	f016 061f 	ands.w	r6, r6, #31
 80066fa:	d0fa      	beq.n	80066f2 <__gethex+0x456>
 80066fc:	4453      	add	r3, sl
 80066fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006702:	f000 f9f5 	bl	8006af0 <__hi0bits>
 8006706:	f1c6 0620 	rsb	r6, r6, #32
 800670a:	42b0      	cmp	r0, r6
 800670c:	dbe7      	blt.n	80066de <__gethex+0x442>
 800670e:	e7f0      	b.n	80066f2 <__gethex+0x456>
 8006710:	08008568 	.word	0x08008568

08006714 <L_shift>:
 8006714:	f1c2 0208 	rsb	r2, r2, #8
 8006718:	0092      	lsls	r2, r2, #2
 800671a:	b570      	push	{r4, r5, r6, lr}
 800671c:	f1c2 0620 	rsb	r6, r2, #32
 8006720:	6843      	ldr	r3, [r0, #4]
 8006722:	6804      	ldr	r4, [r0, #0]
 8006724:	fa03 f506 	lsl.w	r5, r3, r6
 8006728:	432c      	orrs	r4, r5
 800672a:	40d3      	lsrs	r3, r2
 800672c:	6004      	str	r4, [r0, #0]
 800672e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006732:	4288      	cmp	r0, r1
 8006734:	d3f4      	bcc.n	8006720 <L_shift+0xc>
 8006736:	bd70      	pop	{r4, r5, r6, pc}

08006738 <__match>:
 8006738:	b530      	push	{r4, r5, lr}
 800673a:	6803      	ldr	r3, [r0, #0]
 800673c:	3301      	adds	r3, #1
 800673e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006742:	b914      	cbnz	r4, 800674a <__match+0x12>
 8006744:	6003      	str	r3, [r0, #0]
 8006746:	2001      	movs	r0, #1
 8006748:	bd30      	pop	{r4, r5, pc}
 800674a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800674e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006752:	2d19      	cmp	r5, #25
 8006754:	bf98      	it	ls
 8006756:	3220      	addls	r2, #32
 8006758:	42a2      	cmp	r2, r4
 800675a:	d0f0      	beq.n	800673e <__match+0x6>
 800675c:	2000      	movs	r0, #0
 800675e:	e7f3      	b.n	8006748 <__match+0x10>

08006760 <__hexnan>:
 8006760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	2500      	movs	r5, #0
 8006766:	680b      	ldr	r3, [r1, #0]
 8006768:	4682      	mov	sl, r0
 800676a:	115e      	asrs	r6, r3, #5
 800676c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006770:	f013 031f 	ands.w	r3, r3, #31
 8006774:	bf18      	it	ne
 8006776:	3604      	addne	r6, #4
 8006778:	1f37      	subs	r7, r6, #4
 800677a:	46b9      	mov	r9, r7
 800677c:	463c      	mov	r4, r7
 800677e:	46ab      	mov	fp, r5
 8006780:	b087      	sub	sp, #28
 8006782:	4690      	mov	r8, r2
 8006784:	6802      	ldr	r2, [r0, #0]
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	f846 5c04 	str.w	r5, [r6, #-4]
 800678c:	9502      	str	r5, [sp, #8]
 800678e:	7851      	ldrb	r1, [r2, #1]
 8006790:	1c53      	adds	r3, r2, #1
 8006792:	9303      	str	r3, [sp, #12]
 8006794:	b341      	cbz	r1, 80067e8 <__hexnan+0x88>
 8006796:	4608      	mov	r0, r1
 8006798:	9205      	str	r2, [sp, #20]
 800679a:	9104      	str	r1, [sp, #16]
 800679c:	f7ff fd69 	bl	8006272 <__hexdig_fun>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d14f      	bne.n	8006844 <__hexnan+0xe4>
 80067a4:	9904      	ldr	r1, [sp, #16]
 80067a6:	9a05      	ldr	r2, [sp, #20]
 80067a8:	2920      	cmp	r1, #32
 80067aa:	d818      	bhi.n	80067de <__hexnan+0x7e>
 80067ac:	9b02      	ldr	r3, [sp, #8]
 80067ae:	459b      	cmp	fp, r3
 80067b0:	dd13      	ble.n	80067da <__hexnan+0x7a>
 80067b2:	454c      	cmp	r4, r9
 80067b4:	d206      	bcs.n	80067c4 <__hexnan+0x64>
 80067b6:	2d07      	cmp	r5, #7
 80067b8:	dc04      	bgt.n	80067c4 <__hexnan+0x64>
 80067ba:	462a      	mov	r2, r5
 80067bc:	4649      	mov	r1, r9
 80067be:	4620      	mov	r0, r4
 80067c0:	f7ff ffa8 	bl	8006714 <L_shift>
 80067c4:	4544      	cmp	r4, r8
 80067c6:	d950      	bls.n	800686a <__hexnan+0x10a>
 80067c8:	2300      	movs	r3, #0
 80067ca:	f1a4 0904 	sub.w	r9, r4, #4
 80067ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80067d2:	461d      	mov	r5, r3
 80067d4:	464c      	mov	r4, r9
 80067d6:	f8cd b008 	str.w	fp, [sp, #8]
 80067da:	9a03      	ldr	r2, [sp, #12]
 80067dc:	e7d7      	b.n	800678e <__hexnan+0x2e>
 80067de:	2929      	cmp	r1, #41	; 0x29
 80067e0:	d156      	bne.n	8006890 <__hexnan+0x130>
 80067e2:	3202      	adds	r2, #2
 80067e4:	f8ca 2000 	str.w	r2, [sl]
 80067e8:	f1bb 0f00 	cmp.w	fp, #0
 80067ec:	d050      	beq.n	8006890 <__hexnan+0x130>
 80067ee:	454c      	cmp	r4, r9
 80067f0:	d206      	bcs.n	8006800 <__hexnan+0xa0>
 80067f2:	2d07      	cmp	r5, #7
 80067f4:	dc04      	bgt.n	8006800 <__hexnan+0xa0>
 80067f6:	462a      	mov	r2, r5
 80067f8:	4649      	mov	r1, r9
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7ff ff8a 	bl	8006714 <L_shift>
 8006800:	4544      	cmp	r4, r8
 8006802:	d934      	bls.n	800686e <__hexnan+0x10e>
 8006804:	4623      	mov	r3, r4
 8006806:	f1a8 0204 	sub.w	r2, r8, #4
 800680a:	f853 1b04 	ldr.w	r1, [r3], #4
 800680e:	429f      	cmp	r7, r3
 8006810:	f842 1f04 	str.w	r1, [r2, #4]!
 8006814:	d2f9      	bcs.n	800680a <__hexnan+0xaa>
 8006816:	1b3b      	subs	r3, r7, r4
 8006818:	f023 0303 	bic.w	r3, r3, #3
 800681c:	3304      	adds	r3, #4
 800681e:	3401      	adds	r4, #1
 8006820:	3e03      	subs	r6, #3
 8006822:	42b4      	cmp	r4, r6
 8006824:	bf88      	it	hi
 8006826:	2304      	movhi	r3, #4
 8006828:	2200      	movs	r2, #0
 800682a:	4443      	add	r3, r8
 800682c:	f843 2b04 	str.w	r2, [r3], #4
 8006830:	429f      	cmp	r7, r3
 8006832:	d2fb      	bcs.n	800682c <__hexnan+0xcc>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	b91b      	cbnz	r3, 8006840 <__hexnan+0xe0>
 8006838:	4547      	cmp	r7, r8
 800683a:	d127      	bne.n	800688c <__hexnan+0x12c>
 800683c:	2301      	movs	r3, #1
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	2005      	movs	r0, #5
 8006842:	e026      	b.n	8006892 <__hexnan+0x132>
 8006844:	3501      	adds	r5, #1
 8006846:	2d08      	cmp	r5, #8
 8006848:	f10b 0b01 	add.w	fp, fp, #1
 800684c:	dd06      	ble.n	800685c <__hexnan+0xfc>
 800684e:	4544      	cmp	r4, r8
 8006850:	d9c3      	bls.n	80067da <__hexnan+0x7a>
 8006852:	2300      	movs	r3, #0
 8006854:	2501      	movs	r5, #1
 8006856:	f844 3c04 	str.w	r3, [r4, #-4]
 800685a:	3c04      	subs	r4, #4
 800685c:	6822      	ldr	r2, [r4, #0]
 800685e:	f000 000f 	and.w	r0, r0, #15
 8006862:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006866:	6022      	str	r2, [r4, #0]
 8006868:	e7b7      	b.n	80067da <__hexnan+0x7a>
 800686a:	2508      	movs	r5, #8
 800686c:	e7b5      	b.n	80067da <__hexnan+0x7a>
 800686e:	9b01      	ldr	r3, [sp, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0df      	beq.n	8006834 <__hexnan+0xd4>
 8006874:	f04f 32ff 	mov.w	r2, #4294967295
 8006878:	f1c3 0320 	rsb	r3, r3, #32
 800687c:	fa22 f303 	lsr.w	r3, r2, r3
 8006880:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006884:	401a      	ands	r2, r3
 8006886:	f846 2c04 	str.w	r2, [r6, #-4]
 800688a:	e7d3      	b.n	8006834 <__hexnan+0xd4>
 800688c:	3f04      	subs	r7, #4
 800688e:	e7d1      	b.n	8006834 <__hexnan+0xd4>
 8006890:	2004      	movs	r0, #4
 8006892:	b007      	add	sp, #28
 8006894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006898 <_localeconv_r>:
 8006898:	4800      	ldr	r0, [pc, #0]	; (800689c <_localeconv_r+0x4>)
 800689a:	4770      	bx	lr
 800689c:	20000164 	.word	0x20000164

080068a0 <malloc>:
 80068a0:	4b02      	ldr	r3, [pc, #8]	; (80068ac <malloc+0xc>)
 80068a2:	4601      	mov	r1, r0
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	f000 bd65 	b.w	8007374 <_malloc_r>
 80068aa:	bf00      	nop
 80068ac:	2000000c 	.word	0x2000000c

080068b0 <__ascii_mbtowc>:
 80068b0:	b082      	sub	sp, #8
 80068b2:	b901      	cbnz	r1, 80068b6 <__ascii_mbtowc+0x6>
 80068b4:	a901      	add	r1, sp, #4
 80068b6:	b142      	cbz	r2, 80068ca <__ascii_mbtowc+0x1a>
 80068b8:	b14b      	cbz	r3, 80068ce <__ascii_mbtowc+0x1e>
 80068ba:	7813      	ldrb	r3, [r2, #0]
 80068bc:	600b      	str	r3, [r1, #0]
 80068be:	7812      	ldrb	r2, [r2, #0]
 80068c0:	1e10      	subs	r0, r2, #0
 80068c2:	bf18      	it	ne
 80068c4:	2001      	movne	r0, #1
 80068c6:	b002      	add	sp, #8
 80068c8:	4770      	bx	lr
 80068ca:	4610      	mov	r0, r2
 80068cc:	e7fb      	b.n	80068c6 <__ascii_mbtowc+0x16>
 80068ce:	f06f 0001 	mvn.w	r0, #1
 80068d2:	e7f8      	b.n	80068c6 <__ascii_mbtowc+0x16>

080068d4 <memchr>:
 80068d4:	4603      	mov	r3, r0
 80068d6:	b510      	push	{r4, lr}
 80068d8:	b2c9      	uxtb	r1, r1
 80068da:	4402      	add	r2, r0
 80068dc:	4293      	cmp	r3, r2
 80068de:	4618      	mov	r0, r3
 80068e0:	d101      	bne.n	80068e6 <memchr+0x12>
 80068e2:	2000      	movs	r0, #0
 80068e4:	e003      	b.n	80068ee <memchr+0x1a>
 80068e6:	7804      	ldrb	r4, [r0, #0]
 80068e8:	3301      	adds	r3, #1
 80068ea:	428c      	cmp	r4, r1
 80068ec:	d1f6      	bne.n	80068dc <memchr+0x8>
 80068ee:	bd10      	pop	{r4, pc}

080068f0 <memcpy>:
 80068f0:	440a      	add	r2, r1
 80068f2:	4291      	cmp	r1, r2
 80068f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80068f8:	d100      	bne.n	80068fc <memcpy+0xc>
 80068fa:	4770      	bx	lr
 80068fc:	b510      	push	{r4, lr}
 80068fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006902:	4291      	cmp	r1, r2
 8006904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006908:	d1f9      	bne.n	80068fe <memcpy+0xe>
 800690a:	bd10      	pop	{r4, pc}

0800690c <_Balloc>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006910:	4604      	mov	r4, r0
 8006912:	460d      	mov	r5, r1
 8006914:	b976      	cbnz	r6, 8006934 <_Balloc+0x28>
 8006916:	2010      	movs	r0, #16
 8006918:	f7ff ffc2 	bl	80068a0 <malloc>
 800691c:	4602      	mov	r2, r0
 800691e:	6260      	str	r0, [r4, #36]	; 0x24
 8006920:	b920      	cbnz	r0, 800692c <_Balloc+0x20>
 8006922:	2166      	movs	r1, #102	; 0x66
 8006924:	4b17      	ldr	r3, [pc, #92]	; (8006984 <_Balloc+0x78>)
 8006926:	4818      	ldr	r0, [pc, #96]	; (8006988 <_Balloc+0x7c>)
 8006928:	f000 ff2c 	bl	8007784 <__assert_func>
 800692c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006930:	6006      	str	r6, [r0, #0]
 8006932:	60c6      	str	r6, [r0, #12]
 8006934:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006936:	68f3      	ldr	r3, [r6, #12]
 8006938:	b183      	cbz	r3, 800695c <_Balloc+0x50>
 800693a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006942:	b9b8      	cbnz	r0, 8006974 <_Balloc+0x68>
 8006944:	2101      	movs	r1, #1
 8006946:	fa01 f605 	lsl.w	r6, r1, r5
 800694a:	1d72      	adds	r2, r6, #5
 800694c:	4620      	mov	r0, r4
 800694e:	0092      	lsls	r2, r2, #2
 8006950:	f000 fc94 	bl	800727c <_calloc_r>
 8006954:	b160      	cbz	r0, 8006970 <_Balloc+0x64>
 8006956:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800695a:	e00e      	b.n	800697a <_Balloc+0x6e>
 800695c:	2221      	movs	r2, #33	; 0x21
 800695e:	2104      	movs	r1, #4
 8006960:	4620      	mov	r0, r4
 8006962:	f000 fc8b 	bl	800727c <_calloc_r>
 8006966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006968:	60f0      	str	r0, [r6, #12]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e4      	bne.n	800693a <_Balloc+0x2e>
 8006970:	2000      	movs	r0, #0
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	6802      	ldr	r2, [r0, #0]
 8006976:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800697a:	2300      	movs	r3, #0
 800697c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006980:	e7f7      	b.n	8006972 <_Balloc+0x66>
 8006982:	bf00      	nop
 8006984:	080084f6 	.word	0x080084f6
 8006988:	080085f4 	.word	0x080085f4

0800698c <_Bfree>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006990:	4605      	mov	r5, r0
 8006992:	460c      	mov	r4, r1
 8006994:	b976      	cbnz	r6, 80069b4 <_Bfree+0x28>
 8006996:	2010      	movs	r0, #16
 8006998:	f7ff ff82 	bl	80068a0 <malloc>
 800699c:	4602      	mov	r2, r0
 800699e:	6268      	str	r0, [r5, #36]	; 0x24
 80069a0:	b920      	cbnz	r0, 80069ac <_Bfree+0x20>
 80069a2:	218a      	movs	r1, #138	; 0x8a
 80069a4:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <_Bfree+0x3c>)
 80069a6:	4809      	ldr	r0, [pc, #36]	; (80069cc <_Bfree+0x40>)
 80069a8:	f000 feec 	bl	8007784 <__assert_func>
 80069ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069b0:	6006      	str	r6, [r0, #0]
 80069b2:	60c6      	str	r6, [r0, #12]
 80069b4:	b13c      	cbz	r4, 80069c6 <_Bfree+0x3a>
 80069b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069b8:	6862      	ldr	r2, [r4, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069c0:	6021      	str	r1, [r4, #0]
 80069c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	080084f6 	.word	0x080084f6
 80069cc:	080085f4 	.word	0x080085f4

080069d0 <__multadd>:
 80069d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d4:	4607      	mov	r7, r0
 80069d6:	460c      	mov	r4, r1
 80069d8:	461e      	mov	r6, r3
 80069da:	2000      	movs	r0, #0
 80069dc:	690d      	ldr	r5, [r1, #16]
 80069de:	f101 0c14 	add.w	ip, r1, #20
 80069e2:	f8dc 3000 	ldr.w	r3, [ip]
 80069e6:	3001      	adds	r0, #1
 80069e8:	b299      	uxth	r1, r3
 80069ea:	fb02 6101 	mla	r1, r2, r1, r6
 80069ee:	0c1e      	lsrs	r6, r3, #16
 80069f0:	0c0b      	lsrs	r3, r1, #16
 80069f2:	fb02 3306 	mla	r3, r2, r6, r3
 80069f6:	b289      	uxth	r1, r1
 80069f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069fc:	4285      	cmp	r5, r0
 80069fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a02:	f84c 1b04 	str.w	r1, [ip], #4
 8006a06:	dcec      	bgt.n	80069e2 <__multadd+0x12>
 8006a08:	b30e      	cbz	r6, 8006a4e <__multadd+0x7e>
 8006a0a:	68a3      	ldr	r3, [r4, #8]
 8006a0c:	42ab      	cmp	r3, r5
 8006a0e:	dc19      	bgt.n	8006a44 <__multadd+0x74>
 8006a10:	6861      	ldr	r1, [r4, #4]
 8006a12:	4638      	mov	r0, r7
 8006a14:	3101      	adds	r1, #1
 8006a16:	f7ff ff79 	bl	800690c <_Balloc>
 8006a1a:	4680      	mov	r8, r0
 8006a1c:	b928      	cbnz	r0, 8006a2a <__multadd+0x5a>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	21b5      	movs	r1, #181	; 0xb5
 8006a22:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <__multadd+0x84>)
 8006a24:	480c      	ldr	r0, [pc, #48]	; (8006a58 <__multadd+0x88>)
 8006a26:	f000 fead 	bl	8007784 <__assert_func>
 8006a2a:	6922      	ldr	r2, [r4, #16]
 8006a2c:	f104 010c 	add.w	r1, r4, #12
 8006a30:	3202      	adds	r2, #2
 8006a32:	0092      	lsls	r2, r2, #2
 8006a34:	300c      	adds	r0, #12
 8006a36:	f7ff ff5b 	bl	80068f0 <memcpy>
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f7ff ffa5 	bl	800698c <_Bfree>
 8006a42:	4644      	mov	r4, r8
 8006a44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a48:	3501      	adds	r5, #1
 8006a4a:	615e      	str	r6, [r3, #20]
 8006a4c:	6125      	str	r5, [r4, #16]
 8006a4e:	4620      	mov	r0, r4
 8006a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a54:	08008568 	.word	0x08008568
 8006a58:	080085f4 	.word	0x080085f4

08006a5c <__s2b>:
 8006a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a60:	4615      	mov	r5, r2
 8006a62:	2209      	movs	r2, #9
 8006a64:	461f      	mov	r7, r3
 8006a66:	3308      	adds	r3, #8
 8006a68:	460c      	mov	r4, r1
 8006a6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a6e:	4606      	mov	r6, r0
 8006a70:	2201      	movs	r2, #1
 8006a72:	2100      	movs	r1, #0
 8006a74:	429a      	cmp	r2, r3
 8006a76:	db09      	blt.n	8006a8c <__s2b+0x30>
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f7ff ff47 	bl	800690c <_Balloc>
 8006a7e:	b940      	cbnz	r0, 8006a92 <__s2b+0x36>
 8006a80:	4602      	mov	r2, r0
 8006a82:	21ce      	movs	r1, #206	; 0xce
 8006a84:	4b18      	ldr	r3, [pc, #96]	; (8006ae8 <__s2b+0x8c>)
 8006a86:	4819      	ldr	r0, [pc, #100]	; (8006aec <__s2b+0x90>)
 8006a88:	f000 fe7c 	bl	8007784 <__assert_func>
 8006a8c:	0052      	lsls	r2, r2, #1
 8006a8e:	3101      	adds	r1, #1
 8006a90:	e7f0      	b.n	8006a74 <__s2b+0x18>
 8006a92:	9b08      	ldr	r3, [sp, #32]
 8006a94:	2d09      	cmp	r5, #9
 8006a96:	6143      	str	r3, [r0, #20]
 8006a98:	f04f 0301 	mov.w	r3, #1
 8006a9c:	6103      	str	r3, [r0, #16]
 8006a9e:	dd16      	ble.n	8006ace <__s2b+0x72>
 8006aa0:	f104 0909 	add.w	r9, r4, #9
 8006aa4:	46c8      	mov	r8, r9
 8006aa6:	442c      	add	r4, r5
 8006aa8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006aac:	4601      	mov	r1, r0
 8006aae:	220a      	movs	r2, #10
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	3b30      	subs	r3, #48	; 0x30
 8006ab4:	f7ff ff8c 	bl	80069d0 <__multadd>
 8006ab8:	45a0      	cmp	r8, r4
 8006aba:	d1f5      	bne.n	8006aa8 <__s2b+0x4c>
 8006abc:	f1a5 0408 	sub.w	r4, r5, #8
 8006ac0:	444c      	add	r4, r9
 8006ac2:	1b2d      	subs	r5, r5, r4
 8006ac4:	1963      	adds	r3, r4, r5
 8006ac6:	42bb      	cmp	r3, r7
 8006ac8:	db04      	blt.n	8006ad4 <__s2b+0x78>
 8006aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ace:	2509      	movs	r5, #9
 8006ad0:	340a      	adds	r4, #10
 8006ad2:	e7f6      	b.n	8006ac2 <__s2b+0x66>
 8006ad4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ad8:	4601      	mov	r1, r0
 8006ada:	220a      	movs	r2, #10
 8006adc:	4630      	mov	r0, r6
 8006ade:	3b30      	subs	r3, #48	; 0x30
 8006ae0:	f7ff ff76 	bl	80069d0 <__multadd>
 8006ae4:	e7ee      	b.n	8006ac4 <__s2b+0x68>
 8006ae6:	bf00      	nop
 8006ae8:	08008568 	.word	0x08008568
 8006aec:	080085f4 	.word	0x080085f4

08006af0 <__hi0bits>:
 8006af0:	0c02      	lsrs	r2, r0, #16
 8006af2:	0412      	lsls	r2, r2, #16
 8006af4:	4603      	mov	r3, r0
 8006af6:	b9ca      	cbnz	r2, 8006b2c <__hi0bits+0x3c>
 8006af8:	0403      	lsls	r3, r0, #16
 8006afa:	2010      	movs	r0, #16
 8006afc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b00:	bf04      	itt	eq
 8006b02:	021b      	lsleq	r3, r3, #8
 8006b04:	3008      	addeq	r0, #8
 8006b06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b0a:	bf04      	itt	eq
 8006b0c:	011b      	lsleq	r3, r3, #4
 8006b0e:	3004      	addeq	r0, #4
 8006b10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b14:	bf04      	itt	eq
 8006b16:	009b      	lsleq	r3, r3, #2
 8006b18:	3002      	addeq	r0, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	db05      	blt.n	8006b2a <__hi0bits+0x3a>
 8006b1e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006b22:	f100 0001 	add.w	r0, r0, #1
 8006b26:	bf08      	it	eq
 8006b28:	2020      	moveq	r0, #32
 8006b2a:	4770      	bx	lr
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	e7e5      	b.n	8006afc <__hi0bits+0xc>

08006b30 <__lo0bits>:
 8006b30:	6803      	ldr	r3, [r0, #0]
 8006b32:	4602      	mov	r2, r0
 8006b34:	f013 0007 	ands.w	r0, r3, #7
 8006b38:	d00b      	beq.n	8006b52 <__lo0bits+0x22>
 8006b3a:	07d9      	lsls	r1, r3, #31
 8006b3c:	d421      	bmi.n	8006b82 <__lo0bits+0x52>
 8006b3e:	0798      	lsls	r0, r3, #30
 8006b40:	bf49      	itett	mi
 8006b42:	085b      	lsrmi	r3, r3, #1
 8006b44:	089b      	lsrpl	r3, r3, #2
 8006b46:	2001      	movmi	r0, #1
 8006b48:	6013      	strmi	r3, [r2, #0]
 8006b4a:	bf5c      	itt	pl
 8006b4c:	2002      	movpl	r0, #2
 8006b4e:	6013      	strpl	r3, [r2, #0]
 8006b50:	4770      	bx	lr
 8006b52:	b299      	uxth	r1, r3
 8006b54:	b909      	cbnz	r1, 8006b5a <__lo0bits+0x2a>
 8006b56:	2010      	movs	r0, #16
 8006b58:	0c1b      	lsrs	r3, r3, #16
 8006b5a:	b2d9      	uxtb	r1, r3
 8006b5c:	b909      	cbnz	r1, 8006b62 <__lo0bits+0x32>
 8006b5e:	3008      	adds	r0, #8
 8006b60:	0a1b      	lsrs	r3, r3, #8
 8006b62:	0719      	lsls	r1, r3, #28
 8006b64:	bf04      	itt	eq
 8006b66:	091b      	lsreq	r3, r3, #4
 8006b68:	3004      	addeq	r0, #4
 8006b6a:	0799      	lsls	r1, r3, #30
 8006b6c:	bf04      	itt	eq
 8006b6e:	089b      	lsreq	r3, r3, #2
 8006b70:	3002      	addeq	r0, #2
 8006b72:	07d9      	lsls	r1, r3, #31
 8006b74:	d403      	bmi.n	8006b7e <__lo0bits+0x4e>
 8006b76:	085b      	lsrs	r3, r3, #1
 8006b78:	f100 0001 	add.w	r0, r0, #1
 8006b7c:	d003      	beq.n	8006b86 <__lo0bits+0x56>
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	4770      	bx	lr
 8006b82:	2000      	movs	r0, #0
 8006b84:	4770      	bx	lr
 8006b86:	2020      	movs	r0, #32
 8006b88:	4770      	bx	lr
	...

08006b8c <__i2b>:
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	460c      	mov	r4, r1
 8006b90:	2101      	movs	r1, #1
 8006b92:	f7ff febb 	bl	800690c <_Balloc>
 8006b96:	4602      	mov	r2, r0
 8006b98:	b928      	cbnz	r0, 8006ba6 <__i2b+0x1a>
 8006b9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b9e:	4b04      	ldr	r3, [pc, #16]	; (8006bb0 <__i2b+0x24>)
 8006ba0:	4804      	ldr	r0, [pc, #16]	; (8006bb4 <__i2b+0x28>)
 8006ba2:	f000 fdef 	bl	8007784 <__assert_func>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	6144      	str	r4, [r0, #20]
 8006baa:	6103      	str	r3, [r0, #16]
 8006bac:	bd10      	pop	{r4, pc}
 8006bae:	bf00      	nop
 8006bb0:	08008568 	.word	0x08008568
 8006bb4:	080085f4 	.word	0x080085f4

08006bb8 <__multiply>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	4691      	mov	r9, r2
 8006bbe:	690a      	ldr	r2, [r1, #16]
 8006bc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	bfbe      	ittt	lt
 8006bca:	460b      	movlt	r3, r1
 8006bcc:	464c      	movlt	r4, r9
 8006bce:	4699      	movlt	r9, r3
 8006bd0:	6927      	ldr	r7, [r4, #16]
 8006bd2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006bd6:	68a3      	ldr	r3, [r4, #8]
 8006bd8:	6861      	ldr	r1, [r4, #4]
 8006bda:	eb07 060a 	add.w	r6, r7, sl
 8006bde:	42b3      	cmp	r3, r6
 8006be0:	b085      	sub	sp, #20
 8006be2:	bfb8      	it	lt
 8006be4:	3101      	addlt	r1, #1
 8006be6:	f7ff fe91 	bl	800690c <_Balloc>
 8006bea:	b930      	cbnz	r0, 8006bfa <__multiply+0x42>
 8006bec:	4602      	mov	r2, r0
 8006bee:	f240 115d 	movw	r1, #349	; 0x15d
 8006bf2:	4b43      	ldr	r3, [pc, #268]	; (8006d00 <__multiply+0x148>)
 8006bf4:	4843      	ldr	r0, [pc, #268]	; (8006d04 <__multiply+0x14c>)
 8006bf6:	f000 fdc5 	bl	8007784 <__assert_func>
 8006bfa:	f100 0514 	add.w	r5, r0, #20
 8006bfe:	462b      	mov	r3, r5
 8006c00:	2200      	movs	r2, #0
 8006c02:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c06:	4543      	cmp	r3, r8
 8006c08:	d321      	bcc.n	8006c4e <__multiply+0x96>
 8006c0a:	f104 0314 	add.w	r3, r4, #20
 8006c0e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c12:	f109 0314 	add.w	r3, r9, #20
 8006c16:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c1a:	9202      	str	r2, [sp, #8]
 8006c1c:	1b3a      	subs	r2, r7, r4
 8006c1e:	3a15      	subs	r2, #21
 8006c20:	f022 0203 	bic.w	r2, r2, #3
 8006c24:	3204      	adds	r2, #4
 8006c26:	f104 0115 	add.w	r1, r4, #21
 8006c2a:	428f      	cmp	r7, r1
 8006c2c:	bf38      	it	cc
 8006c2e:	2204      	movcc	r2, #4
 8006c30:	9201      	str	r2, [sp, #4]
 8006c32:	9a02      	ldr	r2, [sp, #8]
 8006c34:	9303      	str	r3, [sp, #12]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d80c      	bhi.n	8006c54 <__multiply+0x9c>
 8006c3a:	2e00      	cmp	r6, #0
 8006c3c:	dd03      	ble.n	8006c46 <__multiply+0x8e>
 8006c3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d059      	beq.n	8006cfa <__multiply+0x142>
 8006c46:	6106      	str	r6, [r0, #16]
 8006c48:	b005      	add	sp, #20
 8006c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c4e:	f843 2b04 	str.w	r2, [r3], #4
 8006c52:	e7d8      	b.n	8006c06 <__multiply+0x4e>
 8006c54:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c58:	f1ba 0f00 	cmp.w	sl, #0
 8006c5c:	d023      	beq.n	8006ca6 <__multiply+0xee>
 8006c5e:	46a9      	mov	r9, r5
 8006c60:	f04f 0c00 	mov.w	ip, #0
 8006c64:	f104 0e14 	add.w	lr, r4, #20
 8006c68:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c6c:	f8d9 1000 	ldr.w	r1, [r9]
 8006c70:	fa1f fb82 	uxth.w	fp, r2
 8006c74:	b289      	uxth	r1, r1
 8006c76:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c7a:	4461      	add	r1, ip
 8006c7c:	f8d9 c000 	ldr.w	ip, [r9]
 8006c80:	0c12      	lsrs	r2, r2, #16
 8006c82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006c86:	fb0a c202 	mla	r2, sl, r2, ip
 8006c8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c8e:	b289      	uxth	r1, r1
 8006c90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c94:	4577      	cmp	r7, lr
 8006c96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c9a:	f849 1b04 	str.w	r1, [r9], #4
 8006c9e:	d8e3      	bhi.n	8006c68 <__multiply+0xb0>
 8006ca0:	9a01      	ldr	r2, [sp, #4]
 8006ca2:	f845 c002 	str.w	ip, [r5, r2]
 8006ca6:	9a03      	ldr	r2, [sp, #12]
 8006ca8:	3304      	adds	r3, #4
 8006caa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cae:	f1b9 0f00 	cmp.w	r9, #0
 8006cb2:	d020      	beq.n	8006cf6 <__multiply+0x13e>
 8006cb4:	46ae      	mov	lr, r5
 8006cb6:	f04f 0a00 	mov.w	sl, #0
 8006cba:	6829      	ldr	r1, [r5, #0]
 8006cbc:	f104 0c14 	add.w	ip, r4, #20
 8006cc0:	f8bc b000 	ldrh.w	fp, [ip]
 8006cc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006cc8:	b289      	uxth	r1, r1
 8006cca:	fb09 220b 	mla	r2, r9, fp, r2
 8006cce:	4492      	add	sl, r2
 8006cd0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006cd4:	f84e 1b04 	str.w	r1, [lr], #4
 8006cd8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006cdc:	f8be 1000 	ldrh.w	r1, [lr]
 8006ce0:	0c12      	lsrs	r2, r2, #16
 8006ce2:	fb09 1102 	mla	r1, r9, r2, r1
 8006ce6:	4567      	cmp	r7, ip
 8006ce8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006cec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006cf0:	d8e6      	bhi.n	8006cc0 <__multiply+0x108>
 8006cf2:	9a01      	ldr	r2, [sp, #4]
 8006cf4:	50a9      	str	r1, [r5, r2]
 8006cf6:	3504      	adds	r5, #4
 8006cf8:	e79b      	b.n	8006c32 <__multiply+0x7a>
 8006cfa:	3e01      	subs	r6, #1
 8006cfc:	e79d      	b.n	8006c3a <__multiply+0x82>
 8006cfe:	bf00      	nop
 8006d00:	08008568 	.word	0x08008568
 8006d04:	080085f4 	.word	0x080085f4

08006d08 <__pow5mult>:
 8006d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d0c:	4615      	mov	r5, r2
 8006d0e:	f012 0203 	ands.w	r2, r2, #3
 8006d12:	4606      	mov	r6, r0
 8006d14:	460f      	mov	r7, r1
 8006d16:	d007      	beq.n	8006d28 <__pow5mult+0x20>
 8006d18:	4c25      	ldr	r4, [pc, #148]	; (8006db0 <__pow5mult+0xa8>)
 8006d1a:	3a01      	subs	r2, #1
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d22:	f7ff fe55 	bl	80069d0 <__multadd>
 8006d26:	4607      	mov	r7, r0
 8006d28:	10ad      	asrs	r5, r5, #2
 8006d2a:	d03d      	beq.n	8006da8 <__pow5mult+0xa0>
 8006d2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d2e:	b97c      	cbnz	r4, 8006d50 <__pow5mult+0x48>
 8006d30:	2010      	movs	r0, #16
 8006d32:	f7ff fdb5 	bl	80068a0 <malloc>
 8006d36:	4602      	mov	r2, r0
 8006d38:	6270      	str	r0, [r6, #36]	; 0x24
 8006d3a:	b928      	cbnz	r0, 8006d48 <__pow5mult+0x40>
 8006d3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d40:	4b1c      	ldr	r3, [pc, #112]	; (8006db4 <__pow5mult+0xac>)
 8006d42:	481d      	ldr	r0, [pc, #116]	; (8006db8 <__pow5mult+0xb0>)
 8006d44:	f000 fd1e 	bl	8007784 <__assert_func>
 8006d48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d4c:	6004      	str	r4, [r0, #0]
 8006d4e:	60c4      	str	r4, [r0, #12]
 8006d50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d58:	b94c      	cbnz	r4, 8006d6e <__pow5mult+0x66>
 8006d5a:	f240 2171 	movw	r1, #625	; 0x271
 8006d5e:	4630      	mov	r0, r6
 8006d60:	f7ff ff14 	bl	8006b8c <__i2b>
 8006d64:	2300      	movs	r3, #0
 8006d66:	4604      	mov	r4, r0
 8006d68:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d6c:	6003      	str	r3, [r0, #0]
 8006d6e:	f04f 0900 	mov.w	r9, #0
 8006d72:	07eb      	lsls	r3, r5, #31
 8006d74:	d50a      	bpl.n	8006d8c <__pow5mult+0x84>
 8006d76:	4639      	mov	r1, r7
 8006d78:	4622      	mov	r2, r4
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	f7ff ff1c 	bl	8006bb8 <__multiply>
 8006d80:	4680      	mov	r8, r0
 8006d82:	4639      	mov	r1, r7
 8006d84:	4630      	mov	r0, r6
 8006d86:	f7ff fe01 	bl	800698c <_Bfree>
 8006d8a:	4647      	mov	r7, r8
 8006d8c:	106d      	asrs	r5, r5, #1
 8006d8e:	d00b      	beq.n	8006da8 <__pow5mult+0xa0>
 8006d90:	6820      	ldr	r0, [r4, #0]
 8006d92:	b938      	cbnz	r0, 8006da4 <__pow5mult+0x9c>
 8006d94:	4622      	mov	r2, r4
 8006d96:	4621      	mov	r1, r4
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f7ff ff0d 	bl	8006bb8 <__multiply>
 8006d9e:	6020      	str	r0, [r4, #0]
 8006da0:	f8c0 9000 	str.w	r9, [r0]
 8006da4:	4604      	mov	r4, r0
 8006da6:	e7e4      	b.n	8006d72 <__pow5mult+0x6a>
 8006da8:	4638      	mov	r0, r7
 8006daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dae:	bf00      	nop
 8006db0:	08008740 	.word	0x08008740
 8006db4:	080084f6 	.word	0x080084f6
 8006db8:	080085f4 	.word	0x080085f4

08006dbc <__lshift>:
 8006dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	4607      	mov	r7, r0
 8006dc4:	4691      	mov	r9, r2
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	6849      	ldr	r1, [r1, #4]
 8006dca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dce:	68a3      	ldr	r3, [r4, #8]
 8006dd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dd4:	f108 0601 	add.w	r6, r8, #1
 8006dd8:	42b3      	cmp	r3, r6
 8006dda:	db0b      	blt.n	8006df4 <__lshift+0x38>
 8006ddc:	4638      	mov	r0, r7
 8006dde:	f7ff fd95 	bl	800690c <_Balloc>
 8006de2:	4605      	mov	r5, r0
 8006de4:	b948      	cbnz	r0, 8006dfa <__lshift+0x3e>
 8006de6:	4602      	mov	r2, r0
 8006de8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006dec:	4b29      	ldr	r3, [pc, #164]	; (8006e94 <__lshift+0xd8>)
 8006dee:	482a      	ldr	r0, [pc, #168]	; (8006e98 <__lshift+0xdc>)
 8006df0:	f000 fcc8 	bl	8007784 <__assert_func>
 8006df4:	3101      	adds	r1, #1
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	e7ee      	b.n	8006dd8 <__lshift+0x1c>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f100 0114 	add.w	r1, r0, #20
 8006e00:	f100 0210 	add.w	r2, r0, #16
 8006e04:	4618      	mov	r0, r3
 8006e06:	4553      	cmp	r3, sl
 8006e08:	db37      	blt.n	8006e7a <__lshift+0xbe>
 8006e0a:	6920      	ldr	r0, [r4, #16]
 8006e0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e10:	f104 0314 	add.w	r3, r4, #20
 8006e14:	f019 091f 	ands.w	r9, r9, #31
 8006e18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e20:	d02f      	beq.n	8006e82 <__lshift+0xc6>
 8006e22:	468a      	mov	sl, r1
 8006e24:	f04f 0c00 	mov.w	ip, #0
 8006e28:	f1c9 0e20 	rsb	lr, r9, #32
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	fa02 f209 	lsl.w	r2, r2, r9
 8006e32:	ea42 020c 	orr.w	r2, r2, ip
 8006e36:	f84a 2b04 	str.w	r2, [sl], #4
 8006e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e3e:	4298      	cmp	r0, r3
 8006e40:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e44:	d8f2      	bhi.n	8006e2c <__lshift+0x70>
 8006e46:	1b03      	subs	r3, r0, r4
 8006e48:	3b15      	subs	r3, #21
 8006e4a:	f023 0303 	bic.w	r3, r3, #3
 8006e4e:	3304      	adds	r3, #4
 8006e50:	f104 0215 	add.w	r2, r4, #21
 8006e54:	4290      	cmp	r0, r2
 8006e56:	bf38      	it	cc
 8006e58:	2304      	movcc	r3, #4
 8006e5a:	f841 c003 	str.w	ip, [r1, r3]
 8006e5e:	f1bc 0f00 	cmp.w	ip, #0
 8006e62:	d001      	beq.n	8006e68 <__lshift+0xac>
 8006e64:	f108 0602 	add.w	r6, r8, #2
 8006e68:	3e01      	subs	r6, #1
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	612e      	str	r6, [r5, #16]
 8006e70:	f7ff fd8c 	bl	800698c <_Bfree>
 8006e74:	4628      	mov	r0, r5
 8006e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e7e:	3301      	adds	r3, #1
 8006e80:	e7c1      	b.n	8006e06 <__lshift+0x4a>
 8006e82:	3904      	subs	r1, #4
 8006e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e88:	4298      	cmp	r0, r3
 8006e8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e8e:	d8f9      	bhi.n	8006e84 <__lshift+0xc8>
 8006e90:	e7ea      	b.n	8006e68 <__lshift+0xac>
 8006e92:	bf00      	nop
 8006e94:	08008568 	.word	0x08008568
 8006e98:	080085f4 	.word	0x080085f4

08006e9c <__mcmp>:
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	690a      	ldr	r2, [r1, #16]
 8006ea0:	6900      	ldr	r0, [r0, #16]
 8006ea2:	b530      	push	{r4, r5, lr}
 8006ea4:	1a80      	subs	r0, r0, r2
 8006ea6:	d10d      	bne.n	8006ec4 <__mcmp+0x28>
 8006ea8:	3314      	adds	r3, #20
 8006eaa:	3114      	adds	r1, #20
 8006eac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006eb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006eb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006eb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ebc:	4295      	cmp	r5, r2
 8006ebe:	d002      	beq.n	8006ec6 <__mcmp+0x2a>
 8006ec0:	d304      	bcc.n	8006ecc <__mcmp+0x30>
 8006ec2:	2001      	movs	r0, #1
 8006ec4:	bd30      	pop	{r4, r5, pc}
 8006ec6:	42a3      	cmp	r3, r4
 8006ec8:	d3f4      	bcc.n	8006eb4 <__mcmp+0x18>
 8006eca:	e7fb      	b.n	8006ec4 <__mcmp+0x28>
 8006ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed0:	e7f8      	b.n	8006ec4 <__mcmp+0x28>
	...

08006ed4 <__mdiff>:
 8006ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	460d      	mov	r5, r1
 8006eda:	4607      	mov	r7, r0
 8006edc:	4611      	mov	r1, r2
 8006ede:	4628      	mov	r0, r5
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	f7ff ffdb 	bl	8006e9c <__mcmp>
 8006ee6:	1e06      	subs	r6, r0, #0
 8006ee8:	d111      	bne.n	8006f0e <__mdiff+0x3a>
 8006eea:	4631      	mov	r1, r6
 8006eec:	4638      	mov	r0, r7
 8006eee:	f7ff fd0d 	bl	800690c <_Balloc>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	b928      	cbnz	r0, 8006f02 <__mdiff+0x2e>
 8006ef6:	f240 2132 	movw	r1, #562	; 0x232
 8006efa:	4b3a      	ldr	r3, [pc, #232]	; (8006fe4 <__mdiff+0x110>)
 8006efc:	483a      	ldr	r0, [pc, #232]	; (8006fe8 <__mdiff+0x114>)
 8006efe:	f000 fc41 	bl	8007784 <__assert_func>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006f08:	4610      	mov	r0, r2
 8006f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0e:	bfa4      	itt	ge
 8006f10:	4623      	movge	r3, r4
 8006f12:	462c      	movge	r4, r5
 8006f14:	4638      	mov	r0, r7
 8006f16:	6861      	ldr	r1, [r4, #4]
 8006f18:	bfa6      	itte	ge
 8006f1a:	461d      	movge	r5, r3
 8006f1c:	2600      	movge	r6, #0
 8006f1e:	2601      	movlt	r6, #1
 8006f20:	f7ff fcf4 	bl	800690c <_Balloc>
 8006f24:	4602      	mov	r2, r0
 8006f26:	b918      	cbnz	r0, 8006f30 <__mdiff+0x5c>
 8006f28:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f2c:	4b2d      	ldr	r3, [pc, #180]	; (8006fe4 <__mdiff+0x110>)
 8006f2e:	e7e5      	b.n	8006efc <__mdiff+0x28>
 8006f30:	f102 0814 	add.w	r8, r2, #20
 8006f34:	46c2      	mov	sl, r8
 8006f36:	f04f 0c00 	mov.w	ip, #0
 8006f3a:	6927      	ldr	r7, [r4, #16]
 8006f3c:	60c6      	str	r6, [r0, #12]
 8006f3e:	692e      	ldr	r6, [r5, #16]
 8006f40:	f104 0014 	add.w	r0, r4, #20
 8006f44:	f105 0914 	add.w	r9, r5, #20
 8006f48:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006f4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f50:	3410      	adds	r4, #16
 8006f52:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006f56:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f5a:	fa1f f18b 	uxth.w	r1, fp
 8006f5e:	448c      	add	ip, r1
 8006f60:	b299      	uxth	r1, r3
 8006f62:	0c1b      	lsrs	r3, r3, #16
 8006f64:	ebac 0101 	sub.w	r1, ip, r1
 8006f68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f6c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006f70:	b289      	uxth	r1, r1
 8006f72:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006f76:	454e      	cmp	r6, r9
 8006f78:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006f7c:	f84a 3b04 	str.w	r3, [sl], #4
 8006f80:	d8e7      	bhi.n	8006f52 <__mdiff+0x7e>
 8006f82:	1b73      	subs	r3, r6, r5
 8006f84:	3b15      	subs	r3, #21
 8006f86:	f023 0303 	bic.w	r3, r3, #3
 8006f8a:	3515      	adds	r5, #21
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	42ae      	cmp	r6, r5
 8006f90:	bf38      	it	cc
 8006f92:	2304      	movcc	r3, #4
 8006f94:	4418      	add	r0, r3
 8006f96:	4443      	add	r3, r8
 8006f98:	461e      	mov	r6, r3
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	4575      	cmp	r5, lr
 8006f9e:	d30e      	bcc.n	8006fbe <__mdiff+0xea>
 8006fa0:	f10e 0103 	add.w	r1, lr, #3
 8006fa4:	1a09      	subs	r1, r1, r0
 8006fa6:	f021 0103 	bic.w	r1, r1, #3
 8006faa:	3803      	subs	r0, #3
 8006fac:	4586      	cmp	lr, r0
 8006fae:	bf38      	it	cc
 8006fb0:	2100      	movcc	r1, #0
 8006fb2:	4419      	add	r1, r3
 8006fb4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006fb8:	b18b      	cbz	r3, 8006fde <__mdiff+0x10a>
 8006fba:	6117      	str	r7, [r2, #16]
 8006fbc:	e7a4      	b.n	8006f08 <__mdiff+0x34>
 8006fbe:	f855 8b04 	ldr.w	r8, [r5], #4
 8006fc2:	fa1f f188 	uxth.w	r1, r8
 8006fc6:	4461      	add	r1, ip
 8006fc8:	140c      	asrs	r4, r1, #16
 8006fca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006fce:	b289      	uxth	r1, r1
 8006fd0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006fd4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006fd8:	f846 1b04 	str.w	r1, [r6], #4
 8006fdc:	e7de      	b.n	8006f9c <__mdiff+0xc8>
 8006fde:	3f01      	subs	r7, #1
 8006fe0:	e7e8      	b.n	8006fb4 <__mdiff+0xe0>
 8006fe2:	bf00      	nop
 8006fe4:	08008568 	.word	0x08008568
 8006fe8:	080085f4 	.word	0x080085f4

08006fec <__ulp>:
 8006fec:	4b11      	ldr	r3, [pc, #68]	; (8007034 <__ulp+0x48>)
 8006fee:	400b      	ands	r3, r1
 8006ff0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	dd02      	ble.n	8006ffe <__ulp+0x12>
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	4770      	bx	lr
 8006ffe:	425b      	negs	r3, r3
 8007000:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007004:	f04f 0000 	mov.w	r0, #0
 8007008:	f04f 0100 	mov.w	r1, #0
 800700c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007010:	da04      	bge.n	800701c <__ulp+0x30>
 8007012:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007016:	fa43 f102 	asr.w	r1, r3, r2
 800701a:	4770      	bx	lr
 800701c:	f1a2 0314 	sub.w	r3, r2, #20
 8007020:	2b1e      	cmp	r3, #30
 8007022:	bfd6      	itet	le
 8007024:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007028:	2301      	movgt	r3, #1
 800702a:	fa22 f303 	lsrle.w	r3, r2, r3
 800702e:	4618      	mov	r0, r3
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	7ff00000 	.word	0x7ff00000

08007038 <__b2d>:
 8007038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800703c:	6907      	ldr	r7, [r0, #16]
 800703e:	f100 0914 	add.w	r9, r0, #20
 8007042:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007046:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800704a:	f1a7 0804 	sub.w	r8, r7, #4
 800704e:	4630      	mov	r0, r6
 8007050:	f7ff fd4e 	bl	8006af0 <__hi0bits>
 8007054:	f1c0 0320 	rsb	r3, r0, #32
 8007058:	280a      	cmp	r0, #10
 800705a:	600b      	str	r3, [r1, #0]
 800705c:	491f      	ldr	r1, [pc, #124]	; (80070dc <__b2d+0xa4>)
 800705e:	dc17      	bgt.n	8007090 <__b2d+0x58>
 8007060:	45c1      	cmp	r9, r8
 8007062:	bf28      	it	cs
 8007064:	2200      	movcs	r2, #0
 8007066:	f1c0 0c0b 	rsb	ip, r0, #11
 800706a:	fa26 f30c 	lsr.w	r3, r6, ip
 800706e:	bf38      	it	cc
 8007070:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007074:	ea43 0501 	orr.w	r5, r3, r1
 8007078:	f100 0315 	add.w	r3, r0, #21
 800707c:	fa06 f303 	lsl.w	r3, r6, r3
 8007080:	fa22 f20c 	lsr.w	r2, r2, ip
 8007084:	ea43 0402 	orr.w	r4, r3, r2
 8007088:	4620      	mov	r0, r4
 800708a:	4629      	mov	r1, r5
 800708c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007090:	45c1      	cmp	r9, r8
 8007092:	bf2e      	itee	cs
 8007094:	2200      	movcs	r2, #0
 8007096:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800709a:	f1a7 0808 	subcc.w	r8, r7, #8
 800709e:	f1b0 030b 	subs.w	r3, r0, #11
 80070a2:	d016      	beq.n	80070d2 <__b2d+0x9a>
 80070a4:	f1c3 0720 	rsb	r7, r3, #32
 80070a8:	fa22 f107 	lsr.w	r1, r2, r7
 80070ac:	45c8      	cmp	r8, r9
 80070ae:	fa06 f603 	lsl.w	r6, r6, r3
 80070b2:	ea46 0601 	orr.w	r6, r6, r1
 80070b6:	bf94      	ite	ls
 80070b8:	2100      	movls	r1, #0
 80070ba:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80070be:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80070c2:	fa02 f003 	lsl.w	r0, r2, r3
 80070c6:	40f9      	lsrs	r1, r7
 80070c8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80070cc:	ea40 0401 	orr.w	r4, r0, r1
 80070d0:	e7da      	b.n	8007088 <__b2d+0x50>
 80070d2:	4614      	mov	r4, r2
 80070d4:	ea46 0501 	orr.w	r5, r6, r1
 80070d8:	e7d6      	b.n	8007088 <__b2d+0x50>
 80070da:	bf00      	nop
 80070dc:	3ff00000 	.word	0x3ff00000

080070e0 <__d2b>:
 80070e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80070e4:	2101      	movs	r1, #1
 80070e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80070ea:	4690      	mov	r8, r2
 80070ec:	461d      	mov	r5, r3
 80070ee:	f7ff fc0d 	bl	800690c <_Balloc>
 80070f2:	4604      	mov	r4, r0
 80070f4:	b930      	cbnz	r0, 8007104 <__d2b+0x24>
 80070f6:	4602      	mov	r2, r0
 80070f8:	f240 310a 	movw	r1, #778	; 0x30a
 80070fc:	4b24      	ldr	r3, [pc, #144]	; (8007190 <__d2b+0xb0>)
 80070fe:	4825      	ldr	r0, [pc, #148]	; (8007194 <__d2b+0xb4>)
 8007100:	f000 fb40 	bl	8007784 <__assert_func>
 8007104:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007108:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800710c:	bb2d      	cbnz	r5, 800715a <__d2b+0x7a>
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	f1b8 0300 	subs.w	r3, r8, #0
 8007114:	d026      	beq.n	8007164 <__d2b+0x84>
 8007116:	4668      	mov	r0, sp
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	f7ff fd09 	bl	8006b30 <__lo0bits>
 800711e:	9900      	ldr	r1, [sp, #0]
 8007120:	b1f0      	cbz	r0, 8007160 <__d2b+0x80>
 8007122:	9a01      	ldr	r2, [sp, #4]
 8007124:	f1c0 0320 	rsb	r3, r0, #32
 8007128:	fa02 f303 	lsl.w	r3, r2, r3
 800712c:	430b      	orrs	r3, r1
 800712e:	40c2      	lsrs	r2, r0
 8007130:	6163      	str	r3, [r4, #20]
 8007132:	9201      	str	r2, [sp, #4]
 8007134:	9b01      	ldr	r3, [sp, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	bf14      	ite	ne
 800713a:	2102      	movne	r1, #2
 800713c:	2101      	moveq	r1, #1
 800713e:	61a3      	str	r3, [r4, #24]
 8007140:	6121      	str	r1, [r4, #16]
 8007142:	b1c5      	cbz	r5, 8007176 <__d2b+0x96>
 8007144:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007148:	4405      	add	r5, r0
 800714a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800714e:	603d      	str	r5, [r7, #0]
 8007150:	6030      	str	r0, [r6, #0]
 8007152:	4620      	mov	r0, r4
 8007154:	b002      	add	sp, #8
 8007156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800715a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800715e:	e7d6      	b.n	800710e <__d2b+0x2e>
 8007160:	6161      	str	r1, [r4, #20]
 8007162:	e7e7      	b.n	8007134 <__d2b+0x54>
 8007164:	a801      	add	r0, sp, #4
 8007166:	f7ff fce3 	bl	8006b30 <__lo0bits>
 800716a:	2101      	movs	r1, #1
 800716c:	9b01      	ldr	r3, [sp, #4]
 800716e:	6121      	str	r1, [r4, #16]
 8007170:	6163      	str	r3, [r4, #20]
 8007172:	3020      	adds	r0, #32
 8007174:	e7e5      	b.n	8007142 <__d2b+0x62>
 8007176:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800717a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800717e:	6038      	str	r0, [r7, #0]
 8007180:	6918      	ldr	r0, [r3, #16]
 8007182:	f7ff fcb5 	bl	8006af0 <__hi0bits>
 8007186:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800718a:	6031      	str	r1, [r6, #0]
 800718c:	e7e1      	b.n	8007152 <__d2b+0x72>
 800718e:	bf00      	nop
 8007190:	08008568 	.word	0x08008568
 8007194:	080085f4 	.word	0x080085f4

08007198 <__ratio>:
 8007198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	4688      	mov	r8, r1
 800719e:	4669      	mov	r1, sp
 80071a0:	4681      	mov	r9, r0
 80071a2:	f7ff ff49 	bl	8007038 <__b2d>
 80071a6:	460f      	mov	r7, r1
 80071a8:	4604      	mov	r4, r0
 80071aa:	460d      	mov	r5, r1
 80071ac:	4640      	mov	r0, r8
 80071ae:	a901      	add	r1, sp, #4
 80071b0:	f7ff ff42 	bl	8007038 <__b2d>
 80071b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80071bc:	468b      	mov	fp, r1
 80071be:	eba3 0c02 	sub.w	ip, r3, r2
 80071c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80071c6:	1a9b      	subs	r3, r3, r2
 80071c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	bfd5      	itete	le
 80071d0:	460a      	movle	r2, r1
 80071d2:	462a      	movgt	r2, r5
 80071d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80071d8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80071dc:	bfd8      	it	le
 80071de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80071e2:	465b      	mov	r3, fp
 80071e4:	4602      	mov	r2, r0
 80071e6:	4639      	mov	r1, r7
 80071e8:	4620      	mov	r0, r4
 80071ea:	f7f9 fa9f 	bl	800072c <__aeabi_ddiv>
 80071ee:	b003      	add	sp, #12
 80071f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071f4 <__copybits>:
 80071f4:	3901      	subs	r1, #1
 80071f6:	b570      	push	{r4, r5, r6, lr}
 80071f8:	1149      	asrs	r1, r1, #5
 80071fa:	6914      	ldr	r4, [r2, #16]
 80071fc:	3101      	adds	r1, #1
 80071fe:	f102 0314 	add.w	r3, r2, #20
 8007202:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007206:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800720a:	1f05      	subs	r5, r0, #4
 800720c:	42a3      	cmp	r3, r4
 800720e:	d30c      	bcc.n	800722a <__copybits+0x36>
 8007210:	1aa3      	subs	r3, r4, r2
 8007212:	3b11      	subs	r3, #17
 8007214:	f023 0303 	bic.w	r3, r3, #3
 8007218:	3211      	adds	r2, #17
 800721a:	42a2      	cmp	r2, r4
 800721c:	bf88      	it	hi
 800721e:	2300      	movhi	r3, #0
 8007220:	4418      	add	r0, r3
 8007222:	2300      	movs	r3, #0
 8007224:	4288      	cmp	r0, r1
 8007226:	d305      	bcc.n	8007234 <__copybits+0x40>
 8007228:	bd70      	pop	{r4, r5, r6, pc}
 800722a:	f853 6b04 	ldr.w	r6, [r3], #4
 800722e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007232:	e7eb      	b.n	800720c <__copybits+0x18>
 8007234:	f840 3b04 	str.w	r3, [r0], #4
 8007238:	e7f4      	b.n	8007224 <__copybits+0x30>

0800723a <__any_on>:
 800723a:	f100 0214 	add.w	r2, r0, #20
 800723e:	6900      	ldr	r0, [r0, #16]
 8007240:	114b      	asrs	r3, r1, #5
 8007242:	4298      	cmp	r0, r3
 8007244:	b510      	push	{r4, lr}
 8007246:	db11      	blt.n	800726c <__any_on+0x32>
 8007248:	dd0a      	ble.n	8007260 <__any_on+0x26>
 800724a:	f011 011f 	ands.w	r1, r1, #31
 800724e:	d007      	beq.n	8007260 <__any_on+0x26>
 8007250:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007254:	fa24 f001 	lsr.w	r0, r4, r1
 8007258:	fa00 f101 	lsl.w	r1, r0, r1
 800725c:	428c      	cmp	r4, r1
 800725e:	d10b      	bne.n	8007278 <__any_on+0x3e>
 8007260:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007264:	4293      	cmp	r3, r2
 8007266:	d803      	bhi.n	8007270 <__any_on+0x36>
 8007268:	2000      	movs	r0, #0
 800726a:	bd10      	pop	{r4, pc}
 800726c:	4603      	mov	r3, r0
 800726e:	e7f7      	b.n	8007260 <__any_on+0x26>
 8007270:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007274:	2900      	cmp	r1, #0
 8007276:	d0f5      	beq.n	8007264 <__any_on+0x2a>
 8007278:	2001      	movs	r0, #1
 800727a:	e7f6      	b.n	800726a <__any_on+0x30>

0800727c <_calloc_r>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	fba1 5402 	umull	r5, r4, r1, r2
 8007282:	b934      	cbnz	r4, 8007292 <_calloc_r+0x16>
 8007284:	4629      	mov	r1, r5
 8007286:	f000 f875 	bl	8007374 <_malloc_r>
 800728a:	4606      	mov	r6, r0
 800728c:	b928      	cbnz	r0, 800729a <_calloc_r+0x1e>
 800728e:	4630      	mov	r0, r6
 8007290:	bd70      	pop	{r4, r5, r6, pc}
 8007292:	220c      	movs	r2, #12
 8007294:	2600      	movs	r6, #0
 8007296:	6002      	str	r2, [r0, #0]
 8007298:	e7f9      	b.n	800728e <_calloc_r+0x12>
 800729a:	462a      	mov	r2, r5
 800729c:	4621      	mov	r1, r4
 800729e:	f7fc fbbf 	bl	8003a20 <memset>
 80072a2:	e7f4      	b.n	800728e <_calloc_r+0x12>

080072a4 <_free_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4605      	mov	r5, r0
 80072a8:	2900      	cmp	r1, #0
 80072aa:	d040      	beq.n	800732e <_free_r+0x8a>
 80072ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072b0:	1f0c      	subs	r4, r1, #4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	bfb8      	it	lt
 80072b6:	18e4      	addlt	r4, r4, r3
 80072b8:	f000 faae 	bl	8007818 <__malloc_lock>
 80072bc:	4a1c      	ldr	r2, [pc, #112]	; (8007330 <_free_r+0x8c>)
 80072be:	6813      	ldr	r3, [r2, #0]
 80072c0:	b933      	cbnz	r3, 80072d0 <_free_r+0x2c>
 80072c2:	6063      	str	r3, [r4, #4]
 80072c4:	6014      	str	r4, [r2, #0]
 80072c6:	4628      	mov	r0, r5
 80072c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072cc:	f000 baaa 	b.w	8007824 <__malloc_unlock>
 80072d0:	42a3      	cmp	r3, r4
 80072d2:	d908      	bls.n	80072e6 <_free_r+0x42>
 80072d4:	6820      	ldr	r0, [r4, #0]
 80072d6:	1821      	adds	r1, r4, r0
 80072d8:	428b      	cmp	r3, r1
 80072da:	bf01      	itttt	eq
 80072dc:	6819      	ldreq	r1, [r3, #0]
 80072de:	685b      	ldreq	r3, [r3, #4]
 80072e0:	1809      	addeq	r1, r1, r0
 80072e2:	6021      	streq	r1, [r4, #0]
 80072e4:	e7ed      	b.n	80072c2 <_free_r+0x1e>
 80072e6:	461a      	mov	r2, r3
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	b10b      	cbz	r3, 80072f0 <_free_r+0x4c>
 80072ec:	42a3      	cmp	r3, r4
 80072ee:	d9fa      	bls.n	80072e6 <_free_r+0x42>
 80072f0:	6811      	ldr	r1, [r2, #0]
 80072f2:	1850      	adds	r0, r2, r1
 80072f4:	42a0      	cmp	r0, r4
 80072f6:	d10b      	bne.n	8007310 <_free_r+0x6c>
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	4401      	add	r1, r0
 80072fc:	1850      	adds	r0, r2, r1
 80072fe:	4283      	cmp	r3, r0
 8007300:	6011      	str	r1, [r2, #0]
 8007302:	d1e0      	bne.n	80072c6 <_free_r+0x22>
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	4401      	add	r1, r0
 800730a:	6011      	str	r1, [r2, #0]
 800730c:	6053      	str	r3, [r2, #4]
 800730e:	e7da      	b.n	80072c6 <_free_r+0x22>
 8007310:	d902      	bls.n	8007318 <_free_r+0x74>
 8007312:	230c      	movs	r3, #12
 8007314:	602b      	str	r3, [r5, #0]
 8007316:	e7d6      	b.n	80072c6 <_free_r+0x22>
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	1821      	adds	r1, r4, r0
 800731c:	428b      	cmp	r3, r1
 800731e:	bf01      	itttt	eq
 8007320:	6819      	ldreq	r1, [r3, #0]
 8007322:	685b      	ldreq	r3, [r3, #4]
 8007324:	1809      	addeq	r1, r1, r0
 8007326:	6021      	streq	r1, [r4, #0]
 8007328:	6063      	str	r3, [r4, #4]
 800732a:	6054      	str	r4, [r2, #4]
 800732c:	e7cb      	b.n	80072c6 <_free_r+0x22>
 800732e:	bd38      	pop	{r3, r4, r5, pc}
 8007330:	2000036c 	.word	0x2000036c

08007334 <sbrk_aligned>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	4e0e      	ldr	r6, [pc, #56]	; (8007370 <sbrk_aligned+0x3c>)
 8007338:	460c      	mov	r4, r1
 800733a:	6831      	ldr	r1, [r6, #0]
 800733c:	4605      	mov	r5, r0
 800733e:	b911      	cbnz	r1, 8007346 <sbrk_aligned+0x12>
 8007340:	f000 f9ee 	bl	8007720 <_sbrk_r>
 8007344:	6030      	str	r0, [r6, #0]
 8007346:	4621      	mov	r1, r4
 8007348:	4628      	mov	r0, r5
 800734a:	f000 f9e9 	bl	8007720 <_sbrk_r>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	d00a      	beq.n	8007368 <sbrk_aligned+0x34>
 8007352:	1cc4      	adds	r4, r0, #3
 8007354:	f024 0403 	bic.w	r4, r4, #3
 8007358:	42a0      	cmp	r0, r4
 800735a:	d007      	beq.n	800736c <sbrk_aligned+0x38>
 800735c:	1a21      	subs	r1, r4, r0
 800735e:	4628      	mov	r0, r5
 8007360:	f000 f9de 	bl	8007720 <_sbrk_r>
 8007364:	3001      	adds	r0, #1
 8007366:	d101      	bne.n	800736c <sbrk_aligned+0x38>
 8007368:	f04f 34ff 	mov.w	r4, #4294967295
 800736c:	4620      	mov	r0, r4
 800736e:	bd70      	pop	{r4, r5, r6, pc}
 8007370:	20000370 	.word	0x20000370

08007374 <_malloc_r>:
 8007374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007378:	1ccd      	adds	r5, r1, #3
 800737a:	f025 0503 	bic.w	r5, r5, #3
 800737e:	3508      	adds	r5, #8
 8007380:	2d0c      	cmp	r5, #12
 8007382:	bf38      	it	cc
 8007384:	250c      	movcc	r5, #12
 8007386:	2d00      	cmp	r5, #0
 8007388:	4607      	mov	r7, r0
 800738a:	db01      	blt.n	8007390 <_malloc_r+0x1c>
 800738c:	42a9      	cmp	r1, r5
 800738e:	d905      	bls.n	800739c <_malloc_r+0x28>
 8007390:	230c      	movs	r3, #12
 8007392:	2600      	movs	r6, #0
 8007394:	603b      	str	r3, [r7, #0]
 8007396:	4630      	mov	r0, r6
 8007398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800739c:	4e2e      	ldr	r6, [pc, #184]	; (8007458 <_malloc_r+0xe4>)
 800739e:	f000 fa3b 	bl	8007818 <__malloc_lock>
 80073a2:	6833      	ldr	r3, [r6, #0]
 80073a4:	461c      	mov	r4, r3
 80073a6:	bb34      	cbnz	r4, 80073f6 <_malloc_r+0x82>
 80073a8:	4629      	mov	r1, r5
 80073aa:	4638      	mov	r0, r7
 80073ac:	f7ff ffc2 	bl	8007334 <sbrk_aligned>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	4604      	mov	r4, r0
 80073b4:	d14d      	bne.n	8007452 <_malloc_r+0xde>
 80073b6:	6834      	ldr	r4, [r6, #0]
 80073b8:	4626      	mov	r6, r4
 80073ba:	2e00      	cmp	r6, #0
 80073bc:	d140      	bne.n	8007440 <_malloc_r+0xcc>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	4631      	mov	r1, r6
 80073c2:	4638      	mov	r0, r7
 80073c4:	eb04 0803 	add.w	r8, r4, r3
 80073c8:	f000 f9aa 	bl	8007720 <_sbrk_r>
 80073cc:	4580      	cmp	r8, r0
 80073ce:	d13a      	bne.n	8007446 <_malloc_r+0xd2>
 80073d0:	6821      	ldr	r1, [r4, #0]
 80073d2:	3503      	adds	r5, #3
 80073d4:	1a6d      	subs	r5, r5, r1
 80073d6:	f025 0503 	bic.w	r5, r5, #3
 80073da:	3508      	adds	r5, #8
 80073dc:	2d0c      	cmp	r5, #12
 80073de:	bf38      	it	cc
 80073e0:	250c      	movcc	r5, #12
 80073e2:	4638      	mov	r0, r7
 80073e4:	4629      	mov	r1, r5
 80073e6:	f7ff ffa5 	bl	8007334 <sbrk_aligned>
 80073ea:	3001      	adds	r0, #1
 80073ec:	d02b      	beq.n	8007446 <_malloc_r+0xd2>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	442b      	add	r3, r5
 80073f2:	6023      	str	r3, [r4, #0]
 80073f4:	e00e      	b.n	8007414 <_malloc_r+0xa0>
 80073f6:	6822      	ldr	r2, [r4, #0]
 80073f8:	1b52      	subs	r2, r2, r5
 80073fa:	d41e      	bmi.n	800743a <_malloc_r+0xc6>
 80073fc:	2a0b      	cmp	r2, #11
 80073fe:	d916      	bls.n	800742e <_malloc_r+0xba>
 8007400:	1961      	adds	r1, r4, r5
 8007402:	42a3      	cmp	r3, r4
 8007404:	6025      	str	r5, [r4, #0]
 8007406:	bf18      	it	ne
 8007408:	6059      	strne	r1, [r3, #4]
 800740a:	6863      	ldr	r3, [r4, #4]
 800740c:	bf08      	it	eq
 800740e:	6031      	streq	r1, [r6, #0]
 8007410:	5162      	str	r2, [r4, r5]
 8007412:	604b      	str	r3, [r1, #4]
 8007414:	4638      	mov	r0, r7
 8007416:	f104 060b 	add.w	r6, r4, #11
 800741a:	f000 fa03 	bl	8007824 <__malloc_unlock>
 800741e:	f026 0607 	bic.w	r6, r6, #7
 8007422:	1d23      	adds	r3, r4, #4
 8007424:	1af2      	subs	r2, r6, r3
 8007426:	d0b6      	beq.n	8007396 <_malloc_r+0x22>
 8007428:	1b9b      	subs	r3, r3, r6
 800742a:	50a3      	str	r3, [r4, r2]
 800742c:	e7b3      	b.n	8007396 <_malloc_r+0x22>
 800742e:	6862      	ldr	r2, [r4, #4]
 8007430:	42a3      	cmp	r3, r4
 8007432:	bf0c      	ite	eq
 8007434:	6032      	streq	r2, [r6, #0]
 8007436:	605a      	strne	r2, [r3, #4]
 8007438:	e7ec      	b.n	8007414 <_malloc_r+0xa0>
 800743a:	4623      	mov	r3, r4
 800743c:	6864      	ldr	r4, [r4, #4]
 800743e:	e7b2      	b.n	80073a6 <_malloc_r+0x32>
 8007440:	4634      	mov	r4, r6
 8007442:	6876      	ldr	r6, [r6, #4]
 8007444:	e7b9      	b.n	80073ba <_malloc_r+0x46>
 8007446:	230c      	movs	r3, #12
 8007448:	4638      	mov	r0, r7
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	f000 f9ea 	bl	8007824 <__malloc_unlock>
 8007450:	e7a1      	b.n	8007396 <_malloc_r+0x22>
 8007452:	6025      	str	r5, [r4, #0]
 8007454:	e7de      	b.n	8007414 <_malloc_r+0xa0>
 8007456:	bf00      	nop
 8007458:	2000036c 	.word	0x2000036c

0800745c <__ssputs_r>:
 800745c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007460:	688e      	ldr	r6, [r1, #8]
 8007462:	4682      	mov	sl, r0
 8007464:	429e      	cmp	r6, r3
 8007466:	460c      	mov	r4, r1
 8007468:	4690      	mov	r8, r2
 800746a:	461f      	mov	r7, r3
 800746c:	d838      	bhi.n	80074e0 <__ssputs_r+0x84>
 800746e:	898a      	ldrh	r2, [r1, #12]
 8007470:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007474:	d032      	beq.n	80074dc <__ssputs_r+0x80>
 8007476:	6825      	ldr	r5, [r4, #0]
 8007478:	6909      	ldr	r1, [r1, #16]
 800747a:	3301      	adds	r3, #1
 800747c:	eba5 0901 	sub.w	r9, r5, r1
 8007480:	6965      	ldr	r5, [r4, #20]
 8007482:	444b      	add	r3, r9
 8007484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007488:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800748c:	106d      	asrs	r5, r5, #1
 800748e:	429d      	cmp	r5, r3
 8007490:	bf38      	it	cc
 8007492:	461d      	movcc	r5, r3
 8007494:	0553      	lsls	r3, r2, #21
 8007496:	d531      	bpl.n	80074fc <__ssputs_r+0xa0>
 8007498:	4629      	mov	r1, r5
 800749a:	f7ff ff6b 	bl	8007374 <_malloc_r>
 800749e:	4606      	mov	r6, r0
 80074a0:	b950      	cbnz	r0, 80074b8 <__ssputs_r+0x5c>
 80074a2:	230c      	movs	r3, #12
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	f8ca 3000 	str.w	r3, [sl]
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b8:	464a      	mov	r2, r9
 80074ba:	6921      	ldr	r1, [r4, #16]
 80074bc:	f7ff fa18 	bl	80068f0 <memcpy>
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ca:	81a3      	strh	r3, [r4, #12]
 80074cc:	6126      	str	r6, [r4, #16]
 80074ce:	444e      	add	r6, r9
 80074d0:	6026      	str	r6, [r4, #0]
 80074d2:	463e      	mov	r6, r7
 80074d4:	6165      	str	r5, [r4, #20]
 80074d6:	eba5 0509 	sub.w	r5, r5, r9
 80074da:	60a5      	str	r5, [r4, #8]
 80074dc:	42be      	cmp	r6, r7
 80074de:	d900      	bls.n	80074e2 <__ssputs_r+0x86>
 80074e0:	463e      	mov	r6, r7
 80074e2:	4632      	mov	r2, r6
 80074e4:	4641      	mov	r1, r8
 80074e6:	6820      	ldr	r0, [r4, #0]
 80074e8:	f000 f97c 	bl	80077e4 <memmove>
 80074ec:	68a3      	ldr	r3, [r4, #8]
 80074ee:	2000      	movs	r0, #0
 80074f0:	1b9b      	subs	r3, r3, r6
 80074f2:	60a3      	str	r3, [r4, #8]
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	4433      	add	r3, r6
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	e7db      	b.n	80074b4 <__ssputs_r+0x58>
 80074fc:	462a      	mov	r2, r5
 80074fe:	f000 f997 	bl	8007830 <_realloc_r>
 8007502:	4606      	mov	r6, r0
 8007504:	2800      	cmp	r0, #0
 8007506:	d1e1      	bne.n	80074cc <__ssputs_r+0x70>
 8007508:	4650      	mov	r0, sl
 800750a:	6921      	ldr	r1, [r4, #16]
 800750c:	f7ff feca 	bl	80072a4 <_free_r>
 8007510:	e7c7      	b.n	80074a2 <__ssputs_r+0x46>
	...

08007514 <_svfiprintf_r>:
 8007514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	4698      	mov	r8, r3
 800751a:	898b      	ldrh	r3, [r1, #12]
 800751c:	4607      	mov	r7, r0
 800751e:	061b      	lsls	r3, r3, #24
 8007520:	460d      	mov	r5, r1
 8007522:	4614      	mov	r4, r2
 8007524:	b09d      	sub	sp, #116	; 0x74
 8007526:	d50e      	bpl.n	8007546 <_svfiprintf_r+0x32>
 8007528:	690b      	ldr	r3, [r1, #16]
 800752a:	b963      	cbnz	r3, 8007546 <_svfiprintf_r+0x32>
 800752c:	2140      	movs	r1, #64	; 0x40
 800752e:	f7ff ff21 	bl	8007374 <_malloc_r>
 8007532:	6028      	str	r0, [r5, #0]
 8007534:	6128      	str	r0, [r5, #16]
 8007536:	b920      	cbnz	r0, 8007542 <_svfiprintf_r+0x2e>
 8007538:	230c      	movs	r3, #12
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	f04f 30ff 	mov.w	r0, #4294967295
 8007540:	e0d1      	b.n	80076e6 <_svfiprintf_r+0x1d2>
 8007542:	2340      	movs	r3, #64	; 0x40
 8007544:	616b      	str	r3, [r5, #20]
 8007546:	2300      	movs	r3, #0
 8007548:	9309      	str	r3, [sp, #36]	; 0x24
 800754a:	2320      	movs	r3, #32
 800754c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007550:	2330      	movs	r3, #48	; 0x30
 8007552:	f04f 0901 	mov.w	r9, #1
 8007556:	f8cd 800c 	str.w	r8, [sp, #12]
 800755a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007700 <_svfiprintf_r+0x1ec>
 800755e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007562:	4623      	mov	r3, r4
 8007564:	469a      	mov	sl, r3
 8007566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800756a:	b10a      	cbz	r2, 8007570 <_svfiprintf_r+0x5c>
 800756c:	2a25      	cmp	r2, #37	; 0x25
 800756e:	d1f9      	bne.n	8007564 <_svfiprintf_r+0x50>
 8007570:	ebba 0b04 	subs.w	fp, sl, r4
 8007574:	d00b      	beq.n	800758e <_svfiprintf_r+0x7a>
 8007576:	465b      	mov	r3, fp
 8007578:	4622      	mov	r2, r4
 800757a:	4629      	mov	r1, r5
 800757c:	4638      	mov	r0, r7
 800757e:	f7ff ff6d 	bl	800745c <__ssputs_r>
 8007582:	3001      	adds	r0, #1
 8007584:	f000 80aa 	beq.w	80076dc <_svfiprintf_r+0x1c8>
 8007588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800758a:	445a      	add	r2, fp
 800758c:	9209      	str	r2, [sp, #36]	; 0x24
 800758e:	f89a 3000 	ldrb.w	r3, [sl]
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 80a2 	beq.w	80076dc <_svfiprintf_r+0x1c8>
 8007598:	2300      	movs	r3, #0
 800759a:	f04f 32ff 	mov.w	r2, #4294967295
 800759e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075a2:	f10a 0a01 	add.w	sl, sl, #1
 80075a6:	9304      	str	r3, [sp, #16]
 80075a8:	9307      	str	r3, [sp, #28]
 80075aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075ae:	931a      	str	r3, [sp, #104]	; 0x68
 80075b0:	4654      	mov	r4, sl
 80075b2:	2205      	movs	r2, #5
 80075b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b8:	4851      	ldr	r0, [pc, #324]	; (8007700 <_svfiprintf_r+0x1ec>)
 80075ba:	f7ff f98b 	bl	80068d4 <memchr>
 80075be:	9a04      	ldr	r2, [sp, #16]
 80075c0:	b9d8      	cbnz	r0, 80075fa <_svfiprintf_r+0xe6>
 80075c2:	06d0      	lsls	r0, r2, #27
 80075c4:	bf44      	itt	mi
 80075c6:	2320      	movmi	r3, #32
 80075c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075cc:	0711      	lsls	r1, r2, #28
 80075ce:	bf44      	itt	mi
 80075d0:	232b      	movmi	r3, #43	; 0x2b
 80075d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d6:	f89a 3000 	ldrb.w	r3, [sl]
 80075da:	2b2a      	cmp	r3, #42	; 0x2a
 80075dc:	d015      	beq.n	800760a <_svfiprintf_r+0xf6>
 80075de:	4654      	mov	r4, sl
 80075e0:	2000      	movs	r0, #0
 80075e2:	f04f 0c0a 	mov.w	ip, #10
 80075e6:	9a07      	ldr	r2, [sp, #28]
 80075e8:	4621      	mov	r1, r4
 80075ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075ee:	3b30      	subs	r3, #48	; 0x30
 80075f0:	2b09      	cmp	r3, #9
 80075f2:	d94e      	bls.n	8007692 <_svfiprintf_r+0x17e>
 80075f4:	b1b0      	cbz	r0, 8007624 <_svfiprintf_r+0x110>
 80075f6:	9207      	str	r2, [sp, #28]
 80075f8:	e014      	b.n	8007624 <_svfiprintf_r+0x110>
 80075fa:	eba0 0308 	sub.w	r3, r0, r8
 80075fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007602:	4313      	orrs	r3, r2
 8007604:	46a2      	mov	sl, r4
 8007606:	9304      	str	r3, [sp, #16]
 8007608:	e7d2      	b.n	80075b0 <_svfiprintf_r+0x9c>
 800760a:	9b03      	ldr	r3, [sp, #12]
 800760c:	1d19      	adds	r1, r3, #4
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	9103      	str	r1, [sp, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	bfbb      	ittet	lt
 8007616:	425b      	neglt	r3, r3
 8007618:	f042 0202 	orrlt.w	r2, r2, #2
 800761c:	9307      	strge	r3, [sp, #28]
 800761e:	9307      	strlt	r3, [sp, #28]
 8007620:	bfb8      	it	lt
 8007622:	9204      	strlt	r2, [sp, #16]
 8007624:	7823      	ldrb	r3, [r4, #0]
 8007626:	2b2e      	cmp	r3, #46	; 0x2e
 8007628:	d10c      	bne.n	8007644 <_svfiprintf_r+0x130>
 800762a:	7863      	ldrb	r3, [r4, #1]
 800762c:	2b2a      	cmp	r3, #42	; 0x2a
 800762e:	d135      	bne.n	800769c <_svfiprintf_r+0x188>
 8007630:	9b03      	ldr	r3, [sp, #12]
 8007632:	3402      	adds	r4, #2
 8007634:	1d1a      	adds	r2, r3, #4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	9203      	str	r2, [sp, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	bfb8      	it	lt
 800763e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007642:	9305      	str	r3, [sp, #20]
 8007644:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007704 <_svfiprintf_r+0x1f0>
 8007648:	2203      	movs	r2, #3
 800764a:	4650      	mov	r0, sl
 800764c:	7821      	ldrb	r1, [r4, #0]
 800764e:	f7ff f941 	bl	80068d4 <memchr>
 8007652:	b140      	cbz	r0, 8007666 <_svfiprintf_r+0x152>
 8007654:	2340      	movs	r3, #64	; 0x40
 8007656:	eba0 000a 	sub.w	r0, r0, sl
 800765a:	fa03 f000 	lsl.w	r0, r3, r0
 800765e:	9b04      	ldr	r3, [sp, #16]
 8007660:	3401      	adds	r4, #1
 8007662:	4303      	orrs	r3, r0
 8007664:	9304      	str	r3, [sp, #16]
 8007666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800766a:	2206      	movs	r2, #6
 800766c:	4826      	ldr	r0, [pc, #152]	; (8007708 <_svfiprintf_r+0x1f4>)
 800766e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007672:	f7ff f92f 	bl	80068d4 <memchr>
 8007676:	2800      	cmp	r0, #0
 8007678:	d038      	beq.n	80076ec <_svfiprintf_r+0x1d8>
 800767a:	4b24      	ldr	r3, [pc, #144]	; (800770c <_svfiprintf_r+0x1f8>)
 800767c:	bb1b      	cbnz	r3, 80076c6 <_svfiprintf_r+0x1b2>
 800767e:	9b03      	ldr	r3, [sp, #12]
 8007680:	3307      	adds	r3, #7
 8007682:	f023 0307 	bic.w	r3, r3, #7
 8007686:	3308      	adds	r3, #8
 8007688:	9303      	str	r3, [sp, #12]
 800768a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768c:	4433      	add	r3, r6
 800768e:	9309      	str	r3, [sp, #36]	; 0x24
 8007690:	e767      	b.n	8007562 <_svfiprintf_r+0x4e>
 8007692:	460c      	mov	r4, r1
 8007694:	2001      	movs	r0, #1
 8007696:	fb0c 3202 	mla	r2, ip, r2, r3
 800769a:	e7a5      	b.n	80075e8 <_svfiprintf_r+0xd4>
 800769c:	2300      	movs	r3, #0
 800769e:	f04f 0c0a 	mov.w	ip, #10
 80076a2:	4619      	mov	r1, r3
 80076a4:	3401      	adds	r4, #1
 80076a6:	9305      	str	r3, [sp, #20]
 80076a8:	4620      	mov	r0, r4
 80076aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076ae:	3a30      	subs	r2, #48	; 0x30
 80076b0:	2a09      	cmp	r2, #9
 80076b2:	d903      	bls.n	80076bc <_svfiprintf_r+0x1a8>
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0c5      	beq.n	8007644 <_svfiprintf_r+0x130>
 80076b8:	9105      	str	r1, [sp, #20]
 80076ba:	e7c3      	b.n	8007644 <_svfiprintf_r+0x130>
 80076bc:	4604      	mov	r4, r0
 80076be:	2301      	movs	r3, #1
 80076c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80076c4:	e7f0      	b.n	80076a8 <_svfiprintf_r+0x194>
 80076c6:	ab03      	add	r3, sp, #12
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	462a      	mov	r2, r5
 80076cc:	4638      	mov	r0, r7
 80076ce:	4b10      	ldr	r3, [pc, #64]	; (8007710 <_svfiprintf_r+0x1fc>)
 80076d0:	a904      	add	r1, sp, #16
 80076d2:	f7fc fa4b 	bl	8003b6c <_printf_float>
 80076d6:	1c42      	adds	r2, r0, #1
 80076d8:	4606      	mov	r6, r0
 80076da:	d1d6      	bne.n	800768a <_svfiprintf_r+0x176>
 80076dc:	89ab      	ldrh	r3, [r5, #12]
 80076de:	065b      	lsls	r3, r3, #25
 80076e0:	f53f af2c 	bmi.w	800753c <_svfiprintf_r+0x28>
 80076e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076e6:	b01d      	add	sp, #116	; 0x74
 80076e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ec:	ab03      	add	r3, sp, #12
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	462a      	mov	r2, r5
 80076f2:	4638      	mov	r0, r7
 80076f4:	4b06      	ldr	r3, [pc, #24]	; (8007710 <_svfiprintf_r+0x1fc>)
 80076f6:	a904      	add	r1, sp, #16
 80076f8:	f7fc fcd4 	bl	80040a4 <_printf_i>
 80076fc:	e7eb      	b.n	80076d6 <_svfiprintf_r+0x1c2>
 80076fe:	bf00      	nop
 8007700:	0800874c 	.word	0x0800874c
 8007704:	08008752 	.word	0x08008752
 8007708:	08008756 	.word	0x08008756
 800770c:	08003b6d 	.word	0x08003b6d
 8007710:	0800745d 	.word	0x0800745d

08007714 <nan>:
 8007714:	2000      	movs	r0, #0
 8007716:	4901      	ldr	r1, [pc, #4]	; (800771c <nan+0x8>)
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	7ff80000 	.word	0x7ff80000

08007720 <_sbrk_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	2300      	movs	r3, #0
 8007724:	4d05      	ldr	r5, [pc, #20]	; (800773c <_sbrk_r+0x1c>)
 8007726:	4604      	mov	r4, r0
 8007728:	4608      	mov	r0, r1
 800772a:	602b      	str	r3, [r5, #0]
 800772c:	f7f9 fe7c 	bl	8001428 <_sbrk>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_sbrk_r+0x1a>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_sbrk_r+0x1a>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	20000374 	.word	0x20000374

08007740 <strncmp>:
 8007740:	4603      	mov	r3, r0
 8007742:	b510      	push	{r4, lr}
 8007744:	b172      	cbz	r2, 8007764 <strncmp+0x24>
 8007746:	3901      	subs	r1, #1
 8007748:	1884      	adds	r4, r0, r2
 800774a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800774e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007752:	4290      	cmp	r0, r2
 8007754:	d101      	bne.n	800775a <strncmp+0x1a>
 8007756:	42a3      	cmp	r3, r4
 8007758:	d101      	bne.n	800775e <strncmp+0x1e>
 800775a:	1a80      	subs	r0, r0, r2
 800775c:	bd10      	pop	{r4, pc}
 800775e:	2800      	cmp	r0, #0
 8007760:	d1f3      	bne.n	800774a <strncmp+0xa>
 8007762:	e7fa      	b.n	800775a <strncmp+0x1a>
 8007764:	4610      	mov	r0, r2
 8007766:	e7f9      	b.n	800775c <strncmp+0x1c>

08007768 <__ascii_wctomb>:
 8007768:	4603      	mov	r3, r0
 800776a:	4608      	mov	r0, r1
 800776c:	b141      	cbz	r1, 8007780 <__ascii_wctomb+0x18>
 800776e:	2aff      	cmp	r2, #255	; 0xff
 8007770:	d904      	bls.n	800777c <__ascii_wctomb+0x14>
 8007772:	228a      	movs	r2, #138	; 0x8a
 8007774:	f04f 30ff 	mov.w	r0, #4294967295
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	4770      	bx	lr
 800777c:	2001      	movs	r0, #1
 800777e:	700a      	strb	r2, [r1, #0]
 8007780:	4770      	bx	lr
	...

08007784 <__assert_func>:
 8007784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007786:	4614      	mov	r4, r2
 8007788:	461a      	mov	r2, r3
 800778a:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <__assert_func+0x2c>)
 800778c:	4605      	mov	r5, r0
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68d8      	ldr	r0, [r3, #12]
 8007792:	b14c      	cbz	r4, 80077a8 <__assert_func+0x24>
 8007794:	4b07      	ldr	r3, [pc, #28]	; (80077b4 <__assert_func+0x30>)
 8007796:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800779a:	9100      	str	r1, [sp, #0]
 800779c:	462b      	mov	r3, r5
 800779e:	4906      	ldr	r1, [pc, #24]	; (80077b8 <__assert_func+0x34>)
 80077a0:	f000 f80e 	bl	80077c0 <fiprintf>
 80077a4:	f000 fa8a 	bl	8007cbc <abort>
 80077a8:	4b04      	ldr	r3, [pc, #16]	; (80077bc <__assert_func+0x38>)
 80077aa:	461c      	mov	r4, r3
 80077ac:	e7f3      	b.n	8007796 <__assert_func+0x12>
 80077ae:	bf00      	nop
 80077b0:	2000000c 	.word	0x2000000c
 80077b4:	0800875d 	.word	0x0800875d
 80077b8:	0800876a 	.word	0x0800876a
 80077bc:	08008798 	.word	0x08008798

080077c0 <fiprintf>:
 80077c0:	b40e      	push	{r1, r2, r3}
 80077c2:	b503      	push	{r0, r1, lr}
 80077c4:	4601      	mov	r1, r0
 80077c6:	ab03      	add	r3, sp, #12
 80077c8:	4805      	ldr	r0, [pc, #20]	; (80077e0 <fiprintf+0x20>)
 80077ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ce:	6800      	ldr	r0, [r0, #0]
 80077d0:	9301      	str	r3, [sp, #4]
 80077d2:	f000 f883 	bl	80078dc <_vfiprintf_r>
 80077d6:	b002      	add	sp, #8
 80077d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077dc:	b003      	add	sp, #12
 80077de:	4770      	bx	lr
 80077e0:	2000000c 	.word	0x2000000c

080077e4 <memmove>:
 80077e4:	4288      	cmp	r0, r1
 80077e6:	b510      	push	{r4, lr}
 80077e8:	eb01 0402 	add.w	r4, r1, r2
 80077ec:	d902      	bls.n	80077f4 <memmove+0x10>
 80077ee:	4284      	cmp	r4, r0
 80077f0:	4623      	mov	r3, r4
 80077f2:	d807      	bhi.n	8007804 <memmove+0x20>
 80077f4:	1e43      	subs	r3, r0, #1
 80077f6:	42a1      	cmp	r1, r4
 80077f8:	d008      	beq.n	800780c <memmove+0x28>
 80077fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007802:	e7f8      	b.n	80077f6 <memmove+0x12>
 8007804:	4601      	mov	r1, r0
 8007806:	4402      	add	r2, r0
 8007808:	428a      	cmp	r2, r1
 800780a:	d100      	bne.n	800780e <memmove+0x2a>
 800780c:	bd10      	pop	{r4, pc}
 800780e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007816:	e7f7      	b.n	8007808 <memmove+0x24>

08007818 <__malloc_lock>:
 8007818:	4801      	ldr	r0, [pc, #4]	; (8007820 <__malloc_lock+0x8>)
 800781a:	f000 bc0b 	b.w	8008034 <__retarget_lock_acquire_recursive>
 800781e:	bf00      	nop
 8007820:	20000378 	.word	0x20000378

08007824 <__malloc_unlock>:
 8007824:	4801      	ldr	r0, [pc, #4]	; (800782c <__malloc_unlock+0x8>)
 8007826:	f000 bc06 	b.w	8008036 <__retarget_lock_release_recursive>
 800782a:	bf00      	nop
 800782c:	20000378 	.word	0x20000378

08007830 <_realloc_r>:
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	4680      	mov	r8, r0
 8007836:	4614      	mov	r4, r2
 8007838:	460e      	mov	r6, r1
 800783a:	b921      	cbnz	r1, 8007846 <_realloc_r+0x16>
 800783c:	4611      	mov	r1, r2
 800783e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007842:	f7ff bd97 	b.w	8007374 <_malloc_r>
 8007846:	b92a      	cbnz	r2, 8007854 <_realloc_r+0x24>
 8007848:	f7ff fd2c 	bl	80072a4 <_free_r>
 800784c:	4625      	mov	r5, r4
 800784e:	4628      	mov	r0, r5
 8007850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007854:	f000 fc56 	bl	8008104 <_malloc_usable_size_r>
 8007858:	4284      	cmp	r4, r0
 800785a:	4607      	mov	r7, r0
 800785c:	d802      	bhi.n	8007864 <_realloc_r+0x34>
 800785e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007862:	d812      	bhi.n	800788a <_realloc_r+0x5a>
 8007864:	4621      	mov	r1, r4
 8007866:	4640      	mov	r0, r8
 8007868:	f7ff fd84 	bl	8007374 <_malloc_r>
 800786c:	4605      	mov	r5, r0
 800786e:	2800      	cmp	r0, #0
 8007870:	d0ed      	beq.n	800784e <_realloc_r+0x1e>
 8007872:	42bc      	cmp	r4, r7
 8007874:	4622      	mov	r2, r4
 8007876:	4631      	mov	r1, r6
 8007878:	bf28      	it	cs
 800787a:	463a      	movcs	r2, r7
 800787c:	f7ff f838 	bl	80068f0 <memcpy>
 8007880:	4631      	mov	r1, r6
 8007882:	4640      	mov	r0, r8
 8007884:	f7ff fd0e 	bl	80072a4 <_free_r>
 8007888:	e7e1      	b.n	800784e <_realloc_r+0x1e>
 800788a:	4635      	mov	r5, r6
 800788c:	e7df      	b.n	800784e <_realloc_r+0x1e>

0800788e <__sfputc_r>:
 800788e:	6893      	ldr	r3, [r2, #8]
 8007890:	b410      	push	{r4}
 8007892:	3b01      	subs	r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	6093      	str	r3, [r2, #8]
 8007898:	da07      	bge.n	80078aa <__sfputc_r+0x1c>
 800789a:	6994      	ldr	r4, [r2, #24]
 800789c:	42a3      	cmp	r3, r4
 800789e:	db01      	blt.n	80078a4 <__sfputc_r+0x16>
 80078a0:	290a      	cmp	r1, #10
 80078a2:	d102      	bne.n	80078aa <__sfputc_r+0x1c>
 80078a4:	bc10      	pop	{r4}
 80078a6:	f000 b949 	b.w	8007b3c <__swbuf_r>
 80078aa:	6813      	ldr	r3, [r2, #0]
 80078ac:	1c58      	adds	r0, r3, #1
 80078ae:	6010      	str	r0, [r2, #0]
 80078b0:	7019      	strb	r1, [r3, #0]
 80078b2:	4608      	mov	r0, r1
 80078b4:	bc10      	pop	{r4}
 80078b6:	4770      	bx	lr

080078b8 <__sfputs_r>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	4606      	mov	r6, r0
 80078bc:	460f      	mov	r7, r1
 80078be:	4614      	mov	r4, r2
 80078c0:	18d5      	adds	r5, r2, r3
 80078c2:	42ac      	cmp	r4, r5
 80078c4:	d101      	bne.n	80078ca <__sfputs_r+0x12>
 80078c6:	2000      	movs	r0, #0
 80078c8:	e007      	b.n	80078da <__sfputs_r+0x22>
 80078ca:	463a      	mov	r2, r7
 80078cc:	4630      	mov	r0, r6
 80078ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d2:	f7ff ffdc 	bl	800788e <__sfputc_r>
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	d1f3      	bne.n	80078c2 <__sfputs_r+0xa>
 80078da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078dc <_vfiprintf_r>:
 80078dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	460d      	mov	r5, r1
 80078e2:	4614      	mov	r4, r2
 80078e4:	4698      	mov	r8, r3
 80078e6:	4606      	mov	r6, r0
 80078e8:	b09d      	sub	sp, #116	; 0x74
 80078ea:	b118      	cbz	r0, 80078f4 <_vfiprintf_r+0x18>
 80078ec:	6983      	ldr	r3, [r0, #24]
 80078ee:	b90b      	cbnz	r3, 80078f4 <_vfiprintf_r+0x18>
 80078f0:	f000 fb02 	bl	8007ef8 <__sinit>
 80078f4:	4b89      	ldr	r3, [pc, #548]	; (8007b1c <_vfiprintf_r+0x240>)
 80078f6:	429d      	cmp	r5, r3
 80078f8:	d11b      	bne.n	8007932 <_vfiprintf_r+0x56>
 80078fa:	6875      	ldr	r5, [r6, #4]
 80078fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078fe:	07d9      	lsls	r1, r3, #31
 8007900:	d405      	bmi.n	800790e <_vfiprintf_r+0x32>
 8007902:	89ab      	ldrh	r3, [r5, #12]
 8007904:	059a      	lsls	r2, r3, #22
 8007906:	d402      	bmi.n	800790e <_vfiprintf_r+0x32>
 8007908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800790a:	f000 fb93 	bl	8008034 <__retarget_lock_acquire_recursive>
 800790e:	89ab      	ldrh	r3, [r5, #12]
 8007910:	071b      	lsls	r3, r3, #28
 8007912:	d501      	bpl.n	8007918 <_vfiprintf_r+0x3c>
 8007914:	692b      	ldr	r3, [r5, #16]
 8007916:	b9eb      	cbnz	r3, 8007954 <_vfiprintf_r+0x78>
 8007918:	4629      	mov	r1, r5
 800791a:	4630      	mov	r0, r6
 800791c:	f000 f960 	bl	8007be0 <__swsetup_r>
 8007920:	b1c0      	cbz	r0, 8007954 <_vfiprintf_r+0x78>
 8007922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007924:	07dc      	lsls	r4, r3, #31
 8007926:	d50e      	bpl.n	8007946 <_vfiprintf_r+0x6a>
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	b01d      	add	sp, #116	; 0x74
 800792e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007932:	4b7b      	ldr	r3, [pc, #492]	; (8007b20 <_vfiprintf_r+0x244>)
 8007934:	429d      	cmp	r5, r3
 8007936:	d101      	bne.n	800793c <_vfiprintf_r+0x60>
 8007938:	68b5      	ldr	r5, [r6, #8]
 800793a:	e7df      	b.n	80078fc <_vfiprintf_r+0x20>
 800793c:	4b79      	ldr	r3, [pc, #484]	; (8007b24 <_vfiprintf_r+0x248>)
 800793e:	429d      	cmp	r5, r3
 8007940:	bf08      	it	eq
 8007942:	68f5      	ldreq	r5, [r6, #12]
 8007944:	e7da      	b.n	80078fc <_vfiprintf_r+0x20>
 8007946:	89ab      	ldrh	r3, [r5, #12]
 8007948:	0598      	lsls	r0, r3, #22
 800794a:	d4ed      	bmi.n	8007928 <_vfiprintf_r+0x4c>
 800794c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800794e:	f000 fb72 	bl	8008036 <__retarget_lock_release_recursive>
 8007952:	e7e9      	b.n	8007928 <_vfiprintf_r+0x4c>
 8007954:	2300      	movs	r3, #0
 8007956:	9309      	str	r3, [sp, #36]	; 0x24
 8007958:	2320      	movs	r3, #32
 800795a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800795e:	2330      	movs	r3, #48	; 0x30
 8007960:	f04f 0901 	mov.w	r9, #1
 8007964:	f8cd 800c 	str.w	r8, [sp, #12]
 8007968:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007b28 <_vfiprintf_r+0x24c>
 800796c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007970:	4623      	mov	r3, r4
 8007972:	469a      	mov	sl, r3
 8007974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007978:	b10a      	cbz	r2, 800797e <_vfiprintf_r+0xa2>
 800797a:	2a25      	cmp	r2, #37	; 0x25
 800797c:	d1f9      	bne.n	8007972 <_vfiprintf_r+0x96>
 800797e:	ebba 0b04 	subs.w	fp, sl, r4
 8007982:	d00b      	beq.n	800799c <_vfiprintf_r+0xc0>
 8007984:	465b      	mov	r3, fp
 8007986:	4622      	mov	r2, r4
 8007988:	4629      	mov	r1, r5
 800798a:	4630      	mov	r0, r6
 800798c:	f7ff ff94 	bl	80078b8 <__sfputs_r>
 8007990:	3001      	adds	r0, #1
 8007992:	f000 80aa 	beq.w	8007aea <_vfiprintf_r+0x20e>
 8007996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007998:	445a      	add	r2, fp
 800799a:	9209      	str	r2, [sp, #36]	; 0x24
 800799c:	f89a 3000 	ldrb.w	r3, [sl]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 80a2 	beq.w	8007aea <_vfiprintf_r+0x20e>
 80079a6:	2300      	movs	r3, #0
 80079a8:	f04f 32ff 	mov.w	r2, #4294967295
 80079ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079b0:	f10a 0a01 	add.w	sl, sl, #1
 80079b4:	9304      	str	r3, [sp, #16]
 80079b6:	9307      	str	r3, [sp, #28]
 80079b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079bc:	931a      	str	r3, [sp, #104]	; 0x68
 80079be:	4654      	mov	r4, sl
 80079c0:	2205      	movs	r2, #5
 80079c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c6:	4858      	ldr	r0, [pc, #352]	; (8007b28 <_vfiprintf_r+0x24c>)
 80079c8:	f7fe ff84 	bl	80068d4 <memchr>
 80079cc:	9a04      	ldr	r2, [sp, #16]
 80079ce:	b9d8      	cbnz	r0, 8007a08 <_vfiprintf_r+0x12c>
 80079d0:	06d1      	lsls	r1, r2, #27
 80079d2:	bf44      	itt	mi
 80079d4:	2320      	movmi	r3, #32
 80079d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079da:	0713      	lsls	r3, r2, #28
 80079dc:	bf44      	itt	mi
 80079de:	232b      	movmi	r3, #43	; 0x2b
 80079e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079e4:	f89a 3000 	ldrb.w	r3, [sl]
 80079e8:	2b2a      	cmp	r3, #42	; 0x2a
 80079ea:	d015      	beq.n	8007a18 <_vfiprintf_r+0x13c>
 80079ec:	4654      	mov	r4, sl
 80079ee:	2000      	movs	r0, #0
 80079f0:	f04f 0c0a 	mov.w	ip, #10
 80079f4:	9a07      	ldr	r2, [sp, #28]
 80079f6:	4621      	mov	r1, r4
 80079f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079fc:	3b30      	subs	r3, #48	; 0x30
 80079fe:	2b09      	cmp	r3, #9
 8007a00:	d94e      	bls.n	8007aa0 <_vfiprintf_r+0x1c4>
 8007a02:	b1b0      	cbz	r0, 8007a32 <_vfiprintf_r+0x156>
 8007a04:	9207      	str	r2, [sp, #28]
 8007a06:	e014      	b.n	8007a32 <_vfiprintf_r+0x156>
 8007a08:	eba0 0308 	sub.w	r3, r0, r8
 8007a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a10:	4313      	orrs	r3, r2
 8007a12:	46a2      	mov	sl, r4
 8007a14:	9304      	str	r3, [sp, #16]
 8007a16:	e7d2      	b.n	80079be <_vfiprintf_r+0xe2>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	1d19      	adds	r1, r3, #4
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	9103      	str	r1, [sp, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bfbb      	ittet	lt
 8007a24:	425b      	neglt	r3, r3
 8007a26:	f042 0202 	orrlt.w	r2, r2, #2
 8007a2a:	9307      	strge	r3, [sp, #28]
 8007a2c:	9307      	strlt	r3, [sp, #28]
 8007a2e:	bfb8      	it	lt
 8007a30:	9204      	strlt	r2, [sp, #16]
 8007a32:	7823      	ldrb	r3, [r4, #0]
 8007a34:	2b2e      	cmp	r3, #46	; 0x2e
 8007a36:	d10c      	bne.n	8007a52 <_vfiprintf_r+0x176>
 8007a38:	7863      	ldrb	r3, [r4, #1]
 8007a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a3c:	d135      	bne.n	8007aaa <_vfiprintf_r+0x1ce>
 8007a3e:	9b03      	ldr	r3, [sp, #12]
 8007a40:	3402      	adds	r4, #2
 8007a42:	1d1a      	adds	r2, r3, #4
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	9203      	str	r2, [sp, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	bfb8      	it	lt
 8007a4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a50:	9305      	str	r3, [sp, #20]
 8007a52:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007b2c <_vfiprintf_r+0x250>
 8007a56:	2203      	movs	r2, #3
 8007a58:	4650      	mov	r0, sl
 8007a5a:	7821      	ldrb	r1, [r4, #0]
 8007a5c:	f7fe ff3a 	bl	80068d4 <memchr>
 8007a60:	b140      	cbz	r0, 8007a74 <_vfiprintf_r+0x198>
 8007a62:	2340      	movs	r3, #64	; 0x40
 8007a64:	eba0 000a 	sub.w	r0, r0, sl
 8007a68:	fa03 f000 	lsl.w	r0, r3, r0
 8007a6c:	9b04      	ldr	r3, [sp, #16]
 8007a6e:	3401      	adds	r4, #1
 8007a70:	4303      	orrs	r3, r0
 8007a72:	9304      	str	r3, [sp, #16]
 8007a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a78:	2206      	movs	r2, #6
 8007a7a:	482d      	ldr	r0, [pc, #180]	; (8007b30 <_vfiprintf_r+0x254>)
 8007a7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a80:	f7fe ff28 	bl	80068d4 <memchr>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d03f      	beq.n	8007b08 <_vfiprintf_r+0x22c>
 8007a88:	4b2a      	ldr	r3, [pc, #168]	; (8007b34 <_vfiprintf_r+0x258>)
 8007a8a:	bb1b      	cbnz	r3, 8007ad4 <_vfiprintf_r+0x1f8>
 8007a8c:	9b03      	ldr	r3, [sp, #12]
 8007a8e:	3307      	adds	r3, #7
 8007a90:	f023 0307 	bic.w	r3, r3, #7
 8007a94:	3308      	adds	r3, #8
 8007a96:	9303      	str	r3, [sp, #12]
 8007a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9a:	443b      	add	r3, r7
 8007a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9e:	e767      	b.n	8007970 <_vfiprintf_r+0x94>
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aa8:	e7a5      	b.n	80079f6 <_vfiprintf_r+0x11a>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f04f 0c0a 	mov.w	ip, #10
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	3401      	adds	r4, #1
 8007ab4:	9305      	str	r3, [sp, #20]
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007abc:	3a30      	subs	r2, #48	; 0x30
 8007abe:	2a09      	cmp	r2, #9
 8007ac0:	d903      	bls.n	8007aca <_vfiprintf_r+0x1ee>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0c5      	beq.n	8007a52 <_vfiprintf_r+0x176>
 8007ac6:	9105      	str	r1, [sp, #20]
 8007ac8:	e7c3      	b.n	8007a52 <_vfiprintf_r+0x176>
 8007aca:	4604      	mov	r4, r0
 8007acc:	2301      	movs	r3, #1
 8007ace:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ad2:	e7f0      	b.n	8007ab6 <_vfiprintf_r+0x1da>
 8007ad4:	ab03      	add	r3, sp, #12
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	462a      	mov	r2, r5
 8007ada:	4630      	mov	r0, r6
 8007adc:	4b16      	ldr	r3, [pc, #88]	; (8007b38 <_vfiprintf_r+0x25c>)
 8007ade:	a904      	add	r1, sp, #16
 8007ae0:	f7fc f844 	bl	8003b6c <_printf_float>
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	1c78      	adds	r0, r7, #1
 8007ae8:	d1d6      	bne.n	8007a98 <_vfiprintf_r+0x1bc>
 8007aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aec:	07d9      	lsls	r1, r3, #31
 8007aee:	d405      	bmi.n	8007afc <_vfiprintf_r+0x220>
 8007af0:	89ab      	ldrh	r3, [r5, #12]
 8007af2:	059a      	lsls	r2, r3, #22
 8007af4:	d402      	bmi.n	8007afc <_vfiprintf_r+0x220>
 8007af6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007af8:	f000 fa9d 	bl	8008036 <__retarget_lock_release_recursive>
 8007afc:	89ab      	ldrh	r3, [r5, #12]
 8007afe:	065b      	lsls	r3, r3, #25
 8007b00:	f53f af12 	bmi.w	8007928 <_vfiprintf_r+0x4c>
 8007b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b06:	e711      	b.n	800792c <_vfiprintf_r+0x50>
 8007b08:	ab03      	add	r3, sp, #12
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	462a      	mov	r2, r5
 8007b0e:	4630      	mov	r0, r6
 8007b10:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <_vfiprintf_r+0x25c>)
 8007b12:	a904      	add	r1, sp, #16
 8007b14:	f7fc fac6 	bl	80040a4 <_printf_i>
 8007b18:	e7e4      	b.n	8007ae4 <_vfiprintf_r+0x208>
 8007b1a:	bf00      	nop
 8007b1c:	080087bc 	.word	0x080087bc
 8007b20:	080087dc 	.word	0x080087dc
 8007b24:	0800879c 	.word	0x0800879c
 8007b28:	0800874c 	.word	0x0800874c
 8007b2c:	08008752 	.word	0x08008752
 8007b30:	08008756 	.word	0x08008756
 8007b34:	08003b6d 	.word	0x08003b6d
 8007b38:	080078b9 	.word	0x080078b9

08007b3c <__swbuf_r>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	460e      	mov	r6, r1
 8007b40:	4614      	mov	r4, r2
 8007b42:	4605      	mov	r5, r0
 8007b44:	b118      	cbz	r0, 8007b4e <__swbuf_r+0x12>
 8007b46:	6983      	ldr	r3, [r0, #24]
 8007b48:	b90b      	cbnz	r3, 8007b4e <__swbuf_r+0x12>
 8007b4a:	f000 f9d5 	bl	8007ef8 <__sinit>
 8007b4e:	4b21      	ldr	r3, [pc, #132]	; (8007bd4 <__swbuf_r+0x98>)
 8007b50:	429c      	cmp	r4, r3
 8007b52:	d12b      	bne.n	8007bac <__swbuf_r+0x70>
 8007b54:	686c      	ldr	r4, [r5, #4]
 8007b56:	69a3      	ldr	r3, [r4, #24]
 8007b58:	60a3      	str	r3, [r4, #8]
 8007b5a:	89a3      	ldrh	r3, [r4, #12]
 8007b5c:	071a      	lsls	r2, r3, #28
 8007b5e:	d52f      	bpl.n	8007bc0 <__swbuf_r+0x84>
 8007b60:	6923      	ldr	r3, [r4, #16]
 8007b62:	b36b      	cbz	r3, 8007bc0 <__swbuf_r+0x84>
 8007b64:	6923      	ldr	r3, [r4, #16]
 8007b66:	6820      	ldr	r0, [r4, #0]
 8007b68:	b2f6      	uxtb	r6, r6
 8007b6a:	1ac0      	subs	r0, r0, r3
 8007b6c:	6963      	ldr	r3, [r4, #20]
 8007b6e:	4637      	mov	r7, r6
 8007b70:	4283      	cmp	r3, r0
 8007b72:	dc04      	bgt.n	8007b7e <__swbuf_r+0x42>
 8007b74:	4621      	mov	r1, r4
 8007b76:	4628      	mov	r0, r5
 8007b78:	f000 f92a 	bl	8007dd0 <_fflush_r>
 8007b7c:	bb30      	cbnz	r0, 8007bcc <__swbuf_r+0x90>
 8007b7e:	68a3      	ldr	r3, [r4, #8]
 8007b80:	3001      	adds	r0, #1
 8007b82:	3b01      	subs	r3, #1
 8007b84:	60a3      	str	r3, [r4, #8]
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	6022      	str	r2, [r4, #0]
 8007b8c:	701e      	strb	r6, [r3, #0]
 8007b8e:	6963      	ldr	r3, [r4, #20]
 8007b90:	4283      	cmp	r3, r0
 8007b92:	d004      	beq.n	8007b9e <__swbuf_r+0x62>
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	07db      	lsls	r3, r3, #31
 8007b98:	d506      	bpl.n	8007ba8 <__swbuf_r+0x6c>
 8007b9a:	2e0a      	cmp	r6, #10
 8007b9c:	d104      	bne.n	8007ba8 <__swbuf_r+0x6c>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 f915 	bl	8007dd0 <_fflush_r>
 8007ba6:	b988      	cbnz	r0, 8007bcc <__swbuf_r+0x90>
 8007ba8:	4638      	mov	r0, r7
 8007baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <__swbuf_r+0x9c>)
 8007bae:	429c      	cmp	r4, r3
 8007bb0:	d101      	bne.n	8007bb6 <__swbuf_r+0x7a>
 8007bb2:	68ac      	ldr	r4, [r5, #8]
 8007bb4:	e7cf      	b.n	8007b56 <__swbuf_r+0x1a>
 8007bb6:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <__swbuf_r+0xa0>)
 8007bb8:	429c      	cmp	r4, r3
 8007bba:	bf08      	it	eq
 8007bbc:	68ec      	ldreq	r4, [r5, #12]
 8007bbe:	e7ca      	b.n	8007b56 <__swbuf_r+0x1a>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 f80c 	bl	8007be0 <__swsetup_r>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d0cb      	beq.n	8007b64 <__swbuf_r+0x28>
 8007bcc:	f04f 37ff 	mov.w	r7, #4294967295
 8007bd0:	e7ea      	b.n	8007ba8 <__swbuf_r+0x6c>
 8007bd2:	bf00      	nop
 8007bd4:	080087bc 	.word	0x080087bc
 8007bd8:	080087dc 	.word	0x080087dc
 8007bdc:	0800879c 	.word	0x0800879c

08007be0 <__swsetup_r>:
 8007be0:	4b32      	ldr	r3, [pc, #200]	; (8007cac <__swsetup_r+0xcc>)
 8007be2:	b570      	push	{r4, r5, r6, lr}
 8007be4:	681d      	ldr	r5, [r3, #0]
 8007be6:	4606      	mov	r6, r0
 8007be8:	460c      	mov	r4, r1
 8007bea:	b125      	cbz	r5, 8007bf6 <__swsetup_r+0x16>
 8007bec:	69ab      	ldr	r3, [r5, #24]
 8007bee:	b913      	cbnz	r3, 8007bf6 <__swsetup_r+0x16>
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f000 f981 	bl	8007ef8 <__sinit>
 8007bf6:	4b2e      	ldr	r3, [pc, #184]	; (8007cb0 <__swsetup_r+0xd0>)
 8007bf8:	429c      	cmp	r4, r3
 8007bfa:	d10f      	bne.n	8007c1c <__swsetup_r+0x3c>
 8007bfc:	686c      	ldr	r4, [r5, #4]
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c04:	0719      	lsls	r1, r3, #28
 8007c06:	d42c      	bmi.n	8007c62 <__swsetup_r+0x82>
 8007c08:	06dd      	lsls	r5, r3, #27
 8007c0a:	d411      	bmi.n	8007c30 <__swsetup_r+0x50>
 8007c0c:	2309      	movs	r3, #9
 8007c0e:	6033      	str	r3, [r6, #0]
 8007c10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c14:	f04f 30ff 	mov.w	r0, #4294967295
 8007c18:	81a3      	strh	r3, [r4, #12]
 8007c1a:	e03e      	b.n	8007c9a <__swsetup_r+0xba>
 8007c1c:	4b25      	ldr	r3, [pc, #148]	; (8007cb4 <__swsetup_r+0xd4>)
 8007c1e:	429c      	cmp	r4, r3
 8007c20:	d101      	bne.n	8007c26 <__swsetup_r+0x46>
 8007c22:	68ac      	ldr	r4, [r5, #8]
 8007c24:	e7eb      	b.n	8007bfe <__swsetup_r+0x1e>
 8007c26:	4b24      	ldr	r3, [pc, #144]	; (8007cb8 <__swsetup_r+0xd8>)
 8007c28:	429c      	cmp	r4, r3
 8007c2a:	bf08      	it	eq
 8007c2c:	68ec      	ldreq	r4, [r5, #12]
 8007c2e:	e7e6      	b.n	8007bfe <__swsetup_r+0x1e>
 8007c30:	0758      	lsls	r0, r3, #29
 8007c32:	d512      	bpl.n	8007c5a <__swsetup_r+0x7a>
 8007c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c36:	b141      	cbz	r1, 8007c4a <__swsetup_r+0x6a>
 8007c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c3c:	4299      	cmp	r1, r3
 8007c3e:	d002      	beq.n	8007c46 <__swsetup_r+0x66>
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7ff fb2f 	bl	80072a4 <_free_r>
 8007c46:	2300      	movs	r3, #0
 8007c48:	6363      	str	r3, [r4, #52]	; 0x34
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c50:	81a3      	strh	r3, [r4, #12]
 8007c52:	2300      	movs	r3, #0
 8007c54:	6063      	str	r3, [r4, #4]
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f043 0308 	orr.w	r3, r3, #8
 8007c60:	81a3      	strh	r3, [r4, #12]
 8007c62:	6923      	ldr	r3, [r4, #16]
 8007c64:	b94b      	cbnz	r3, 8007c7a <__swsetup_r+0x9a>
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c70:	d003      	beq.n	8007c7a <__swsetup_r+0x9a>
 8007c72:	4621      	mov	r1, r4
 8007c74:	4630      	mov	r0, r6
 8007c76:	f000 fa05 	bl	8008084 <__smakebuf_r>
 8007c7a:	89a0      	ldrh	r0, [r4, #12]
 8007c7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c80:	f010 0301 	ands.w	r3, r0, #1
 8007c84:	d00a      	beq.n	8007c9c <__swsetup_r+0xbc>
 8007c86:	2300      	movs	r3, #0
 8007c88:	60a3      	str	r3, [r4, #8]
 8007c8a:	6963      	ldr	r3, [r4, #20]
 8007c8c:	425b      	negs	r3, r3
 8007c8e:	61a3      	str	r3, [r4, #24]
 8007c90:	6923      	ldr	r3, [r4, #16]
 8007c92:	b943      	cbnz	r3, 8007ca6 <__swsetup_r+0xc6>
 8007c94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c98:	d1ba      	bne.n	8007c10 <__swsetup_r+0x30>
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	0781      	lsls	r1, r0, #30
 8007c9e:	bf58      	it	pl
 8007ca0:	6963      	ldrpl	r3, [r4, #20]
 8007ca2:	60a3      	str	r3, [r4, #8]
 8007ca4:	e7f4      	b.n	8007c90 <__swsetup_r+0xb0>
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	e7f7      	b.n	8007c9a <__swsetup_r+0xba>
 8007caa:	bf00      	nop
 8007cac:	2000000c 	.word	0x2000000c
 8007cb0:	080087bc 	.word	0x080087bc
 8007cb4:	080087dc 	.word	0x080087dc
 8007cb8:	0800879c 	.word	0x0800879c

08007cbc <abort>:
 8007cbc:	2006      	movs	r0, #6
 8007cbe:	b508      	push	{r3, lr}
 8007cc0:	f000 fa50 	bl	8008164 <raise>
 8007cc4:	2001      	movs	r0, #1
 8007cc6:	f7f9 fb3c 	bl	8001342 <_exit>
	...

08007ccc <__sflush_r>:
 8007ccc:	898a      	ldrh	r2, [r1, #12]
 8007cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	0710      	lsls	r0, r2, #28
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	d457      	bmi.n	8007d88 <__sflush_r+0xbc>
 8007cd8:	684b      	ldr	r3, [r1, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	dc04      	bgt.n	8007ce8 <__sflush_r+0x1c>
 8007cde:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	dc01      	bgt.n	8007ce8 <__sflush_r+0x1c>
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cea:	2e00      	cmp	r6, #0
 8007cec:	d0fa      	beq.n	8007ce4 <__sflush_r+0x18>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cf4:	682f      	ldr	r7, [r5, #0]
 8007cf6:	602b      	str	r3, [r5, #0]
 8007cf8:	d032      	beq.n	8007d60 <__sflush_r+0x94>
 8007cfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	075a      	lsls	r2, r3, #29
 8007d00:	d505      	bpl.n	8007d0e <__sflush_r+0x42>
 8007d02:	6863      	ldr	r3, [r4, #4]
 8007d04:	1ac0      	subs	r0, r0, r3
 8007d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d08:	b10b      	cbz	r3, 8007d0e <__sflush_r+0x42>
 8007d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d0c:	1ac0      	subs	r0, r0, r3
 8007d0e:	2300      	movs	r3, #0
 8007d10:	4602      	mov	r2, r0
 8007d12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d14:	4628      	mov	r0, r5
 8007d16:	6a21      	ldr	r1, [r4, #32]
 8007d18:	47b0      	blx	r6
 8007d1a:	1c43      	adds	r3, r0, #1
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	d106      	bne.n	8007d2e <__sflush_r+0x62>
 8007d20:	6829      	ldr	r1, [r5, #0]
 8007d22:	291d      	cmp	r1, #29
 8007d24:	d82c      	bhi.n	8007d80 <__sflush_r+0xb4>
 8007d26:	4a29      	ldr	r2, [pc, #164]	; (8007dcc <__sflush_r+0x100>)
 8007d28:	40ca      	lsrs	r2, r1
 8007d2a:	07d6      	lsls	r6, r2, #31
 8007d2c:	d528      	bpl.n	8007d80 <__sflush_r+0xb4>
 8007d2e:	2200      	movs	r2, #0
 8007d30:	6062      	str	r2, [r4, #4]
 8007d32:	6922      	ldr	r2, [r4, #16]
 8007d34:	04d9      	lsls	r1, r3, #19
 8007d36:	6022      	str	r2, [r4, #0]
 8007d38:	d504      	bpl.n	8007d44 <__sflush_r+0x78>
 8007d3a:	1c42      	adds	r2, r0, #1
 8007d3c:	d101      	bne.n	8007d42 <__sflush_r+0x76>
 8007d3e:	682b      	ldr	r3, [r5, #0]
 8007d40:	b903      	cbnz	r3, 8007d44 <__sflush_r+0x78>
 8007d42:	6560      	str	r0, [r4, #84]	; 0x54
 8007d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d46:	602f      	str	r7, [r5, #0]
 8007d48:	2900      	cmp	r1, #0
 8007d4a:	d0cb      	beq.n	8007ce4 <__sflush_r+0x18>
 8007d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d50:	4299      	cmp	r1, r3
 8007d52:	d002      	beq.n	8007d5a <__sflush_r+0x8e>
 8007d54:	4628      	mov	r0, r5
 8007d56:	f7ff faa5 	bl	80072a4 <_free_r>
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	6360      	str	r0, [r4, #52]	; 0x34
 8007d5e:	e7c2      	b.n	8007ce6 <__sflush_r+0x1a>
 8007d60:	6a21      	ldr	r1, [r4, #32]
 8007d62:	2301      	movs	r3, #1
 8007d64:	4628      	mov	r0, r5
 8007d66:	47b0      	blx	r6
 8007d68:	1c41      	adds	r1, r0, #1
 8007d6a:	d1c7      	bne.n	8007cfc <__sflush_r+0x30>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0c4      	beq.n	8007cfc <__sflush_r+0x30>
 8007d72:	2b1d      	cmp	r3, #29
 8007d74:	d001      	beq.n	8007d7a <__sflush_r+0xae>
 8007d76:	2b16      	cmp	r3, #22
 8007d78:	d101      	bne.n	8007d7e <__sflush_r+0xb2>
 8007d7a:	602f      	str	r7, [r5, #0]
 8007d7c:	e7b2      	b.n	8007ce4 <__sflush_r+0x18>
 8007d7e:	89a3      	ldrh	r3, [r4, #12]
 8007d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	e7ae      	b.n	8007ce6 <__sflush_r+0x1a>
 8007d88:	690f      	ldr	r7, [r1, #16]
 8007d8a:	2f00      	cmp	r7, #0
 8007d8c:	d0aa      	beq.n	8007ce4 <__sflush_r+0x18>
 8007d8e:	0793      	lsls	r3, r2, #30
 8007d90:	bf18      	it	ne
 8007d92:	2300      	movne	r3, #0
 8007d94:	680e      	ldr	r6, [r1, #0]
 8007d96:	bf08      	it	eq
 8007d98:	694b      	ldreq	r3, [r1, #20]
 8007d9a:	1bf6      	subs	r6, r6, r7
 8007d9c:	600f      	str	r7, [r1, #0]
 8007d9e:	608b      	str	r3, [r1, #8]
 8007da0:	2e00      	cmp	r6, #0
 8007da2:	dd9f      	ble.n	8007ce4 <__sflush_r+0x18>
 8007da4:	4633      	mov	r3, r6
 8007da6:	463a      	mov	r2, r7
 8007da8:	4628      	mov	r0, r5
 8007daa:	6a21      	ldr	r1, [r4, #32]
 8007dac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007db0:	47e0      	blx	ip
 8007db2:	2800      	cmp	r0, #0
 8007db4:	dc06      	bgt.n	8007dc4 <__sflush_r+0xf8>
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc0:	81a3      	strh	r3, [r4, #12]
 8007dc2:	e790      	b.n	8007ce6 <__sflush_r+0x1a>
 8007dc4:	4407      	add	r7, r0
 8007dc6:	1a36      	subs	r6, r6, r0
 8007dc8:	e7ea      	b.n	8007da0 <__sflush_r+0xd4>
 8007dca:	bf00      	nop
 8007dcc:	20400001 	.word	0x20400001

08007dd0 <_fflush_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	690b      	ldr	r3, [r1, #16]
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	b913      	cbnz	r3, 8007de0 <_fflush_r+0x10>
 8007dda:	2500      	movs	r5, #0
 8007ddc:	4628      	mov	r0, r5
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	b118      	cbz	r0, 8007dea <_fflush_r+0x1a>
 8007de2:	6983      	ldr	r3, [r0, #24]
 8007de4:	b90b      	cbnz	r3, 8007dea <_fflush_r+0x1a>
 8007de6:	f000 f887 	bl	8007ef8 <__sinit>
 8007dea:	4b14      	ldr	r3, [pc, #80]	; (8007e3c <_fflush_r+0x6c>)
 8007dec:	429c      	cmp	r4, r3
 8007dee:	d11b      	bne.n	8007e28 <_fflush_r+0x58>
 8007df0:	686c      	ldr	r4, [r5, #4]
 8007df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d0ef      	beq.n	8007dda <_fflush_r+0xa>
 8007dfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dfc:	07d0      	lsls	r0, r2, #31
 8007dfe:	d404      	bmi.n	8007e0a <_fflush_r+0x3a>
 8007e00:	0599      	lsls	r1, r3, #22
 8007e02:	d402      	bmi.n	8007e0a <_fflush_r+0x3a>
 8007e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e06:	f000 f915 	bl	8008034 <__retarget_lock_acquire_recursive>
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	f7ff ff5d 	bl	8007ccc <__sflush_r>
 8007e12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e14:	4605      	mov	r5, r0
 8007e16:	07da      	lsls	r2, r3, #31
 8007e18:	d4e0      	bmi.n	8007ddc <_fflush_r+0xc>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	059b      	lsls	r3, r3, #22
 8007e1e:	d4dd      	bmi.n	8007ddc <_fflush_r+0xc>
 8007e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e22:	f000 f908 	bl	8008036 <__retarget_lock_release_recursive>
 8007e26:	e7d9      	b.n	8007ddc <_fflush_r+0xc>
 8007e28:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <_fflush_r+0x70>)
 8007e2a:	429c      	cmp	r4, r3
 8007e2c:	d101      	bne.n	8007e32 <_fflush_r+0x62>
 8007e2e:	68ac      	ldr	r4, [r5, #8]
 8007e30:	e7df      	b.n	8007df2 <_fflush_r+0x22>
 8007e32:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <_fflush_r+0x74>)
 8007e34:	429c      	cmp	r4, r3
 8007e36:	bf08      	it	eq
 8007e38:	68ec      	ldreq	r4, [r5, #12]
 8007e3a:	e7da      	b.n	8007df2 <_fflush_r+0x22>
 8007e3c:	080087bc 	.word	0x080087bc
 8007e40:	080087dc 	.word	0x080087dc
 8007e44:	0800879c 	.word	0x0800879c

08007e48 <std>:
 8007e48:	2300      	movs	r3, #0
 8007e4a:	b510      	push	{r4, lr}
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e56:	6083      	str	r3, [r0, #8]
 8007e58:	8181      	strh	r1, [r0, #12]
 8007e5a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e5c:	81c2      	strh	r2, [r0, #14]
 8007e5e:	6183      	str	r3, [r0, #24]
 8007e60:	4619      	mov	r1, r3
 8007e62:	2208      	movs	r2, #8
 8007e64:	305c      	adds	r0, #92	; 0x5c
 8007e66:	f7fb fddb 	bl	8003a20 <memset>
 8007e6a:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <std+0x38>)
 8007e6c:	6224      	str	r4, [r4, #32]
 8007e6e:	6263      	str	r3, [r4, #36]	; 0x24
 8007e70:	4b04      	ldr	r3, [pc, #16]	; (8007e84 <std+0x3c>)
 8007e72:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e74:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <std+0x40>)
 8007e76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e78:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <std+0x44>)
 8007e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e7c:	bd10      	pop	{r4, pc}
 8007e7e:	bf00      	nop
 8007e80:	0800819d 	.word	0x0800819d
 8007e84:	080081bf 	.word	0x080081bf
 8007e88:	080081f7 	.word	0x080081f7
 8007e8c:	0800821b 	.word	0x0800821b

08007e90 <_cleanup_r>:
 8007e90:	4901      	ldr	r1, [pc, #4]	; (8007e98 <_cleanup_r+0x8>)
 8007e92:	f000 b8af 	b.w	8007ff4 <_fwalk_reent>
 8007e96:	bf00      	nop
 8007e98:	08007dd1 	.word	0x08007dd1

08007e9c <__sfmoreglue>:
 8007e9c:	2268      	movs	r2, #104	; 0x68
 8007e9e:	b570      	push	{r4, r5, r6, lr}
 8007ea0:	1e4d      	subs	r5, r1, #1
 8007ea2:	4355      	muls	r5, r2
 8007ea4:	460e      	mov	r6, r1
 8007ea6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eaa:	f7ff fa63 	bl	8007374 <_malloc_r>
 8007eae:	4604      	mov	r4, r0
 8007eb0:	b140      	cbz	r0, 8007ec4 <__sfmoreglue+0x28>
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	e9c0 1600 	strd	r1, r6, [r0]
 8007eb8:	300c      	adds	r0, #12
 8007eba:	60a0      	str	r0, [r4, #8]
 8007ebc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ec0:	f7fb fdae 	bl	8003a20 <memset>
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}

08007ec8 <__sfp_lock_acquire>:
 8007ec8:	4801      	ldr	r0, [pc, #4]	; (8007ed0 <__sfp_lock_acquire+0x8>)
 8007eca:	f000 b8b3 	b.w	8008034 <__retarget_lock_acquire_recursive>
 8007ece:	bf00      	nop
 8007ed0:	20000379 	.word	0x20000379

08007ed4 <__sfp_lock_release>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	; (8007edc <__sfp_lock_release+0x8>)
 8007ed6:	f000 b8ae 	b.w	8008036 <__retarget_lock_release_recursive>
 8007eda:	bf00      	nop
 8007edc:	20000379 	.word	0x20000379

08007ee0 <__sinit_lock_acquire>:
 8007ee0:	4801      	ldr	r0, [pc, #4]	; (8007ee8 <__sinit_lock_acquire+0x8>)
 8007ee2:	f000 b8a7 	b.w	8008034 <__retarget_lock_acquire_recursive>
 8007ee6:	bf00      	nop
 8007ee8:	2000037a 	.word	0x2000037a

08007eec <__sinit_lock_release>:
 8007eec:	4801      	ldr	r0, [pc, #4]	; (8007ef4 <__sinit_lock_release+0x8>)
 8007eee:	f000 b8a2 	b.w	8008036 <__retarget_lock_release_recursive>
 8007ef2:	bf00      	nop
 8007ef4:	2000037a 	.word	0x2000037a

08007ef8 <__sinit>:
 8007ef8:	b510      	push	{r4, lr}
 8007efa:	4604      	mov	r4, r0
 8007efc:	f7ff fff0 	bl	8007ee0 <__sinit_lock_acquire>
 8007f00:	69a3      	ldr	r3, [r4, #24]
 8007f02:	b11b      	cbz	r3, 8007f0c <__sinit+0x14>
 8007f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f08:	f7ff bff0 	b.w	8007eec <__sinit_lock_release>
 8007f0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f10:	6523      	str	r3, [r4, #80]	; 0x50
 8007f12:	4b13      	ldr	r3, [pc, #76]	; (8007f60 <__sinit+0x68>)
 8007f14:	4a13      	ldr	r2, [pc, #76]	; (8007f64 <__sinit+0x6c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f1a:	42a3      	cmp	r3, r4
 8007f1c:	bf08      	it	eq
 8007f1e:	2301      	moveq	r3, #1
 8007f20:	4620      	mov	r0, r4
 8007f22:	bf08      	it	eq
 8007f24:	61a3      	streq	r3, [r4, #24]
 8007f26:	f000 f81f 	bl	8007f68 <__sfp>
 8007f2a:	6060      	str	r0, [r4, #4]
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f000 f81b 	bl	8007f68 <__sfp>
 8007f32:	60a0      	str	r0, [r4, #8]
 8007f34:	4620      	mov	r0, r4
 8007f36:	f000 f817 	bl	8007f68 <__sfp>
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2104      	movs	r1, #4
 8007f3e:	60e0      	str	r0, [r4, #12]
 8007f40:	6860      	ldr	r0, [r4, #4]
 8007f42:	f7ff ff81 	bl	8007e48 <std>
 8007f46:	2201      	movs	r2, #1
 8007f48:	2109      	movs	r1, #9
 8007f4a:	68a0      	ldr	r0, [r4, #8]
 8007f4c:	f7ff ff7c 	bl	8007e48 <std>
 8007f50:	2202      	movs	r2, #2
 8007f52:	2112      	movs	r1, #18
 8007f54:	68e0      	ldr	r0, [r4, #12]
 8007f56:	f7ff ff77 	bl	8007e48 <std>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	61a3      	str	r3, [r4, #24]
 8007f5e:	e7d1      	b.n	8007f04 <__sinit+0xc>
 8007f60:	08008358 	.word	0x08008358
 8007f64:	08007e91 	.word	0x08007e91

08007f68 <__sfp>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	4607      	mov	r7, r0
 8007f6c:	f7ff ffac 	bl	8007ec8 <__sfp_lock_acquire>
 8007f70:	4b1e      	ldr	r3, [pc, #120]	; (8007fec <__sfp+0x84>)
 8007f72:	681e      	ldr	r6, [r3, #0]
 8007f74:	69b3      	ldr	r3, [r6, #24]
 8007f76:	b913      	cbnz	r3, 8007f7e <__sfp+0x16>
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7ff ffbd 	bl	8007ef8 <__sinit>
 8007f7e:	3648      	adds	r6, #72	; 0x48
 8007f80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	d503      	bpl.n	8007f90 <__sfp+0x28>
 8007f88:	6833      	ldr	r3, [r6, #0]
 8007f8a:	b30b      	cbz	r3, 8007fd0 <__sfp+0x68>
 8007f8c:	6836      	ldr	r6, [r6, #0]
 8007f8e:	e7f7      	b.n	8007f80 <__sfp+0x18>
 8007f90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f94:	b9d5      	cbnz	r5, 8007fcc <__sfp+0x64>
 8007f96:	4b16      	ldr	r3, [pc, #88]	; (8007ff0 <__sfp+0x88>)
 8007f98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f9c:	60e3      	str	r3, [r4, #12]
 8007f9e:	6665      	str	r5, [r4, #100]	; 0x64
 8007fa0:	f000 f847 	bl	8008032 <__retarget_lock_init_recursive>
 8007fa4:	f7ff ff96 	bl	8007ed4 <__sfp_lock_release>
 8007fa8:	2208      	movs	r2, #8
 8007faa:	4629      	mov	r1, r5
 8007fac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fb4:	6025      	str	r5, [r4, #0]
 8007fb6:	61a5      	str	r5, [r4, #24]
 8007fb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fbc:	f7fb fd30 	bl	8003a20 <memset>
 8007fc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fc8:	4620      	mov	r0, r4
 8007fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fcc:	3468      	adds	r4, #104	; 0x68
 8007fce:	e7d9      	b.n	8007f84 <__sfp+0x1c>
 8007fd0:	2104      	movs	r1, #4
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	f7ff ff62 	bl	8007e9c <__sfmoreglue>
 8007fd8:	4604      	mov	r4, r0
 8007fda:	6030      	str	r0, [r6, #0]
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d1d5      	bne.n	8007f8c <__sfp+0x24>
 8007fe0:	f7ff ff78 	bl	8007ed4 <__sfp_lock_release>
 8007fe4:	230c      	movs	r3, #12
 8007fe6:	603b      	str	r3, [r7, #0]
 8007fe8:	e7ee      	b.n	8007fc8 <__sfp+0x60>
 8007fea:	bf00      	nop
 8007fec:	08008358 	.word	0x08008358
 8007ff0:	ffff0001 	.word	0xffff0001

08007ff4 <_fwalk_reent>:
 8007ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	4688      	mov	r8, r1
 8007ffc:	2700      	movs	r7, #0
 8007ffe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008002:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008006:	f1b9 0901 	subs.w	r9, r9, #1
 800800a:	d505      	bpl.n	8008018 <_fwalk_reent+0x24>
 800800c:	6824      	ldr	r4, [r4, #0]
 800800e:	2c00      	cmp	r4, #0
 8008010:	d1f7      	bne.n	8008002 <_fwalk_reent+0xe>
 8008012:	4638      	mov	r0, r7
 8008014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008018:	89ab      	ldrh	r3, [r5, #12]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d907      	bls.n	800802e <_fwalk_reent+0x3a>
 800801e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008022:	3301      	adds	r3, #1
 8008024:	d003      	beq.n	800802e <_fwalk_reent+0x3a>
 8008026:	4629      	mov	r1, r5
 8008028:	4630      	mov	r0, r6
 800802a:	47c0      	blx	r8
 800802c:	4307      	orrs	r7, r0
 800802e:	3568      	adds	r5, #104	; 0x68
 8008030:	e7e9      	b.n	8008006 <_fwalk_reent+0x12>

08008032 <__retarget_lock_init_recursive>:
 8008032:	4770      	bx	lr

08008034 <__retarget_lock_acquire_recursive>:
 8008034:	4770      	bx	lr

08008036 <__retarget_lock_release_recursive>:
 8008036:	4770      	bx	lr

08008038 <__swhatbuf_r>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	460e      	mov	r6, r1
 800803c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008040:	4614      	mov	r4, r2
 8008042:	2900      	cmp	r1, #0
 8008044:	461d      	mov	r5, r3
 8008046:	b096      	sub	sp, #88	; 0x58
 8008048:	da08      	bge.n	800805c <__swhatbuf_r+0x24>
 800804a:	2200      	movs	r2, #0
 800804c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008050:	602a      	str	r2, [r5, #0]
 8008052:	061a      	lsls	r2, r3, #24
 8008054:	d410      	bmi.n	8008078 <__swhatbuf_r+0x40>
 8008056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800805a:	e00e      	b.n	800807a <__swhatbuf_r+0x42>
 800805c:	466a      	mov	r2, sp
 800805e:	f000 f903 	bl	8008268 <_fstat_r>
 8008062:	2800      	cmp	r0, #0
 8008064:	dbf1      	blt.n	800804a <__swhatbuf_r+0x12>
 8008066:	9a01      	ldr	r2, [sp, #4]
 8008068:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800806c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008070:	425a      	negs	r2, r3
 8008072:	415a      	adcs	r2, r3
 8008074:	602a      	str	r2, [r5, #0]
 8008076:	e7ee      	b.n	8008056 <__swhatbuf_r+0x1e>
 8008078:	2340      	movs	r3, #64	; 0x40
 800807a:	2000      	movs	r0, #0
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	b016      	add	sp, #88	; 0x58
 8008080:	bd70      	pop	{r4, r5, r6, pc}
	...

08008084 <__smakebuf_r>:
 8008084:	898b      	ldrh	r3, [r1, #12]
 8008086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008088:	079d      	lsls	r5, r3, #30
 800808a:	4606      	mov	r6, r0
 800808c:	460c      	mov	r4, r1
 800808e:	d507      	bpl.n	80080a0 <__smakebuf_r+0x1c>
 8008090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	6123      	str	r3, [r4, #16]
 8008098:	2301      	movs	r3, #1
 800809a:	6163      	str	r3, [r4, #20]
 800809c:	b002      	add	sp, #8
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	466a      	mov	r2, sp
 80080a2:	ab01      	add	r3, sp, #4
 80080a4:	f7ff ffc8 	bl	8008038 <__swhatbuf_r>
 80080a8:	9900      	ldr	r1, [sp, #0]
 80080aa:	4605      	mov	r5, r0
 80080ac:	4630      	mov	r0, r6
 80080ae:	f7ff f961 	bl	8007374 <_malloc_r>
 80080b2:	b948      	cbnz	r0, 80080c8 <__smakebuf_r+0x44>
 80080b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080b8:	059a      	lsls	r2, r3, #22
 80080ba:	d4ef      	bmi.n	800809c <__smakebuf_r+0x18>
 80080bc:	f023 0303 	bic.w	r3, r3, #3
 80080c0:	f043 0302 	orr.w	r3, r3, #2
 80080c4:	81a3      	strh	r3, [r4, #12]
 80080c6:	e7e3      	b.n	8008090 <__smakebuf_r+0xc>
 80080c8:	4b0d      	ldr	r3, [pc, #52]	; (8008100 <__smakebuf_r+0x7c>)
 80080ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	6020      	str	r0, [r4, #0]
 80080d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d4:	81a3      	strh	r3, [r4, #12]
 80080d6:	9b00      	ldr	r3, [sp, #0]
 80080d8:	6120      	str	r0, [r4, #16]
 80080da:	6163      	str	r3, [r4, #20]
 80080dc:	9b01      	ldr	r3, [sp, #4]
 80080de:	b15b      	cbz	r3, 80080f8 <__smakebuf_r+0x74>
 80080e0:	4630      	mov	r0, r6
 80080e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080e6:	f000 f8d1 	bl	800828c <_isatty_r>
 80080ea:	b128      	cbz	r0, 80080f8 <__smakebuf_r+0x74>
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	f023 0303 	bic.w	r3, r3, #3
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	81a3      	strh	r3, [r4, #12]
 80080f8:	89a0      	ldrh	r0, [r4, #12]
 80080fa:	4305      	orrs	r5, r0
 80080fc:	81a5      	strh	r5, [r4, #12]
 80080fe:	e7cd      	b.n	800809c <__smakebuf_r+0x18>
 8008100:	08007e91 	.word	0x08007e91

08008104 <_malloc_usable_size_r>:
 8008104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008108:	1f18      	subs	r0, r3, #4
 800810a:	2b00      	cmp	r3, #0
 800810c:	bfbc      	itt	lt
 800810e:	580b      	ldrlt	r3, [r1, r0]
 8008110:	18c0      	addlt	r0, r0, r3
 8008112:	4770      	bx	lr

08008114 <_raise_r>:
 8008114:	291f      	cmp	r1, #31
 8008116:	b538      	push	{r3, r4, r5, lr}
 8008118:	4604      	mov	r4, r0
 800811a:	460d      	mov	r5, r1
 800811c:	d904      	bls.n	8008128 <_raise_r+0x14>
 800811e:	2316      	movs	r3, #22
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	f04f 30ff 	mov.w	r0, #4294967295
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800812a:	b112      	cbz	r2, 8008132 <_raise_r+0x1e>
 800812c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008130:	b94b      	cbnz	r3, 8008146 <_raise_r+0x32>
 8008132:	4620      	mov	r0, r4
 8008134:	f000 f830 	bl	8008198 <_getpid_r>
 8008138:	462a      	mov	r2, r5
 800813a:	4601      	mov	r1, r0
 800813c:	4620      	mov	r0, r4
 800813e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008142:	f000 b817 	b.w	8008174 <_kill_r>
 8008146:	2b01      	cmp	r3, #1
 8008148:	d00a      	beq.n	8008160 <_raise_r+0x4c>
 800814a:	1c59      	adds	r1, r3, #1
 800814c:	d103      	bne.n	8008156 <_raise_r+0x42>
 800814e:	2316      	movs	r3, #22
 8008150:	6003      	str	r3, [r0, #0]
 8008152:	2001      	movs	r0, #1
 8008154:	e7e7      	b.n	8008126 <_raise_r+0x12>
 8008156:	2400      	movs	r4, #0
 8008158:	4628      	mov	r0, r5
 800815a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800815e:	4798      	blx	r3
 8008160:	2000      	movs	r0, #0
 8008162:	e7e0      	b.n	8008126 <_raise_r+0x12>

08008164 <raise>:
 8008164:	4b02      	ldr	r3, [pc, #8]	; (8008170 <raise+0xc>)
 8008166:	4601      	mov	r1, r0
 8008168:	6818      	ldr	r0, [r3, #0]
 800816a:	f7ff bfd3 	b.w	8008114 <_raise_r>
 800816e:	bf00      	nop
 8008170:	2000000c 	.word	0x2000000c

08008174 <_kill_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	2300      	movs	r3, #0
 8008178:	4d06      	ldr	r5, [pc, #24]	; (8008194 <_kill_r+0x20>)
 800817a:	4604      	mov	r4, r0
 800817c:	4608      	mov	r0, r1
 800817e:	4611      	mov	r1, r2
 8008180:	602b      	str	r3, [r5, #0]
 8008182:	f7f9 f8ce 	bl	8001322 <_kill>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	d102      	bne.n	8008190 <_kill_r+0x1c>
 800818a:	682b      	ldr	r3, [r5, #0]
 800818c:	b103      	cbz	r3, 8008190 <_kill_r+0x1c>
 800818e:	6023      	str	r3, [r4, #0]
 8008190:	bd38      	pop	{r3, r4, r5, pc}
 8008192:	bf00      	nop
 8008194:	20000374 	.word	0x20000374

08008198 <_getpid_r>:
 8008198:	f7f9 b8bc 	b.w	8001314 <_getpid>

0800819c <__sread>:
 800819c:	b510      	push	{r4, lr}
 800819e:	460c      	mov	r4, r1
 80081a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a4:	f000 f894 	bl	80082d0 <_read_r>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	bfab      	itete	ge
 80081ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081ae:	89a3      	ldrhlt	r3, [r4, #12]
 80081b0:	181b      	addge	r3, r3, r0
 80081b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081b6:	bfac      	ite	ge
 80081b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80081ba:	81a3      	strhlt	r3, [r4, #12]
 80081bc:	bd10      	pop	{r4, pc}

080081be <__swrite>:
 80081be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c2:	461f      	mov	r7, r3
 80081c4:	898b      	ldrh	r3, [r1, #12]
 80081c6:	4605      	mov	r5, r0
 80081c8:	05db      	lsls	r3, r3, #23
 80081ca:	460c      	mov	r4, r1
 80081cc:	4616      	mov	r6, r2
 80081ce:	d505      	bpl.n	80081dc <__swrite+0x1e>
 80081d0:	2302      	movs	r3, #2
 80081d2:	2200      	movs	r2, #0
 80081d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d8:	f000 f868 	bl	80082ac <_lseek_r>
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	4632      	mov	r2, r6
 80081e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	4628      	mov	r0, r5
 80081e8:	463b      	mov	r3, r7
 80081ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081f2:	f000 b817 	b.w	8008224 <_write_r>

080081f6 <__sseek>:
 80081f6:	b510      	push	{r4, lr}
 80081f8:	460c      	mov	r4, r1
 80081fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fe:	f000 f855 	bl	80082ac <_lseek_r>
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	bf15      	itete	ne
 8008208:	6560      	strne	r0, [r4, #84]	; 0x54
 800820a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800820e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008212:	81a3      	strheq	r3, [r4, #12]
 8008214:	bf18      	it	ne
 8008216:	81a3      	strhne	r3, [r4, #12]
 8008218:	bd10      	pop	{r4, pc}

0800821a <__sclose>:
 800821a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800821e:	f000 b813 	b.w	8008248 <_close_r>
	...

08008224 <_write_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4604      	mov	r4, r0
 8008228:	4608      	mov	r0, r1
 800822a:	4611      	mov	r1, r2
 800822c:	2200      	movs	r2, #0
 800822e:	4d05      	ldr	r5, [pc, #20]	; (8008244 <_write_r+0x20>)
 8008230:	602a      	str	r2, [r5, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	f7f9 f8ac 	bl	8001390 <_write>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d102      	bne.n	8008242 <_write_r+0x1e>
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	b103      	cbz	r3, 8008242 <_write_r+0x1e>
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	20000374 	.word	0x20000374

08008248 <_close_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	2300      	movs	r3, #0
 800824c:	4d05      	ldr	r5, [pc, #20]	; (8008264 <_close_r+0x1c>)
 800824e:	4604      	mov	r4, r0
 8008250:	4608      	mov	r0, r1
 8008252:	602b      	str	r3, [r5, #0]
 8008254:	f7f9 f8b8 	bl	80013c8 <_close>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_close_r+0x1a>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_close_r+0x1a>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	20000374 	.word	0x20000374

08008268 <_fstat_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	2300      	movs	r3, #0
 800826c:	4d06      	ldr	r5, [pc, #24]	; (8008288 <_fstat_r+0x20>)
 800826e:	4604      	mov	r4, r0
 8008270:	4608      	mov	r0, r1
 8008272:	4611      	mov	r1, r2
 8008274:	602b      	str	r3, [r5, #0]
 8008276:	f7f9 f8b2 	bl	80013de <_fstat>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	d102      	bne.n	8008284 <_fstat_r+0x1c>
 800827e:	682b      	ldr	r3, [r5, #0]
 8008280:	b103      	cbz	r3, 8008284 <_fstat_r+0x1c>
 8008282:	6023      	str	r3, [r4, #0]
 8008284:	bd38      	pop	{r3, r4, r5, pc}
 8008286:	bf00      	nop
 8008288:	20000374 	.word	0x20000374

0800828c <_isatty_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	2300      	movs	r3, #0
 8008290:	4d05      	ldr	r5, [pc, #20]	; (80082a8 <_isatty_r+0x1c>)
 8008292:	4604      	mov	r4, r0
 8008294:	4608      	mov	r0, r1
 8008296:	602b      	str	r3, [r5, #0]
 8008298:	f7f9 f8b0 	bl	80013fc <_isatty>
 800829c:	1c43      	adds	r3, r0, #1
 800829e:	d102      	bne.n	80082a6 <_isatty_r+0x1a>
 80082a0:	682b      	ldr	r3, [r5, #0]
 80082a2:	b103      	cbz	r3, 80082a6 <_isatty_r+0x1a>
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	bd38      	pop	{r3, r4, r5, pc}
 80082a8:	20000374 	.word	0x20000374

080082ac <_lseek_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	4611      	mov	r1, r2
 80082b4:	2200      	movs	r2, #0
 80082b6:	4d05      	ldr	r5, [pc, #20]	; (80082cc <_lseek_r+0x20>)
 80082b8:	602a      	str	r2, [r5, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	f7f9 f8a8 	bl	8001410 <_lseek>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_lseek_r+0x1e>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_lseek_r+0x1e>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	20000374 	.word	0x20000374

080082d0 <_read_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	4611      	mov	r1, r2
 80082d8:	2200      	movs	r2, #0
 80082da:	4d05      	ldr	r5, [pc, #20]	; (80082f0 <_read_r+0x20>)
 80082dc:	602a      	str	r2, [r5, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	f7f9 f839 	bl	8001356 <_read>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d102      	bne.n	80082ee <_read_r+0x1e>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	b103      	cbz	r3, 80082ee <_read_r+0x1e>
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	20000374 	.word	0x20000374

080082f4 <_init>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	bf00      	nop
 80082f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fa:	bc08      	pop	{r3}
 80082fc:	469e      	mov	lr, r3
 80082fe:	4770      	bx	lr

08008300 <_fini>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	bf00      	nop
 8008304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008306:	bc08      	pop	{r3}
 8008308:	469e      	mov	lr, r3
 800830a:	4770      	bx	lr
