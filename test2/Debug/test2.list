
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003360  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003518  08003518  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003518  08003518  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003518  08003518  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  08003590  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08003590  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f41  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a6  00000000  00000000  00029fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001799e  00000000  00000000  0002cef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b65a  00000000  00000000  00044896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a4a9  00000000  00000000  0004fef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da399  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000344c  00000000  00000000  000da3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003454 	.word	0x08003454

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003454 	.word	0x08003454

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800016c:	d106      	bne.n	800017c <HAL_TIM_PeriodElapsedCallback+0x20>
    {
    	gu16_TIM2_OVC++;
 800016e:	4b06      	ldr	r3, [pc, #24]	; (8000188 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000170:	881b      	ldrh	r3, [r3, #0]
 8000172:	b29b      	uxth	r3, r3
 8000174:	3301      	adds	r3, #1
 8000176:	b29a      	uxth	r2, r3
 8000178:	4b03      	ldr	r3, [pc, #12]	; (8000188 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800017a:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim2, 0x0000);
        HAL_TIM_Base_Start_IT(&htim1);

        //N=0;
    }*/
}
 800017c:	bf00      	nop
 800017e:	370c      	adds	r7, #12
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000098 	.word	0x20000098

0800018c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // колбек по захвату
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af02      	add	r7, sp, #8
 8000192:	6078      	str	r0, [r7, #4]
	gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
	gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
	snprintf(trans_str, 96, "Freq %lu Hz\n", gu32_Freq);
	HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);*/

    if (htim->Instance == TIM2)// пробовал исправить алгоритм выше
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800019c:	f040 809d 	bne.w	80002da <HAL_TIM_IC_CaptureCallback+0x14e>
    {
    	HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80001a0:	4850      	ldr	r0, [pc, #320]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x158>)
 80001a2:	f7ff ffd3 	bl	800014c <strlen>
 80001a6:	4603      	mov	r3, r0
 80001a8:	b29a      	uxth	r2, r3
 80001aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ae:	494d      	ldr	r1, [pc, #308]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x158>)
 80001b0:	484d      	ldr	r0, [pc, #308]	; (80002e8 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80001b2:	f002 fb24 	bl	80027fe <HAL_UART_Transmit>
    	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	7f1b      	ldrb	r3, [r3, #28]
 80001ba:	2b01      	cmp	r3, #1
 80001bc:	f040 808d 	bne.w	80002da <HAL_TIM_IC_CaptureCallback+0x14e>
    	{
        	HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80001c0:	4848      	ldr	r0, [pc, #288]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x158>)
 80001c2:	f7ff ffc3 	bl	800014c <strlen>
 80001c6:	4603      	mov	r3, r0
 80001c8:	b29a      	uxth	r2, r3
 80001ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ce:	4945      	ldr	r1, [pc, #276]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x158>)
 80001d0:	4845      	ldr	r0, [pc, #276]	; (80002e8 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80001d2:	f002 fb14 	bl	80027fe <HAL_UART_Transmit>
    		gu16_TIM2_OVC = 0;
 80001d6:	4b45      	ldr	r3, [pc, #276]	; (80002ec <HAL_TIM_IC_CaptureCallback+0x160>)
 80001d8:	2200      	movs	r2, #0
 80001da:	801a      	strh	r2, [r3, #0]

    		gu32_T1 = TIM2->CCR1;
 80001dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001e2:	461a      	mov	r2, r3
 80001e4:	4b42      	ldr	r3, [pc, #264]	; (80002f0 <HAL_TIM_IC_CaptureCallback+0x164>)
 80001e6:	601a      	str	r2, [r3, #0]
    		gu32_T2 = TIM2->CCR1;
 80001e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001ee:	461a      	mov	r2, r3
 80001f0:	4b40      	ldr	r3, [pc, #256]	; (80002f4 <HAL_TIM_IC_CaptureCallback+0x168>)
 80001f2:	601a      	str	r2, [r3, #0]

    			if((gu32_T2 != gu32_T1))
 80001f4:	4b3f      	ldr	r3, [pc, #252]	; (80002f4 <HAL_TIM_IC_CaptureCallback+0x168>)
 80001f6:	681a      	ldr	r2, [r3, #0]
 80001f8:	4b3d      	ldr	r3, [pc, #244]	; (80002f0 <HAL_TIM_IC_CaptureCallback+0x164>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d06c      	beq.n	80002da <HAL_TIM_IC_CaptureCallback+0x14e>
    			{
    				if(gu32_T1 > gu32_T2)
 8000200:	4b3b      	ldr	r3, [pc, #236]	; (80002f0 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	4b3b      	ldr	r3, [pc, #236]	; (80002f4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	429a      	cmp	r2, r3
 800020a:	dd2d      	ble.n	8000268 <HAL_TIM_IC_CaptureCallback+0xdc>
    				{
    					gu32_Ticks = (gu32_T1 + (gu16_TIM2_OVC * 65536)) - gu32_T2;
 800020c:	4b37      	ldr	r3, [pc, #220]	; (80002ec <HAL_TIM_IC_CaptureCallback+0x160>)
 800020e:	881b      	ldrh	r3, [r3, #0]
 8000210:	b29b      	uxth	r3, r3
 8000212:	041a      	lsls	r2, r3, #16
 8000214:	4b36      	ldr	r3, [pc, #216]	; (80002f0 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	441a      	add	r2, r3
 800021a:	4b36      	ldr	r3, [pc, #216]	; (80002f4 <HAL_TIM_IC_CaptureCallback+0x168>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	1ad3      	subs	r3, r2, r3
 8000220:	461a      	mov	r2, r3
 8000222:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000224:	601a      	str	r2, [r3, #0]
    					gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000226:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a34      	ldr	r2, [pc, #208]	; (80002fc <HAL_TIM_IC_CaptureCallback+0x170>)
 800022c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000230:	4a33      	ldr	r2, [pc, #204]	; (8000300 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000232:	6013      	str	r3, [r2, #0]
    					snprintf(trans_str, 96, "Freq %ld Hz | T1 %ld mks | T2 %ld mks\n", gu32_Freq, gu32_T1, gu32_T2);
 8000234:	4b32      	ldr	r3, [pc, #200]	; (8000300 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000236:	6819      	ldr	r1, [r3, #0]
 8000238:	4b2d      	ldr	r3, [pc, #180]	; (80002f0 <HAL_TIM_IC_CaptureCallback+0x164>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a2d      	ldr	r2, [pc, #180]	; (80002f4 <HAL_TIM_IC_CaptureCallback+0x168>)
 800023e:	6812      	ldr	r2, [r2, #0]
 8000240:	9201      	str	r2, [sp, #4]
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	460b      	mov	r3, r1
 8000246:	4a2f      	ldr	r2, [pc, #188]	; (8000304 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000248:	2160      	movs	r1, #96	; 0x60
 800024a:	4826      	ldr	r0, [pc, #152]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x158>)
 800024c:	f002 fc74 	bl	8002b38 <sniprintf>
    					HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000250:	4824      	ldr	r0, [pc, #144]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000252:	f7ff ff7b 	bl	800014c <strlen>
 8000256:	4603      	mov	r3, r0
 8000258:	b29a      	uxth	r2, r3
 800025a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800025e:	4921      	ldr	r1, [pc, #132]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000260:	4821      	ldr	r0, [pc, #132]	; (80002e8 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000262:	f002 facc 	bl	80027fe <HAL_UART_Transmit>
 8000266:	e02c      	b.n	80002c2 <HAL_TIM_IC_CaptureCallback+0x136>
    				}
    				else
    				{
    					gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
 8000268:	4b20      	ldr	r3, [pc, #128]	; (80002ec <HAL_TIM_IC_CaptureCallback+0x160>)
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	b29b      	uxth	r3, r3
 800026e:	041a      	lsls	r2, r3, #16
 8000270:	4b20      	ldr	r3, [pc, #128]	; (80002f4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	441a      	add	r2, r3
 8000276:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	1ad3      	subs	r3, r2, r3
 800027c:	461a      	mov	r2, r3
 800027e:	4b1e      	ldr	r3, [pc, #120]	; (80002f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000280:	601a      	str	r2, [r3, #0]
    					gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a1d      	ldr	r2, [pc, #116]	; (80002fc <HAL_TIM_IC_CaptureCallback+0x170>)
 8000288:	fbb2 f3f3 	udiv	r3, r2, r3
 800028c:	4a1c      	ldr	r2, [pc, #112]	; (8000300 <HAL_TIM_IC_CaptureCallback+0x174>)
 800028e:	6013      	str	r3, [r2, #0]
    					snprintf(trans_str, 96, "Freq %ld Hz | T2 %ld mks | T1 %ld mks\n", gu32_Freq, gu32_T2, gu32_T1);
 8000290:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000292:	6819      	ldr	r1, [r3, #0]
 8000294:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <HAL_TIM_IC_CaptureCallback+0x164>)
 800029a:	6812      	ldr	r2, [r2, #0]
 800029c:	9201      	str	r2, [sp, #4]
 800029e:	9300      	str	r3, [sp, #0]
 80002a0:	460b      	mov	r3, r1
 80002a2:	4a19      	ldr	r2, [pc, #100]	; (8000308 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80002a4:	2160      	movs	r1, #96	; 0x60
 80002a6:	480f      	ldr	r0, [pc, #60]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x158>)
 80002a8:	f002 fc46 	bl	8002b38 <sniprintf>
    					HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x158>)
 80002ae:	f7ff ff4d 	bl	800014c <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ba:	490a      	ldr	r1, [pc, #40]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x158>)
 80002bc:	480a      	ldr	r0, [pc, #40]	; (80002e8 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80002be:	f002 fa9e 	bl	80027fe <HAL_UART_Transmit>
    				}
					F = F + (long int)gu32_Freq;
 80002c2:	4b12      	ldr	r3, [pc, #72]	; (800030c <HAL_TIM_IC_CaptureCallback+0x180>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <HAL_TIM_IC_CaptureCallback+0x174>)
 80002c8:	6812      	ldr	r2, [r2, #0]
 80002ca:	4413      	add	r3, r2
 80002cc:	4a0f      	ldr	r2, [pc, #60]	; (800030c <HAL_TIM_IC_CaptureCallback+0x180>)
 80002ce:	6013      	str	r3, [r2, #0]
					N++;
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <HAL_TIM_IC_CaptureCallback+0x184>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <HAL_TIM_IC_CaptureCallback+0x184>)
 80002d8:	6013      	str	r3, [r2, #0]
		gu32_T1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
		snprintf(trans_str, 96, "T1 %d mks\n", gu32_T1 + (gu16_TIM2_OVC * 65536));
		HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
	}
    }*/
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000017c 	.word	0x2000017c
 80002e8:	20000138 	.word	0x20000138
 80002ec:	20000098 	.word	0x20000098
 80002f0:	2000008c 	.word	0x2000008c
 80002f4:	20000090 	.word	0x20000090
 80002f8:	20000094 	.word	0x20000094
 80002fc:	044aa200 	.word	0x044aa200
 8000300:	2000009c 	.word	0x2000009c
 8000304:	0800346c 	.word	0x0800346c
 8000308:	08003494 	.word	0x08003494
 800030c:	200000a0 	.word	0x200000a0
 8000310:	200000a4 	.word	0x200000a4

08000314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000318:	f000 fb26 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031c:	f000 f818 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000320:	f000 f956 	bl	80005d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000324:	f000 f92a 	bl	800057c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000328:	f000 f8b8 	bl	800049c <MX_TIM2_Init>
  MX_TIM1_Init();
 800032c:	f000 f85c 	bl	80003e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000330:	4805      	ldr	r0, [pc, #20]	; (8000348 <main+0x34>)
 8000332:	f001 faf9 	bl	8001928 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start(&htim2);
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <main+0x38>)
 8000338:	f001 faac 	bl	8001894 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800033c:	2100      	movs	r1, #0
 800033e:	4803      	ldr	r0, [pc, #12]	; (800034c <main+0x38>)
 8000340:	f001 fb9c 	bl	8001a7c <HAL_TIM_IC_Start_IT>
  //HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000344:	e7fe      	b.n	8000344 <main+0x30>
 8000346:	bf00      	nop
 8000348:	200000a8 	.word	0x200000a8
 800034c:	200000f0 	.word	0x200000f0

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b090      	sub	sp, #64	; 0x40
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0318 	add.w	r3, r7, #24
 800035a:	2228      	movs	r2, #40	; 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f002 fbe2 	bl	8002b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000372:	2301      	movs	r3, #1
 8000374:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	2301      	movs	r3, #1
 8000382:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000384:	2302      	movs	r3, #2
 8000386:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800038e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000394:	f107 0318 	add.w	r3, r7, #24
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fdd9 	bl	8000f50 <HAL_RCC_OscConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003a4:	f000 f94c 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a8:	230f      	movs	r3, #15
 80003aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ac:	2302      	movs	r3, #2
 80003ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2102      	movs	r1, #2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 f846 	bl	8001454 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ce:	f000 f937 	bl	8000640 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80003d8:	2000      	movs	r0, #0
 80003da:	f001 f925 	bl	8001628 <HAL_RCC_MCOConfig>
}
 80003de:	bf00      	nop
 80003e0:	3740      	adds	r7, #64	; 0x40
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	f107 0308 	add.w	r3, r7, #8
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fc:	463b      	mov	r3, r7
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000404:	4b23      	ldr	r3, [pc, #140]	; (8000494 <MX_TIM1_Init+0xac>)
 8000406:	4a24      	ldr	r2, [pc, #144]	; (8000498 <MX_TIM1_Init+0xb0>)
 8000408:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800040a:	4b22      	ldr	r3, [pc, #136]	; (8000494 <MX_TIM1_Init+0xac>)
 800040c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000410:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000412:	4b20      	ldr	r3, [pc, #128]	; (8000494 <MX_TIM1_Init+0xac>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000418:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <MX_TIM1_Init+0xac>)
 800041a:	f242 720f 	movw	r2, #9999	; 0x270f
 800041e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <MX_TIM1_Init+0xac>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000426:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_TIM1_Init+0xac>)
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042c:	4b19      	ldr	r3, [pc, #100]	; (8000494 <MX_TIM1_Init+0xac>)
 800042e:	2200      	movs	r2, #0
 8000430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000432:	4818      	ldr	r0, [pc, #96]	; (8000494 <MX_TIM1_Init+0xac>)
 8000434:	f001 f9de 	bl	80017f4 <HAL_TIM_Base_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800043e:	f000 f8ff 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000446:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000448:	f107 0308 	add.w	r3, r7, #8
 800044c:	4619      	mov	r1, r3
 800044e:	4811      	ldr	r0, [pc, #68]	; (8000494 <MX_TIM1_Init+0xac>)
 8000450:	f001 fe0f 	bl	8002072 <HAL_TIM_ConfigClockSource>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800045a:	f000 f8f1 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800045e:	2108      	movs	r1, #8
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <MX_TIM1_Init+0xac>)
 8000462:	f001 fc11 	bl	8001c88 <HAL_TIM_OnePulse_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800046c:	f000 f8e8 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000470:	2310      	movs	r3, #16
 8000472:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000478:	463b      	mov	r3, r7
 800047a:	4619      	mov	r1, r3
 800047c:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_TIM1_Init+0xac>)
 800047e:	f002 f901 	bl	8002684 <HAL_TIMEx_MasterConfigSynchronization>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000488:	f000 f8da 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800048c:	bf00      	nop
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	200000a8 	.word	0x200000a8
 8000498:	40012c00 	.word	0x40012c00

0800049c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08a      	sub	sp, #40	; 0x28
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a2:	f107 0318 	add.w	r3, r7, #24
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004ba:	463b      	mov	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004c6:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <MX_TIM2_Init+0xdc>)
 80004c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <MX_TIM2_Init+0xdc>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d4:	4b28      	ldr	r3, [pc, #160]	; (8000578 <MX_TIM2_Init+0xdc>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80004da:	4b27      	ldr	r3, [pc, #156]	; (8000578 <MX_TIM2_Init+0xdc>)
 80004dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e2:	4b25      	ldr	r3, [pc, #148]	; (8000578 <MX_TIM2_Init+0xdc>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <MX_TIM2_Init+0xdc>)
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004ee:	4822      	ldr	r0, [pc, #136]	; (8000578 <MX_TIM2_Init+0xdc>)
 80004f0:	f001 f980 	bl	80017f4 <HAL_TIM_Base_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80004fa:	f000 f8a1 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000502:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000504:	f107 0318 	add.w	r3, r7, #24
 8000508:	4619      	mov	r1, r3
 800050a:	481b      	ldr	r0, [pc, #108]	; (8000578 <MX_TIM2_Init+0xdc>)
 800050c:	f001 fdb1 	bl	8002072 <HAL_TIM_ConfigClockSource>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000516:	f000 f893 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800051a:	4817      	ldr	r0, [pc, #92]	; (8000578 <MX_TIM2_Init+0xdc>)
 800051c:	f001 fa56 	bl	80019cc <HAL_TIM_IC_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000526:	f000 f88b 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	480f      	ldr	r0, [pc, #60]	; (8000578 <MX_TIM2_Init+0xdc>)
 800053a:	f002 f8a3 	bl	8002684 <HAL_TIMEx_MasterConfigSynchronization>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000544:	f000 f87c 	bl	8000640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000548:	2300      	movs	r3, #0
 800054a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800054c:	2301      	movs	r3, #1
 800054e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	4619      	mov	r1, r3
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <MX_TIM2_Init+0xdc>)
 8000560:	f001 fcf3 	bl	8001f4a <HAL_TIM_IC_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800056a:	f000 f869 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	3728      	adds	r7, #40	; 0x28
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200000f0 	.word	0x200000f0

0800057c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000582:	4a12      	ldr	r2, [pc, #72]	; (80005cc <MX_USART1_UART_Init+0x50>)
 8000584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800058c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005a2:	220c      	movs	r2, #12
 80005a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005b4:	f002 f8d6 	bl	8002764 <HAL_UART_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005be:	f000 f83f 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000138 	.word	0x20000138
 80005cc:	40013800 	.word	0x40013800

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_GPIO_Init+0x68>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <MX_GPIO_Init+0x68>)
 80005ea:	f043 0320 	orr.w	r3, r3, #32
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_GPIO_Init+0x68>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0320 	and.w	r3, r3, #32
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_GPIO_Init+0x68>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <MX_GPIO_Init+0x68>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <MX_GPIO_Init+0x68>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000618:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061a:	2302      	movs	r3, #2
 800061c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4619      	mov	r1, r3
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_GPIO_Init+0x6c>)
 800062a:	f000 fb0d 	bl	8000c48 <HAL_GPIO_Init>

}
 800062e:	bf00      	nop
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_MspInit+0x5c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <HAL_MspInit+0x5c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_MspInit+0x5c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x5c>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_MspInit+0x5c>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_MspInit+0x5c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_MspInit+0x60>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_MspInit+0x60>)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010000 	.word	0x40010000

080006b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0318 	add.w	r3, r7, #24
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a2a      	ldr	r2, [pc, #168]	; (8000774 <HAL_TIM_Base_MspInit+0xc4>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d11c      	bne.n	800070a <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <HAL_TIM_Base_MspInit+0xc8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a28      	ldr	r2, [pc, #160]	; (8000778 <HAL_TIM_Base_MspInit+0xc8>)
 80006d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <HAL_TIM_Base_MspInit+0xc8>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2019      	movs	r0, #25
 80006ee:	f000 fa74 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006f2:	2019      	movs	r0, #25
 80006f4:	f000 fa8d 	bl	8000c12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	201b      	movs	r0, #27
 80006fe:	f000 fa6c 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000702:	201b      	movs	r0, #27
 8000704:	f000 fa85 	bl	8000c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000708:	e030      	b.n	800076c <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM2)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000712:	d12b      	bne.n	800076c <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <HAL_TIM_Base_MspInit+0xc8>)
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	4a17      	ldr	r2, [pc, #92]	; (8000778 <HAL_TIM_Base_MspInit+0xc8>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	61d3      	str	r3, [r2, #28]
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <HAL_TIM_Base_MspInit+0xc8>)
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_TIM_Base_MspInit+0xc8>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a11      	ldr	r2, [pc, #68]	; (8000778 <HAL_TIM_Base_MspInit+0xc8>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_TIM_Base_MspInit+0xc8>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000744:	2301      	movs	r3, #1
 8000746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	4619      	mov	r1, r3
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <HAL_TIM_Base_MspInit+0xcc>)
 8000758:	f000 fa76 	bl	8000c48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	201c      	movs	r0, #28
 8000762:	f000 fa3a 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000766:	201c      	movs	r0, #28
 8000768:	f000 fa53 	bl	8000c12 <HAL_NVIC_EnableIRQ>
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40012c00 	.word	0x40012c00
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800

08000780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <HAL_UART_MspInit+0x8c>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d131      	bne.n	8000804 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_UART_MspInit+0x90>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <HAL_UART_MspInit+0x90>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_UART_MspInit+0x90>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <HAL_UART_MspInit+0x90>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <HAL_UART_MspInit+0x90>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_UART_MspInit+0x90>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	480b      	ldr	r0, [pc, #44]	; (8000814 <HAL_UART_MspInit+0x94>)
 80007e6:	f000 fa2f 	bl	8000c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <HAL_UART_MspInit+0x94>)
 8000800:	f000 fa22 	bl	8000c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40013800 	.word	0x40013800
 8000810:	40021000 	.word	0x40021000
 8000814:	40010800 	.word	0x40010800

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085e:	f000 f8c9 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <TIM1_UP_IRQHandler+0x10>)
 800086e:	f001 fa64 	bl	8001d3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000a8 	.word	0x200000a8

0800087c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <TIM1_CC_IRQHandler+0x10>)
 8000882:	f001 fa5a 	bl	8001d3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000a8 	.word	0x200000a8

08000890 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <TIM2_IRQHandler+0x10>)
 8000896:	f001 fa50 	bl	8001d3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000f0 	.word	0x200000f0

080008a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <_sbrk+0x5c>)
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <_sbrk+0x60>)
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <_sbrk+0x64>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <_sbrk+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d207      	bcs.n	80008e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d4:	f002 f8fe 	bl	8002ad4 <__errno>
 80008d8:	4603      	mov	r3, r0
 80008da:	220c      	movs	r2, #12
 80008dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	e009      	b.n	80008f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <_sbrk+0x64>)
 80008f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20005000 	.word	0x20005000
 8000904:	00000400 	.word	0x00000400
 8000908:	200001dc 	.word	0x200001dc
 800090c:	200001f8 	.word	0x200001f8

08000910 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	; (8000954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	; (8000960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000942:	f7ff ffe5 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f002 f8cb 	bl	8002ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094a:	f7ff fce3 	bl	8000314 <main>
  bx lr
 800094e:	4770      	bx	lr
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000958:	08003520 	.word	0x08003520
  ldr r2, =_sbss
 800095c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000960:	200001f4 	.word	0x200001f4

08000964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_2_IRQHandler>
	...

08000968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_Init+0x28>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_Init+0x28>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f923 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	200f      	movs	r0, #15
 8000980:	f000 f808 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff fe62 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40022000 	.word	0x40022000

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x54>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0x58>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f93b 	bl	8000c2e <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f903 	bl	8000bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <HAL_InitTick+0x5c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_IncTick+0x1c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x20>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <HAL_IncTick+0x20>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	20000008 	.word	0x20000008
 8000a14:	200001e0 	.word	0x200001e0

08000a18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <HAL_GetTick+0x10>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	200001e0 	.word	0x200001e0

08000a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db0b      	blt.n	8000aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	f003 021f 	and.w	r2, r3, #31
 8000aa8:	4906      	ldr	r1, [pc, #24]	; (8000ac4 <__NVIC_EnableIRQ+0x34>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	e000e100 	.word	0xe000e100

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	db0a      	blt.n	8000af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <__NVIC_SetPriority+0x4c>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	440b      	add	r3, r1
 8000aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af0:	e00a      	b.n	8000b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4908      	ldr	r1, [pc, #32]	; (8000b18 <__NVIC_SetPriority+0x50>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	3b04      	subs	r3, #4
 8000b00:	0112      	lsls	r2, r2, #4
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	761a      	strb	r2, [r3, #24]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	; 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	f1c3 0307 	rsb	r3, r3, #7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	bf28      	it	cs
 8000b3a:	2304      	movcs	r3, #4
 8000b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3304      	adds	r3, #4
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d902      	bls.n	8000b4c <NVIC_EncodePriority+0x30>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3b03      	subs	r3, #3
 8000b4a:	e000      	b.n	8000b4e <NVIC_EncodePriority+0x32>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43d9      	mvns	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	4313      	orrs	r3, r2
         );
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3724      	adds	r7, #36	; 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b90:	d301      	bcc.n	8000b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00f      	b.n	8000bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <SysTick_Config+0x40>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f7ff ff90 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SysTick_Config+0x40>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <SysTick_Config+0x40>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff2d 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff42 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff90 	bl	8000b1c <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5f 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff35 	bl	8000a90 <__NVIC_EnableIRQ>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffa2 	bl	8000b80 <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b08b      	sub	sp, #44	; 0x2c
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5a:	e169      	b.n	8000f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	f040 8158 	bne.w	8000f2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	4a9a      	ldr	r2, [pc, #616]	; (8000ee8 <HAL_GPIO_Init+0x2a0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d05e      	beq.n	8000d42 <HAL_GPIO_Init+0xfa>
 8000c84:	4a98      	ldr	r2, [pc, #608]	; (8000ee8 <HAL_GPIO_Init+0x2a0>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d875      	bhi.n	8000d76 <HAL_GPIO_Init+0x12e>
 8000c8a:	4a98      	ldr	r2, [pc, #608]	; (8000eec <HAL_GPIO_Init+0x2a4>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d058      	beq.n	8000d42 <HAL_GPIO_Init+0xfa>
 8000c90:	4a96      	ldr	r2, [pc, #600]	; (8000eec <HAL_GPIO_Init+0x2a4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d86f      	bhi.n	8000d76 <HAL_GPIO_Init+0x12e>
 8000c96:	4a96      	ldr	r2, [pc, #600]	; (8000ef0 <HAL_GPIO_Init+0x2a8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d052      	beq.n	8000d42 <HAL_GPIO_Init+0xfa>
 8000c9c:	4a94      	ldr	r2, [pc, #592]	; (8000ef0 <HAL_GPIO_Init+0x2a8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d869      	bhi.n	8000d76 <HAL_GPIO_Init+0x12e>
 8000ca2:	4a94      	ldr	r2, [pc, #592]	; (8000ef4 <HAL_GPIO_Init+0x2ac>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d04c      	beq.n	8000d42 <HAL_GPIO_Init+0xfa>
 8000ca8:	4a92      	ldr	r2, [pc, #584]	; (8000ef4 <HAL_GPIO_Init+0x2ac>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d863      	bhi.n	8000d76 <HAL_GPIO_Init+0x12e>
 8000cae:	4a92      	ldr	r2, [pc, #584]	; (8000ef8 <HAL_GPIO_Init+0x2b0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d046      	beq.n	8000d42 <HAL_GPIO_Init+0xfa>
 8000cb4:	4a90      	ldr	r2, [pc, #576]	; (8000ef8 <HAL_GPIO_Init+0x2b0>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d85d      	bhi.n	8000d76 <HAL_GPIO_Init+0x12e>
 8000cba:	2b12      	cmp	r3, #18
 8000cbc:	d82a      	bhi.n	8000d14 <HAL_GPIO_Init+0xcc>
 8000cbe:	2b12      	cmp	r3, #18
 8000cc0:	d859      	bhi.n	8000d76 <HAL_GPIO_Init+0x12e>
 8000cc2:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <HAL_GPIO_Init+0x80>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000d43 	.word	0x08000d43
 8000ccc:	08000d1d 	.word	0x08000d1d
 8000cd0:	08000d2f 	.word	0x08000d2f
 8000cd4:	08000d71 	.word	0x08000d71
 8000cd8:	08000d77 	.word	0x08000d77
 8000cdc:	08000d77 	.word	0x08000d77
 8000ce0:	08000d77 	.word	0x08000d77
 8000ce4:	08000d77 	.word	0x08000d77
 8000ce8:	08000d77 	.word	0x08000d77
 8000cec:	08000d77 	.word	0x08000d77
 8000cf0:	08000d77 	.word	0x08000d77
 8000cf4:	08000d77 	.word	0x08000d77
 8000cf8:	08000d77 	.word	0x08000d77
 8000cfc:	08000d77 	.word	0x08000d77
 8000d00:	08000d77 	.word	0x08000d77
 8000d04:	08000d77 	.word	0x08000d77
 8000d08:	08000d77 	.word	0x08000d77
 8000d0c:	08000d25 	.word	0x08000d25
 8000d10:	08000d39 	.word	0x08000d39
 8000d14:	4a79      	ldr	r2, [pc, #484]	; (8000efc <HAL_GPIO_Init+0x2b4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d013      	beq.n	8000d42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d1a:	e02c      	b.n	8000d76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	623b      	str	r3, [r7, #32]
          break;
 8000d22:	e029      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	623b      	str	r3, [r7, #32]
          break;
 8000d2c:	e024      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	3308      	adds	r3, #8
 8000d34:	623b      	str	r3, [r7, #32]
          break;
 8000d36:	e01f      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	330c      	adds	r3, #12
 8000d3e:	623b      	str	r3, [r7, #32]
          break;
 8000d40:	e01a      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d102      	bne.n	8000d50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	623b      	str	r3, [r7, #32]
          break;
 8000d4e:	e013      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d105      	bne.n	8000d64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	611a      	str	r2, [r3, #16]
          break;
 8000d62:	e009      	b.n	8000d78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d64:	2308      	movs	r3, #8
 8000d66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	615a      	str	r2, [r3, #20]
          break;
 8000d6e:	e003      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
          break;
 8000d74:	e000      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          break;
 8000d76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	2bff      	cmp	r3, #255	; 0xff
 8000d7c:	d801      	bhi.n	8000d82 <HAL_GPIO_Init+0x13a>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	e001      	b.n	8000d86 <HAL_GPIO_Init+0x13e>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3304      	adds	r3, #4
 8000d86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2bff      	cmp	r3, #255	; 0xff
 8000d8c:	d802      	bhi.n	8000d94 <HAL_GPIO_Init+0x14c>
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	e002      	b.n	8000d9a <HAL_GPIO_Init+0x152>
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	3b08      	subs	r3, #8
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	210f      	movs	r1, #15
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	401a      	ands	r2, r3
 8000dac:	6a39      	ldr	r1, [r7, #32]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	431a      	orrs	r2, r3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc8:	4b4d      	ldr	r3, [pc, #308]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a4c      	ldr	r2, [pc, #304]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b4a      	ldr	r3, [pc, #296]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000de0:	4a48      	ldr	r2, [pc, #288]	; (8000f04 <HAL_GPIO_Init+0x2bc>)
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	220f      	movs	r2, #15
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a40      	ldr	r2, [pc, #256]	; (8000f08 <HAL_GPIO_Init+0x2c0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d013      	beq.n	8000e34 <HAL_GPIO_Init+0x1ec>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a3f      	ldr	r2, [pc, #252]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d00d      	beq.n	8000e30 <HAL_GPIO_Init+0x1e8>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a3e      	ldr	r2, [pc, #248]	; (8000f10 <HAL_GPIO_Init+0x2c8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d007      	beq.n	8000e2c <HAL_GPIO_Init+0x1e4>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a3d      	ldr	r2, [pc, #244]	; (8000f14 <HAL_GPIO_Init+0x2cc>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d101      	bne.n	8000e28 <HAL_GPIO_Init+0x1e0>
 8000e24:	2303      	movs	r3, #3
 8000e26:	e006      	b.n	8000e36 <HAL_GPIO_Init+0x1ee>
 8000e28:	2304      	movs	r3, #4
 8000e2a:	e004      	b.n	8000e36 <HAL_GPIO_Init+0x1ee>
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	e002      	b.n	8000e36 <HAL_GPIO_Init+0x1ee>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <HAL_GPIO_Init+0x1ee>
 8000e34:	2300      	movs	r3, #0
 8000e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e38:	f002 0203 	and.w	r2, r2, #3
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	4093      	lsls	r3, r2
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e46:	492f      	ldr	r1, [pc, #188]	; (8000f04 <HAL_GPIO_Init+0x2bc>)
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d006      	beq.n	8000e6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	492c      	ldr	r1, [pc, #176]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	4928      	ldr	r1, [pc, #160]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	4922      	ldr	r1, [pc, #136]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	604b      	str	r3, [r1, #4]
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	491e      	ldr	r1, [pc, #120]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	4918      	ldr	r1, [pc, #96]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	608b      	str	r3, [r1, #8]
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4914      	ldr	r1, [pc, #80]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d021      	beq.n	8000f1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	490e      	ldr	r1, [pc, #56]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	60cb      	str	r3, [r1, #12]
 8000ee4:	e021      	b.n	8000f2a <HAL_GPIO_Init+0x2e2>
 8000ee6:	bf00      	nop
 8000ee8:	10320000 	.word	0x10320000
 8000eec:	10310000 	.word	0x10310000
 8000ef0:	10220000 	.word	0x10220000
 8000ef4:	10210000 	.word	0x10210000
 8000ef8:	10120000 	.word	0x10120000
 8000efc:	10110000 	.word	0x10110000
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40010000 	.word	0x40010000
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	40010c00 	.word	0x40010c00
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40011400 	.word	0x40011400
 8000f18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	4909      	ldr	r1, [pc, #36]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f47f ae8e 	bne.w	8000c5c <HAL_GPIO_Init+0x14>
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	372c      	adds	r7, #44	; 0x2c
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40010400 	.word	0x40010400

08000f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e272      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 8087 	beq.w	800107e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f70:	4b92      	ldr	r3, [pc, #584]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 030c 	and.w	r3, r3, #12
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d00c      	beq.n	8000f96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f7c:	4b8f      	ldr	r3, [pc, #572]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d112      	bne.n	8000fae <HAL_RCC_OscConfig+0x5e>
 8000f88:	4b8c      	ldr	r3, [pc, #560]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f94:	d10b      	bne.n	8000fae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f96:	4b89      	ldr	r3, [pc, #548]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d06c      	beq.n	800107c <HAL_RCC_OscConfig+0x12c>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d168      	bne.n	800107c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e24c      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb6:	d106      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x76>
 8000fb8:	4b80      	ldr	r3, [pc, #512]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a7f      	ldr	r2, [pc, #508]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	e02e      	b.n	8001024 <HAL_RCC_OscConfig+0xd4>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x98>
 8000fce:	4b7b      	ldr	r3, [pc, #492]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a7a      	ldr	r2, [pc, #488]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b78      	ldr	r3, [pc, #480]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a77      	ldr	r2, [pc, #476]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e01d      	b.n	8001024 <HAL_RCC_OscConfig+0xd4>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0xbc>
 8000ff2:	4b72      	ldr	r3, [pc, #456]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a71      	ldr	r2, [pc, #452]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b6f      	ldr	r3, [pc, #444]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a6e      	ldr	r2, [pc, #440]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e00b      	b.n	8001024 <HAL_RCC_OscConfig+0xd4>
 800100c:	4b6b      	ldr	r3, [pc, #428]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a6a      	ldr	r2, [pc, #424]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b68      	ldr	r3, [pc, #416]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a67      	ldr	r2, [pc, #412]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 800101e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001022:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fcf4 	bl	8000a18 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fcf0 	bl	8000a18 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e200      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0xe4>
 8001052:	e014      	b.n	800107e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fce0 	bl	8000a18 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fcdc 	bl	8000a18 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e1ec      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x10c>
 800107a:	e000      	b.n	800107e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d063      	beq.n	8001152 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800108a:	4b4c      	ldr	r3, [pc, #304]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00b      	beq.n	80010ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001096:	4b49      	ldr	r3, [pc, #292]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d11c      	bne.n	80010dc <HAL_RCC_OscConfig+0x18c>
 80010a2:	4b46      	ldr	r3, [pc, #280]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d116      	bne.n	80010dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ae:	4b43      	ldr	r3, [pc, #268]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <HAL_RCC_OscConfig+0x176>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d001      	beq.n	80010c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e1c0      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c6:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4939      	ldr	r1, [pc, #228]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010da:	e03a      	b.n	8001152 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d020      	beq.n	8001126 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <HAL_RCC_OscConfig+0x270>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fc95 	bl	8000a18 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f2:	f7ff fc91 	bl	8000a18 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e1a1      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4927      	ldr	r1, [pc, #156]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001120:	4313      	orrs	r3, r2
 8001122:	600b      	str	r3, [r1, #0]
 8001124:	e015      	b.n	8001152 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <HAL_RCC_OscConfig+0x270>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fc74 	bl	8000a18 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001134:	f7ff fc70 	bl	8000a18 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e180      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d03a      	beq.n	80011d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d019      	beq.n	800119a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_RCC_OscConfig+0x274>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116c:	f7ff fc54 	bl	8000a18 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001174:	f7ff fc50 	bl	8000a18 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e160      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001192:	2001      	movs	r0, #1
 8001194:	f000 fb10 	bl	80017b8 <RCC_Delay>
 8001198:	e01c      	b.n	80011d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_RCC_OscConfig+0x274>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a0:	f7ff fc3a 	bl	8000a18 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a6:	e00f      	b.n	80011c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a8:	f7ff fc36 	bl	8000a18 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d908      	bls.n	80011c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e146      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
 80011c0:	42420000 	.word	0x42420000
 80011c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c8:	4b92      	ldr	r3, [pc, #584]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1e9      	bne.n	80011a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80a6 	beq.w	800132e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e6:	4b8b      	ldr	r3, [pc, #556]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10d      	bne.n	800120e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4b88      	ldr	r3, [pc, #544]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4a87      	ldr	r2, [pc, #540]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	61d3      	str	r3, [r2, #28]
 80011fe:	4b85      	ldr	r3, [pc, #532]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800120a:	2301      	movs	r3, #1
 800120c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120e:	4b82      	ldr	r3, [pc, #520]	; (8001418 <HAL_RCC_OscConfig+0x4c8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001216:	2b00      	cmp	r3, #0
 8001218:	d118      	bne.n	800124c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800121a:	4b7f      	ldr	r3, [pc, #508]	; (8001418 <HAL_RCC_OscConfig+0x4c8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a7e      	ldr	r2, [pc, #504]	; (8001418 <HAL_RCC_OscConfig+0x4c8>)
 8001220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001226:	f7ff fbf7 	bl	8000a18 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122e:	f7ff fbf3 	bl	8000a18 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b64      	cmp	r3, #100	; 0x64
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e103      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001240:	4b75      	ldr	r3, [pc, #468]	; (8001418 <HAL_RCC_OscConfig+0x4c8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d106      	bne.n	8001262 <HAL_RCC_OscConfig+0x312>
 8001254:	4b6f      	ldr	r3, [pc, #444]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	4a6e      	ldr	r2, [pc, #440]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6213      	str	r3, [r2, #32]
 8001260:	e02d      	b.n	80012be <HAL_RCC_OscConfig+0x36e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x334>
 800126a:	4b6a      	ldr	r3, [pc, #424]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4a69      	ldr	r2, [pc, #420]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6213      	str	r3, [r2, #32]
 8001276:	4b67      	ldr	r3, [pc, #412]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4a66      	ldr	r2, [pc, #408]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	6213      	str	r3, [r2, #32]
 8001282:	e01c      	b.n	80012be <HAL_RCC_OscConfig+0x36e>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b05      	cmp	r3, #5
 800128a:	d10c      	bne.n	80012a6 <HAL_RCC_OscConfig+0x356>
 800128c:	4b61      	ldr	r3, [pc, #388]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4a60      	ldr	r2, [pc, #384]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6213      	str	r3, [r2, #32]
 8001298:	4b5e      	ldr	r3, [pc, #376]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	4a5d      	ldr	r2, [pc, #372]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6213      	str	r3, [r2, #32]
 80012a4:	e00b      	b.n	80012be <HAL_RCC_OscConfig+0x36e>
 80012a6:	4b5b      	ldr	r3, [pc, #364]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4a5a      	ldr	r2, [pc, #360]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6213      	str	r3, [r2, #32]
 80012b2:	4b58      	ldr	r3, [pc, #352]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4a57      	ldr	r2, [pc, #348]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	f023 0304 	bic.w	r3, r3, #4
 80012bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d015      	beq.n	80012f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fba7 	bl	8000a18 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012cc:	e00a      	b.n	80012e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f7ff fba3 	bl	8000a18 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012dc:	4293      	cmp	r3, r2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e0b1      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e4:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0ee      	beq.n	80012ce <HAL_RCC_OscConfig+0x37e>
 80012f0:	e014      	b.n	800131c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fb91 	bl	8000a18 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f8:	e00a      	b.n	8001310 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012fa:	f7ff fb8d 	bl	8000a18 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	f241 3288 	movw	r2, #5000	; 0x1388
 8001308:	4293      	cmp	r3, r2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e09b      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001310:	4b40      	ldr	r3, [pc, #256]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1ee      	bne.n	80012fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d105      	bne.n	800132e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001322:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a3b      	ldr	r2, [pc, #236]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8087 	beq.w	8001446 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	2b08      	cmp	r3, #8
 8001342:	d061      	beq.n	8001408 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d146      	bne.n	80013da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134c:	4b33      	ldr	r3, [pc, #204]	; (800141c <HAL_RCC_OscConfig+0x4cc>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001352:	f7ff fb61 	bl	8000a18 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135a:	f7ff fb5d 	bl	8000a18 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e06d      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f0      	bne.n	800135a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001380:	d108      	bne.n	8001394 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	4921      	ldr	r1, [pc, #132]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a19      	ldr	r1, [r3, #32]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	430b      	orrs	r3, r1
 80013a6:	491b      	ldr	r1, [pc, #108]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_RCC_OscConfig+0x4cc>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fb31 	bl	8000a18 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ba:	f7ff fb2d 	bl	8000a18 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e03d      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x46a>
 80013d8:	e035      	b.n	8001446 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_RCC_OscConfig+0x4cc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fb1a 	bl	8000a18 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff fb16 	bl	8000a18 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e026      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x498>
 8001406:	e01e      	b.n	8001446 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d107      	bne.n	8001420 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e019      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
 8001414:	40021000 	.word	0x40021000
 8001418:	40007000 	.word	0x40007000
 800141c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_RCC_OscConfig+0x500>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	429a      	cmp	r2, r3
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	429a      	cmp	r2, r3
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021000 	.word	0x40021000

08001454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0d0      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d910      	bls.n	8001498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b67      	ldr	r3, [pc, #412]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 0207 	bic.w	r2, r3, #7
 800147e:	4965      	ldr	r1, [pc, #404]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001486:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d001      	beq.n	8001498 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0b8      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b0:	4b59      	ldr	r3, [pc, #356]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	4a58      	ldr	r2, [pc, #352]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c8:	4b53      	ldr	r3, [pc, #332]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4a52      	ldr	r2, [pc, #328]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d4:	4b50      	ldr	r3, [pc, #320]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	494d      	ldr	r1, [pc, #308]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d040      	beq.n	8001574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b47      	ldr	r3, [pc, #284]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d115      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e07f      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001512:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e073      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e06b      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4936      	ldr	r1, [pc, #216]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001544:	f7ff fa68 	bl	8000a18 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff fa64 	bl	8000a18 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e053      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001574:	4b27      	ldr	r3, [pc, #156]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d210      	bcs.n	80015a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 0207 	bic.w	r2, r3, #7
 800158a:	4922      	ldr	r1, [pc, #136]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e032      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4916      	ldr	r1, [pc, #88]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	490e      	ldr	r1, [pc, #56]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015e2:	f000 f859 	bl	8001698 <HAL_RCC_GetSysClockFreq>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	490a      	ldr	r1, [pc, #40]	; (800161c <HAL_RCC_ClockConfig+0x1c8>)
 80015f4:	5ccb      	ldrb	r3, [r1, r3]
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <HAL_RCC_ClockConfig+0x1cc>)
 80015fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_ClockConfig+0x1d0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f9c6 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000
 8001618:	40021000 	.word	0x40021000
 800161c:	080034cc 	.word	0x080034cc
 8001620:	20000000 	.word	0x20000000
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800164e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001652:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_RCC_MCOConfig+0x68>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <HAL_RCC_MCOConfig+0x68>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_RCC_MCOConfig+0x68>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4619      	mov	r1, r3
 8001672:	4808      	ldr	r0, [pc, #32]	; (8001694 <HAL_RCC_MCOConfig+0x6c>)
 8001674:	f7ff fae8 	bl	8000c48 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_RCC_MCOConfig+0x68>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001680:	4903      	ldr	r1, [pc, #12]	; (8001690 <HAL_RCC_MCOConfig+0x68>)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	; 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000
 8001694:	40010800 	.word	0x40010800

08001698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001698:	b490      	push	{r4, r7}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_RCC_GetSysClockFreq+0xac>)
 80016a0:	1d3c      	adds	r4, r7, #4
 80016a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016a8:	f240 2301 	movw	r3, #513	; 0x201
 80016ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d002      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0x40>
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d003      	beq.n	80016de <HAL_RCC_GetSysClockFreq+0x46>
 80016d6:	e02b      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HAL_RCC_GetSysClockFreq+0xb4>)
 80016da:	623b      	str	r3, [r7, #32]
      break;
 80016dc:	e02b      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	0c9b      	lsrs	r3, r3, #18
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	3328      	adds	r3, #40	; 0x28
 80016e8:	443b      	add	r3, r7
 80016ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d012      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	0c5b      	lsrs	r3, r3, #17
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	3328      	adds	r3, #40	; 0x28
 8001706:	443b      	add	r3, r7
 8001708:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800170c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001712:	fb03 f202 	mul.w	r2, r3, r2
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	fbb2 f3f3 	udiv	r3, r2, r3
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
 800171e:	e004      	b.n	800172a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	623b      	str	r3, [r7, #32]
      break;
 800172e:	e002      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001732:	623b      	str	r3, [r7, #32]
      break;
 8001734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001736:	6a3b      	ldr	r3, [r7, #32]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bc90      	pop	{r4, r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	080034bc 	.word	0x080034bc
 8001748:	40021000 	.word	0x40021000
 800174c:	007a1200 	.word	0x007a1200
 8001750:	003d0900 	.word	0x003d0900

08001754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <HAL_RCC_GetHCLKFreq+0x10>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000000 	.word	0x20000000

08001768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800176c:	f7ff fff2 	bl	8001754 <HAL_RCC_GetHCLKFreq>
 8001770:	4602      	mov	r2, r0
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	4903      	ldr	r1, [pc, #12]	; (800178c <HAL_RCC_GetPCLK1Freq+0x24>)
 800177e:	5ccb      	ldrb	r3, [r1, r3]
 8001780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001784:	4618      	mov	r0, r3
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000
 800178c:	080034dc 	.word	0x080034dc

08001790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001794:	f7ff ffde 	bl	8001754 <HAL_RCC_GetHCLKFreq>
 8001798:	4602      	mov	r2, r0
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	0adb      	lsrs	r3, r3, #11
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	4903      	ldr	r1, [pc, #12]	; (80017b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017a6:	5ccb      	ldrb	r3, [r1, r3]
 80017a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000
 80017b4:	080034dc 	.word	0x080034dc

080017b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <RCC_Delay+0x34>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <RCC_Delay+0x38>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	0a5b      	lsrs	r3, r3, #9
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017d4:	bf00      	nop
  }
  while (Delay --);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1e5a      	subs	r2, r3, #1
 80017da:	60fa      	str	r2, [r7, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f9      	bne.n	80017d4 <RCC_Delay+0x1c>
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	20000000 	.word	0x20000000
 80017f0:	10624dd3 	.word	0x10624dd3

080017f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e041      	b.n	800188a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7fe ff48 	bl	80006b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3304      	adds	r3, #4
 8001830:	4619      	mov	r1, r3
 8001832:	4610      	mov	r0, r2
 8001834:	f000 fcfc 	bl	8002230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d001      	beq.n	80018ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e032      	b.n	8001912 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a18      	ldr	r2, [pc, #96]	; (800191c <HAL_TIM_Base_Start+0x88>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00e      	beq.n	80018dc <HAL_TIM_Base_Start+0x48>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c6:	d009      	beq.n	80018dc <HAL_TIM_Base_Start+0x48>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <HAL_TIM_Base_Start+0x8c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d004      	beq.n	80018dc <HAL_TIM_Base_Start+0x48>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a13      	ldr	r2, [pc, #76]	; (8001924 <HAL_TIM_Base_Start+0x90>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d111      	bne.n	8001900 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d010      	beq.n	8001910 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0201 	orr.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018fe:	e007      	b.n	8001910 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	40012c00 	.word	0x40012c00
 8001920:	40000400 	.word	0x40000400
 8001924:	40000800 	.word	0x40000800

08001928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d001      	beq.n	8001940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e03a      	b.n	80019b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2202      	movs	r2, #2
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <HAL_TIM_Base_Start_IT+0x98>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00e      	beq.n	8001980 <HAL_TIM_Base_Start_IT+0x58>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196a:	d009      	beq.n	8001980 <HAL_TIM_Base_Start_IT+0x58>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d004      	beq.n	8001980 <HAL_TIM_Base_Start_IT+0x58>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d111      	bne.n	80019a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b06      	cmp	r3, #6
 8001990:	d010      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a2:	e007      	b.n	80019b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40000800 	.word	0x40000800

080019cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e041      	b.n	8001a62 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f839 	bl	8001a6a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3304      	adds	r3, #4
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f000 fc10 	bl	8002230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d104      	bne.n	8001a96 <HAL_TIM_IC_Start_IT+0x1a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	e013      	b.n	8001abe <HAL_TIM_IC_Start_IT+0x42>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d104      	bne.n	8001aa6 <HAL_TIM_IC_Start_IT+0x2a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	e00b      	b.n	8001abe <HAL_TIM_IC_Start_IT+0x42>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d104      	bne.n	8001ab6 <HAL_TIM_IC_Start_IT+0x3a>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	e003      	b.n	8001abe <HAL_TIM_IC_Start_IT+0x42>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d104      	bne.n	8001ad0 <HAL_TIM_IC_Start_IT+0x54>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	e013      	b.n	8001af8 <HAL_TIM_IC_Start_IT+0x7c>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d104      	bne.n	8001ae0 <HAL_TIM_IC_Start_IT+0x64>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	e00b      	b.n	8001af8 <HAL_TIM_IC_Start_IT+0x7c>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d104      	bne.n	8001af0 <HAL_TIM_IC_Start_IT+0x74>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	e003      	b.n	8001af8 <HAL_TIM_IC_Start_IT+0x7c>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d102      	bne.n	8001b06 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b00:	7bbb      	ldrb	r3, [r7, #14]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d001      	beq.n	8001b0a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0b3      	b.n	8001c72 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d104      	bne.n	8001b1a <HAL_TIM_IC_Start_IT+0x9e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b18:	e013      	b.n	8001b42 <HAL_TIM_IC_Start_IT+0xc6>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d104      	bne.n	8001b2a <HAL_TIM_IC_Start_IT+0xae>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b28:	e00b      	b.n	8001b42 <HAL_TIM_IC_Start_IT+0xc6>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d104      	bne.n	8001b3a <HAL_TIM_IC_Start_IT+0xbe>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b38:	e003      	b.n	8001b42 <HAL_TIM_IC_Start_IT+0xc6>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d104      	bne.n	8001b52 <HAL_TIM_IC_Start_IT+0xd6>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b50:	e013      	b.n	8001b7a <HAL_TIM_IC_Start_IT+0xfe>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d104      	bne.n	8001b62 <HAL_TIM_IC_Start_IT+0xe6>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b60:	e00b      	b.n	8001b7a <HAL_TIM_IC_Start_IT+0xfe>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d104      	bne.n	8001b72 <HAL_TIM_IC_Start_IT+0xf6>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b70:	e003      	b.n	8001b7a <HAL_TIM_IC_Start_IT+0xfe>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	d841      	bhi.n	8001c04 <HAL_TIM_IC_Start_IT+0x188>
 8001b80:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <HAL_TIM_IC_Start_IT+0x10c>)
 8001b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b86:	bf00      	nop
 8001b88:	08001bbd 	.word	0x08001bbd
 8001b8c:	08001c05 	.word	0x08001c05
 8001b90:	08001c05 	.word	0x08001c05
 8001b94:	08001c05 	.word	0x08001c05
 8001b98:	08001bcf 	.word	0x08001bcf
 8001b9c:	08001c05 	.word	0x08001c05
 8001ba0:	08001c05 	.word	0x08001c05
 8001ba4:	08001c05 	.word	0x08001c05
 8001ba8:	08001be1 	.word	0x08001be1
 8001bac:	08001c05 	.word	0x08001c05
 8001bb0:	08001c05 	.word	0x08001c05
 8001bb4:	08001c05 	.word	0x08001c05
 8001bb8:	08001bf3 	.word	0x08001bf3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0202 	orr.w	r2, r2, #2
 8001bca:	60da      	str	r2, [r3, #12]
      break;
 8001bcc:	e01b      	b.n	8001c06 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0204 	orr.w	r2, r2, #4
 8001bdc:	60da      	str	r2, [r3, #12]
      break;
 8001bde:	e012      	b.n	8001c06 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0208 	orr.w	r2, r2, #8
 8001bee:	60da      	str	r2, [r3, #12]
      break;
 8001bf0:	e009      	b.n	8001c06 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0210 	orr.w	r2, r2, #16
 8001c00:	60da      	str	r2, [r3, #12]
      break;
 8001c02:	e000      	b.n	8001c06 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8001c04:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fd13 	bl	800263a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <HAL_TIM_IC_Start_IT+0x200>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00e      	beq.n	8001c3c <HAL_TIM_IC_Start_IT+0x1c0>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c26:	d009      	beq.n	8001c3c <HAL_TIM_IC_Start_IT+0x1c0>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <HAL_TIM_IC_Start_IT+0x204>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d004      	beq.n	8001c3c <HAL_TIM_IC_Start_IT+0x1c0>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a13      	ldr	r2, [pc, #76]	; (8001c84 <HAL_TIM_IC_Start_IT+0x208>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d111      	bne.n	8001c60 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d010      	beq.n	8001c70 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0201 	orr.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5e:	e007      	b.n	8001c70 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40012c00 	.word	0x40012c00
 8001c80:	40000400 	.word	0x40000400
 8001c84:	40000800 	.word	0x40000800

08001c88 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e041      	b.n	8001d20 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f839 	bl	8001d28 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4610      	mov	r0, r2
 8001cca:	f000 fab1 	bl	8002230 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0208 	bic.w	r2, r2, #8
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d122      	bne.n	8001d96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d11b      	bne.n	8001d96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f06f 0202 	mvn.w	r2, #2
 8001d66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7fe fa05 	bl	800018c <HAL_TIM_IC_CaptureCallback>
 8001d82:	e005      	b.n	8001d90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fa38 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fa3e 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d122      	bne.n	8001dea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d11b      	bne.n	8001dea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f06f 0204 	mvn.w	r2, #4
 8001dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7fe f9db 	bl	800018c <HAL_TIM_IC_CaptureCallback>
 8001dd6:	e005      	b.n	8001de4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fa0e 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fa14 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d122      	bne.n	8001e3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d11b      	bne.n	8001e3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0208 	mvn.w	r2, #8
 8001e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2204      	movs	r2, #4
 8001e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7fe f9b1 	bl	800018c <HAL_TIM_IC_CaptureCallback>
 8001e2a:	e005      	b.n	8001e38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f9e4 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f9ea 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d122      	bne.n	8001e92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d11b      	bne.n	8001e92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f06f 0210 	mvn.w	r2, #16
 8001e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2208      	movs	r2, #8
 8001e68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7fe f987 	bl	800018c <HAL_TIM_IC_CaptureCallback>
 8001e7e:	e005      	b.n	8001e8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f9ba 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f9c0 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10e      	bne.n	8001ebe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f06f 0201 	mvn.w	r2, #1
 8001eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7fe f94f 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d10e      	bne.n	8001eea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b80      	cmp	r3, #128	; 0x80
 8001ed8:	d107      	bne.n	8001eea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fc34 	bl	8002752 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d10e      	bne.n	8001f16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f02:	2b40      	cmp	r3, #64	; 0x40
 8001f04:	d107      	bne.n	8001f16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f984 	bl	800221e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d10e      	bne.n	8001f42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d107      	bne.n	8001f42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f06f 0220 	mvn.w	r2, #32
 8001f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fbff 	bl	8002740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_TIM_IC_ConfigChannel+0x1a>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e082      	b.n	800206a <HAL_TIM_IC_ConfigChannel+0x120>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d11b      	bne.n	8001faa <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	6819      	ldr	r1, [r3, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f000 f9b7 	bl	80022f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699a      	ldr	r2, [r3, #24]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 020c 	bic.w	r2, r2, #12
 8001f94:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6999      	ldr	r1, [r3, #24]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	619a      	str	r2, [r3, #24]
 8001fa8:	e05a      	b.n	8002060 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d11c      	bne.n	8001fea <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f000 fa20 	bl	8002404 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001fd2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6999      	ldr	r1, [r3, #24]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	021a      	lsls	r2, r3, #8
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	619a      	str	r2, [r3, #24]
 8001fe8:	e03a      	b.n	8002060 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d11b      	bne.n	8002028 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f000 fa6b 	bl	80024da <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69da      	ldr	r2, [r3, #28]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 020c 	bic.w	r2, r2, #12
 8002012:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69d9      	ldr	r1, [r3, #28]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	61da      	str	r2, [r3, #28]
 8002026:	e01b      	b.n	8002060 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f000 fa8a 	bl	8002550 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800204a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69d9      	ldr	r1, [r3, #28]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	021a      	lsls	r2, r3, #8
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_TIM_ConfigClockSource+0x18>
 8002086:	2302      	movs	r3, #2
 8002088:	e0b3      	b.n	80021f2 <HAL_TIM_ConfigClockSource+0x180>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2202      	movs	r2, #2
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020b0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c2:	d03e      	beq.n	8002142 <HAL_TIM_ConfigClockSource+0xd0>
 80020c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c8:	f200 8087 	bhi.w	80021da <HAL_TIM_ConfigClockSource+0x168>
 80020cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d0:	f000 8085 	beq.w	80021de <HAL_TIM_ConfigClockSource+0x16c>
 80020d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d8:	d87f      	bhi.n	80021da <HAL_TIM_ConfigClockSource+0x168>
 80020da:	2b70      	cmp	r3, #112	; 0x70
 80020dc:	d01a      	beq.n	8002114 <HAL_TIM_ConfigClockSource+0xa2>
 80020de:	2b70      	cmp	r3, #112	; 0x70
 80020e0:	d87b      	bhi.n	80021da <HAL_TIM_ConfigClockSource+0x168>
 80020e2:	2b60      	cmp	r3, #96	; 0x60
 80020e4:	d050      	beq.n	8002188 <HAL_TIM_ConfigClockSource+0x116>
 80020e6:	2b60      	cmp	r3, #96	; 0x60
 80020e8:	d877      	bhi.n	80021da <HAL_TIM_ConfigClockSource+0x168>
 80020ea:	2b50      	cmp	r3, #80	; 0x50
 80020ec:	d03c      	beq.n	8002168 <HAL_TIM_ConfigClockSource+0xf6>
 80020ee:	2b50      	cmp	r3, #80	; 0x50
 80020f0:	d873      	bhi.n	80021da <HAL_TIM_ConfigClockSource+0x168>
 80020f2:	2b40      	cmp	r3, #64	; 0x40
 80020f4:	d058      	beq.n	80021a8 <HAL_TIM_ConfigClockSource+0x136>
 80020f6:	2b40      	cmp	r3, #64	; 0x40
 80020f8:	d86f      	bhi.n	80021da <HAL_TIM_ConfigClockSource+0x168>
 80020fa:	2b30      	cmp	r3, #48	; 0x30
 80020fc:	d064      	beq.n	80021c8 <HAL_TIM_ConfigClockSource+0x156>
 80020fe:	2b30      	cmp	r3, #48	; 0x30
 8002100:	d86b      	bhi.n	80021da <HAL_TIM_ConfigClockSource+0x168>
 8002102:	2b20      	cmp	r3, #32
 8002104:	d060      	beq.n	80021c8 <HAL_TIM_ConfigClockSource+0x156>
 8002106:	2b20      	cmp	r3, #32
 8002108:	d867      	bhi.n	80021da <HAL_TIM_ConfigClockSource+0x168>
 800210a:	2b00      	cmp	r3, #0
 800210c:	d05c      	beq.n	80021c8 <HAL_TIM_ConfigClockSource+0x156>
 800210e:	2b10      	cmp	r3, #16
 8002110:	d05a      	beq.n	80021c8 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002112:	e062      	b.n	80021da <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6899      	ldr	r1, [r3, #8]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f000 fa6a 	bl	80025fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002136:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	609a      	str	r2, [r3, #8]
      break;
 8002140:	e04e      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6899      	ldr	r1, [r3, #8]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f000 fa53 	bl	80025fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002164:	609a      	str	r2, [r3, #8]
      break;
 8002166:	e03b      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	461a      	mov	r2, r3
 8002176:	f000 f917 	bl	80023a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2150      	movs	r1, #80	; 0x50
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fa21 	bl	80025c8 <TIM_ITRx_SetConfig>
      break;
 8002186:	e02b      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	461a      	mov	r2, r3
 8002196:	f000 f971 	bl	800247c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2160      	movs	r1, #96	; 0x60
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fa11 	bl	80025c8 <TIM_ITRx_SetConfig>
      break;
 80021a6:	e01b      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f000 f8f7 	bl	80023a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2140      	movs	r1, #64	; 0x40
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 fa01 	bl	80025c8 <TIM_ITRx_SetConfig>
      break;
 80021c6:	e00b      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f000 f9f8 	bl	80025c8 <TIM_ITRx_SetConfig>
        break;
 80021d8:	e002      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021da:	bf00      	nop
 80021dc:	e000      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <TIM_Base_SetConfig+0xb8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00b      	beq.n	8002260 <TIM_Base_SetConfig+0x30>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224e:	d007      	beq.n	8002260 <TIM_Base_SetConfig+0x30>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a26      	ldr	r2, [pc, #152]	; (80022ec <TIM_Base_SetConfig+0xbc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <TIM_Base_SetConfig+0x30>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a25      	ldr	r2, [pc, #148]	; (80022f0 <TIM_Base_SetConfig+0xc0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d108      	bne.n	8002272 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a1c      	ldr	r2, [pc, #112]	; (80022e8 <TIM_Base_SetConfig+0xb8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00b      	beq.n	8002292 <TIM_Base_SetConfig+0x62>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002280:	d007      	beq.n	8002292 <TIM_Base_SetConfig+0x62>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <TIM_Base_SetConfig+0xbc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d003      	beq.n	8002292 <TIM_Base_SetConfig+0x62>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <TIM_Base_SetConfig+0xc0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d108      	bne.n	80022a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <TIM_Base_SetConfig+0xb8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d103      	bne.n	80022d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	615a      	str	r2, [r3, #20]
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40000400 	.word	0x40000400
 80022f0:	40000800 	.word	0x40000800

080022f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f023 0201 	bic.w	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4a1f      	ldr	r2, [pc, #124]	; (800239c <TIM_TI1_SetConfig+0xa8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00b      	beq.n	800233a <TIM_TI1_SetConfig+0x46>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002328:	d007      	beq.n	800233a <TIM_TI1_SetConfig+0x46>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <TIM_TI1_SetConfig+0xac>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d003      	beq.n	800233a <TIM_TI1_SetConfig+0x46>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <TIM_TI1_SetConfig+0xb0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <TIM_TI1_SetConfig+0x4a>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <TIM_TI1_SetConfig+0x4c>
 800233e:	2300      	movs	r3, #0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f023 0303 	bic.w	r3, r3, #3
 800234a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	e003      	b.n	800235e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002364:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	b2db      	uxtb	r3, r3
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f023 030a 	bic.w	r3, r3, #10
 8002378:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 030a 	and.w	r3, r3, #10
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	621a      	str	r2, [r3, #32]
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40000800 	.word	0x40000800

080023a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f023 0201 	bic.w	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f023 030a 	bic.w	r3, r3, #10
 80023e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	621a      	str	r2, [r3, #32]
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	f023 0210 	bic.w	r2, r3, #16
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002442:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	031b      	lsls	r3, r3, #12
 8002448:	b29b      	uxth	r3, r3
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002456:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	621a      	str	r2, [r3, #32]
}
 8002472:	bf00      	nop
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f023 0210 	bic.w	r2, r3, #16
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	031b      	lsls	r3, r3, #12
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	621a      	str	r2, [r3, #32]
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024da:	b480      	push	{r7}
 80024dc:	b087      	sub	sp, #28
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f023 0303 	bic.w	r3, r3, #3
 8002506:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002516:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	b2db      	uxtb	r3, r3
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800252a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	621a      	str	r2, [r3, #32]
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800258e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	031b      	lsls	r3, r3, #12
 8002594:	b29b      	uxth	r3, r3
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	031b      	lsls	r3, r3, #12
 80025a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	621a      	str	r2, [r3, #32]
}
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f043 0307 	orr.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	609a      	str	r2, [r3, #8]
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	021a      	lsls	r2, r3, #8
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	431a      	orrs	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	609a      	str	r2, [r3, #8]
}
 8002630:	bf00      	nop
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800263a:	b480      	push	{r7}
 800263c:	b087      	sub	sp, #28
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2201      	movs	r2, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a1a      	ldr	r2, [r3, #32]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	43db      	mvns	r3, r3
 800265c:	401a      	ands	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	431a      	orrs	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	621a      	str	r2, [r3, #32]
}
 8002678:	bf00      	nop
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
	...

08002684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002698:	2302      	movs	r3, #2
 800269a:	e046      	b.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a16      	ldr	r2, [pc, #88]	; (8002734 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00e      	beq.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d009      	beq.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a10      	ldr	r2, [pc, #64]	; (800273c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10c      	bne.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	4313      	orrs	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40000400 	.word	0x40000400
 800273c:	40000800 	.word	0x40000800

08002740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e03f      	b.n	80027f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fd fff8 	bl	8000780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2224      	movs	r2, #36	; 0x24
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f905 	bl	80029b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b08a      	sub	sp, #40	; 0x28
 8002802:	af02      	add	r7, sp, #8
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b20      	cmp	r3, #32
 800281c:	d17c      	bne.n	8002918 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_UART_Transmit+0x2c>
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e075      	b.n	800291a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_UART_Transmit+0x3e>
 8002838:	2302      	movs	r3, #2
 800283a:	e06e      	b.n	800291a <HAL_UART_Transmit+0x11c>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2221      	movs	r2, #33	; 0x21
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002852:	f7fe f8e1 	bl	8000a18 <HAL_GetTick>
 8002856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	88fa      	ldrh	r2, [r7, #6]
 800285c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	88fa      	ldrh	r2, [r7, #6]
 8002862:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286c:	d108      	bne.n	8002880 <HAL_UART_Transmit+0x82>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d104      	bne.n	8002880 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	e003      	b.n	8002888 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002890:	e02a      	b.n	80028e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2200      	movs	r2, #0
 800289a:	2180      	movs	r1, #128	; 0x80
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f840 	bl	8002922 <UART_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e036      	b.n	800291a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10b      	bne.n	80028ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	3302      	adds	r3, #2
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	e007      	b.n	80028da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	3301      	adds	r3, #1
 80028d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1cf      	bne.n	8002892 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2200      	movs	r2, #0
 80028fa:	2140      	movs	r1, #64	; 0x40
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f810 	bl	8002922 <UART_WaitOnFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e006      	b.n	800291a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4613      	mov	r3, r2
 8002930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002932:	e02c      	b.n	800298e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d028      	beq.n	800298e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <UART_WaitOnFlagUntilTimeout+0x30>
 8002942:	f7fe f869 	bl	8000a18 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	429a      	cmp	r2, r3
 8002950:	d21d      	bcs.n	800298e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002960:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695a      	ldr	r2, [r3, #20]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e00f      	b.n	80029ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4013      	ands	r3, r2
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	429a      	cmp	r2, r3
 800299c:	bf0c      	ite	eq
 800299e:	2301      	moveq	r3, #1
 80029a0:	2300      	movne	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d0c3      	beq.n	8002934 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029f2:	f023 030c 	bic.w	r3, r3, #12
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2c      	ldr	r2, [pc, #176]	; (8002acc <UART_SetConfig+0x114>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d103      	bne.n	8002a28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a20:	f7fe feb6 	bl	8001790 <HAL_RCC_GetPCLK2Freq>
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	e002      	b.n	8002a2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a28:	f7fe fe9e 	bl	8001768 <HAL_RCC_GetPCLK1Freq>
 8002a2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009a      	lsls	r2, r3, #2
 8002a38:	441a      	add	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <UART_SetConfig+0x118>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	0119      	lsls	r1, r3, #4
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	009a      	lsls	r2, r3, #2
 8002a58:	441a      	add	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <UART_SetConfig+0x118>)
 8002a66:	fba3 0302 	umull	r0, r3, r3, r2
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2064      	movs	r0, #100	; 0x64
 8002a6e:	fb00 f303 	mul.w	r3, r0, r3
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	3332      	adds	r3, #50	; 0x32
 8002a78:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <UART_SetConfig+0x118>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a84:	4419      	add	r1, r3
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009a      	lsls	r2, r3, #2
 8002a90:	441a      	add	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <UART_SetConfig+0x118>)
 8002a9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2064      	movs	r0, #100	; 0x64
 8002aa6:	fb00 f303 	mul.w	r3, r0, r3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	3332      	adds	r3, #50	; 0x32
 8002ab0:	4a07      	ldr	r2, [pc, #28]	; (8002ad0 <UART_SetConfig+0x118>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	440a      	add	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	51eb851f 	.word	0x51eb851f

08002ad4 <__errno>:
 8002ad4:	4b01      	ldr	r3, [pc, #4]	; (8002adc <__errno+0x8>)
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	2000000c 	.word	0x2000000c

08002ae0 <__libc_init_array>:
 8002ae0:	b570      	push	{r4, r5, r6, lr}
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	4d0c      	ldr	r5, [pc, #48]	; (8002b18 <__libc_init_array+0x38>)
 8002ae6:	4c0d      	ldr	r4, [pc, #52]	; (8002b1c <__libc_init_array+0x3c>)
 8002ae8:	1b64      	subs	r4, r4, r5
 8002aea:	10a4      	asrs	r4, r4, #2
 8002aec:	42a6      	cmp	r6, r4
 8002aee:	d109      	bne.n	8002b04 <__libc_init_array+0x24>
 8002af0:	f000 fcb0 	bl	8003454 <_init>
 8002af4:	2600      	movs	r6, #0
 8002af6:	4d0a      	ldr	r5, [pc, #40]	; (8002b20 <__libc_init_array+0x40>)
 8002af8:	4c0a      	ldr	r4, [pc, #40]	; (8002b24 <__libc_init_array+0x44>)
 8002afa:	1b64      	subs	r4, r4, r5
 8002afc:	10a4      	asrs	r4, r4, #2
 8002afe:	42a6      	cmp	r6, r4
 8002b00:	d105      	bne.n	8002b0e <__libc_init_array+0x2e>
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b08:	4798      	blx	r3
 8002b0a:	3601      	adds	r6, #1
 8002b0c:	e7ee      	b.n	8002aec <__libc_init_array+0xc>
 8002b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b12:	4798      	blx	r3
 8002b14:	3601      	adds	r6, #1
 8002b16:	e7f2      	b.n	8002afe <__libc_init_array+0x1e>
 8002b18:	08003518 	.word	0x08003518
 8002b1c:	08003518 	.word	0x08003518
 8002b20:	08003518 	.word	0x08003518
 8002b24:	0800351c 	.word	0x0800351c

08002b28 <memset>:
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4402      	add	r2, r0
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d100      	bne.n	8002b32 <memset+0xa>
 8002b30:	4770      	bx	lr
 8002b32:	f803 1b01 	strb.w	r1, [r3], #1
 8002b36:	e7f9      	b.n	8002b2c <memset+0x4>

08002b38 <sniprintf>:
 8002b38:	b40c      	push	{r2, r3}
 8002b3a:	b530      	push	{r4, r5, lr}
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <sniprintf+0x64>)
 8002b3e:	1e0c      	subs	r4, r1, #0
 8002b40:	681d      	ldr	r5, [r3, #0]
 8002b42:	b09d      	sub	sp, #116	; 0x74
 8002b44:	da08      	bge.n	8002b58 <sniprintf+0x20>
 8002b46:	238b      	movs	r3, #139	; 0x8b
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	602b      	str	r3, [r5, #0]
 8002b4e:	b01d      	add	sp, #116	; 0x74
 8002b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b54:	b002      	add	sp, #8
 8002b56:	4770      	bx	lr
 8002b58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002b5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002b60:	bf0c      	ite	eq
 8002b62:	4623      	moveq	r3, r4
 8002b64:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002b68:	9304      	str	r3, [sp, #16]
 8002b6a:	9307      	str	r3, [sp, #28]
 8002b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b70:	9002      	str	r0, [sp, #8]
 8002b72:	9006      	str	r0, [sp, #24]
 8002b74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b78:	4628      	mov	r0, r5
 8002b7a:	ab21      	add	r3, sp, #132	; 0x84
 8002b7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002b7e:	a902      	add	r1, sp, #8
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	f000 f869 	bl	8002c58 <_svfiprintf_r>
 8002b86:	1c43      	adds	r3, r0, #1
 8002b88:	bfbc      	itt	lt
 8002b8a:	238b      	movlt	r3, #139	; 0x8b
 8002b8c:	602b      	strlt	r3, [r5, #0]
 8002b8e:	2c00      	cmp	r4, #0
 8002b90:	d0dd      	beq.n	8002b4e <sniprintf+0x16>
 8002b92:	2200      	movs	r2, #0
 8002b94:	9b02      	ldr	r3, [sp, #8]
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	e7d9      	b.n	8002b4e <sniprintf+0x16>
 8002b9a:	bf00      	nop
 8002b9c:	2000000c 	.word	0x2000000c

08002ba0 <__ssputs_r>:
 8002ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba4:	688e      	ldr	r6, [r1, #8]
 8002ba6:	4682      	mov	sl, r0
 8002ba8:	429e      	cmp	r6, r3
 8002baa:	460c      	mov	r4, r1
 8002bac:	4690      	mov	r8, r2
 8002bae:	461f      	mov	r7, r3
 8002bb0:	d838      	bhi.n	8002c24 <__ssputs_r+0x84>
 8002bb2:	898a      	ldrh	r2, [r1, #12]
 8002bb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bb8:	d032      	beq.n	8002c20 <__ssputs_r+0x80>
 8002bba:	6825      	ldr	r5, [r4, #0]
 8002bbc:	6909      	ldr	r1, [r1, #16]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	eba5 0901 	sub.w	r9, r5, r1
 8002bc4:	6965      	ldr	r5, [r4, #20]
 8002bc6:	444b      	add	r3, r9
 8002bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bd0:	106d      	asrs	r5, r5, #1
 8002bd2:	429d      	cmp	r5, r3
 8002bd4:	bf38      	it	cc
 8002bd6:	461d      	movcc	r5, r3
 8002bd8:	0553      	lsls	r3, r2, #21
 8002bda:	d531      	bpl.n	8002c40 <__ssputs_r+0xa0>
 8002bdc:	4629      	mov	r1, r5
 8002bde:	f000 fb6f 	bl	80032c0 <_malloc_r>
 8002be2:	4606      	mov	r6, r0
 8002be4:	b950      	cbnz	r0, 8002bfc <__ssputs_r+0x5c>
 8002be6:	230c      	movs	r3, #12
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bec:	f8ca 3000 	str.w	r3, [sl]
 8002bf0:	89a3      	ldrh	r3, [r4, #12]
 8002bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf6:	81a3      	strh	r3, [r4, #12]
 8002bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bfc:	464a      	mov	r2, r9
 8002bfe:	6921      	ldr	r1, [r4, #16]
 8002c00:	f000 face 	bl	80031a0 <memcpy>
 8002c04:	89a3      	ldrh	r3, [r4, #12]
 8002c06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0e:	81a3      	strh	r3, [r4, #12]
 8002c10:	6126      	str	r6, [r4, #16]
 8002c12:	444e      	add	r6, r9
 8002c14:	6026      	str	r6, [r4, #0]
 8002c16:	463e      	mov	r6, r7
 8002c18:	6165      	str	r5, [r4, #20]
 8002c1a:	eba5 0509 	sub.w	r5, r5, r9
 8002c1e:	60a5      	str	r5, [r4, #8]
 8002c20:	42be      	cmp	r6, r7
 8002c22:	d900      	bls.n	8002c26 <__ssputs_r+0x86>
 8002c24:	463e      	mov	r6, r7
 8002c26:	4632      	mov	r2, r6
 8002c28:	4641      	mov	r1, r8
 8002c2a:	6820      	ldr	r0, [r4, #0]
 8002c2c:	f000 fac6 	bl	80031bc <memmove>
 8002c30:	68a3      	ldr	r3, [r4, #8]
 8002c32:	2000      	movs	r0, #0
 8002c34:	1b9b      	subs	r3, r3, r6
 8002c36:	60a3      	str	r3, [r4, #8]
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	4433      	add	r3, r6
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	e7db      	b.n	8002bf8 <__ssputs_r+0x58>
 8002c40:	462a      	mov	r2, r5
 8002c42:	f000 fbb1 	bl	80033a8 <_realloc_r>
 8002c46:	4606      	mov	r6, r0
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	d1e1      	bne.n	8002c10 <__ssputs_r+0x70>
 8002c4c:	4650      	mov	r0, sl
 8002c4e:	6921      	ldr	r1, [r4, #16]
 8002c50:	f000 face 	bl	80031f0 <_free_r>
 8002c54:	e7c7      	b.n	8002be6 <__ssputs_r+0x46>
	...

08002c58 <_svfiprintf_r>:
 8002c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c5c:	4698      	mov	r8, r3
 8002c5e:	898b      	ldrh	r3, [r1, #12]
 8002c60:	4607      	mov	r7, r0
 8002c62:	061b      	lsls	r3, r3, #24
 8002c64:	460d      	mov	r5, r1
 8002c66:	4614      	mov	r4, r2
 8002c68:	b09d      	sub	sp, #116	; 0x74
 8002c6a:	d50e      	bpl.n	8002c8a <_svfiprintf_r+0x32>
 8002c6c:	690b      	ldr	r3, [r1, #16]
 8002c6e:	b963      	cbnz	r3, 8002c8a <_svfiprintf_r+0x32>
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	f000 fb25 	bl	80032c0 <_malloc_r>
 8002c76:	6028      	str	r0, [r5, #0]
 8002c78:	6128      	str	r0, [r5, #16]
 8002c7a:	b920      	cbnz	r0, 8002c86 <_svfiprintf_r+0x2e>
 8002c7c:	230c      	movs	r3, #12
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	e0d1      	b.n	8002e2a <_svfiprintf_r+0x1d2>
 8002c86:	2340      	movs	r3, #64	; 0x40
 8002c88:	616b      	str	r3, [r5, #20]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c8e:	2320      	movs	r3, #32
 8002c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c94:	2330      	movs	r3, #48	; 0x30
 8002c96:	f04f 0901 	mov.w	r9, #1
 8002c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002e44 <_svfiprintf_r+0x1ec>
 8002ca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ca6:	4623      	mov	r3, r4
 8002ca8:	469a      	mov	sl, r3
 8002caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cae:	b10a      	cbz	r2, 8002cb4 <_svfiprintf_r+0x5c>
 8002cb0:	2a25      	cmp	r2, #37	; 0x25
 8002cb2:	d1f9      	bne.n	8002ca8 <_svfiprintf_r+0x50>
 8002cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8002cb8:	d00b      	beq.n	8002cd2 <_svfiprintf_r+0x7a>
 8002cba:	465b      	mov	r3, fp
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	4638      	mov	r0, r7
 8002cc2:	f7ff ff6d 	bl	8002ba0 <__ssputs_r>
 8002cc6:	3001      	adds	r0, #1
 8002cc8:	f000 80aa 	beq.w	8002e20 <_svfiprintf_r+0x1c8>
 8002ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cce:	445a      	add	r2, fp
 8002cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8002cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80a2 	beq.w	8002e20 <_svfiprintf_r+0x1c8>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ce6:	f10a 0a01 	add.w	sl, sl, #1
 8002cea:	9304      	str	r3, [sp, #16]
 8002cec:	9307      	str	r3, [sp, #28]
 8002cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8002cf4:	4654      	mov	r4, sl
 8002cf6:	2205      	movs	r2, #5
 8002cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cfc:	4851      	ldr	r0, [pc, #324]	; (8002e44 <_svfiprintf_r+0x1ec>)
 8002cfe:	f000 fa41 	bl	8003184 <memchr>
 8002d02:	9a04      	ldr	r2, [sp, #16]
 8002d04:	b9d8      	cbnz	r0, 8002d3e <_svfiprintf_r+0xe6>
 8002d06:	06d0      	lsls	r0, r2, #27
 8002d08:	bf44      	itt	mi
 8002d0a:	2320      	movmi	r3, #32
 8002d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d10:	0711      	lsls	r1, r2, #28
 8002d12:	bf44      	itt	mi
 8002d14:	232b      	movmi	r3, #43	; 0x2b
 8002d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d20:	d015      	beq.n	8002d4e <_svfiprintf_r+0xf6>
 8002d22:	4654      	mov	r4, sl
 8002d24:	2000      	movs	r0, #0
 8002d26:	f04f 0c0a 	mov.w	ip, #10
 8002d2a:	9a07      	ldr	r2, [sp, #28]
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d32:	3b30      	subs	r3, #48	; 0x30
 8002d34:	2b09      	cmp	r3, #9
 8002d36:	d94e      	bls.n	8002dd6 <_svfiprintf_r+0x17e>
 8002d38:	b1b0      	cbz	r0, 8002d68 <_svfiprintf_r+0x110>
 8002d3a:	9207      	str	r2, [sp, #28]
 8002d3c:	e014      	b.n	8002d68 <_svfiprintf_r+0x110>
 8002d3e:	eba0 0308 	sub.w	r3, r0, r8
 8002d42:	fa09 f303 	lsl.w	r3, r9, r3
 8002d46:	4313      	orrs	r3, r2
 8002d48:	46a2      	mov	sl, r4
 8002d4a:	9304      	str	r3, [sp, #16]
 8002d4c:	e7d2      	b.n	8002cf4 <_svfiprintf_r+0x9c>
 8002d4e:	9b03      	ldr	r3, [sp, #12]
 8002d50:	1d19      	adds	r1, r3, #4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	9103      	str	r1, [sp, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bfbb      	ittet	lt
 8002d5a:	425b      	neglt	r3, r3
 8002d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8002d60:	9307      	strge	r3, [sp, #28]
 8002d62:	9307      	strlt	r3, [sp, #28]
 8002d64:	bfb8      	it	lt
 8002d66:	9204      	strlt	r2, [sp, #16]
 8002d68:	7823      	ldrb	r3, [r4, #0]
 8002d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d6c:	d10c      	bne.n	8002d88 <_svfiprintf_r+0x130>
 8002d6e:	7863      	ldrb	r3, [r4, #1]
 8002d70:	2b2a      	cmp	r3, #42	; 0x2a
 8002d72:	d135      	bne.n	8002de0 <_svfiprintf_r+0x188>
 8002d74:	9b03      	ldr	r3, [sp, #12]
 8002d76:	3402      	adds	r4, #2
 8002d78:	1d1a      	adds	r2, r3, #4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	9203      	str	r2, [sp, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bfb8      	it	lt
 8002d82:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d86:	9305      	str	r3, [sp, #20]
 8002d88:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002e48 <_svfiprintf_r+0x1f0>
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	4650      	mov	r0, sl
 8002d90:	7821      	ldrb	r1, [r4, #0]
 8002d92:	f000 f9f7 	bl	8003184 <memchr>
 8002d96:	b140      	cbz	r0, 8002daa <_svfiprintf_r+0x152>
 8002d98:	2340      	movs	r3, #64	; 0x40
 8002d9a:	eba0 000a 	sub.w	r0, r0, sl
 8002d9e:	fa03 f000 	lsl.w	r0, r3, r0
 8002da2:	9b04      	ldr	r3, [sp, #16]
 8002da4:	3401      	adds	r4, #1
 8002da6:	4303      	orrs	r3, r0
 8002da8:	9304      	str	r3, [sp, #16]
 8002daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dae:	2206      	movs	r2, #6
 8002db0:	4826      	ldr	r0, [pc, #152]	; (8002e4c <_svfiprintf_r+0x1f4>)
 8002db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002db6:	f000 f9e5 	bl	8003184 <memchr>
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d038      	beq.n	8002e30 <_svfiprintf_r+0x1d8>
 8002dbe:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <_svfiprintf_r+0x1f8>)
 8002dc0:	bb1b      	cbnz	r3, 8002e0a <_svfiprintf_r+0x1b2>
 8002dc2:	9b03      	ldr	r3, [sp, #12]
 8002dc4:	3307      	adds	r3, #7
 8002dc6:	f023 0307 	bic.w	r3, r3, #7
 8002dca:	3308      	adds	r3, #8
 8002dcc:	9303      	str	r3, [sp, #12]
 8002dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dd0:	4433      	add	r3, r6
 8002dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8002dd4:	e767      	b.n	8002ca6 <_svfiprintf_r+0x4e>
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	2001      	movs	r0, #1
 8002dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dde:	e7a5      	b.n	8002d2c <_svfiprintf_r+0xd4>
 8002de0:	2300      	movs	r3, #0
 8002de2:	f04f 0c0a 	mov.w	ip, #10
 8002de6:	4619      	mov	r1, r3
 8002de8:	3401      	adds	r4, #1
 8002dea:	9305      	str	r3, [sp, #20]
 8002dec:	4620      	mov	r0, r4
 8002dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002df2:	3a30      	subs	r2, #48	; 0x30
 8002df4:	2a09      	cmp	r2, #9
 8002df6:	d903      	bls.n	8002e00 <_svfiprintf_r+0x1a8>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0c5      	beq.n	8002d88 <_svfiprintf_r+0x130>
 8002dfc:	9105      	str	r1, [sp, #20]
 8002dfe:	e7c3      	b.n	8002d88 <_svfiprintf_r+0x130>
 8002e00:	4604      	mov	r4, r0
 8002e02:	2301      	movs	r3, #1
 8002e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e08:	e7f0      	b.n	8002dec <_svfiprintf_r+0x194>
 8002e0a:	ab03      	add	r3, sp, #12
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	462a      	mov	r2, r5
 8002e10:	4638      	mov	r0, r7
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <_svfiprintf_r+0x1fc>)
 8002e14:	a904      	add	r1, sp, #16
 8002e16:	f3af 8000 	nop.w
 8002e1a:	1c42      	adds	r2, r0, #1
 8002e1c:	4606      	mov	r6, r0
 8002e1e:	d1d6      	bne.n	8002dce <_svfiprintf_r+0x176>
 8002e20:	89ab      	ldrh	r3, [r5, #12]
 8002e22:	065b      	lsls	r3, r3, #25
 8002e24:	f53f af2c 	bmi.w	8002c80 <_svfiprintf_r+0x28>
 8002e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e2a:	b01d      	add	sp, #116	; 0x74
 8002e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e30:	ab03      	add	r3, sp, #12
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	462a      	mov	r2, r5
 8002e36:	4638      	mov	r0, r7
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <_svfiprintf_r+0x1fc>)
 8002e3a:	a904      	add	r1, sp, #16
 8002e3c:	f000 f87c 	bl	8002f38 <_printf_i>
 8002e40:	e7eb      	b.n	8002e1a <_svfiprintf_r+0x1c2>
 8002e42:	bf00      	nop
 8002e44:	080034e4 	.word	0x080034e4
 8002e48:	080034ea 	.word	0x080034ea
 8002e4c:	080034ee 	.word	0x080034ee
 8002e50:	00000000 	.word	0x00000000
 8002e54:	08002ba1 	.word	0x08002ba1

08002e58 <_printf_common>:
 8002e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e5c:	4616      	mov	r6, r2
 8002e5e:	4699      	mov	r9, r3
 8002e60:	688a      	ldr	r2, [r1, #8]
 8002e62:	690b      	ldr	r3, [r1, #16]
 8002e64:	4607      	mov	r7, r0
 8002e66:	4293      	cmp	r3, r2
 8002e68:	bfb8      	it	lt
 8002e6a:	4613      	movlt	r3, r2
 8002e6c:	6033      	str	r3, [r6, #0]
 8002e6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e72:	460c      	mov	r4, r1
 8002e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e78:	b10a      	cbz	r2, 8002e7e <_printf_common+0x26>
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	6033      	str	r3, [r6, #0]
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	0699      	lsls	r1, r3, #26
 8002e82:	bf42      	ittt	mi
 8002e84:	6833      	ldrmi	r3, [r6, #0]
 8002e86:	3302      	addmi	r3, #2
 8002e88:	6033      	strmi	r3, [r6, #0]
 8002e8a:	6825      	ldr	r5, [r4, #0]
 8002e8c:	f015 0506 	ands.w	r5, r5, #6
 8002e90:	d106      	bne.n	8002ea0 <_printf_common+0x48>
 8002e92:	f104 0a19 	add.w	sl, r4, #25
 8002e96:	68e3      	ldr	r3, [r4, #12]
 8002e98:	6832      	ldr	r2, [r6, #0]
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	42ab      	cmp	r3, r5
 8002e9e:	dc28      	bgt.n	8002ef2 <_printf_common+0x9a>
 8002ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ea4:	1e13      	subs	r3, r2, #0
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	bf18      	it	ne
 8002eaa:	2301      	movne	r3, #1
 8002eac:	0692      	lsls	r2, r2, #26
 8002eae:	d42d      	bmi.n	8002f0c <_printf_common+0xb4>
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	4638      	mov	r0, r7
 8002eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eb8:	47c0      	blx	r8
 8002eba:	3001      	adds	r0, #1
 8002ebc:	d020      	beq.n	8002f00 <_printf_common+0xa8>
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	68e5      	ldr	r5, [r4, #12]
 8002ec2:	f003 0306 	and.w	r3, r3, #6
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	bf18      	it	ne
 8002eca:	2500      	movne	r5, #0
 8002ecc:	6832      	ldr	r2, [r6, #0]
 8002ece:	f04f 0600 	mov.w	r6, #0
 8002ed2:	68a3      	ldr	r3, [r4, #8]
 8002ed4:	bf08      	it	eq
 8002ed6:	1aad      	subeq	r5, r5, r2
 8002ed8:	6922      	ldr	r2, [r4, #16]
 8002eda:	bf08      	it	eq
 8002edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bfc4      	itt	gt
 8002ee4:	1a9b      	subgt	r3, r3, r2
 8002ee6:	18ed      	addgt	r5, r5, r3
 8002ee8:	341a      	adds	r4, #26
 8002eea:	42b5      	cmp	r5, r6
 8002eec:	d11a      	bne.n	8002f24 <_printf_common+0xcc>
 8002eee:	2000      	movs	r0, #0
 8002ef0:	e008      	b.n	8002f04 <_printf_common+0xac>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	4638      	mov	r0, r7
 8002efa:	47c0      	blx	r8
 8002efc:	3001      	adds	r0, #1
 8002efe:	d103      	bne.n	8002f08 <_printf_common+0xb0>
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f08:	3501      	adds	r5, #1
 8002f0a:	e7c4      	b.n	8002e96 <_printf_common+0x3e>
 8002f0c:	2030      	movs	r0, #48	; 0x30
 8002f0e:	18e1      	adds	r1, r4, r3
 8002f10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f1a:	4422      	add	r2, r4
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f22:	e7c5      	b.n	8002eb0 <_printf_common+0x58>
 8002f24:	2301      	movs	r3, #1
 8002f26:	4622      	mov	r2, r4
 8002f28:	4649      	mov	r1, r9
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	47c0      	blx	r8
 8002f2e:	3001      	adds	r0, #1
 8002f30:	d0e6      	beq.n	8002f00 <_printf_common+0xa8>
 8002f32:	3601      	adds	r6, #1
 8002f34:	e7d9      	b.n	8002eea <_printf_common+0x92>
	...

08002f38 <_printf_i>:
 8002f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f3c:	7e0f      	ldrb	r7, [r1, #24]
 8002f3e:	4691      	mov	r9, r2
 8002f40:	2f78      	cmp	r7, #120	; 0x78
 8002f42:	4680      	mov	r8, r0
 8002f44:	460c      	mov	r4, r1
 8002f46:	469a      	mov	sl, r3
 8002f48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f4e:	d807      	bhi.n	8002f60 <_printf_i+0x28>
 8002f50:	2f62      	cmp	r7, #98	; 0x62
 8002f52:	d80a      	bhi.n	8002f6a <_printf_i+0x32>
 8002f54:	2f00      	cmp	r7, #0
 8002f56:	f000 80d9 	beq.w	800310c <_printf_i+0x1d4>
 8002f5a:	2f58      	cmp	r7, #88	; 0x58
 8002f5c:	f000 80a4 	beq.w	80030a8 <_printf_i+0x170>
 8002f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f68:	e03a      	b.n	8002fe0 <_printf_i+0xa8>
 8002f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f6e:	2b15      	cmp	r3, #21
 8002f70:	d8f6      	bhi.n	8002f60 <_printf_i+0x28>
 8002f72:	a101      	add	r1, pc, #4	; (adr r1, 8002f78 <_printf_i+0x40>)
 8002f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f78:	08002fd1 	.word	0x08002fd1
 8002f7c:	08002fe5 	.word	0x08002fe5
 8002f80:	08002f61 	.word	0x08002f61
 8002f84:	08002f61 	.word	0x08002f61
 8002f88:	08002f61 	.word	0x08002f61
 8002f8c:	08002f61 	.word	0x08002f61
 8002f90:	08002fe5 	.word	0x08002fe5
 8002f94:	08002f61 	.word	0x08002f61
 8002f98:	08002f61 	.word	0x08002f61
 8002f9c:	08002f61 	.word	0x08002f61
 8002fa0:	08002f61 	.word	0x08002f61
 8002fa4:	080030f3 	.word	0x080030f3
 8002fa8:	08003015 	.word	0x08003015
 8002fac:	080030d5 	.word	0x080030d5
 8002fb0:	08002f61 	.word	0x08002f61
 8002fb4:	08002f61 	.word	0x08002f61
 8002fb8:	08003115 	.word	0x08003115
 8002fbc:	08002f61 	.word	0x08002f61
 8002fc0:	08003015 	.word	0x08003015
 8002fc4:	08002f61 	.word	0x08002f61
 8002fc8:	08002f61 	.word	0x08002f61
 8002fcc:	080030dd 	.word	0x080030dd
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	1d1a      	adds	r2, r3, #4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	602a      	str	r2, [r5, #0]
 8002fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0a4      	b.n	800312e <_printf_i+0x1f6>
 8002fe4:	6820      	ldr	r0, [r4, #0]
 8002fe6:	6829      	ldr	r1, [r5, #0]
 8002fe8:	0606      	lsls	r6, r0, #24
 8002fea:	f101 0304 	add.w	r3, r1, #4
 8002fee:	d50a      	bpl.n	8003006 <_printf_i+0xce>
 8002ff0:	680e      	ldr	r6, [r1, #0]
 8002ff2:	602b      	str	r3, [r5, #0]
 8002ff4:	2e00      	cmp	r6, #0
 8002ff6:	da03      	bge.n	8003000 <_printf_i+0xc8>
 8002ff8:	232d      	movs	r3, #45	; 0x2d
 8002ffa:	4276      	negs	r6, r6
 8002ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003000:	230a      	movs	r3, #10
 8003002:	485e      	ldr	r0, [pc, #376]	; (800317c <_printf_i+0x244>)
 8003004:	e019      	b.n	800303a <_printf_i+0x102>
 8003006:	680e      	ldr	r6, [r1, #0]
 8003008:	f010 0f40 	tst.w	r0, #64	; 0x40
 800300c:	602b      	str	r3, [r5, #0]
 800300e:	bf18      	it	ne
 8003010:	b236      	sxthne	r6, r6
 8003012:	e7ef      	b.n	8002ff4 <_printf_i+0xbc>
 8003014:	682b      	ldr	r3, [r5, #0]
 8003016:	6820      	ldr	r0, [r4, #0]
 8003018:	1d19      	adds	r1, r3, #4
 800301a:	6029      	str	r1, [r5, #0]
 800301c:	0601      	lsls	r1, r0, #24
 800301e:	d501      	bpl.n	8003024 <_printf_i+0xec>
 8003020:	681e      	ldr	r6, [r3, #0]
 8003022:	e002      	b.n	800302a <_printf_i+0xf2>
 8003024:	0646      	lsls	r6, r0, #25
 8003026:	d5fb      	bpl.n	8003020 <_printf_i+0xe8>
 8003028:	881e      	ldrh	r6, [r3, #0]
 800302a:	2f6f      	cmp	r7, #111	; 0x6f
 800302c:	bf0c      	ite	eq
 800302e:	2308      	moveq	r3, #8
 8003030:	230a      	movne	r3, #10
 8003032:	4852      	ldr	r0, [pc, #328]	; (800317c <_printf_i+0x244>)
 8003034:	2100      	movs	r1, #0
 8003036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800303a:	6865      	ldr	r5, [r4, #4]
 800303c:	2d00      	cmp	r5, #0
 800303e:	bfa8      	it	ge
 8003040:	6821      	ldrge	r1, [r4, #0]
 8003042:	60a5      	str	r5, [r4, #8]
 8003044:	bfa4      	itt	ge
 8003046:	f021 0104 	bicge.w	r1, r1, #4
 800304a:	6021      	strge	r1, [r4, #0]
 800304c:	b90e      	cbnz	r6, 8003052 <_printf_i+0x11a>
 800304e:	2d00      	cmp	r5, #0
 8003050:	d04d      	beq.n	80030ee <_printf_i+0x1b6>
 8003052:	4615      	mov	r5, r2
 8003054:	fbb6 f1f3 	udiv	r1, r6, r3
 8003058:	fb03 6711 	mls	r7, r3, r1, r6
 800305c:	5dc7      	ldrb	r7, [r0, r7]
 800305e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003062:	4637      	mov	r7, r6
 8003064:	42bb      	cmp	r3, r7
 8003066:	460e      	mov	r6, r1
 8003068:	d9f4      	bls.n	8003054 <_printf_i+0x11c>
 800306a:	2b08      	cmp	r3, #8
 800306c:	d10b      	bne.n	8003086 <_printf_i+0x14e>
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	07de      	lsls	r6, r3, #31
 8003072:	d508      	bpl.n	8003086 <_printf_i+0x14e>
 8003074:	6923      	ldr	r3, [r4, #16]
 8003076:	6861      	ldr	r1, [r4, #4]
 8003078:	4299      	cmp	r1, r3
 800307a:	bfde      	ittt	le
 800307c:	2330      	movle	r3, #48	; 0x30
 800307e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003082:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003086:	1b52      	subs	r2, r2, r5
 8003088:	6122      	str	r2, [r4, #16]
 800308a:	464b      	mov	r3, r9
 800308c:	4621      	mov	r1, r4
 800308e:	4640      	mov	r0, r8
 8003090:	f8cd a000 	str.w	sl, [sp]
 8003094:	aa03      	add	r2, sp, #12
 8003096:	f7ff fedf 	bl	8002e58 <_printf_common>
 800309a:	3001      	adds	r0, #1
 800309c:	d14c      	bne.n	8003138 <_printf_i+0x200>
 800309e:	f04f 30ff 	mov.w	r0, #4294967295
 80030a2:	b004      	add	sp, #16
 80030a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a8:	4834      	ldr	r0, [pc, #208]	; (800317c <_printf_i+0x244>)
 80030aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030ae:	6829      	ldr	r1, [r5, #0]
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80030b6:	6029      	str	r1, [r5, #0]
 80030b8:	061d      	lsls	r5, r3, #24
 80030ba:	d514      	bpl.n	80030e6 <_printf_i+0x1ae>
 80030bc:	07df      	lsls	r7, r3, #31
 80030be:	bf44      	itt	mi
 80030c0:	f043 0320 	orrmi.w	r3, r3, #32
 80030c4:	6023      	strmi	r3, [r4, #0]
 80030c6:	b91e      	cbnz	r6, 80030d0 <_printf_i+0x198>
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	f023 0320 	bic.w	r3, r3, #32
 80030ce:	6023      	str	r3, [r4, #0]
 80030d0:	2310      	movs	r3, #16
 80030d2:	e7af      	b.n	8003034 <_printf_i+0xfc>
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	f043 0320 	orr.w	r3, r3, #32
 80030da:	6023      	str	r3, [r4, #0]
 80030dc:	2378      	movs	r3, #120	; 0x78
 80030de:	4828      	ldr	r0, [pc, #160]	; (8003180 <_printf_i+0x248>)
 80030e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030e4:	e7e3      	b.n	80030ae <_printf_i+0x176>
 80030e6:	0659      	lsls	r1, r3, #25
 80030e8:	bf48      	it	mi
 80030ea:	b2b6      	uxthmi	r6, r6
 80030ec:	e7e6      	b.n	80030bc <_printf_i+0x184>
 80030ee:	4615      	mov	r5, r2
 80030f0:	e7bb      	b.n	800306a <_printf_i+0x132>
 80030f2:	682b      	ldr	r3, [r5, #0]
 80030f4:	6826      	ldr	r6, [r4, #0]
 80030f6:	1d18      	adds	r0, r3, #4
 80030f8:	6961      	ldr	r1, [r4, #20]
 80030fa:	6028      	str	r0, [r5, #0]
 80030fc:	0635      	lsls	r5, r6, #24
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	d501      	bpl.n	8003106 <_printf_i+0x1ce>
 8003102:	6019      	str	r1, [r3, #0]
 8003104:	e002      	b.n	800310c <_printf_i+0x1d4>
 8003106:	0670      	lsls	r0, r6, #25
 8003108:	d5fb      	bpl.n	8003102 <_printf_i+0x1ca>
 800310a:	8019      	strh	r1, [r3, #0]
 800310c:	2300      	movs	r3, #0
 800310e:	4615      	mov	r5, r2
 8003110:	6123      	str	r3, [r4, #16]
 8003112:	e7ba      	b.n	800308a <_printf_i+0x152>
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	2100      	movs	r1, #0
 8003118:	1d1a      	adds	r2, r3, #4
 800311a:	602a      	str	r2, [r5, #0]
 800311c:	681d      	ldr	r5, [r3, #0]
 800311e:	6862      	ldr	r2, [r4, #4]
 8003120:	4628      	mov	r0, r5
 8003122:	f000 f82f 	bl	8003184 <memchr>
 8003126:	b108      	cbz	r0, 800312c <_printf_i+0x1f4>
 8003128:	1b40      	subs	r0, r0, r5
 800312a:	6060      	str	r0, [r4, #4]
 800312c:	6863      	ldr	r3, [r4, #4]
 800312e:	6123      	str	r3, [r4, #16]
 8003130:	2300      	movs	r3, #0
 8003132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003136:	e7a8      	b.n	800308a <_printf_i+0x152>
 8003138:	462a      	mov	r2, r5
 800313a:	4649      	mov	r1, r9
 800313c:	4640      	mov	r0, r8
 800313e:	6923      	ldr	r3, [r4, #16]
 8003140:	47d0      	blx	sl
 8003142:	3001      	adds	r0, #1
 8003144:	d0ab      	beq.n	800309e <_printf_i+0x166>
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	079b      	lsls	r3, r3, #30
 800314a:	d413      	bmi.n	8003174 <_printf_i+0x23c>
 800314c:	68e0      	ldr	r0, [r4, #12]
 800314e:	9b03      	ldr	r3, [sp, #12]
 8003150:	4298      	cmp	r0, r3
 8003152:	bfb8      	it	lt
 8003154:	4618      	movlt	r0, r3
 8003156:	e7a4      	b.n	80030a2 <_printf_i+0x16a>
 8003158:	2301      	movs	r3, #1
 800315a:	4632      	mov	r2, r6
 800315c:	4649      	mov	r1, r9
 800315e:	4640      	mov	r0, r8
 8003160:	47d0      	blx	sl
 8003162:	3001      	adds	r0, #1
 8003164:	d09b      	beq.n	800309e <_printf_i+0x166>
 8003166:	3501      	adds	r5, #1
 8003168:	68e3      	ldr	r3, [r4, #12]
 800316a:	9903      	ldr	r1, [sp, #12]
 800316c:	1a5b      	subs	r3, r3, r1
 800316e:	42ab      	cmp	r3, r5
 8003170:	dcf2      	bgt.n	8003158 <_printf_i+0x220>
 8003172:	e7eb      	b.n	800314c <_printf_i+0x214>
 8003174:	2500      	movs	r5, #0
 8003176:	f104 0619 	add.w	r6, r4, #25
 800317a:	e7f5      	b.n	8003168 <_printf_i+0x230>
 800317c:	080034f5 	.word	0x080034f5
 8003180:	08003506 	.word	0x08003506

08003184 <memchr>:
 8003184:	4603      	mov	r3, r0
 8003186:	b510      	push	{r4, lr}
 8003188:	b2c9      	uxtb	r1, r1
 800318a:	4402      	add	r2, r0
 800318c:	4293      	cmp	r3, r2
 800318e:	4618      	mov	r0, r3
 8003190:	d101      	bne.n	8003196 <memchr+0x12>
 8003192:	2000      	movs	r0, #0
 8003194:	e003      	b.n	800319e <memchr+0x1a>
 8003196:	7804      	ldrb	r4, [r0, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	428c      	cmp	r4, r1
 800319c:	d1f6      	bne.n	800318c <memchr+0x8>
 800319e:	bd10      	pop	{r4, pc}

080031a0 <memcpy>:
 80031a0:	440a      	add	r2, r1
 80031a2:	4291      	cmp	r1, r2
 80031a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80031a8:	d100      	bne.n	80031ac <memcpy+0xc>
 80031aa:	4770      	bx	lr
 80031ac:	b510      	push	{r4, lr}
 80031ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031b2:	4291      	cmp	r1, r2
 80031b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031b8:	d1f9      	bne.n	80031ae <memcpy+0xe>
 80031ba:	bd10      	pop	{r4, pc}

080031bc <memmove>:
 80031bc:	4288      	cmp	r0, r1
 80031be:	b510      	push	{r4, lr}
 80031c0:	eb01 0402 	add.w	r4, r1, r2
 80031c4:	d902      	bls.n	80031cc <memmove+0x10>
 80031c6:	4284      	cmp	r4, r0
 80031c8:	4623      	mov	r3, r4
 80031ca:	d807      	bhi.n	80031dc <memmove+0x20>
 80031cc:	1e43      	subs	r3, r0, #1
 80031ce:	42a1      	cmp	r1, r4
 80031d0:	d008      	beq.n	80031e4 <memmove+0x28>
 80031d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031da:	e7f8      	b.n	80031ce <memmove+0x12>
 80031dc:	4601      	mov	r1, r0
 80031de:	4402      	add	r2, r0
 80031e0:	428a      	cmp	r2, r1
 80031e2:	d100      	bne.n	80031e6 <memmove+0x2a>
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031ee:	e7f7      	b.n	80031e0 <memmove+0x24>

080031f0 <_free_r>:
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	4605      	mov	r5, r0
 80031f4:	2900      	cmp	r1, #0
 80031f6:	d040      	beq.n	800327a <_free_r+0x8a>
 80031f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031fc:	1f0c      	subs	r4, r1, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bfb8      	it	lt
 8003202:	18e4      	addlt	r4, r4, r3
 8003204:	f000 f910 	bl	8003428 <__malloc_lock>
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <_free_r+0x8c>)
 800320a:	6813      	ldr	r3, [r2, #0]
 800320c:	b933      	cbnz	r3, 800321c <_free_r+0x2c>
 800320e:	6063      	str	r3, [r4, #4]
 8003210:	6014      	str	r4, [r2, #0]
 8003212:	4628      	mov	r0, r5
 8003214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003218:	f000 b90c 	b.w	8003434 <__malloc_unlock>
 800321c:	42a3      	cmp	r3, r4
 800321e:	d908      	bls.n	8003232 <_free_r+0x42>
 8003220:	6820      	ldr	r0, [r4, #0]
 8003222:	1821      	adds	r1, r4, r0
 8003224:	428b      	cmp	r3, r1
 8003226:	bf01      	itttt	eq
 8003228:	6819      	ldreq	r1, [r3, #0]
 800322a:	685b      	ldreq	r3, [r3, #4]
 800322c:	1809      	addeq	r1, r1, r0
 800322e:	6021      	streq	r1, [r4, #0]
 8003230:	e7ed      	b.n	800320e <_free_r+0x1e>
 8003232:	461a      	mov	r2, r3
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	b10b      	cbz	r3, 800323c <_free_r+0x4c>
 8003238:	42a3      	cmp	r3, r4
 800323a:	d9fa      	bls.n	8003232 <_free_r+0x42>
 800323c:	6811      	ldr	r1, [r2, #0]
 800323e:	1850      	adds	r0, r2, r1
 8003240:	42a0      	cmp	r0, r4
 8003242:	d10b      	bne.n	800325c <_free_r+0x6c>
 8003244:	6820      	ldr	r0, [r4, #0]
 8003246:	4401      	add	r1, r0
 8003248:	1850      	adds	r0, r2, r1
 800324a:	4283      	cmp	r3, r0
 800324c:	6011      	str	r1, [r2, #0]
 800324e:	d1e0      	bne.n	8003212 <_free_r+0x22>
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4401      	add	r1, r0
 8003256:	6011      	str	r1, [r2, #0]
 8003258:	6053      	str	r3, [r2, #4]
 800325a:	e7da      	b.n	8003212 <_free_r+0x22>
 800325c:	d902      	bls.n	8003264 <_free_r+0x74>
 800325e:	230c      	movs	r3, #12
 8003260:	602b      	str	r3, [r5, #0]
 8003262:	e7d6      	b.n	8003212 <_free_r+0x22>
 8003264:	6820      	ldr	r0, [r4, #0]
 8003266:	1821      	adds	r1, r4, r0
 8003268:	428b      	cmp	r3, r1
 800326a:	bf01      	itttt	eq
 800326c:	6819      	ldreq	r1, [r3, #0]
 800326e:	685b      	ldreq	r3, [r3, #4]
 8003270:	1809      	addeq	r1, r1, r0
 8003272:	6021      	streq	r1, [r4, #0]
 8003274:	6063      	str	r3, [r4, #4]
 8003276:	6054      	str	r4, [r2, #4]
 8003278:	e7cb      	b.n	8003212 <_free_r+0x22>
 800327a:	bd38      	pop	{r3, r4, r5, pc}
 800327c:	200001e4 	.word	0x200001e4

08003280 <sbrk_aligned>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	4e0e      	ldr	r6, [pc, #56]	; (80032bc <sbrk_aligned+0x3c>)
 8003284:	460c      	mov	r4, r1
 8003286:	6831      	ldr	r1, [r6, #0]
 8003288:	4605      	mov	r5, r0
 800328a:	b911      	cbnz	r1, 8003292 <sbrk_aligned+0x12>
 800328c:	f000 f8bc 	bl	8003408 <_sbrk_r>
 8003290:	6030      	str	r0, [r6, #0]
 8003292:	4621      	mov	r1, r4
 8003294:	4628      	mov	r0, r5
 8003296:	f000 f8b7 	bl	8003408 <_sbrk_r>
 800329a:	1c43      	adds	r3, r0, #1
 800329c:	d00a      	beq.n	80032b4 <sbrk_aligned+0x34>
 800329e:	1cc4      	adds	r4, r0, #3
 80032a0:	f024 0403 	bic.w	r4, r4, #3
 80032a4:	42a0      	cmp	r0, r4
 80032a6:	d007      	beq.n	80032b8 <sbrk_aligned+0x38>
 80032a8:	1a21      	subs	r1, r4, r0
 80032aa:	4628      	mov	r0, r5
 80032ac:	f000 f8ac 	bl	8003408 <_sbrk_r>
 80032b0:	3001      	adds	r0, #1
 80032b2:	d101      	bne.n	80032b8 <sbrk_aligned+0x38>
 80032b4:	f04f 34ff 	mov.w	r4, #4294967295
 80032b8:	4620      	mov	r0, r4
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
 80032bc:	200001e8 	.word	0x200001e8

080032c0 <_malloc_r>:
 80032c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032c4:	1ccd      	adds	r5, r1, #3
 80032c6:	f025 0503 	bic.w	r5, r5, #3
 80032ca:	3508      	adds	r5, #8
 80032cc:	2d0c      	cmp	r5, #12
 80032ce:	bf38      	it	cc
 80032d0:	250c      	movcc	r5, #12
 80032d2:	2d00      	cmp	r5, #0
 80032d4:	4607      	mov	r7, r0
 80032d6:	db01      	blt.n	80032dc <_malloc_r+0x1c>
 80032d8:	42a9      	cmp	r1, r5
 80032da:	d905      	bls.n	80032e8 <_malloc_r+0x28>
 80032dc:	230c      	movs	r3, #12
 80032de:	2600      	movs	r6, #0
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4630      	mov	r0, r6
 80032e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032e8:	4e2e      	ldr	r6, [pc, #184]	; (80033a4 <_malloc_r+0xe4>)
 80032ea:	f000 f89d 	bl	8003428 <__malloc_lock>
 80032ee:	6833      	ldr	r3, [r6, #0]
 80032f0:	461c      	mov	r4, r3
 80032f2:	bb34      	cbnz	r4, 8003342 <_malloc_r+0x82>
 80032f4:	4629      	mov	r1, r5
 80032f6:	4638      	mov	r0, r7
 80032f8:	f7ff ffc2 	bl	8003280 <sbrk_aligned>
 80032fc:	1c43      	adds	r3, r0, #1
 80032fe:	4604      	mov	r4, r0
 8003300:	d14d      	bne.n	800339e <_malloc_r+0xde>
 8003302:	6834      	ldr	r4, [r6, #0]
 8003304:	4626      	mov	r6, r4
 8003306:	2e00      	cmp	r6, #0
 8003308:	d140      	bne.n	800338c <_malloc_r+0xcc>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	4631      	mov	r1, r6
 800330e:	4638      	mov	r0, r7
 8003310:	eb04 0803 	add.w	r8, r4, r3
 8003314:	f000 f878 	bl	8003408 <_sbrk_r>
 8003318:	4580      	cmp	r8, r0
 800331a:	d13a      	bne.n	8003392 <_malloc_r+0xd2>
 800331c:	6821      	ldr	r1, [r4, #0]
 800331e:	3503      	adds	r5, #3
 8003320:	1a6d      	subs	r5, r5, r1
 8003322:	f025 0503 	bic.w	r5, r5, #3
 8003326:	3508      	adds	r5, #8
 8003328:	2d0c      	cmp	r5, #12
 800332a:	bf38      	it	cc
 800332c:	250c      	movcc	r5, #12
 800332e:	4638      	mov	r0, r7
 8003330:	4629      	mov	r1, r5
 8003332:	f7ff ffa5 	bl	8003280 <sbrk_aligned>
 8003336:	3001      	adds	r0, #1
 8003338:	d02b      	beq.n	8003392 <_malloc_r+0xd2>
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	442b      	add	r3, r5
 800333e:	6023      	str	r3, [r4, #0]
 8003340:	e00e      	b.n	8003360 <_malloc_r+0xa0>
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	1b52      	subs	r2, r2, r5
 8003346:	d41e      	bmi.n	8003386 <_malloc_r+0xc6>
 8003348:	2a0b      	cmp	r2, #11
 800334a:	d916      	bls.n	800337a <_malloc_r+0xba>
 800334c:	1961      	adds	r1, r4, r5
 800334e:	42a3      	cmp	r3, r4
 8003350:	6025      	str	r5, [r4, #0]
 8003352:	bf18      	it	ne
 8003354:	6059      	strne	r1, [r3, #4]
 8003356:	6863      	ldr	r3, [r4, #4]
 8003358:	bf08      	it	eq
 800335a:	6031      	streq	r1, [r6, #0]
 800335c:	5162      	str	r2, [r4, r5]
 800335e:	604b      	str	r3, [r1, #4]
 8003360:	4638      	mov	r0, r7
 8003362:	f104 060b 	add.w	r6, r4, #11
 8003366:	f000 f865 	bl	8003434 <__malloc_unlock>
 800336a:	f026 0607 	bic.w	r6, r6, #7
 800336e:	1d23      	adds	r3, r4, #4
 8003370:	1af2      	subs	r2, r6, r3
 8003372:	d0b6      	beq.n	80032e2 <_malloc_r+0x22>
 8003374:	1b9b      	subs	r3, r3, r6
 8003376:	50a3      	str	r3, [r4, r2]
 8003378:	e7b3      	b.n	80032e2 <_malloc_r+0x22>
 800337a:	6862      	ldr	r2, [r4, #4]
 800337c:	42a3      	cmp	r3, r4
 800337e:	bf0c      	ite	eq
 8003380:	6032      	streq	r2, [r6, #0]
 8003382:	605a      	strne	r2, [r3, #4]
 8003384:	e7ec      	b.n	8003360 <_malloc_r+0xa0>
 8003386:	4623      	mov	r3, r4
 8003388:	6864      	ldr	r4, [r4, #4]
 800338a:	e7b2      	b.n	80032f2 <_malloc_r+0x32>
 800338c:	4634      	mov	r4, r6
 800338e:	6876      	ldr	r6, [r6, #4]
 8003390:	e7b9      	b.n	8003306 <_malloc_r+0x46>
 8003392:	230c      	movs	r3, #12
 8003394:	4638      	mov	r0, r7
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	f000 f84c 	bl	8003434 <__malloc_unlock>
 800339c:	e7a1      	b.n	80032e2 <_malloc_r+0x22>
 800339e:	6025      	str	r5, [r4, #0]
 80033a0:	e7de      	b.n	8003360 <_malloc_r+0xa0>
 80033a2:	bf00      	nop
 80033a4:	200001e4 	.word	0x200001e4

080033a8 <_realloc_r>:
 80033a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ac:	4680      	mov	r8, r0
 80033ae:	4614      	mov	r4, r2
 80033b0:	460e      	mov	r6, r1
 80033b2:	b921      	cbnz	r1, 80033be <_realloc_r+0x16>
 80033b4:	4611      	mov	r1, r2
 80033b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033ba:	f7ff bf81 	b.w	80032c0 <_malloc_r>
 80033be:	b92a      	cbnz	r2, 80033cc <_realloc_r+0x24>
 80033c0:	f7ff ff16 	bl	80031f0 <_free_r>
 80033c4:	4625      	mov	r5, r4
 80033c6:	4628      	mov	r0, r5
 80033c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033cc:	f000 f838 	bl	8003440 <_malloc_usable_size_r>
 80033d0:	4284      	cmp	r4, r0
 80033d2:	4607      	mov	r7, r0
 80033d4:	d802      	bhi.n	80033dc <_realloc_r+0x34>
 80033d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80033da:	d812      	bhi.n	8003402 <_realloc_r+0x5a>
 80033dc:	4621      	mov	r1, r4
 80033de:	4640      	mov	r0, r8
 80033e0:	f7ff ff6e 	bl	80032c0 <_malloc_r>
 80033e4:	4605      	mov	r5, r0
 80033e6:	2800      	cmp	r0, #0
 80033e8:	d0ed      	beq.n	80033c6 <_realloc_r+0x1e>
 80033ea:	42bc      	cmp	r4, r7
 80033ec:	4622      	mov	r2, r4
 80033ee:	4631      	mov	r1, r6
 80033f0:	bf28      	it	cs
 80033f2:	463a      	movcs	r2, r7
 80033f4:	f7ff fed4 	bl	80031a0 <memcpy>
 80033f8:	4631      	mov	r1, r6
 80033fa:	4640      	mov	r0, r8
 80033fc:	f7ff fef8 	bl	80031f0 <_free_r>
 8003400:	e7e1      	b.n	80033c6 <_realloc_r+0x1e>
 8003402:	4635      	mov	r5, r6
 8003404:	e7df      	b.n	80033c6 <_realloc_r+0x1e>
	...

08003408 <_sbrk_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	2300      	movs	r3, #0
 800340c:	4d05      	ldr	r5, [pc, #20]	; (8003424 <_sbrk_r+0x1c>)
 800340e:	4604      	mov	r4, r0
 8003410:	4608      	mov	r0, r1
 8003412:	602b      	str	r3, [r5, #0]
 8003414:	f7fd fa46 	bl	80008a4 <_sbrk>
 8003418:	1c43      	adds	r3, r0, #1
 800341a:	d102      	bne.n	8003422 <_sbrk_r+0x1a>
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	b103      	cbz	r3, 8003422 <_sbrk_r+0x1a>
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	bd38      	pop	{r3, r4, r5, pc}
 8003424:	200001ec 	.word	0x200001ec

08003428 <__malloc_lock>:
 8003428:	4801      	ldr	r0, [pc, #4]	; (8003430 <__malloc_lock+0x8>)
 800342a:	f000 b811 	b.w	8003450 <__retarget_lock_acquire_recursive>
 800342e:	bf00      	nop
 8003430:	200001f0 	.word	0x200001f0

08003434 <__malloc_unlock>:
 8003434:	4801      	ldr	r0, [pc, #4]	; (800343c <__malloc_unlock+0x8>)
 8003436:	f000 b80c 	b.w	8003452 <__retarget_lock_release_recursive>
 800343a:	bf00      	nop
 800343c:	200001f0 	.word	0x200001f0

08003440 <_malloc_usable_size_r>:
 8003440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003444:	1f18      	subs	r0, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	bfbc      	itt	lt
 800344a:	580b      	ldrlt	r3, [r1, r0]
 800344c:	18c0      	addlt	r0, r0, r3
 800344e:	4770      	bx	lr

08003450 <__retarget_lock_acquire_recursive>:
 8003450:	4770      	bx	lr

08003452 <__retarget_lock_release_recursive>:
 8003452:	4770      	bx	lr

08003454 <_init>:
 8003454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003456:	bf00      	nop
 8003458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345a:	bc08      	pop	{r3}
 800345c:	469e      	mov	lr, r3
 800345e:	4770      	bx	lr

08003460 <_fini>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	bf00      	nop
 8003464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003466:	bc08      	pop	{r3}
 8003468:	469e      	mov	lr, r3
 800346a:	4770      	bx	lr
