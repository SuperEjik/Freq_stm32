
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  080081d8  080081d8  000181d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b4  080086b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080086b4  080086b4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086b4  080086b4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080086bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001e0  0800889c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  0800889c  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7e8  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab1  00000000  00000000  0002a9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0002c4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002d0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183f1  00000000  00000000  0002dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be91  00000000  00000000  00046061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b806  00000000  00000000  00051ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd6f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c8  00000000  00000000  000dd748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080081bc 	.word	0x080081bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080081bc 	.word	0x080081bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <DWT_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void DWT_Init(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <DWT_Init+0x24>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <DWT_Init+0x24>)
 8000be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000be6:	6013      	str	r3, [r2, #0]
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <DWT_Init+0x28>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <DWT_Init+0x28>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	e000edfc 	.word	0xe000edfc
 8000c00:	e0001000 	.word	0xe0001000

08000c04 <delay_us>:

void delay_us(uint32_t us)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <delay_us+0x3c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <delay_us+0x40>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	0c9a      	lsrs	r2, r3, #18
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	fb02 f303 	mul.w	r3, r2, r3
 8000c1e:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <delay_us+0x44>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 8000c26:	bf00      	nop
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <delay_us+0x44>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d8fa      	bhi.n	8000c28 <delay_us+0x24>
}
 8000c32:	bf00      	nop
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000000 	.word	0x20000000
 8000c44:	431bde83 	.word	0x431bde83
 8000c48:	e0001000 	.word	0xe0001000
 8000c4c:	00000000 	.word	0x00000000

08000c50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c60:	d104      	bne.n	8000c6c <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
    	gu32_TIM2_OVC++;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c6a:	6013      	str	r3, [r2, #0]
    }

    if(htim == &htim1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d129      	bne.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x78>
    {
    	F_avg = (F_CLK/((long double)T_i/(long double)N));
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fbc3 	bl	8000404 <__aeabi_i2d>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fbbc 	bl	8000404 <__aeabi_i2d>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4620      	mov	r0, r4
 8000c92:	4629      	mov	r1, r5
 8000c94:	f7ff fd4a 	bl	800072c <__aeabi_ddiv>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	a10c      	add	r1, pc, #48	; (adr r1, 8000cd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ca2:	f7ff fd43 	bl	800072c <__aeabi_ddiv>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	490f      	ldr	r1, [pc, #60]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000cac:	e9c1 2300 	strd	r2, r3, [r1]

    	T_i = 0;
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
    	N = 0;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]

    	HAL_TIM_Base_Stop_IT(&htim1);
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000cbe:	f001 fc21 	bl	8002504 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Start_IT(&htim1);
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000cc4:	f001 fbcc 	bl	8002460 <HAL_TIM_Base_Start_IT>
    }
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd0:	00000000 	.word	0x00000000
 8000cd4:	41912a88 	.word	0x41912a88
 8000cd8:	200001fc 	.word	0x200001fc
 8000cdc:	20000210 	.word	0x20000210
 8000ce0:	20000200 	.word	0x20000200
 8000ce4:	20000204 	.word	0x20000204
 8000ce8:	20000208 	.word	0x20000208

08000cec <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // колбек по захвату
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfc:	d11c      	bne.n	8000d38 <HAL_TIM_IC_CaptureCallback+0x4c>
    {
            if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // RISING с LOW на HIGH
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7f1b      	ldrb	r3, [r3, #28]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d118      	bne.n	8000d38 <HAL_TIM_IC_CaptureCallback+0x4c>
            {
            		T_i = T_i + (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1) + ((gu32_TIM2_OVC - 1) * 65536) + 2);
 8000d06:	2100      	movs	r1, #0
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000d0a:	f002 f883 	bl	8002e14 <HAL_TIM_ReadCapturedValue>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	041b      	lsls	r3, r3, #16
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000d1c:	6812      	ldr	r2, [r2, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	3302      	adds	r3, #2
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000d26:	601a      	str	r2, [r3, #0]
            		gu32_TIM2_OVC = 0;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
            		N++;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_TIM_IC_CaptureCallback+0x60>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <HAL_TIM_IC_CaptureCallback+0x60>)
 8000d36:	6013      	str	r3, [r2, #0]
            }
    }
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000258 	.word	0x20000258
 8000d44:	200001fc 	.word	0x200001fc
 8000d48:	20000200 	.word	0x20000200
 8000d4c:	20000204 	.word	0x20000204

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 fbed 	bl	8001534 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8000d5a:	f7ff ff3d 	bl	8000bd8 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5e:	f000 f839 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d62:	f000 f9a3 	bl	80010ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d66:	f000 f977 	bl	8001058 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d6a:	f000 f8d9 	bl	8000f20 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000d6e:	f000 f87d 	bl	8000e6c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000d72:	4811      	ldr	r0, [pc, #68]	; (8000db8 <main+0x68>)
 8000d74:	f001 fb74 	bl	8002460 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d78:	4810      	ldr	r0, [pc, #64]	; (8000dbc <main+0x6c>)
 8000d7a:	f001 fb71 	bl	8002460 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);   // main channel
 8000d7e:	2100      	movs	r1, #0
 8000d80:	480e      	ldr	r0, [pc, #56]	; (8000dbc <main+0x6c>)
 8000d82:	f001 fc45 	bl	8002610 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  snprintf(trans_str, 96, "F_avg %.8Lf Hz\n", (long double)F_avg);
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <main+0x70>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	e9cd 2300 	strd	r2, r3, [sp]
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <main+0x74>)
 8000d92:	2160      	movs	r1, #96	; 0x60
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <main+0x78>)
 8000d96:	f003 fc21 	bl	80045dc <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000d9a:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <main+0x78>)
 8000d9c:	f7ff f9d8 	bl	8000150 <strlen>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da8:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <main+0x78>)
 8000daa:	4808      	ldr	r0, [pc, #32]	; (8000dcc <main+0x7c>)
 8000dac:	f002 fc07 	bl	80035be <HAL_UART_Transmit>
	  delay_us(1000000);
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <main+0x80>)
 8000db2:	f7ff ff27 	bl	8000c04 <delay_us>
	  snprintf(trans_str, 96, "F_avg %.8Lf Hz\n", (long double)F_avg);
 8000db6:	e7e6      	b.n	8000d86 <main+0x36>
 8000db8:	20000210 	.word	0x20000210
 8000dbc:	20000258 	.word	0x20000258
 8000dc0:	20000208 	.word	0x20000208
 8000dc4:	080081d8 	.word	0x080081d8
 8000dc8:	200002e4 	.word	0x200002e4
 8000dcc:	200002a0 	.word	0x200002a0
 8000dd0:	000f4240 	.word	0x000f4240

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b090      	sub	sp, #64	; 0x40
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0318 	add.w	r3, r7, #24
 8000dde:	2228      	movs	r2, #40	; 0x28
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fd80 	bl	80038e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fe7d 	bl	8001b1c <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e28:	f000 f978 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2102      	movs	r1, #2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 f8ea 	bl	8002020 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e52:	f000 f963 	bl	800111c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f001 f9c9 	bl	80021f4 <HAL_RCC_MCOConfig>
}
 8000e62:	bf00      	nop
 8000e64:	3740      	adds	r7, #64	; 0x40
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	463b      	mov	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <MX_TIM1_Init+0xac>)
 8000e8a:	4a24      	ldr	r2, [pc, #144]	; (8000f1c <MX_TIM1_Init+0xb0>)
 8000e8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_TIM1_Init+0xac>)
 8000e90:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000e94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <MX_TIM1_Init+0xac>)
 8000e98:	2210      	movs	r2, #16
 8000e9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <MX_TIM1_Init+0xac>)
 8000e9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ea2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_TIM1_Init+0xac>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_TIM1_Init+0xac>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_TIM1_Init+0xac>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eb6:	4818      	ldr	r0, [pc, #96]	; (8000f18 <MX_TIM1_Init+0xac>)
 8000eb8:	f001 fa82 	bl	80023c0 <HAL_TIM_Base_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ec2:	f000 f92b 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4811      	ldr	r0, [pc, #68]	; (8000f18 <MX_TIM1_Init+0xac>)
 8000ed4:	f001 fe97 	bl	8002c06 <HAL_TIM_ConfigClockSource>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ede:	f000 f91d 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_TIM1_Init+0xac>)
 8000ee6:	f001 fc99 	bl	800281c <HAL_TIM_OnePulse_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000ef0:	f000 f914 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_TIM1_Init+0xac>)
 8000f02:	f002 fa9f 	bl	8003444 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f0c:	f000 f906 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000210 	.word	0x20000210
 8000f1c:	40012c00 	.word	0x40012c00

08000f20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b090      	sub	sp, #64	; 0x40
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <MX_TIM2_Init+0x134>)
 8000f5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f62:	4b3c      	ldr	r3, [pc, #240]	; (8001054 <MX_TIM2_Init+0x134>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <MX_TIM2_Init+0x134>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f6e:	4b39      	ldr	r3, [pc, #228]	; (8001054 <MX_TIM2_Init+0x134>)
 8000f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <MX_TIM2_Init+0x134>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <MX_TIM2_Init+0x134>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f82:	4834      	ldr	r0, [pc, #208]	; (8001054 <MX_TIM2_Init+0x134>)
 8000f84:	f001 fa1c 	bl	80023c0 <HAL_TIM_Base_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f8e:	f000 f8c5 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	482d      	ldr	r0, [pc, #180]	; (8001054 <MX_TIM2_Init+0x134>)
 8000fa0:	f001 fe31 	bl	8002c06 <HAL_TIM_ConfigClockSource>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000faa:	f000 f8b7 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000fae:	4829      	ldr	r0, [pc, #164]	; (8001054 <MX_TIM2_Init+0x134>)
 8000fb0:	f001 fad6 	bl	8002560 <HAL_TIM_IC_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000fba:	f000 f8af 	bl	800111c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000fc2:	2350      	movs	r3, #80	; 0x50
 8000fc4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	481e      	ldr	r0, [pc, #120]	; (8001054 <MX_TIM2_Init+0x134>)
 8000fda:	f001 fed8 	bl	8002d8e <HAL_TIM_SlaveConfigSynchro>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000fe4:	f000 f89a 	bl	800111c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fec:	2301      	movs	r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4619      	mov	r1, r3
 8001000:	4814      	ldr	r0, [pc, #80]	; (8001054 <MX_TIM2_Init+0x134>)
 8001002:	f001 fd6c 	bl	8002ade <HAL_TIM_IC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800100c:	f000 f886 	bl	800111c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001010:	2302      	movs	r3, #2
 8001012:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2204      	movs	r2, #4
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <MX_TIM2_Init+0x134>)
 8001022:	f001 fd5c 	bl	8002ade <HAL_TIM_IC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 800102c:	f000 f876 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_TIM2_Init+0x134>)
 800103e:	f002 fa01 	bl	8003444 <HAL_TIMEx_MasterConfigSynchronization>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8001048:	f000 f868 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3740      	adds	r7, #64	; 0x40
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000258 	.word	0x20000258

08001058 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <MX_USART1_UART_Init+0x50>)
 8001060:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001090:	f002 fa48 	bl	8003524 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800109a:	f000 f83f 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200002a0 	.word	0x200002a0
 80010a8:	40013800 	.word	0x40013800

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_GPIO_Init+0x68>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a13      	ldr	r2, [pc, #76]	; (8001114 <MX_GPIO_Init+0x68>)
 80010c6:	f043 0320 	orr.w	r3, r3, #32
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_GPIO_Init+0x68>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_GPIO_Init+0x68>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <MX_GPIO_Init+0x68>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_GPIO_Init+0x68>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	4619      	mov	r1, r3
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_GPIO_Init+0x6c>)
 8001106:	f000 fb85 	bl	8001814 <HAL_GPIO_Init>

}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40010800 	.word	0x40010800

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>
	...

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_MspInit+0x5c>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <HAL_MspInit+0x5c>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_MspInit+0x5c>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_MspInit+0x5c>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_MspInit+0x5c>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_MspInit+0x5c>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_MspInit+0x60>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_MspInit+0x60>)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40021000 	.word	0x40021000
 8001188:	40010000 	.word	0x40010000

0800118c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0318 	add.w	r3, r7, #24
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_TIM_Base_MspInit+0xb4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d114      	bne.n	80011d6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <HAL_TIM_Base_MspInit+0xb8>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a24      	ldr	r2, [pc, #144]	; (8001244 <HAL_TIM_Base_MspInit+0xb8>)
 80011b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <HAL_TIM_Base_MspInit+0xb8>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2100      	movs	r1, #0
 80011c8:	2019      	movs	r0, #25
 80011ca:	f000 faec 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011ce:	2019      	movs	r0, #25
 80011d0:	f000 fb05 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011d4:	e030      	b.n	8001238 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM2)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011de:	d12b      	bne.n	8001238 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_TIM_Base_MspInit+0xb8>)
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_TIM_Base_MspInit+0xb8>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	61d3      	str	r3, [r2, #28]
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_TIM_Base_MspInit+0xb8>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_TIM_Base_MspInit+0xb8>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a11      	ldr	r2, [pc, #68]	; (8001244 <HAL_TIM_Base_MspInit+0xb8>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_TIM_Base_MspInit+0xb8>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0318 	add.w	r3, r7, #24
 8001220:	4619      	mov	r1, r3
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <HAL_TIM_Base_MspInit+0xbc>)
 8001224:	f000 faf6 	bl	8001814 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	201c      	movs	r0, #28
 800122e:	f000 faba 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001232:	201c      	movs	r0, #28
 8001234:	f000 fad3 	bl	80017de <HAL_NVIC_EnableIRQ>
}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40012c00 	.word	0x40012c00
 8001244:	40021000 	.word	0x40021000
 8001248:	40010800 	.word	0x40010800

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <HAL_UART_MspInit+0x8c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d131      	bne.n	80012d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_UART_MspInit+0x90>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <HAL_UART_MspInit+0x90>)
 8001272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_UART_MspInit+0x90>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_UART_MspInit+0x90>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_UART_MspInit+0x90>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_UART_MspInit+0x90>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800129c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	4619      	mov	r1, r3
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <HAL_UART_MspInit+0x94>)
 80012b2:	f000 faaf 	bl	8001814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_UART_MspInit+0x94>)
 80012cc:	f000 faa2 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010800 	.word	0x40010800

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <NMI_Handler+0x4>

080012ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler+0x4>

080012f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <UsageFault_Handler+0x4>

08001302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132a:	f000 f949 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <TIM1_UP_IRQHandler+0x10>)
 800133a:	f001 fac8 	bl	80028ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000210 	.word	0x20000210

08001348 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <TIM2_IRQHandler+0x10>)
 800134e:	f001 fabe 	bl	80028ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000258 	.word	0x20000258

0800135c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	return 1;
 8001360:	2301      	movs	r3, #1
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <_kill>:

int _kill(int pid, int sig)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001374:	f002 fa8e 	bl	8003894 <__errno>
 8001378:	4603      	mov	r3, r0
 800137a:	2216      	movs	r2, #22
 800137c:	601a      	str	r2, [r3, #0]
	return -1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <_exit>:

void _exit (int status)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001392:	f04f 31ff 	mov.w	r1, #4294967295
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffe7 	bl	800136a <_kill>
	while (1) {}		/* Make sure we hang here */
 800139c:	e7fe      	b.n	800139c <_exit+0x12>

0800139e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e00a      	b.n	80013c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013b0:	f3af 8000 	nop.w
 80013b4:	4601      	mov	r1, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	60ba      	str	r2, [r7, #8]
 80013bc:	b2ca      	uxtb	r2, r1
 80013be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3301      	adds	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbf0      	blt.n	80013b0 <_read+0x12>
	}

return len;
 80013ce:	687b      	ldr	r3, [r7, #4]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e009      	b.n	80013fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	60ba      	str	r2, [r7, #8]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	dbf1      	blt.n	80013ea <_write+0x12>
	}
	return len;
 8001406:	687b      	ldr	r3, [r7, #4]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_close>:

int _close(int file)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	return -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001436:	605a      	str	r2, [r3, #4]
	return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <_isatty>:

int _isatty(int file)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f002 f9f8 	bl	8003894 <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20005000 	.word	0x20005000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	20000344 	.word	0x20000344
 80014d8:	20000360 	.word	0x20000360

080014dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ea:	490d      	ldr	r1, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001500:	4c0a      	ldr	r4, [pc, #40]	; (800152c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800150e:	f7ff ffe5 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f002 f9c5 	bl	80038a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001516:	f7ff fc1b 	bl	8000d50 <main>
  bx lr
 800151a:	4770      	bx	lr
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001524:	080086bc 	.word	0x080086bc
  ldr r2, =_sbss
 8001528:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800152c:	2000035c 	.word	0x2000035c

08001530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC1_2_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_Init+0x28>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_Init+0x28>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 f923 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154a:	200f      	movs	r0, #15
 800154c:	f000 f808 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001550:	f7ff fdea 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40022000 	.word	0x40022000

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x54>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x58>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f93b 	bl	80017fa <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00e      	b.n	80015ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d80a      	bhi.n	80015aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f000 f903 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <HAL_InitTick+0x5c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000004 	.word	0x20000004

080015c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_IncTick+0x1c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_IncTick+0x20>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <HAL_IncTick+0x20>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000348 	.word	0x20000348

080015e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <HAL_GetTick+0x10>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	20000348 	.word	0x20000348

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db0b      	blt.n	8001686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	4906      	ldr	r1, [pc, #24]	; (8001690 <__NVIC_EnableIRQ+0x34>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2001      	movs	r0, #1
 800167e:	fa00 f202 	lsl.w	r2, r0, r2
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7ff ff90 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff2d 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff42 	bl	8001640 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff90 	bl	80016e8 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5f 	bl	8001694 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff35 	bl	800165c <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa2 	bl	800174c <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b480      	push	{r7}
 8001816:	b08b      	sub	sp, #44	; 0x2c
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001826:	e169      	b.n	8001afc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001828:	2201      	movs	r2, #1
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	429a      	cmp	r2, r3
 8001842:	f040 8158 	bne.w	8001af6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4a9a      	ldr	r2, [pc, #616]	; (8001ab4 <HAL_GPIO_Init+0x2a0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d05e      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001850:	4a98      	ldr	r2, [pc, #608]	; (8001ab4 <HAL_GPIO_Init+0x2a0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d875      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 8001856:	4a98      	ldr	r2, [pc, #608]	; (8001ab8 <HAL_GPIO_Init+0x2a4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d058      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 800185c:	4a96      	ldr	r2, [pc, #600]	; (8001ab8 <HAL_GPIO_Init+0x2a4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d86f      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 8001862:	4a96      	ldr	r2, [pc, #600]	; (8001abc <HAL_GPIO_Init+0x2a8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d052      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001868:	4a94      	ldr	r2, [pc, #592]	; (8001abc <HAL_GPIO_Init+0x2a8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d869      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 800186e:	4a94      	ldr	r2, [pc, #592]	; (8001ac0 <HAL_GPIO_Init+0x2ac>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d04c      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001874:	4a92      	ldr	r2, [pc, #584]	; (8001ac0 <HAL_GPIO_Init+0x2ac>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d863      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 800187a:	4a92      	ldr	r2, [pc, #584]	; (8001ac4 <HAL_GPIO_Init+0x2b0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d046      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001880:	4a90      	ldr	r2, [pc, #576]	; (8001ac4 <HAL_GPIO_Init+0x2b0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d85d      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 8001886:	2b12      	cmp	r3, #18
 8001888:	d82a      	bhi.n	80018e0 <HAL_GPIO_Init+0xcc>
 800188a:	2b12      	cmp	r3, #18
 800188c:	d859      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 800188e:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <HAL_GPIO_Init+0x80>)
 8001890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001894:	0800190f 	.word	0x0800190f
 8001898:	080018e9 	.word	0x080018e9
 800189c:	080018fb 	.word	0x080018fb
 80018a0:	0800193d 	.word	0x0800193d
 80018a4:	08001943 	.word	0x08001943
 80018a8:	08001943 	.word	0x08001943
 80018ac:	08001943 	.word	0x08001943
 80018b0:	08001943 	.word	0x08001943
 80018b4:	08001943 	.word	0x08001943
 80018b8:	08001943 	.word	0x08001943
 80018bc:	08001943 	.word	0x08001943
 80018c0:	08001943 	.word	0x08001943
 80018c4:	08001943 	.word	0x08001943
 80018c8:	08001943 	.word	0x08001943
 80018cc:	08001943 	.word	0x08001943
 80018d0:	08001943 	.word	0x08001943
 80018d4:	08001943 	.word	0x08001943
 80018d8:	080018f1 	.word	0x080018f1
 80018dc:	08001905 	.word	0x08001905
 80018e0:	4a79      	ldr	r2, [pc, #484]	; (8001ac8 <HAL_GPIO_Init+0x2b4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d013      	beq.n	800190e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018e6:	e02c      	b.n	8001942 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e029      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	3304      	adds	r3, #4
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e024      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	3308      	adds	r3, #8
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e01f      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	330c      	adds	r3, #12
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e01a      	b.n	8001944 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001916:	2304      	movs	r3, #4
 8001918:	623b      	str	r3, [r7, #32]
          break;
 800191a:	e013      	b.n	8001944 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001924:	2308      	movs	r3, #8
 8001926:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	611a      	str	r2, [r3, #16]
          break;
 800192e:	e009      	b.n	8001944 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001930:	2308      	movs	r3, #8
 8001932:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	615a      	str	r2, [r3, #20]
          break;
 800193a:	e003      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
          break;
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x130>
          break;
 8001942:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d801      	bhi.n	800194e <HAL_GPIO_Init+0x13a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	e001      	b.n	8001952 <HAL_GPIO_Init+0x13e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3304      	adds	r3, #4
 8001952:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2bff      	cmp	r3, #255	; 0xff
 8001958:	d802      	bhi.n	8001960 <HAL_GPIO_Init+0x14c>
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	e002      	b.n	8001966 <HAL_GPIO_Init+0x152>
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	3b08      	subs	r3, #8
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	210f      	movs	r1, #15
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	401a      	ands	r2, r3
 8001978:	6a39      	ldr	r1, [r7, #32]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	431a      	orrs	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80b1 	beq.w	8001af6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001994:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <HAL_GPIO_Init+0x2b8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a4c      	ldr	r2, [pc, #304]	; (8001acc <HAL_GPIO_Init+0x2b8>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b4a      	ldr	r3, [pc, #296]	; (8001acc <HAL_GPIO_Init+0x2b8>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ac:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2bc>)
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a40      	ldr	r2, [pc, #256]	; (8001ad4 <HAL_GPIO_Init+0x2c0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d013      	beq.n	8001a00 <HAL_GPIO_Init+0x1ec>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3f      	ldr	r2, [pc, #252]	; (8001ad8 <HAL_GPIO_Init+0x2c4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d00d      	beq.n	80019fc <HAL_GPIO_Init+0x1e8>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a3e      	ldr	r2, [pc, #248]	; (8001adc <HAL_GPIO_Init+0x2c8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d007      	beq.n	80019f8 <HAL_GPIO_Init+0x1e4>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a3d      	ldr	r2, [pc, #244]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d101      	bne.n	80019f4 <HAL_GPIO_Init+0x1e0>
 80019f0:	2303      	movs	r3, #3
 80019f2:	e006      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019f4:	2304      	movs	r3, #4
 80019f6:	e004      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e002      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 8001a00:	2300      	movs	r3, #0
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	f002 0203 	and.w	r2, r2, #3
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	4093      	lsls	r3, r2
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a12:	492f      	ldr	r1, [pc, #188]	; (8001ad0 <HAL_GPIO_Init+0x2bc>)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	492c      	ldr	r1, [pc, #176]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4928      	ldr	r1, [pc, #160]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	4922      	ldr	r1, [pc, #136]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	491e      	ldr	r1, [pc, #120]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	4918      	ldr	r1, [pc, #96]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	4914      	ldr	r1, [pc, #80]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d021      	beq.n	8001ae8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
 8001ab0:	e021      	b.n	8001af6 <HAL_GPIO_Init+0x2e2>
 8001ab2:	bf00      	nop
 8001ab4:	10320000 	.word	0x10320000
 8001ab8:	10310000 	.word	0x10310000
 8001abc:	10220000 	.word	0x10220000
 8001ac0:	10210000 	.word	0x10210000
 8001ac4:	10120000 	.word	0x10120000
 8001ac8:	10110000 	.word	0x10110000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	40010c00 	.word	0x40010c00
 8001adc:	40011000 	.word	0x40011000
 8001ae0:	40011400 	.word	0x40011400
 8001ae4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	4909      	ldr	r1, [pc, #36]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	3301      	adds	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f47f ae8e 	bne.w	8001828 <HAL_GPIO_Init+0x14>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	372c      	adds	r7, #44	; 0x2c
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	40010400 	.word	0x40010400

08001b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e272      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8087 	beq.w	8001c4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b3c:	4b92      	ldr	r3, [pc, #584]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d00c      	beq.n	8001b62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b48:	4b8f      	ldr	r3, [pc, #572]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d112      	bne.n	8001b7a <HAL_RCC_OscConfig+0x5e>
 8001b54:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b60:	d10b      	bne.n	8001b7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b62:	4b89      	ldr	r3, [pc, #548]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d06c      	beq.n	8001c48 <HAL_RCC_OscConfig+0x12c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d168      	bne.n	8001c48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e24c      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_OscConfig+0x76>
 8001b84:	4b80      	ldr	r3, [pc, #512]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a7f      	ldr	r2, [pc, #508]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	e02e      	b.n	8001bf0 <HAL_RCC_OscConfig+0xd4>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x98>
 8001b9a:	4b7b      	ldr	r3, [pc, #492]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a7a      	ldr	r2, [pc, #488]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b78      	ldr	r3, [pc, #480]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a77      	ldr	r2, [pc, #476]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e01d      	b.n	8001bf0 <HAL_RCC_OscConfig+0xd4>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xbc>
 8001bbe:	4b72      	ldr	r3, [pc, #456]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a71      	ldr	r2, [pc, #452]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b6f      	ldr	r3, [pc, #444]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6e      	ldr	r2, [pc, #440]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e00b      	b.n	8001bf0 <HAL_RCC_OscConfig+0xd4>
 8001bd8:	4b6b      	ldr	r3, [pc, #428]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a6a      	ldr	r2, [pc, #424]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b68      	ldr	r3, [pc, #416]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a67      	ldr	r2, [pc, #412]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fcf4 	bl	80015e4 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff fcf0 	bl	80015e4 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e200      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b5d      	ldr	r3, [pc, #372]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0xe4>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fce0 	bl	80015e4 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fcdc 	bl	80015e4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1ec      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x10c>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d063      	beq.n	8001d1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c56:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00b      	beq.n	8001c7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d11c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x18c>
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d116      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_RCC_OscConfig+0x176>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e1c0      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4939      	ldr	r1, [pc, #228]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	e03a      	b.n	8001d1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d020      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb0:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <HAL_RCC_OscConfig+0x270>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fc95 	bl	80015e4 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7ff fc91 	bl	80015e4 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e1a1      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4927      	ldr	r1, [pc, #156]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
 8001cf0:	e015      	b.n	8001d1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_RCC_OscConfig+0x270>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fc74 	bl	80015e4 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d00:	f7ff fc70 	bl	80015e4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e180      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d03a      	beq.n	8001da0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d019      	beq.n	8001d66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7ff fc54 	bl	80015e4 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d40:	f7ff fc50 	bl	80015e4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e160      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f000 fb10 	bl	8002384 <RCC_Delay>
 8001d64:	e01c      	b.n	8001da0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6c:	f7ff fc3a 	bl	80015e4 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d72:	e00f      	b.n	8001d94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d74:	f7ff fc36 	bl	80015e4 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d908      	bls.n	8001d94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e146      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	42420000 	.word	0x42420000
 8001d90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	4b92      	ldr	r3, [pc, #584]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1e9      	bne.n	8001d74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80a6 	beq.w	8001efa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db2:	4b8b      	ldr	r3, [pc, #556]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10d      	bne.n	8001dda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a87      	ldr	r2, [pc, #540]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b85      	ldr	r3, [pc, #532]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b82      	ldr	r3, [pc, #520]	; (8001fe4 <HAL_RCC_OscConfig+0x4c8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de6:	4b7f      	ldr	r3, [pc, #508]	; (8001fe4 <HAL_RCC_OscConfig+0x4c8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a7e      	ldr	r2, [pc, #504]	; (8001fe4 <HAL_RCC_OscConfig+0x4c8>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7ff fbf7 	bl	80015e4 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7ff fbf3 	bl	80015e4 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b64      	cmp	r3, #100	; 0x64
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e103      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b75      	ldr	r3, [pc, #468]	; (8001fe4 <HAL_RCC_OscConfig+0x4c8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x312>
 8001e20:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a6e      	ldr	r2, [pc, #440]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6213      	str	r3, [r2, #32]
 8001e2c:	e02d      	b.n	8001e8a <HAL_RCC_OscConfig+0x36e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x334>
 8001e36:	4b6a      	ldr	r3, [pc, #424]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a69      	ldr	r2, [pc, #420]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	6213      	str	r3, [r2, #32]
 8001e42:	4b67      	ldr	r3, [pc, #412]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a66      	ldr	r2, [pc, #408]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	f023 0304 	bic.w	r3, r3, #4
 8001e4c:	6213      	str	r3, [r2, #32]
 8001e4e:	e01c      	b.n	8001e8a <HAL_RCC_OscConfig+0x36e>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d10c      	bne.n	8001e72 <HAL_RCC_OscConfig+0x356>
 8001e58:	4b61      	ldr	r3, [pc, #388]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4a60      	ldr	r2, [pc, #384]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	f043 0304 	orr.w	r3, r3, #4
 8001e62:	6213      	str	r3, [r2, #32]
 8001e64:	4b5e      	ldr	r3, [pc, #376]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a5d      	ldr	r2, [pc, #372]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6213      	str	r3, [r2, #32]
 8001e70:	e00b      	b.n	8001e8a <HAL_RCC_OscConfig+0x36e>
 8001e72:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a5a      	ldr	r2, [pc, #360]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	6213      	str	r3, [r2, #32]
 8001e7e:	4b58      	ldr	r3, [pc, #352]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a57      	ldr	r2, [pc, #348]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	f023 0304 	bic.w	r3, r3, #4
 8001e88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d015      	beq.n	8001ebe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7ff fba7 	bl	80015e4 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7ff fba3 	bl	80015e4 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e0b1      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb0:	4b4b      	ldr	r3, [pc, #300]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ee      	beq.n	8001e9a <HAL_RCC_OscConfig+0x37e>
 8001ebc:	e014      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff fb91 	bl	80015e4 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7ff fb8d 	bl	80015e4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e09b      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001edc:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1ee      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d105      	bne.n	8001efa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eee:	4b3c      	ldr	r3, [pc, #240]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	4a3b      	ldr	r2, [pc, #236]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8087 	beq.w	8002012 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f04:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d061      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d146      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f18:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fb61 	bl	80015e4 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff fb5d 	bl	80015e4 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e06d      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f38:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4c:	d108      	bne.n	8001f60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4921      	ldr	r1, [pc, #132]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a19      	ldr	r1, [r3, #32]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	430b      	orrs	r3, r1
 8001f72:	491b      	ldr	r1, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff fb31 	bl	80015e4 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f86:	f7ff fb2d 	bl	80015e4 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e03d      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x46a>
 8001fa4:	e035      	b.n	8002012 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_RCC_OscConfig+0x4cc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fb1a 	bl	80015e4 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff fb16 	bl	80015e4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e026      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x498>
 8001fd2:	e01e      	b.n	8002012 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e019      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_OscConfig+0x500>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000

08002020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0d0      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d910      	bls.n	8002064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0207 	bic.w	r2, r3, #7
 800204a:	4965      	ldr	r1, [pc, #404]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0b8      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002086:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800209e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	494d      	ldr	r1, [pc, #308]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d040      	beq.n	8002140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d115      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e07f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e073      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06b      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f023 0203 	bic.w	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4936      	ldr	r1, [pc, #216]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002110:	f7ff fa68 	bl	80015e4 <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	e00a      	b.n	800212e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002118:	f7ff fa64 	bl	80015e4 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e053      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 020c 	and.w	r2, r3, #12
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	429a      	cmp	r2, r3
 800213e:	d1eb      	bne.n	8002118 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d210      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0207 	bic.w	r2, r3, #7
 8002156:	4922      	ldr	r1, [pc, #136]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e032      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4916      	ldr	r1, [pc, #88]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	490e      	ldr	r1, [pc, #56]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ae:	f000 f859 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	490a      	ldr	r1, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	5ccb      	ldrb	r3, [r1, r3]
 80021c2:	fa22 f303 	lsr.w	r3, r2, r3
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_RCC_ClockConfig+0x1cc>)
 80021c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1d0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f9c6 	bl	8001560 <HAL_InitTick>

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022000 	.word	0x40022000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	080081f8 	.word	0x080081f8
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002200:	f107 0318 	add.w	r3, r7, #24
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800221a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_RCC_MCOConfig+0x68>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_RCC_MCOConfig+0x68>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_MCOConfig+0x68>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002238:	f107 0318 	add.w	r3, r7, #24
 800223c:	4619      	mov	r1, r3
 800223e:	4808      	ldr	r0, [pc, #32]	; (8002260 <HAL_RCC_MCOConfig+0x6c>)
 8002240:	f7ff fae8 	bl	8001814 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_MCOConfig+0x68>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800224c:	4903      	ldr	r1, [pc, #12]	; (800225c <HAL_RCC_MCOConfig+0x68>)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	40010800 	.word	0x40010800

08002264 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002264:	b490      	push	{r4, r7}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800226a:	4b29      	ldr	r3, [pc, #164]	; (8002310 <HAL_RCC_GetSysClockFreq+0xac>)
 800226c:	1d3c      	adds	r4, r7, #4
 800226e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002274:	f240 2301 	movw	r3, #513	; 0x201
 8002278:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x40>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x46>
 80022a2:	e02b      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	e02b      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	3328      	adds	r3, #40	; 0x28
 80022b4:	443b      	add	r3, r7
 80022b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d012      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0c5b      	lsrs	r3, r3, #17
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	3328      	adds	r3, #40	; 0x28
 80022d2:	443b      	add	r3, r7
 80022d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022de:	fb03 f202 	mul.w	r2, r3, r2
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	e004      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	4a0b      	ldr	r2, [pc, #44]	; (800231c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	623b      	str	r3, [r7, #32]
      break;
 80022fa:	e002      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022fe:	623b      	str	r3, [r7, #32]
      break;
 8002300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002302:	6a3b      	ldr	r3, [r7, #32]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bc90      	pop	{r4, r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	080081e8 	.word	0x080081e8
 8002314:	40021000 	.word	0x40021000
 8002318:	007a1200 	.word	0x007a1200
 800231c:	003d0900 	.word	0x003d0900

08002320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002324:	4b02      	ldr	r3, [pc, #8]	; (8002330 <HAL_RCC_GetHCLKFreq+0x10>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	20000000 	.word	0x20000000

08002334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002338:	f7ff fff2 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4903      	ldr	r1, [pc, #12]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	08008208 	.word	0x08008208

0800235c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002360:	f7ff ffde 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	0adb      	lsrs	r3, r3, #11
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	4903      	ldr	r1, [pc, #12]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	08008208 	.word	0x08008208

08002384 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <RCC_Delay+0x34>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <RCC_Delay+0x38>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0a5b      	lsrs	r3, r3, #9
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023a0:	bf00      	nop
  }
  while (Delay --);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1e5a      	subs	r2, r3, #1
 80023a6:	60fa      	str	r2, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f9      	bne.n	80023a0 <RCC_Delay+0x1c>
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	20000000 	.word	0x20000000
 80023bc:	10624dd3 	.word	0x10624dd3

080023c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e041      	b.n	8002456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe fed0 	bl	800118c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	4619      	mov	r1, r3
 80023fe:	4610      	mov	r0, r2
 8002400:	f000 fd68 	bl	8002ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d001      	beq.n	8002478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e03a      	b.n	80024ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <HAL_TIM_Base_Start_IT+0x98>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00e      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x58>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a2:	d009      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x58>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a14      	ldr	r2, [pc, #80]	; (80024fc <HAL_TIM_Base_Start_IT+0x9c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x58>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a13      	ldr	r2, [pc, #76]	; (8002500 <HAL_TIM_Base_Start_IT+0xa0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d111      	bne.n	80024dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d010      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024da:	e007      	b.n	80024ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	40012c00 	.word	0x40012c00
 80024fc:	40000400 	.word	0x40000400
 8002500:	40000800 	.word	0x40000800

08002504 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	f241 1311 	movw	r3, #4369	; 0x1111
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10f      	bne.n	800254c <HAL_TIM_Base_Stop_IT+0x48>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6a1a      	ldr	r2, [r3, #32]
 8002532:	f240 4344 	movw	r3, #1092	; 0x444
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_TIM_Base_Stop_IT+0x48>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e041      	b.n	80025f6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f839 	bl	80025fe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f000 fc98 	bl	8002ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d104      	bne.n	800262a <HAL_TIM_IC_Start_IT+0x1a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002626:	b2db      	uxtb	r3, r3
 8002628:	e013      	b.n	8002652 <HAL_TIM_IC_Start_IT+0x42>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b04      	cmp	r3, #4
 800262e:	d104      	bne.n	800263a <HAL_TIM_IC_Start_IT+0x2a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002636:	b2db      	uxtb	r3, r3
 8002638:	e00b      	b.n	8002652 <HAL_TIM_IC_Start_IT+0x42>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b08      	cmp	r3, #8
 800263e:	d104      	bne.n	800264a <HAL_TIM_IC_Start_IT+0x3a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002646:	b2db      	uxtb	r3, r3
 8002648:	e003      	b.n	8002652 <HAL_TIM_IC_Start_IT+0x42>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002650:	b2db      	uxtb	r3, r3
 8002652:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d104      	bne.n	8002664 <HAL_TIM_IC_Start_IT+0x54>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e013      	b.n	800268c <HAL_TIM_IC_Start_IT+0x7c>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2b04      	cmp	r3, #4
 8002668:	d104      	bne.n	8002674 <HAL_TIM_IC_Start_IT+0x64>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e00b      	b.n	800268c <HAL_TIM_IC_Start_IT+0x7c>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b08      	cmp	r3, #8
 8002678:	d104      	bne.n	8002684 <HAL_TIM_IC_Start_IT+0x74>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e003      	b.n	800268c <HAL_TIM_IC_Start_IT+0x7c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800268a:	b2db      	uxtb	r3, r3
 800268c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d102      	bne.n	800269a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d001      	beq.n	800269e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e0b3      	b.n	8002806 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d104      	bne.n	80026ae <HAL_TIM_IC_Start_IT+0x9e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026ac:	e013      	b.n	80026d6 <HAL_TIM_IC_Start_IT+0xc6>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d104      	bne.n	80026be <HAL_TIM_IC_Start_IT+0xae>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026bc:	e00b      	b.n	80026d6 <HAL_TIM_IC_Start_IT+0xc6>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d104      	bne.n	80026ce <HAL_TIM_IC_Start_IT+0xbe>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026cc:	e003      	b.n	80026d6 <HAL_TIM_IC_Start_IT+0xc6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_IC_Start_IT+0xd6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026e4:	e013      	b.n	800270e <HAL_TIM_IC_Start_IT+0xfe>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d104      	bne.n	80026f6 <HAL_TIM_IC_Start_IT+0xe6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026f4:	e00b      	b.n	800270e <HAL_TIM_IC_Start_IT+0xfe>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d104      	bne.n	8002706 <HAL_TIM_IC_Start_IT+0xf6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002704:	e003      	b.n	800270e <HAL_TIM_IC_Start_IT+0xfe>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b0c      	cmp	r3, #12
 8002712:	d841      	bhi.n	8002798 <HAL_TIM_IC_Start_IT+0x188>
 8002714:	a201      	add	r2, pc, #4	; (adr r2, 800271c <HAL_TIM_IC_Start_IT+0x10c>)
 8002716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271a:	bf00      	nop
 800271c:	08002751 	.word	0x08002751
 8002720:	08002799 	.word	0x08002799
 8002724:	08002799 	.word	0x08002799
 8002728:	08002799 	.word	0x08002799
 800272c:	08002763 	.word	0x08002763
 8002730:	08002799 	.word	0x08002799
 8002734:	08002799 	.word	0x08002799
 8002738:	08002799 	.word	0x08002799
 800273c:	08002775 	.word	0x08002775
 8002740:	08002799 	.word	0x08002799
 8002744:	08002799 	.word	0x08002799
 8002748:	08002799 	.word	0x08002799
 800274c:	08002787 	.word	0x08002787
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0202 	orr.w	r2, r2, #2
 800275e:	60da      	str	r2, [r3, #12]
      break;
 8002760:	e01b      	b.n	800279a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0204 	orr.w	r2, r2, #4
 8002770:	60da      	str	r2, [r3, #12]
      break;
 8002772:	e012      	b.n	800279a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0208 	orr.w	r2, r2, #8
 8002782:	60da      	str	r2, [r3, #12]
      break;
 8002784:	e009      	b.n	800279a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0210 	orr.w	r2, r2, #16
 8002794:	60da      	str	r2, [r3, #12]
      break;
 8002796:	e000      	b.n	800279a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8002798:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2201      	movs	r2, #1
 80027a0:	6839      	ldr	r1, [r7, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fe29 	bl	80033fa <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_TIM_IC_Start_IT+0x200>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00e      	beq.n	80027d0 <HAL_TIM_IC_Start_IT+0x1c0>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ba:	d009      	beq.n	80027d0 <HAL_TIM_IC_Start_IT+0x1c0>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a14      	ldr	r2, [pc, #80]	; (8002814 <HAL_TIM_IC_Start_IT+0x204>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_TIM_IC_Start_IT+0x1c0>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a13      	ldr	r2, [pc, #76]	; (8002818 <HAL_TIM_IC_Start_IT+0x208>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d111      	bne.n	80027f4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d010      	beq.n	8002804 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f2:	e007      	b.n	8002804 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40012c00 	.word	0x40012c00
 8002814:	40000400 	.word	0x40000400
 8002818:	40000800 	.word	0x40000800

0800281c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e041      	b.n	80028b4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f839 	bl	80028bc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	4619      	mov	r1, r3
 800285c:	4610      	mov	r0, r2
 800285e:	f000 fb39 	bl	8002ed4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0208 	bic.w	r2, r2, #8
 8002870:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6819      	ldr	r1, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d122      	bne.n	800292a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d11b      	bne.n	800292a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f06f 0202 	mvn.w	r2, #2
 80028fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fe f9eb 	bl	8000cec <HAL_TIM_IC_CaptureCallback>
 8002916:	e005      	b.n	8002924 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fabf 	bl	8002e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fac5 	bl	8002eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d122      	bne.n	800297e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d11b      	bne.n	800297e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f06f 0204 	mvn.w	r2, #4
 800294e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7fe f9c1 	bl	8000cec <HAL_TIM_IC_CaptureCallback>
 800296a:	e005      	b.n	8002978 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fa95 	bl	8002e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa9b 	bl	8002eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d122      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b08      	cmp	r3, #8
 8002998:	d11b      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f06f 0208 	mvn.w	r2, #8
 80029a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2204      	movs	r2, #4
 80029a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7fe f997 	bl	8000cec <HAL_TIM_IC_CaptureCallback>
 80029be:	e005      	b.n	80029cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fa6b 	bl	8002e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa71 	bl	8002eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d122      	bne.n	8002a26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d11b      	bne.n	8002a26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f06f 0210 	mvn.w	r2, #16
 80029f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2208      	movs	r2, #8
 80029fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7fe f96d 	bl	8000cec <HAL_TIM_IC_CaptureCallback>
 8002a12:	e005      	b.n	8002a20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fa41 	bl	8002e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa47 	bl	8002eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d10e      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d107      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f06f 0201 	mvn.w	r2, #1
 8002a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7fe f8ff 	bl	8000c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d10e      	bne.n	8002a7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6a:	2b80      	cmp	r3, #128	; 0x80
 8002a6c:	d107      	bne.n	8002a7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fd4a 	bl	8003512 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d10e      	bne.n	8002aaa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d107      	bne.n	8002aaa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fa0b 	bl	8002ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d10e      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d107      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f06f 0220 	mvn.w	r2, #32
 8002ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fd15 	bl	8003500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e082      	b.n	8002bfe <HAL_TIM_IC_ConfigChannel+0x120>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d11b      	bne.n	8002b3e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f000 facd 	bl	80030b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 020c 	bic.w	r2, r2, #12
 8002b28:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6999      	ldr	r1, [r3, #24]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	619a      	str	r2, [r3, #24]
 8002b3c:	e05a      	b.n	8002bf4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d11c      	bne.n	8002b7e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f000 fb36 	bl	80031c4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b66:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6999      	ldr	r1, [r3, #24]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	021a      	lsls	r2, r3, #8
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	619a      	str	r2, [r3, #24]
 8002b7c:	e03a      	b.n	8002bf4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f000 fb81 	bl	800329a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 020c 	bic.w	r2, r2, #12
 8002ba6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69d9      	ldr	r1, [r3, #28]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	61da      	str	r2, [r3, #28]
 8002bba:	e01b      	b.n	8002bf4 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	6819      	ldr	r1, [r3, #0]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f000 fba0 	bl	8003310 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bde:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69d9      	ldr	r1, [r3, #28]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_TIM_ConfigClockSource+0x18>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e0b3      	b.n	8002d86 <HAL_TIM_ConfigClockSource+0x180>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c3c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c44:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c56:	d03e      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0xd0>
 8002c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5c:	f200 8087 	bhi.w	8002d6e <HAL_TIM_ConfigClockSource+0x168>
 8002c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c64:	f000 8085 	beq.w	8002d72 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6c:	d87f      	bhi.n	8002d6e <HAL_TIM_ConfigClockSource+0x168>
 8002c6e:	2b70      	cmp	r3, #112	; 0x70
 8002c70:	d01a      	beq.n	8002ca8 <HAL_TIM_ConfigClockSource+0xa2>
 8002c72:	2b70      	cmp	r3, #112	; 0x70
 8002c74:	d87b      	bhi.n	8002d6e <HAL_TIM_ConfigClockSource+0x168>
 8002c76:	2b60      	cmp	r3, #96	; 0x60
 8002c78:	d050      	beq.n	8002d1c <HAL_TIM_ConfigClockSource+0x116>
 8002c7a:	2b60      	cmp	r3, #96	; 0x60
 8002c7c:	d877      	bhi.n	8002d6e <HAL_TIM_ConfigClockSource+0x168>
 8002c7e:	2b50      	cmp	r3, #80	; 0x50
 8002c80:	d03c      	beq.n	8002cfc <HAL_TIM_ConfigClockSource+0xf6>
 8002c82:	2b50      	cmp	r3, #80	; 0x50
 8002c84:	d873      	bhi.n	8002d6e <HAL_TIM_ConfigClockSource+0x168>
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d058      	beq.n	8002d3c <HAL_TIM_ConfigClockSource+0x136>
 8002c8a:	2b40      	cmp	r3, #64	; 0x40
 8002c8c:	d86f      	bhi.n	8002d6e <HAL_TIM_ConfigClockSource+0x168>
 8002c8e:	2b30      	cmp	r3, #48	; 0x30
 8002c90:	d064      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x156>
 8002c92:	2b30      	cmp	r3, #48	; 0x30
 8002c94:	d86b      	bhi.n	8002d6e <HAL_TIM_ConfigClockSource+0x168>
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d060      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x156>
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d867      	bhi.n	8002d6e <HAL_TIM_ConfigClockSource+0x168>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d05c      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x156>
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	d05a      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ca6:	e062      	b.n	8002d6e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6899      	ldr	r1, [r3, #8]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f000 fb80 	bl	80033bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]
      break;
 8002cd4:	e04e      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f000 fb69 	bl	80033bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cf8:	609a      	str	r2, [r3, #8]
      break;
 8002cfa:	e03b      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f000 fa2d 	bl	8003168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2150      	movs	r1, #80	; 0x50
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fb37 	bl	8003388 <TIM_ITRx_SetConfig>
      break;
 8002d1a:	e02b      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f000 fa87 	bl	800323c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2160      	movs	r1, #96	; 0x60
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fb27 	bl	8003388 <TIM_ITRx_SetConfig>
      break;
 8002d3a:	e01b      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f000 fa0d 	bl	8003168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2140      	movs	r1, #64	; 0x40
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fb17 	bl	8003388 <TIM_ITRx_SetConfig>
      break;
 8002d5a:	e00b      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f000 fb0e 	bl	8003388 <TIM_ITRx_SetConfig>
        break;
 8002d6c:	e002      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d6e:	bf00      	nop
 8002d70:	e000      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e031      	b.n	8002e0a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002db6:	6839      	ldr	r1, [r7, #0]
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f8ed 	bl	8002f98 <TIM_SlaveTimer_SetConfig>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d009      	beq.n	8002dd8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e018      	b.n	8002e0a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002df6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b0c      	cmp	r3, #12
 8002e26:	d831      	bhi.n	8002e8c <HAL_TIM_ReadCapturedValue+0x78>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e65 	.word	0x08002e65
 8002e34:	08002e8d 	.word	0x08002e8d
 8002e38:	08002e8d 	.word	0x08002e8d
 8002e3c:	08002e8d 	.word	0x08002e8d
 8002e40:	08002e6f 	.word	0x08002e6f
 8002e44:	08002e8d 	.word	0x08002e8d
 8002e48:	08002e8d 	.word	0x08002e8d
 8002e4c:	08002e8d 	.word	0x08002e8d
 8002e50:	08002e79 	.word	0x08002e79
 8002e54:	08002e8d 	.word	0x08002e8d
 8002e58:	08002e8d 	.word	0x08002e8d
 8002e5c:	08002e8d 	.word	0x08002e8d
 8002e60:	08002e83 	.word	0x08002e83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6a:	60fb      	str	r3, [r7, #12]

      break;
 8002e6c:	e00f      	b.n	8002e8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	60fb      	str	r3, [r7, #12]

      break;
 8002e76:	e00a      	b.n	8002e8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	60fb      	str	r3, [r7, #12]

      break;
 8002e80:	e005      	b.n	8002e8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	60fb      	str	r3, [r7, #12]

      break;
 8002e8a:	e000      	b.n	8002e8e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002e8c:	bf00      	nop
  }

  return tmpreg;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop

08002e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
	...

08002ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <TIM_Base_SetConfig+0xb8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00b      	beq.n	8002f04 <TIM_Base_SetConfig+0x30>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef2:	d007      	beq.n	8002f04 <TIM_Base_SetConfig+0x30>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <TIM_Base_SetConfig+0xbc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d003      	beq.n	8002f04 <TIM_Base_SetConfig+0x30>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <TIM_Base_SetConfig+0xc0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d108      	bne.n	8002f16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <TIM_Base_SetConfig+0xb8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00b      	beq.n	8002f36 <TIM_Base_SetConfig+0x62>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f24:	d007      	beq.n	8002f36 <TIM_Base_SetConfig+0x62>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <TIM_Base_SetConfig+0xbc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d003      	beq.n	8002f36 <TIM_Base_SetConfig+0x62>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a18      	ldr	r2, [pc, #96]	; (8002f94 <TIM_Base_SetConfig+0xc0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d108      	bne.n	8002f48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a07      	ldr	r2, [pc, #28]	; (8002f8c <TIM_Base_SetConfig+0xb8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d103      	bne.n	8002f7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	615a      	str	r2, [r3, #20]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	40012c00 	.word	0x40012c00
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800

08002f98 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 0307 	bic.w	r3, r3, #7
 8002fc2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b70      	cmp	r3, #112	; 0x70
 8002fdc:	d01a      	beq.n	8003014 <TIM_SlaveTimer_SetConfig+0x7c>
 8002fde:	2b70      	cmp	r3, #112	; 0x70
 8002fe0:	d860      	bhi.n	80030a4 <TIM_SlaveTimer_SetConfig+0x10c>
 8002fe2:	2b60      	cmp	r3, #96	; 0x60
 8002fe4:	d054      	beq.n	8003090 <TIM_SlaveTimer_SetConfig+0xf8>
 8002fe6:	2b60      	cmp	r3, #96	; 0x60
 8002fe8:	d85c      	bhi.n	80030a4 <TIM_SlaveTimer_SetConfig+0x10c>
 8002fea:	2b50      	cmp	r3, #80	; 0x50
 8002fec:	d046      	beq.n	800307c <TIM_SlaveTimer_SetConfig+0xe4>
 8002fee:	2b50      	cmp	r3, #80	; 0x50
 8002ff0:	d858      	bhi.n	80030a4 <TIM_SlaveTimer_SetConfig+0x10c>
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d019      	beq.n	800302a <TIM_SlaveTimer_SetConfig+0x92>
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d854      	bhi.n	80030a4 <TIM_SlaveTimer_SetConfig+0x10c>
 8002ffa:	2b30      	cmp	r3, #48	; 0x30
 8002ffc:	d054      	beq.n	80030a8 <TIM_SlaveTimer_SetConfig+0x110>
 8002ffe:	2b30      	cmp	r3, #48	; 0x30
 8003000:	d850      	bhi.n	80030a4 <TIM_SlaveTimer_SetConfig+0x10c>
 8003002:	2b20      	cmp	r3, #32
 8003004:	d050      	beq.n	80030a8 <TIM_SlaveTimer_SetConfig+0x110>
 8003006:	2b20      	cmp	r3, #32
 8003008:	d84c      	bhi.n	80030a4 <TIM_SlaveTimer_SetConfig+0x10c>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d04c      	beq.n	80030a8 <TIM_SlaveTimer_SetConfig+0x110>
 800300e:	2b10      	cmp	r3, #16
 8003010:	d04a      	beq.n	80030a8 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003012:	e047      	b.n	80030a4 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68d9      	ldr	r1, [r3, #12]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f000 f9ca 	bl	80033bc <TIM_ETR_SetConfig>
      break;
 8003028:	e03f      	b.n	80030aa <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b05      	cmp	r3, #5
 8003030:	d101      	bne.n	8003036 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e03a      	b.n	80030ac <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a1a      	ldr	r2, [r3, #32]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800305c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	621a      	str	r2, [r3, #32]
      break;
 800307a:	e016      	b.n	80030aa <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6899      	ldr	r1, [r3, #8]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	461a      	mov	r2, r3
 800308a:	f000 f86d 	bl	8003168 <TIM_TI1_ConfigInputStage>
      break;
 800308e:	e00c      	b.n	80030aa <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	6899      	ldr	r1, [r3, #8]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	461a      	mov	r2, r3
 800309e:	f000 f8cd 	bl	800323c <TIM_TI2_ConfigInputStage>
      break;
 80030a2:	e002      	b.n	80030aa <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80030a4:	bf00      	nop
 80030a6:	e000      	b.n	80030aa <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80030a8:	bf00      	nop
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f023 0201 	bic.w	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a1f      	ldr	r2, [pc, #124]	; (800315c <TIM_TI1_SetConfig+0xa8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00b      	beq.n	80030fa <TIM_TI1_SetConfig+0x46>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e8:	d007      	beq.n	80030fa <TIM_TI1_SetConfig+0x46>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <TIM_TI1_SetConfig+0xac>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d003      	beq.n	80030fa <TIM_TI1_SetConfig+0x46>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4a1b      	ldr	r2, [pc, #108]	; (8003164 <TIM_TI1_SetConfig+0xb0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <TIM_TI1_SetConfig+0x4a>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <TIM_TI1_SetConfig+0x4c>
 80030fe:	2300      	movs	r3, #0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	e003      	b.n	800311e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	b2db      	uxtb	r3, r3
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f023 030a 	bic.w	r3, r3, #10
 8003138:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f003 030a 	and.w	r3, r3, #10
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	621a      	str	r2, [r3, #32]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	40012c00 	.word	0x40012c00
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800

08003168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f023 0201 	bic.w	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f023 030a 	bic.w	r3, r3, #10
 80031a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	621a      	str	r2, [r3, #32]
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0210 	bic.w	r2, r3, #16
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003202:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	031b      	lsls	r3, r3, #12
 8003208:	b29b      	uxth	r3, r3
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003216:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	621a      	str	r2, [r3, #32]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f023 0210 	bic.w	r2, r3, #16
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003266:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	031b      	lsls	r3, r3, #12
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003278:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	621a      	str	r2, [r3, #32]
}
 8003290:	bf00      	nop
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800329a:	b480      	push	{r7}
 800329c:	b087      	sub	sp, #28
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f023 0303 	bic.w	r3, r3, #3
 80032c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800334e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	031b      	lsls	r3, r3, #12
 8003354:	b29b      	uxth	r3, r3
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003362:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	031b      	lsls	r3, r3, #12
 8003368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f043 0307 	orr.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	609a      	str	r2, [r3, #8]
}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	021a      	lsls	r2, r3, #8
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	431a      	orrs	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	609a      	str	r2, [r3, #8]
}
 80033f0:	bf00      	nop
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b087      	sub	sp, #28
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2201      	movs	r2, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a1a      	ldr	r2, [r3, #32]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	43db      	mvns	r3, r3
 800341c:	401a      	ands	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a1a      	ldr	r2, [r3, #32]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	431a      	orrs	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	621a      	str	r2, [r3, #32]
}
 8003438:	bf00      	nop
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr
	...

08003444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003458:	2302      	movs	r3, #2
 800345a:	e046      	b.n	80034ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a16      	ldr	r2, [pc, #88]	; (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00e      	beq.n	80034be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a8:	d009      	beq.n	80034be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a10      	ldr	r2, [pc, #64]	; (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d10c      	bne.n	80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	40012c00 	.word	0x40012c00
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40000800 	.word	0x40000800

08003500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr

08003512 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e03f      	b.n	80035b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd fe7e 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2224      	movs	r2, #36	; 0x24
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f905 	bl	8003778 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800357c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800358c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800359c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b08a      	sub	sp, #40	; 0x28
 80035c2:	af02      	add	r7, sp, #8
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d17c      	bne.n	80036d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_UART_Transmit+0x2c>
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e075      	b.n	80036da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_UART_Transmit+0x3e>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e06e      	b.n	80036da <HAL_UART_Transmit+0x11c>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2221      	movs	r2, #33	; 0x21
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003612:	f7fd ffe7 	bl	80015e4 <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	88fa      	ldrh	r2, [r7, #6]
 8003622:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362c:	d108      	bne.n	8003640 <HAL_UART_Transmit+0x82>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d104      	bne.n	8003640 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	e003      	b.n	8003648 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003644:	2300      	movs	r3, #0
 8003646:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003650:	e02a      	b.n	80036a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2200      	movs	r2, #0
 800365a:	2180      	movs	r1, #128	; 0x80
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f840 	bl	80036e2 <UART_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e036      	b.n	80036da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10b      	bne.n	800368a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	3302      	adds	r3, #2
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	e007      	b.n	800369a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	3301      	adds	r3, #1
 8003698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1cf      	bne.n	8003652 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	2140      	movs	r1, #64	; 0x40
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f810 	bl	80036e2 <UART_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e006      	b.n	80036da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e000      	b.n	80036da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036d8:	2302      	movs	r3, #2
  }
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	603b      	str	r3, [r7, #0]
 80036ee:	4613      	mov	r3, r2
 80036f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f2:	e02c      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fa:	d028      	beq.n	800374e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <UART_WaitOnFlagUntilTimeout+0x30>
 8003702:	f7fd ff6f 	bl	80015e4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	429a      	cmp	r2, r3
 8003710:	d21d      	bcs.n	800374e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003720:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e00f      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4013      	ands	r3, r2
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	429a      	cmp	r2, r3
 800375c:	bf0c      	ite	eq
 800375e:	2301      	moveq	r3, #1
 8003760:	2300      	movne	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	429a      	cmp	r2, r3
 800376a:	d0c3      	beq.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037b2:	f023 030c 	bic.w	r3, r3, #12
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	430b      	orrs	r3, r1
 80037be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2c      	ldr	r2, [pc, #176]	; (800388c <UART_SetConfig+0x114>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d103      	bne.n	80037e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037e0:	f7fe fdbc 	bl	800235c <HAL_RCC_GetPCLK2Freq>
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	e002      	b.n	80037ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037e8:	f7fe fda4 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 80037ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009a      	lsls	r2, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	4a22      	ldr	r2, [pc, #136]	; (8003890 <UART_SetConfig+0x118>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	0119      	lsls	r1, r3, #4
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009a      	lsls	r2, r3, #2
 8003818:	441a      	add	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	fbb2 f2f3 	udiv	r2, r2, r3
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <UART_SetConfig+0x118>)
 8003826:	fba3 0302 	umull	r0, r3, r3, r2
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2064      	movs	r0, #100	; 0x64
 800382e:	fb00 f303 	mul.w	r3, r0, r3
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	3332      	adds	r3, #50	; 0x32
 8003838:	4a15      	ldr	r2, [pc, #84]	; (8003890 <UART_SetConfig+0x118>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003844:	4419      	add	r1, r3
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009a      	lsls	r2, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	fbb2 f2f3 	udiv	r2, r2, r3
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <UART_SetConfig+0x118>)
 800385e:	fba3 0302 	umull	r0, r3, r3, r2
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2064      	movs	r0, #100	; 0x64
 8003866:	fb00 f303 	mul.w	r3, r0, r3
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	3332      	adds	r3, #50	; 0x32
 8003870:	4a07      	ldr	r2, [pc, #28]	; (8003890 <UART_SetConfig+0x118>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	440a      	add	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40013800 	.word	0x40013800
 8003890:	51eb851f 	.word	0x51eb851f

08003894 <__errno>:
 8003894:	4b01      	ldr	r3, [pc, #4]	; (800389c <__errno+0x8>)
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	2000000c 	.word	0x2000000c

080038a0 <__libc_init_array>:
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	2600      	movs	r6, #0
 80038a4:	4d0c      	ldr	r5, [pc, #48]	; (80038d8 <__libc_init_array+0x38>)
 80038a6:	4c0d      	ldr	r4, [pc, #52]	; (80038dc <__libc_init_array+0x3c>)
 80038a8:	1b64      	subs	r4, r4, r5
 80038aa:	10a4      	asrs	r4, r4, #2
 80038ac:	42a6      	cmp	r6, r4
 80038ae:	d109      	bne.n	80038c4 <__libc_init_array+0x24>
 80038b0:	f004 fc84 	bl	80081bc <_init>
 80038b4:	2600      	movs	r6, #0
 80038b6:	4d0a      	ldr	r5, [pc, #40]	; (80038e0 <__libc_init_array+0x40>)
 80038b8:	4c0a      	ldr	r4, [pc, #40]	; (80038e4 <__libc_init_array+0x44>)
 80038ba:	1b64      	subs	r4, r4, r5
 80038bc:	10a4      	asrs	r4, r4, #2
 80038be:	42a6      	cmp	r6, r4
 80038c0:	d105      	bne.n	80038ce <__libc_init_array+0x2e>
 80038c2:	bd70      	pop	{r4, r5, r6, pc}
 80038c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c8:	4798      	blx	r3
 80038ca:	3601      	adds	r6, #1
 80038cc:	e7ee      	b.n	80038ac <__libc_init_array+0xc>
 80038ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d2:	4798      	blx	r3
 80038d4:	3601      	adds	r6, #1
 80038d6:	e7f2      	b.n	80038be <__libc_init_array+0x1e>
 80038d8:	080086b4 	.word	0x080086b4
 80038dc:	080086b4 	.word	0x080086b4
 80038e0:	080086b4 	.word	0x080086b4
 80038e4:	080086b8 	.word	0x080086b8

080038e8 <memset>:
 80038e8:	4603      	mov	r3, r0
 80038ea:	4402      	add	r2, r0
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d100      	bne.n	80038f2 <memset+0xa>
 80038f0:	4770      	bx	lr
 80038f2:	f803 1b01 	strb.w	r1, [r3], #1
 80038f6:	e7f9      	b.n	80038ec <memset+0x4>

080038f8 <__cvt>:
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038fe:	461f      	mov	r7, r3
 8003900:	bfbb      	ittet	lt
 8003902:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003906:	461f      	movlt	r7, r3
 8003908:	2300      	movge	r3, #0
 800390a:	232d      	movlt	r3, #45	; 0x2d
 800390c:	b088      	sub	sp, #32
 800390e:	4614      	mov	r4, r2
 8003910:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003912:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003914:	7013      	strb	r3, [r2, #0]
 8003916:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003918:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800391c:	f023 0820 	bic.w	r8, r3, #32
 8003920:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003924:	d005      	beq.n	8003932 <__cvt+0x3a>
 8003926:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800392a:	d100      	bne.n	800392e <__cvt+0x36>
 800392c:	3501      	adds	r5, #1
 800392e:	2302      	movs	r3, #2
 8003930:	e000      	b.n	8003934 <__cvt+0x3c>
 8003932:	2303      	movs	r3, #3
 8003934:	aa07      	add	r2, sp, #28
 8003936:	9204      	str	r2, [sp, #16]
 8003938:	aa06      	add	r2, sp, #24
 800393a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800393e:	e9cd 3500 	strd	r3, r5, [sp]
 8003942:	4622      	mov	r2, r4
 8003944:	463b      	mov	r3, r7
 8003946:	f001 fdb7 	bl	80054b8 <_dtoa_r>
 800394a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800394e:	4606      	mov	r6, r0
 8003950:	d102      	bne.n	8003958 <__cvt+0x60>
 8003952:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003954:	07db      	lsls	r3, r3, #31
 8003956:	d522      	bpl.n	800399e <__cvt+0xa6>
 8003958:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800395c:	eb06 0905 	add.w	r9, r6, r5
 8003960:	d110      	bne.n	8003984 <__cvt+0x8c>
 8003962:	7833      	ldrb	r3, [r6, #0]
 8003964:	2b30      	cmp	r3, #48	; 0x30
 8003966:	d10a      	bne.n	800397e <__cvt+0x86>
 8003968:	2200      	movs	r2, #0
 800396a:	2300      	movs	r3, #0
 800396c:	4620      	mov	r0, r4
 800396e:	4639      	mov	r1, r7
 8003970:	f7fd f81a 	bl	80009a8 <__aeabi_dcmpeq>
 8003974:	b918      	cbnz	r0, 800397e <__cvt+0x86>
 8003976:	f1c5 0501 	rsb	r5, r5, #1
 800397a:	f8ca 5000 	str.w	r5, [sl]
 800397e:	f8da 3000 	ldr.w	r3, [sl]
 8003982:	4499      	add	r9, r3
 8003984:	2200      	movs	r2, #0
 8003986:	2300      	movs	r3, #0
 8003988:	4620      	mov	r0, r4
 800398a:	4639      	mov	r1, r7
 800398c:	f7fd f80c 	bl	80009a8 <__aeabi_dcmpeq>
 8003990:	b108      	cbz	r0, 8003996 <__cvt+0x9e>
 8003992:	f8cd 901c 	str.w	r9, [sp, #28]
 8003996:	2230      	movs	r2, #48	; 0x30
 8003998:	9b07      	ldr	r3, [sp, #28]
 800399a:	454b      	cmp	r3, r9
 800399c:	d307      	bcc.n	80039ae <__cvt+0xb6>
 800399e:	4630      	mov	r0, r6
 80039a0:	9b07      	ldr	r3, [sp, #28]
 80039a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80039a4:	1b9b      	subs	r3, r3, r6
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	b008      	add	sp, #32
 80039aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ae:	1c59      	adds	r1, r3, #1
 80039b0:	9107      	str	r1, [sp, #28]
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	e7f0      	b.n	8003998 <__cvt+0xa0>

080039b6 <__exponent>:
 80039b6:	4603      	mov	r3, r0
 80039b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039ba:	2900      	cmp	r1, #0
 80039bc:	f803 2b02 	strb.w	r2, [r3], #2
 80039c0:	bfb6      	itet	lt
 80039c2:	222d      	movlt	r2, #45	; 0x2d
 80039c4:	222b      	movge	r2, #43	; 0x2b
 80039c6:	4249      	neglt	r1, r1
 80039c8:	2909      	cmp	r1, #9
 80039ca:	7042      	strb	r2, [r0, #1]
 80039cc:	dd2b      	ble.n	8003a26 <__exponent+0x70>
 80039ce:	f10d 0407 	add.w	r4, sp, #7
 80039d2:	46a4      	mov	ip, r4
 80039d4:	270a      	movs	r7, #10
 80039d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80039da:	460a      	mov	r2, r1
 80039dc:	46a6      	mov	lr, r4
 80039de:	fb07 1516 	mls	r5, r7, r6, r1
 80039e2:	2a63      	cmp	r2, #99	; 0x63
 80039e4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80039e8:	4631      	mov	r1, r6
 80039ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80039ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80039f2:	dcf0      	bgt.n	80039d6 <__exponent+0x20>
 80039f4:	3130      	adds	r1, #48	; 0x30
 80039f6:	f1ae 0502 	sub.w	r5, lr, #2
 80039fa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80039fe:	4629      	mov	r1, r5
 8003a00:	1c44      	adds	r4, r0, #1
 8003a02:	4561      	cmp	r1, ip
 8003a04:	d30a      	bcc.n	8003a1c <__exponent+0x66>
 8003a06:	f10d 0209 	add.w	r2, sp, #9
 8003a0a:	eba2 020e 	sub.w	r2, r2, lr
 8003a0e:	4565      	cmp	r5, ip
 8003a10:	bf88      	it	hi
 8003a12:	2200      	movhi	r2, #0
 8003a14:	4413      	add	r3, r2
 8003a16:	1a18      	subs	r0, r3, r0
 8003a18:	b003      	add	sp, #12
 8003a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a20:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a24:	e7ed      	b.n	8003a02 <__exponent+0x4c>
 8003a26:	2330      	movs	r3, #48	; 0x30
 8003a28:	3130      	adds	r1, #48	; 0x30
 8003a2a:	7083      	strb	r3, [r0, #2]
 8003a2c:	70c1      	strb	r1, [r0, #3]
 8003a2e:	1d03      	adds	r3, r0, #4
 8003a30:	e7f1      	b.n	8003a16 <__exponent+0x60>
	...

08003a34 <_printf_float>:
 8003a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	b091      	sub	sp, #68	; 0x44
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003a40:	4616      	mov	r6, r2
 8003a42:	461f      	mov	r7, r3
 8003a44:	4605      	mov	r5, r0
 8003a46:	f002 fe8b 	bl	8006760 <_localeconv_r>
 8003a4a:	6803      	ldr	r3, [r0, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a50:	f7fc fb7e 	bl	8000150 <strlen>
 8003a54:	2300      	movs	r3, #0
 8003a56:	930e      	str	r3, [sp, #56]	; 0x38
 8003a58:	f8d8 3000 	ldr.w	r3, [r8]
 8003a5c:	900a      	str	r0, [sp, #40]	; 0x28
 8003a5e:	3307      	adds	r3, #7
 8003a60:	f023 0307 	bic.w	r3, r3, #7
 8003a64:	f103 0208 	add.w	r2, r3, #8
 8003a68:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003a6c:	f8d4 b000 	ldr.w	fp, [r4]
 8003a70:	f8c8 2000 	str.w	r2, [r8]
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a7c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003a80:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003a84:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a86:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	4b9c      	ldr	r3, [pc, #624]	; (8003d00 <_printf_float+0x2cc>)
 8003a8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a90:	f7fc ffbc 	bl	8000a0c <__aeabi_dcmpun>
 8003a94:	bb70      	cbnz	r0, 8003af4 <_printf_float+0xc0>
 8003a96:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	4b98      	ldr	r3, [pc, #608]	; (8003d00 <_printf_float+0x2cc>)
 8003a9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003aa0:	f7fc ff96 	bl	80009d0 <__aeabi_dcmple>
 8003aa4:	bb30      	cbnz	r0, 8003af4 <_printf_float+0xc0>
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	4640      	mov	r0, r8
 8003aac:	4651      	mov	r1, sl
 8003aae:	f7fc ff85 	bl	80009bc <__aeabi_dcmplt>
 8003ab2:	b110      	cbz	r0, 8003aba <_printf_float+0x86>
 8003ab4:	232d      	movs	r3, #45	; 0x2d
 8003ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aba:	4b92      	ldr	r3, [pc, #584]	; (8003d04 <_printf_float+0x2d0>)
 8003abc:	4892      	ldr	r0, [pc, #584]	; (8003d08 <_printf_float+0x2d4>)
 8003abe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003ac2:	bf94      	ite	ls
 8003ac4:	4698      	movls	r8, r3
 8003ac6:	4680      	movhi	r8, r0
 8003ac8:	2303      	movs	r3, #3
 8003aca:	f04f 0a00 	mov.w	sl, #0
 8003ace:	6123      	str	r3, [r4, #16]
 8003ad0:	f02b 0304 	bic.w	r3, fp, #4
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	4633      	mov	r3, r6
 8003ad8:	4621      	mov	r1, r4
 8003ada:	4628      	mov	r0, r5
 8003adc:	9700      	str	r7, [sp, #0]
 8003ade:	aa0f      	add	r2, sp, #60	; 0x3c
 8003ae0:	f000 f9d4 	bl	8003e8c <_printf_common>
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	f040 8090 	bne.w	8003c0a <_printf_float+0x1d6>
 8003aea:	f04f 30ff 	mov.w	r0, #4294967295
 8003aee:	b011      	add	sp, #68	; 0x44
 8003af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af4:	4642      	mov	r2, r8
 8003af6:	4653      	mov	r3, sl
 8003af8:	4640      	mov	r0, r8
 8003afa:	4651      	mov	r1, sl
 8003afc:	f7fc ff86 	bl	8000a0c <__aeabi_dcmpun>
 8003b00:	b148      	cbz	r0, 8003b16 <_printf_float+0xe2>
 8003b02:	f1ba 0f00 	cmp.w	sl, #0
 8003b06:	bfb8      	it	lt
 8003b08:	232d      	movlt	r3, #45	; 0x2d
 8003b0a:	4880      	ldr	r0, [pc, #512]	; (8003d0c <_printf_float+0x2d8>)
 8003b0c:	bfb8      	it	lt
 8003b0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b12:	4b7f      	ldr	r3, [pc, #508]	; (8003d10 <_printf_float+0x2dc>)
 8003b14:	e7d3      	b.n	8003abe <_printf_float+0x8a>
 8003b16:	6863      	ldr	r3, [r4, #4]
 8003b18:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	d142      	bne.n	8003ba6 <_printf_float+0x172>
 8003b20:	2306      	movs	r3, #6
 8003b22:	6063      	str	r3, [r4, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	9206      	str	r2, [sp, #24]
 8003b28:	aa0e      	add	r2, sp, #56	; 0x38
 8003b2a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003b2e:	aa0d      	add	r2, sp, #52	; 0x34
 8003b30:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003b34:	9203      	str	r2, [sp, #12]
 8003b36:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003b3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003b3e:	6023      	str	r3, [r4, #0]
 8003b40:	6863      	ldr	r3, [r4, #4]
 8003b42:	4642      	mov	r2, r8
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	4628      	mov	r0, r5
 8003b48:	4653      	mov	r3, sl
 8003b4a:	910b      	str	r1, [sp, #44]	; 0x2c
 8003b4c:	f7ff fed4 	bl	80038f8 <__cvt>
 8003b50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b52:	4680      	mov	r8, r0
 8003b54:	2947      	cmp	r1, #71	; 0x47
 8003b56:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b58:	d108      	bne.n	8003b6c <_printf_float+0x138>
 8003b5a:	1cc8      	adds	r0, r1, #3
 8003b5c:	db02      	blt.n	8003b64 <_printf_float+0x130>
 8003b5e:	6863      	ldr	r3, [r4, #4]
 8003b60:	4299      	cmp	r1, r3
 8003b62:	dd40      	ble.n	8003be6 <_printf_float+0x1b2>
 8003b64:	f1a9 0902 	sub.w	r9, r9, #2
 8003b68:	fa5f f989 	uxtb.w	r9, r9
 8003b6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b70:	d81f      	bhi.n	8003bb2 <_printf_float+0x17e>
 8003b72:	464a      	mov	r2, r9
 8003b74:	3901      	subs	r1, #1
 8003b76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b7a:	910d      	str	r1, [sp, #52]	; 0x34
 8003b7c:	f7ff ff1b 	bl	80039b6 <__exponent>
 8003b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b82:	4682      	mov	sl, r0
 8003b84:	1813      	adds	r3, r2, r0
 8003b86:	2a01      	cmp	r2, #1
 8003b88:	6123      	str	r3, [r4, #16]
 8003b8a:	dc02      	bgt.n	8003b92 <_printf_float+0x15e>
 8003b8c:	6822      	ldr	r2, [r4, #0]
 8003b8e:	07d2      	lsls	r2, r2, #31
 8003b90:	d501      	bpl.n	8003b96 <_printf_float+0x162>
 8003b92:	3301      	adds	r3, #1
 8003b94:	6123      	str	r3, [r4, #16]
 8003b96:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d09b      	beq.n	8003ad6 <_printf_float+0xa2>
 8003b9e:	232d      	movs	r3, #45	; 0x2d
 8003ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ba4:	e797      	b.n	8003ad6 <_printf_float+0xa2>
 8003ba6:	2947      	cmp	r1, #71	; 0x47
 8003ba8:	d1bc      	bne.n	8003b24 <_printf_float+0xf0>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ba      	bne.n	8003b24 <_printf_float+0xf0>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e7b7      	b.n	8003b22 <_printf_float+0xee>
 8003bb2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003bb6:	d118      	bne.n	8003bea <_printf_float+0x1b6>
 8003bb8:	2900      	cmp	r1, #0
 8003bba:	6863      	ldr	r3, [r4, #4]
 8003bbc:	dd0b      	ble.n	8003bd6 <_printf_float+0x1a2>
 8003bbe:	6121      	str	r1, [r4, #16]
 8003bc0:	b913      	cbnz	r3, 8003bc8 <_printf_float+0x194>
 8003bc2:	6822      	ldr	r2, [r4, #0]
 8003bc4:	07d0      	lsls	r0, r2, #31
 8003bc6:	d502      	bpl.n	8003bce <_printf_float+0x19a>
 8003bc8:	3301      	adds	r3, #1
 8003bca:	440b      	add	r3, r1
 8003bcc:	6123      	str	r3, [r4, #16]
 8003bce:	f04f 0a00 	mov.w	sl, #0
 8003bd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8003bd4:	e7df      	b.n	8003b96 <_printf_float+0x162>
 8003bd6:	b913      	cbnz	r3, 8003bde <_printf_float+0x1aa>
 8003bd8:	6822      	ldr	r2, [r4, #0]
 8003bda:	07d2      	lsls	r2, r2, #31
 8003bdc:	d501      	bpl.n	8003be2 <_printf_float+0x1ae>
 8003bde:	3302      	adds	r3, #2
 8003be0:	e7f4      	b.n	8003bcc <_printf_float+0x198>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e7f2      	b.n	8003bcc <_printf_float+0x198>
 8003be6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003bea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bec:	4299      	cmp	r1, r3
 8003bee:	db05      	blt.n	8003bfc <_printf_float+0x1c8>
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	6121      	str	r1, [r4, #16]
 8003bf4:	07d8      	lsls	r0, r3, #31
 8003bf6:	d5ea      	bpl.n	8003bce <_printf_float+0x19a>
 8003bf8:	1c4b      	adds	r3, r1, #1
 8003bfa:	e7e7      	b.n	8003bcc <_printf_float+0x198>
 8003bfc:	2900      	cmp	r1, #0
 8003bfe:	bfcc      	ite	gt
 8003c00:	2201      	movgt	r2, #1
 8003c02:	f1c1 0202 	rsble	r2, r1, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	e7e0      	b.n	8003bcc <_printf_float+0x198>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	055a      	lsls	r2, r3, #21
 8003c0e:	d407      	bmi.n	8003c20 <_printf_float+0x1ec>
 8003c10:	6923      	ldr	r3, [r4, #16]
 8003c12:	4642      	mov	r2, r8
 8003c14:	4631      	mov	r1, r6
 8003c16:	4628      	mov	r0, r5
 8003c18:	47b8      	blx	r7
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	d12b      	bne.n	8003c76 <_printf_float+0x242>
 8003c1e:	e764      	b.n	8003aea <_printf_float+0xb6>
 8003c20:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003c24:	f240 80dd 	bls.w	8003de2 <_printf_float+0x3ae>
 8003c28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f7fc feba 	bl	80009a8 <__aeabi_dcmpeq>
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d033      	beq.n	8003ca0 <_printf_float+0x26c>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	4631      	mov	r1, r6
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	4a35      	ldr	r2, [pc, #212]	; (8003d14 <_printf_float+0x2e0>)
 8003c40:	47b8      	blx	r7
 8003c42:	3001      	adds	r0, #1
 8003c44:	f43f af51 	beq.w	8003aea <_printf_float+0xb6>
 8003c48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	db02      	blt.n	8003c56 <_printf_float+0x222>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	07d8      	lsls	r0, r3, #31
 8003c54:	d50f      	bpl.n	8003c76 <_printf_float+0x242>
 8003c56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c5a:	4631      	mov	r1, r6
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	47b8      	blx	r7
 8003c60:	3001      	adds	r0, #1
 8003c62:	f43f af42 	beq.w	8003aea <_printf_float+0xb6>
 8003c66:	f04f 0800 	mov.w	r8, #0
 8003c6a:	f104 091a 	add.w	r9, r4, #26
 8003c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c70:	3b01      	subs	r3, #1
 8003c72:	4543      	cmp	r3, r8
 8003c74:	dc09      	bgt.n	8003c8a <_printf_float+0x256>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	079b      	lsls	r3, r3, #30
 8003c7a:	f100 8102 	bmi.w	8003e82 <_printf_float+0x44e>
 8003c7e:	68e0      	ldr	r0, [r4, #12]
 8003c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c82:	4298      	cmp	r0, r3
 8003c84:	bfb8      	it	lt
 8003c86:	4618      	movlt	r0, r3
 8003c88:	e731      	b.n	8003aee <_printf_float+0xba>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	464a      	mov	r2, r9
 8003c8e:	4631      	mov	r1, r6
 8003c90:	4628      	mov	r0, r5
 8003c92:	47b8      	blx	r7
 8003c94:	3001      	adds	r0, #1
 8003c96:	f43f af28 	beq.w	8003aea <_printf_float+0xb6>
 8003c9a:	f108 0801 	add.w	r8, r8, #1
 8003c9e:	e7e6      	b.n	8003c6e <_printf_float+0x23a>
 8003ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	dc38      	bgt.n	8003d18 <_printf_float+0x2e4>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	4631      	mov	r1, r6
 8003caa:	4628      	mov	r0, r5
 8003cac:	4a19      	ldr	r2, [pc, #100]	; (8003d14 <_printf_float+0x2e0>)
 8003cae:	47b8      	blx	r7
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	f43f af1a 	beq.w	8003aea <_printf_float+0xb6>
 8003cb6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	d102      	bne.n	8003cc4 <_printf_float+0x290>
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	07d9      	lsls	r1, r3, #31
 8003cc2:	d5d8      	bpl.n	8003c76 <_printf_float+0x242>
 8003cc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cc8:	4631      	mov	r1, r6
 8003cca:	4628      	mov	r0, r5
 8003ccc:	47b8      	blx	r7
 8003cce:	3001      	adds	r0, #1
 8003cd0:	f43f af0b 	beq.w	8003aea <_printf_float+0xb6>
 8003cd4:	f04f 0900 	mov.w	r9, #0
 8003cd8:	f104 0a1a 	add.w	sl, r4, #26
 8003cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cde:	425b      	negs	r3, r3
 8003ce0:	454b      	cmp	r3, r9
 8003ce2:	dc01      	bgt.n	8003ce8 <_printf_float+0x2b4>
 8003ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ce6:	e794      	b.n	8003c12 <_printf_float+0x1de>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	4652      	mov	r2, sl
 8003cec:	4631      	mov	r1, r6
 8003cee:	4628      	mov	r0, r5
 8003cf0:	47b8      	blx	r7
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	f43f aef9 	beq.w	8003aea <_printf_float+0xb6>
 8003cf8:	f109 0901 	add.w	r9, r9, #1
 8003cfc:	e7ee      	b.n	8003cdc <_printf_float+0x2a8>
 8003cfe:	bf00      	nop
 8003d00:	7fefffff 	.word	0x7fefffff
 8003d04:	08008214 	.word	0x08008214
 8003d08:	08008218 	.word	0x08008218
 8003d0c:	08008220 	.word	0x08008220
 8003d10:	0800821c 	.word	0x0800821c
 8003d14:	08008224 	.word	0x08008224
 8003d18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	bfa8      	it	ge
 8003d20:	461a      	movge	r2, r3
 8003d22:	2a00      	cmp	r2, #0
 8003d24:	4691      	mov	r9, r2
 8003d26:	dc37      	bgt.n	8003d98 <_printf_float+0x364>
 8003d28:	f04f 0b00 	mov.w	fp, #0
 8003d2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d30:	f104 021a 	add.w	r2, r4, #26
 8003d34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003d38:	ebaa 0309 	sub.w	r3, sl, r9
 8003d3c:	455b      	cmp	r3, fp
 8003d3e:	dc33      	bgt.n	8003da8 <_printf_float+0x374>
 8003d40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d44:	429a      	cmp	r2, r3
 8003d46:	db3b      	blt.n	8003dc0 <_printf_float+0x38c>
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	07da      	lsls	r2, r3, #31
 8003d4c:	d438      	bmi.n	8003dc0 <_printf_float+0x38c>
 8003d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d52:	eba3 020a 	sub.w	r2, r3, sl
 8003d56:	eba3 0901 	sub.w	r9, r3, r1
 8003d5a:	4591      	cmp	r9, r2
 8003d5c:	bfa8      	it	ge
 8003d5e:	4691      	movge	r9, r2
 8003d60:	f1b9 0f00 	cmp.w	r9, #0
 8003d64:	dc34      	bgt.n	8003dd0 <_printf_float+0x39c>
 8003d66:	f04f 0800 	mov.w	r8, #0
 8003d6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d6e:	f104 0a1a 	add.w	sl, r4, #26
 8003d72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	eba3 0309 	sub.w	r3, r3, r9
 8003d7c:	4543      	cmp	r3, r8
 8003d7e:	f77f af7a 	ble.w	8003c76 <_printf_float+0x242>
 8003d82:	2301      	movs	r3, #1
 8003d84:	4652      	mov	r2, sl
 8003d86:	4631      	mov	r1, r6
 8003d88:	4628      	mov	r0, r5
 8003d8a:	47b8      	blx	r7
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	f43f aeac 	beq.w	8003aea <_printf_float+0xb6>
 8003d92:	f108 0801 	add.w	r8, r8, #1
 8003d96:	e7ec      	b.n	8003d72 <_printf_float+0x33e>
 8003d98:	4613      	mov	r3, r2
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	4628      	mov	r0, r5
 8003da0:	47b8      	blx	r7
 8003da2:	3001      	adds	r0, #1
 8003da4:	d1c0      	bne.n	8003d28 <_printf_float+0x2f4>
 8003da6:	e6a0      	b.n	8003aea <_printf_float+0xb6>
 8003da8:	2301      	movs	r3, #1
 8003daa:	4631      	mov	r1, r6
 8003dac:	4628      	mov	r0, r5
 8003dae:	920b      	str	r2, [sp, #44]	; 0x2c
 8003db0:	47b8      	blx	r7
 8003db2:	3001      	adds	r0, #1
 8003db4:	f43f ae99 	beq.w	8003aea <_printf_float+0xb6>
 8003db8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003dba:	f10b 0b01 	add.w	fp, fp, #1
 8003dbe:	e7b9      	b.n	8003d34 <_printf_float+0x300>
 8003dc0:	4631      	mov	r1, r6
 8003dc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	47b8      	blx	r7
 8003dca:	3001      	adds	r0, #1
 8003dcc:	d1bf      	bne.n	8003d4e <_printf_float+0x31a>
 8003dce:	e68c      	b.n	8003aea <_printf_float+0xb6>
 8003dd0:	464b      	mov	r3, r9
 8003dd2:	4631      	mov	r1, r6
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	eb08 020a 	add.w	r2, r8, sl
 8003dda:	47b8      	blx	r7
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d1c2      	bne.n	8003d66 <_printf_float+0x332>
 8003de0:	e683      	b.n	8003aea <_printf_float+0xb6>
 8003de2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003de4:	2a01      	cmp	r2, #1
 8003de6:	dc01      	bgt.n	8003dec <_printf_float+0x3b8>
 8003de8:	07db      	lsls	r3, r3, #31
 8003dea:	d537      	bpl.n	8003e5c <_printf_float+0x428>
 8003dec:	2301      	movs	r3, #1
 8003dee:	4642      	mov	r2, r8
 8003df0:	4631      	mov	r1, r6
 8003df2:	4628      	mov	r0, r5
 8003df4:	47b8      	blx	r7
 8003df6:	3001      	adds	r0, #1
 8003df8:	f43f ae77 	beq.w	8003aea <_printf_float+0xb6>
 8003dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e00:	4631      	mov	r1, r6
 8003e02:	4628      	mov	r0, r5
 8003e04:	47b8      	blx	r7
 8003e06:	3001      	adds	r0, #1
 8003e08:	f43f ae6f 	beq.w	8003aea <_printf_float+0xb6>
 8003e0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e10:	2200      	movs	r2, #0
 8003e12:	2300      	movs	r3, #0
 8003e14:	f7fc fdc8 	bl	80009a8 <__aeabi_dcmpeq>
 8003e18:	b9d8      	cbnz	r0, 8003e52 <_printf_float+0x41e>
 8003e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e1c:	f108 0201 	add.w	r2, r8, #1
 8003e20:	3b01      	subs	r3, #1
 8003e22:	4631      	mov	r1, r6
 8003e24:	4628      	mov	r0, r5
 8003e26:	47b8      	blx	r7
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d10e      	bne.n	8003e4a <_printf_float+0x416>
 8003e2c:	e65d      	b.n	8003aea <_printf_float+0xb6>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	464a      	mov	r2, r9
 8003e32:	4631      	mov	r1, r6
 8003e34:	4628      	mov	r0, r5
 8003e36:	47b8      	blx	r7
 8003e38:	3001      	adds	r0, #1
 8003e3a:	f43f ae56 	beq.w	8003aea <_printf_float+0xb6>
 8003e3e:	f108 0801 	add.w	r8, r8, #1
 8003e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e44:	3b01      	subs	r3, #1
 8003e46:	4543      	cmp	r3, r8
 8003e48:	dcf1      	bgt.n	8003e2e <_printf_float+0x3fa>
 8003e4a:	4653      	mov	r3, sl
 8003e4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e50:	e6e0      	b.n	8003c14 <_printf_float+0x1e0>
 8003e52:	f04f 0800 	mov.w	r8, #0
 8003e56:	f104 091a 	add.w	r9, r4, #26
 8003e5a:	e7f2      	b.n	8003e42 <_printf_float+0x40e>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4642      	mov	r2, r8
 8003e60:	e7df      	b.n	8003e22 <_printf_float+0x3ee>
 8003e62:	2301      	movs	r3, #1
 8003e64:	464a      	mov	r2, r9
 8003e66:	4631      	mov	r1, r6
 8003e68:	4628      	mov	r0, r5
 8003e6a:	47b8      	blx	r7
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	f43f ae3c 	beq.w	8003aea <_printf_float+0xb6>
 8003e72:	f108 0801 	add.w	r8, r8, #1
 8003e76:	68e3      	ldr	r3, [r4, #12]
 8003e78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003e7a:	1a5b      	subs	r3, r3, r1
 8003e7c:	4543      	cmp	r3, r8
 8003e7e:	dcf0      	bgt.n	8003e62 <_printf_float+0x42e>
 8003e80:	e6fd      	b.n	8003c7e <_printf_float+0x24a>
 8003e82:	f04f 0800 	mov.w	r8, #0
 8003e86:	f104 0919 	add.w	r9, r4, #25
 8003e8a:	e7f4      	b.n	8003e76 <_printf_float+0x442>

08003e8c <_printf_common>:
 8003e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e90:	4616      	mov	r6, r2
 8003e92:	4699      	mov	r9, r3
 8003e94:	688a      	ldr	r2, [r1, #8]
 8003e96:	690b      	ldr	r3, [r1, #16]
 8003e98:	4607      	mov	r7, r0
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	bfb8      	it	lt
 8003e9e:	4613      	movlt	r3, r2
 8003ea0:	6033      	str	r3, [r6, #0]
 8003ea2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003eac:	b10a      	cbz	r2, 8003eb2 <_printf_common+0x26>
 8003eae:	3301      	adds	r3, #1
 8003eb0:	6033      	str	r3, [r6, #0]
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	0699      	lsls	r1, r3, #26
 8003eb6:	bf42      	ittt	mi
 8003eb8:	6833      	ldrmi	r3, [r6, #0]
 8003eba:	3302      	addmi	r3, #2
 8003ebc:	6033      	strmi	r3, [r6, #0]
 8003ebe:	6825      	ldr	r5, [r4, #0]
 8003ec0:	f015 0506 	ands.w	r5, r5, #6
 8003ec4:	d106      	bne.n	8003ed4 <_printf_common+0x48>
 8003ec6:	f104 0a19 	add.w	sl, r4, #25
 8003eca:	68e3      	ldr	r3, [r4, #12]
 8003ecc:	6832      	ldr	r2, [r6, #0]
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	42ab      	cmp	r3, r5
 8003ed2:	dc28      	bgt.n	8003f26 <_printf_common+0x9a>
 8003ed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ed8:	1e13      	subs	r3, r2, #0
 8003eda:	6822      	ldr	r2, [r4, #0]
 8003edc:	bf18      	it	ne
 8003ede:	2301      	movne	r3, #1
 8003ee0:	0692      	lsls	r2, r2, #26
 8003ee2:	d42d      	bmi.n	8003f40 <_printf_common+0xb4>
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eec:	47c0      	blx	r8
 8003eee:	3001      	adds	r0, #1
 8003ef0:	d020      	beq.n	8003f34 <_printf_common+0xa8>
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	68e5      	ldr	r5, [r4, #12]
 8003ef6:	f003 0306 	and.w	r3, r3, #6
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	bf18      	it	ne
 8003efe:	2500      	movne	r5, #0
 8003f00:	6832      	ldr	r2, [r6, #0]
 8003f02:	f04f 0600 	mov.w	r6, #0
 8003f06:	68a3      	ldr	r3, [r4, #8]
 8003f08:	bf08      	it	eq
 8003f0a:	1aad      	subeq	r5, r5, r2
 8003f0c:	6922      	ldr	r2, [r4, #16]
 8003f0e:	bf08      	it	eq
 8003f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f14:	4293      	cmp	r3, r2
 8003f16:	bfc4      	itt	gt
 8003f18:	1a9b      	subgt	r3, r3, r2
 8003f1a:	18ed      	addgt	r5, r5, r3
 8003f1c:	341a      	adds	r4, #26
 8003f1e:	42b5      	cmp	r5, r6
 8003f20:	d11a      	bne.n	8003f58 <_printf_common+0xcc>
 8003f22:	2000      	movs	r0, #0
 8003f24:	e008      	b.n	8003f38 <_printf_common+0xac>
 8003f26:	2301      	movs	r3, #1
 8003f28:	4652      	mov	r2, sl
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	47c0      	blx	r8
 8003f30:	3001      	adds	r0, #1
 8003f32:	d103      	bne.n	8003f3c <_printf_common+0xb0>
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f3c:	3501      	adds	r5, #1
 8003f3e:	e7c4      	b.n	8003eca <_printf_common+0x3e>
 8003f40:	2030      	movs	r0, #48	; 0x30
 8003f42:	18e1      	adds	r1, r4, r3
 8003f44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f4e:	4422      	add	r2, r4
 8003f50:	3302      	adds	r3, #2
 8003f52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f56:	e7c5      	b.n	8003ee4 <_printf_common+0x58>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	4638      	mov	r0, r7
 8003f60:	47c0      	blx	r8
 8003f62:	3001      	adds	r0, #1
 8003f64:	d0e6      	beq.n	8003f34 <_printf_common+0xa8>
 8003f66:	3601      	adds	r6, #1
 8003f68:	e7d9      	b.n	8003f1e <_printf_common+0x92>
	...

08003f6c <_printf_i>:
 8003f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	7e0f      	ldrb	r7, [r1, #24]
 8003f72:	4691      	mov	r9, r2
 8003f74:	2f78      	cmp	r7, #120	; 0x78
 8003f76:	4680      	mov	r8, r0
 8003f78:	460c      	mov	r4, r1
 8003f7a:	469a      	mov	sl, r3
 8003f7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f82:	d807      	bhi.n	8003f94 <_printf_i+0x28>
 8003f84:	2f62      	cmp	r7, #98	; 0x62
 8003f86:	d80a      	bhi.n	8003f9e <_printf_i+0x32>
 8003f88:	2f00      	cmp	r7, #0
 8003f8a:	f000 80d9 	beq.w	8004140 <_printf_i+0x1d4>
 8003f8e:	2f58      	cmp	r7, #88	; 0x58
 8003f90:	f000 80a4 	beq.w	80040dc <_printf_i+0x170>
 8003f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f9c:	e03a      	b.n	8004014 <_printf_i+0xa8>
 8003f9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fa2:	2b15      	cmp	r3, #21
 8003fa4:	d8f6      	bhi.n	8003f94 <_printf_i+0x28>
 8003fa6:	a101      	add	r1, pc, #4	; (adr r1, 8003fac <_printf_i+0x40>)
 8003fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fac:	08004005 	.word	0x08004005
 8003fb0:	08004019 	.word	0x08004019
 8003fb4:	08003f95 	.word	0x08003f95
 8003fb8:	08003f95 	.word	0x08003f95
 8003fbc:	08003f95 	.word	0x08003f95
 8003fc0:	08003f95 	.word	0x08003f95
 8003fc4:	08004019 	.word	0x08004019
 8003fc8:	08003f95 	.word	0x08003f95
 8003fcc:	08003f95 	.word	0x08003f95
 8003fd0:	08003f95 	.word	0x08003f95
 8003fd4:	08003f95 	.word	0x08003f95
 8003fd8:	08004127 	.word	0x08004127
 8003fdc:	08004049 	.word	0x08004049
 8003fe0:	08004109 	.word	0x08004109
 8003fe4:	08003f95 	.word	0x08003f95
 8003fe8:	08003f95 	.word	0x08003f95
 8003fec:	08004149 	.word	0x08004149
 8003ff0:	08003f95 	.word	0x08003f95
 8003ff4:	08004049 	.word	0x08004049
 8003ff8:	08003f95 	.word	0x08003f95
 8003ffc:	08003f95 	.word	0x08003f95
 8004000:	08004111 	.word	0x08004111
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	1d1a      	adds	r2, r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	602a      	str	r2, [r5, #0]
 800400c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004014:	2301      	movs	r3, #1
 8004016:	e0a4      	b.n	8004162 <_printf_i+0x1f6>
 8004018:	6820      	ldr	r0, [r4, #0]
 800401a:	6829      	ldr	r1, [r5, #0]
 800401c:	0606      	lsls	r6, r0, #24
 800401e:	f101 0304 	add.w	r3, r1, #4
 8004022:	d50a      	bpl.n	800403a <_printf_i+0xce>
 8004024:	680e      	ldr	r6, [r1, #0]
 8004026:	602b      	str	r3, [r5, #0]
 8004028:	2e00      	cmp	r6, #0
 800402a:	da03      	bge.n	8004034 <_printf_i+0xc8>
 800402c:	232d      	movs	r3, #45	; 0x2d
 800402e:	4276      	negs	r6, r6
 8004030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004034:	230a      	movs	r3, #10
 8004036:	485e      	ldr	r0, [pc, #376]	; (80041b0 <_printf_i+0x244>)
 8004038:	e019      	b.n	800406e <_printf_i+0x102>
 800403a:	680e      	ldr	r6, [r1, #0]
 800403c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004040:	602b      	str	r3, [r5, #0]
 8004042:	bf18      	it	ne
 8004044:	b236      	sxthne	r6, r6
 8004046:	e7ef      	b.n	8004028 <_printf_i+0xbc>
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	6820      	ldr	r0, [r4, #0]
 800404c:	1d19      	adds	r1, r3, #4
 800404e:	6029      	str	r1, [r5, #0]
 8004050:	0601      	lsls	r1, r0, #24
 8004052:	d501      	bpl.n	8004058 <_printf_i+0xec>
 8004054:	681e      	ldr	r6, [r3, #0]
 8004056:	e002      	b.n	800405e <_printf_i+0xf2>
 8004058:	0646      	lsls	r6, r0, #25
 800405a:	d5fb      	bpl.n	8004054 <_printf_i+0xe8>
 800405c:	881e      	ldrh	r6, [r3, #0]
 800405e:	2f6f      	cmp	r7, #111	; 0x6f
 8004060:	bf0c      	ite	eq
 8004062:	2308      	moveq	r3, #8
 8004064:	230a      	movne	r3, #10
 8004066:	4852      	ldr	r0, [pc, #328]	; (80041b0 <_printf_i+0x244>)
 8004068:	2100      	movs	r1, #0
 800406a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800406e:	6865      	ldr	r5, [r4, #4]
 8004070:	2d00      	cmp	r5, #0
 8004072:	bfa8      	it	ge
 8004074:	6821      	ldrge	r1, [r4, #0]
 8004076:	60a5      	str	r5, [r4, #8]
 8004078:	bfa4      	itt	ge
 800407a:	f021 0104 	bicge.w	r1, r1, #4
 800407e:	6021      	strge	r1, [r4, #0]
 8004080:	b90e      	cbnz	r6, 8004086 <_printf_i+0x11a>
 8004082:	2d00      	cmp	r5, #0
 8004084:	d04d      	beq.n	8004122 <_printf_i+0x1b6>
 8004086:	4615      	mov	r5, r2
 8004088:	fbb6 f1f3 	udiv	r1, r6, r3
 800408c:	fb03 6711 	mls	r7, r3, r1, r6
 8004090:	5dc7      	ldrb	r7, [r0, r7]
 8004092:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004096:	4637      	mov	r7, r6
 8004098:	42bb      	cmp	r3, r7
 800409a:	460e      	mov	r6, r1
 800409c:	d9f4      	bls.n	8004088 <_printf_i+0x11c>
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d10b      	bne.n	80040ba <_printf_i+0x14e>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	07de      	lsls	r6, r3, #31
 80040a6:	d508      	bpl.n	80040ba <_printf_i+0x14e>
 80040a8:	6923      	ldr	r3, [r4, #16]
 80040aa:	6861      	ldr	r1, [r4, #4]
 80040ac:	4299      	cmp	r1, r3
 80040ae:	bfde      	ittt	le
 80040b0:	2330      	movle	r3, #48	; 0x30
 80040b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040ba:	1b52      	subs	r2, r2, r5
 80040bc:	6122      	str	r2, [r4, #16]
 80040be:	464b      	mov	r3, r9
 80040c0:	4621      	mov	r1, r4
 80040c2:	4640      	mov	r0, r8
 80040c4:	f8cd a000 	str.w	sl, [sp]
 80040c8:	aa03      	add	r2, sp, #12
 80040ca:	f7ff fedf 	bl	8003e8c <_printf_common>
 80040ce:	3001      	adds	r0, #1
 80040d0:	d14c      	bne.n	800416c <_printf_i+0x200>
 80040d2:	f04f 30ff 	mov.w	r0, #4294967295
 80040d6:	b004      	add	sp, #16
 80040d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040dc:	4834      	ldr	r0, [pc, #208]	; (80041b0 <_printf_i+0x244>)
 80040de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040e2:	6829      	ldr	r1, [r5, #0]
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80040ea:	6029      	str	r1, [r5, #0]
 80040ec:	061d      	lsls	r5, r3, #24
 80040ee:	d514      	bpl.n	800411a <_printf_i+0x1ae>
 80040f0:	07df      	lsls	r7, r3, #31
 80040f2:	bf44      	itt	mi
 80040f4:	f043 0320 	orrmi.w	r3, r3, #32
 80040f8:	6023      	strmi	r3, [r4, #0]
 80040fa:	b91e      	cbnz	r6, 8004104 <_printf_i+0x198>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	f023 0320 	bic.w	r3, r3, #32
 8004102:	6023      	str	r3, [r4, #0]
 8004104:	2310      	movs	r3, #16
 8004106:	e7af      	b.n	8004068 <_printf_i+0xfc>
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	f043 0320 	orr.w	r3, r3, #32
 800410e:	6023      	str	r3, [r4, #0]
 8004110:	2378      	movs	r3, #120	; 0x78
 8004112:	4828      	ldr	r0, [pc, #160]	; (80041b4 <_printf_i+0x248>)
 8004114:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004118:	e7e3      	b.n	80040e2 <_printf_i+0x176>
 800411a:	0659      	lsls	r1, r3, #25
 800411c:	bf48      	it	mi
 800411e:	b2b6      	uxthmi	r6, r6
 8004120:	e7e6      	b.n	80040f0 <_printf_i+0x184>
 8004122:	4615      	mov	r5, r2
 8004124:	e7bb      	b.n	800409e <_printf_i+0x132>
 8004126:	682b      	ldr	r3, [r5, #0]
 8004128:	6826      	ldr	r6, [r4, #0]
 800412a:	1d18      	adds	r0, r3, #4
 800412c:	6961      	ldr	r1, [r4, #20]
 800412e:	6028      	str	r0, [r5, #0]
 8004130:	0635      	lsls	r5, r6, #24
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	d501      	bpl.n	800413a <_printf_i+0x1ce>
 8004136:	6019      	str	r1, [r3, #0]
 8004138:	e002      	b.n	8004140 <_printf_i+0x1d4>
 800413a:	0670      	lsls	r0, r6, #25
 800413c:	d5fb      	bpl.n	8004136 <_printf_i+0x1ca>
 800413e:	8019      	strh	r1, [r3, #0]
 8004140:	2300      	movs	r3, #0
 8004142:	4615      	mov	r5, r2
 8004144:	6123      	str	r3, [r4, #16]
 8004146:	e7ba      	b.n	80040be <_printf_i+0x152>
 8004148:	682b      	ldr	r3, [r5, #0]
 800414a:	2100      	movs	r1, #0
 800414c:	1d1a      	adds	r2, r3, #4
 800414e:	602a      	str	r2, [r5, #0]
 8004150:	681d      	ldr	r5, [r3, #0]
 8004152:	6862      	ldr	r2, [r4, #4]
 8004154:	4628      	mov	r0, r5
 8004156:	f002 fb21 	bl	800679c <memchr>
 800415a:	b108      	cbz	r0, 8004160 <_printf_i+0x1f4>
 800415c:	1b40      	subs	r0, r0, r5
 800415e:	6060      	str	r0, [r4, #4]
 8004160:	6863      	ldr	r3, [r4, #4]
 8004162:	6123      	str	r3, [r4, #16]
 8004164:	2300      	movs	r3, #0
 8004166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800416a:	e7a8      	b.n	80040be <_printf_i+0x152>
 800416c:	462a      	mov	r2, r5
 800416e:	4649      	mov	r1, r9
 8004170:	4640      	mov	r0, r8
 8004172:	6923      	ldr	r3, [r4, #16]
 8004174:	47d0      	blx	sl
 8004176:	3001      	adds	r0, #1
 8004178:	d0ab      	beq.n	80040d2 <_printf_i+0x166>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	079b      	lsls	r3, r3, #30
 800417e:	d413      	bmi.n	80041a8 <_printf_i+0x23c>
 8004180:	68e0      	ldr	r0, [r4, #12]
 8004182:	9b03      	ldr	r3, [sp, #12]
 8004184:	4298      	cmp	r0, r3
 8004186:	bfb8      	it	lt
 8004188:	4618      	movlt	r0, r3
 800418a:	e7a4      	b.n	80040d6 <_printf_i+0x16a>
 800418c:	2301      	movs	r3, #1
 800418e:	4632      	mov	r2, r6
 8004190:	4649      	mov	r1, r9
 8004192:	4640      	mov	r0, r8
 8004194:	47d0      	blx	sl
 8004196:	3001      	adds	r0, #1
 8004198:	d09b      	beq.n	80040d2 <_printf_i+0x166>
 800419a:	3501      	adds	r5, #1
 800419c:	68e3      	ldr	r3, [r4, #12]
 800419e:	9903      	ldr	r1, [sp, #12]
 80041a0:	1a5b      	subs	r3, r3, r1
 80041a2:	42ab      	cmp	r3, r5
 80041a4:	dcf2      	bgt.n	800418c <_printf_i+0x220>
 80041a6:	e7eb      	b.n	8004180 <_printf_i+0x214>
 80041a8:	2500      	movs	r5, #0
 80041aa:	f104 0619 	add.w	r6, r4, #25
 80041ae:	e7f5      	b.n	800419c <_printf_i+0x230>
 80041b0:	08008226 	.word	0x08008226
 80041b4:	08008237 	.word	0x08008237

080041b8 <_scanf_float>:
 80041b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041bc:	b087      	sub	sp, #28
 80041be:	9303      	str	r3, [sp, #12]
 80041c0:	688b      	ldr	r3, [r1, #8]
 80041c2:	4617      	mov	r7, r2
 80041c4:	1e5a      	subs	r2, r3, #1
 80041c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80041ca:	bf85      	ittet	hi
 80041cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80041d0:	195b      	addhi	r3, r3, r5
 80041d2:	2300      	movls	r3, #0
 80041d4:	9302      	strhi	r3, [sp, #8]
 80041d6:	bf88      	it	hi
 80041d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80041dc:	468b      	mov	fp, r1
 80041de:	f04f 0500 	mov.w	r5, #0
 80041e2:	bf8c      	ite	hi
 80041e4:	608b      	strhi	r3, [r1, #8]
 80041e6:	9302      	strls	r3, [sp, #8]
 80041e8:	680b      	ldr	r3, [r1, #0]
 80041ea:	4680      	mov	r8, r0
 80041ec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80041f0:	f84b 3b1c 	str.w	r3, [fp], #28
 80041f4:	460c      	mov	r4, r1
 80041f6:	465e      	mov	r6, fp
 80041f8:	46aa      	mov	sl, r5
 80041fa:	46a9      	mov	r9, r5
 80041fc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004200:	9501      	str	r5, [sp, #4]
 8004202:	68a2      	ldr	r2, [r4, #8]
 8004204:	b152      	cbz	r2, 800421c <_scanf_float+0x64>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b4e      	cmp	r3, #78	; 0x4e
 800420c:	d864      	bhi.n	80042d8 <_scanf_float+0x120>
 800420e:	2b40      	cmp	r3, #64	; 0x40
 8004210:	d83c      	bhi.n	800428c <_scanf_float+0xd4>
 8004212:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004216:	b2c8      	uxtb	r0, r1
 8004218:	280e      	cmp	r0, #14
 800421a:	d93a      	bls.n	8004292 <_scanf_float+0xda>
 800421c:	f1b9 0f00 	cmp.w	r9, #0
 8004220:	d003      	beq.n	800422a <_scanf_float+0x72>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800422e:	f1ba 0f01 	cmp.w	sl, #1
 8004232:	f200 8113 	bhi.w	800445c <_scanf_float+0x2a4>
 8004236:	455e      	cmp	r6, fp
 8004238:	f200 8105 	bhi.w	8004446 <_scanf_float+0x28e>
 800423c:	2501      	movs	r5, #1
 800423e:	4628      	mov	r0, r5
 8004240:	b007      	add	sp, #28
 8004242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004246:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800424a:	2a0d      	cmp	r2, #13
 800424c:	d8e6      	bhi.n	800421c <_scanf_float+0x64>
 800424e:	a101      	add	r1, pc, #4	; (adr r1, 8004254 <_scanf_float+0x9c>)
 8004250:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004254:	08004393 	.word	0x08004393
 8004258:	0800421d 	.word	0x0800421d
 800425c:	0800421d 	.word	0x0800421d
 8004260:	0800421d 	.word	0x0800421d
 8004264:	080043f3 	.word	0x080043f3
 8004268:	080043cb 	.word	0x080043cb
 800426c:	0800421d 	.word	0x0800421d
 8004270:	0800421d 	.word	0x0800421d
 8004274:	080043a1 	.word	0x080043a1
 8004278:	0800421d 	.word	0x0800421d
 800427c:	0800421d 	.word	0x0800421d
 8004280:	0800421d 	.word	0x0800421d
 8004284:	0800421d 	.word	0x0800421d
 8004288:	08004359 	.word	0x08004359
 800428c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004290:	e7db      	b.n	800424a <_scanf_float+0x92>
 8004292:	290e      	cmp	r1, #14
 8004294:	d8c2      	bhi.n	800421c <_scanf_float+0x64>
 8004296:	a001      	add	r0, pc, #4	; (adr r0, 800429c <_scanf_float+0xe4>)
 8004298:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800429c:	0800434b 	.word	0x0800434b
 80042a0:	0800421d 	.word	0x0800421d
 80042a4:	0800434b 	.word	0x0800434b
 80042a8:	080043df 	.word	0x080043df
 80042ac:	0800421d 	.word	0x0800421d
 80042b0:	080042f9 	.word	0x080042f9
 80042b4:	08004335 	.word	0x08004335
 80042b8:	08004335 	.word	0x08004335
 80042bc:	08004335 	.word	0x08004335
 80042c0:	08004335 	.word	0x08004335
 80042c4:	08004335 	.word	0x08004335
 80042c8:	08004335 	.word	0x08004335
 80042cc:	08004335 	.word	0x08004335
 80042d0:	08004335 	.word	0x08004335
 80042d4:	08004335 	.word	0x08004335
 80042d8:	2b6e      	cmp	r3, #110	; 0x6e
 80042da:	d809      	bhi.n	80042f0 <_scanf_float+0x138>
 80042dc:	2b60      	cmp	r3, #96	; 0x60
 80042de:	d8b2      	bhi.n	8004246 <_scanf_float+0x8e>
 80042e0:	2b54      	cmp	r3, #84	; 0x54
 80042e2:	d077      	beq.n	80043d4 <_scanf_float+0x21c>
 80042e4:	2b59      	cmp	r3, #89	; 0x59
 80042e6:	d199      	bne.n	800421c <_scanf_float+0x64>
 80042e8:	2d07      	cmp	r5, #7
 80042ea:	d197      	bne.n	800421c <_scanf_float+0x64>
 80042ec:	2508      	movs	r5, #8
 80042ee:	e029      	b.n	8004344 <_scanf_float+0x18c>
 80042f0:	2b74      	cmp	r3, #116	; 0x74
 80042f2:	d06f      	beq.n	80043d4 <_scanf_float+0x21c>
 80042f4:	2b79      	cmp	r3, #121	; 0x79
 80042f6:	e7f6      	b.n	80042e6 <_scanf_float+0x12e>
 80042f8:	6821      	ldr	r1, [r4, #0]
 80042fa:	05c8      	lsls	r0, r1, #23
 80042fc:	d51a      	bpl.n	8004334 <_scanf_float+0x17c>
 80042fe:	9b02      	ldr	r3, [sp, #8]
 8004300:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004304:	6021      	str	r1, [r4, #0]
 8004306:	f109 0901 	add.w	r9, r9, #1
 800430a:	b11b      	cbz	r3, 8004314 <_scanf_float+0x15c>
 800430c:	3b01      	subs	r3, #1
 800430e:	3201      	adds	r2, #1
 8004310:	9302      	str	r3, [sp, #8]
 8004312:	60a2      	str	r2, [r4, #8]
 8004314:	68a3      	ldr	r3, [r4, #8]
 8004316:	3b01      	subs	r3, #1
 8004318:	60a3      	str	r3, [r4, #8]
 800431a:	6923      	ldr	r3, [r4, #16]
 800431c:	3301      	adds	r3, #1
 800431e:	6123      	str	r3, [r4, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3b01      	subs	r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	f340 8084 	ble.w	8004434 <_scanf_float+0x27c>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	3301      	adds	r3, #1
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	e766      	b.n	8004202 <_scanf_float+0x4a>
 8004334:	eb1a 0f05 	cmn.w	sl, r5
 8004338:	f47f af70 	bne.w	800421c <_scanf_float+0x64>
 800433c:	6822      	ldr	r2, [r4, #0]
 800433e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004342:	6022      	str	r2, [r4, #0]
 8004344:	f806 3b01 	strb.w	r3, [r6], #1
 8004348:	e7e4      	b.n	8004314 <_scanf_float+0x15c>
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	0610      	lsls	r0, r2, #24
 800434e:	f57f af65 	bpl.w	800421c <_scanf_float+0x64>
 8004352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004356:	e7f4      	b.n	8004342 <_scanf_float+0x18a>
 8004358:	f1ba 0f00 	cmp.w	sl, #0
 800435c:	d10e      	bne.n	800437c <_scanf_float+0x1c4>
 800435e:	f1b9 0f00 	cmp.w	r9, #0
 8004362:	d10e      	bne.n	8004382 <_scanf_float+0x1ca>
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800436a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800436e:	d108      	bne.n	8004382 <_scanf_float+0x1ca>
 8004370:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004374:	f04f 0a01 	mov.w	sl, #1
 8004378:	6022      	str	r2, [r4, #0]
 800437a:	e7e3      	b.n	8004344 <_scanf_float+0x18c>
 800437c:	f1ba 0f02 	cmp.w	sl, #2
 8004380:	d055      	beq.n	800442e <_scanf_float+0x276>
 8004382:	2d01      	cmp	r5, #1
 8004384:	d002      	beq.n	800438c <_scanf_float+0x1d4>
 8004386:	2d04      	cmp	r5, #4
 8004388:	f47f af48 	bne.w	800421c <_scanf_float+0x64>
 800438c:	3501      	adds	r5, #1
 800438e:	b2ed      	uxtb	r5, r5
 8004390:	e7d8      	b.n	8004344 <_scanf_float+0x18c>
 8004392:	f1ba 0f01 	cmp.w	sl, #1
 8004396:	f47f af41 	bne.w	800421c <_scanf_float+0x64>
 800439a:	f04f 0a02 	mov.w	sl, #2
 800439e:	e7d1      	b.n	8004344 <_scanf_float+0x18c>
 80043a0:	b97d      	cbnz	r5, 80043c2 <_scanf_float+0x20a>
 80043a2:	f1b9 0f00 	cmp.w	r9, #0
 80043a6:	f47f af3c 	bne.w	8004222 <_scanf_float+0x6a>
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80043b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80043b4:	f47f af39 	bne.w	800422a <_scanf_float+0x72>
 80043b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80043bc:	2501      	movs	r5, #1
 80043be:	6022      	str	r2, [r4, #0]
 80043c0:	e7c0      	b.n	8004344 <_scanf_float+0x18c>
 80043c2:	2d03      	cmp	r5, #3
 80043c4:	d0e2      	beq.n	800438c <_scanf_float+0x1d4>
 80043c6:	2d05      	cmp	r5, #5
 80043c8:	e7de      	b.n	8004388 <_scanf_float+0x1d0>
 80043ca:	2d02      	cmp	r5, #2
 80043cc:	f47f af26 	bne.w	800421c <_scanf_float+0x64>
 80043d0:	2503      	movs	r5, #3
 80043d2:	e7b7      	b.n	8004344 <_scanf_float+0x18c>
 80043d4:	2d06      	cmp	r5, #6
 80043d6:	f47f af21 	bne.w	800421c <_scanf_float+0x64>
 80043da:	2507      	movs	r5, #7
 80043dc:	e7b2      	b.n	8004344 <_scanf_float+0x18c>
 80043de:	6822      	ldr	r2, [r4, #0]
 80043e0:	0591      	lsls	r1, r2, #22
 80043e2:	f57f af1b 	bpl.w	800421c <_scanf_float+0x64>
 80043e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80043ea:	6022      	str	r2, [r4, #0]
 80043ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80043f0:	e7a8      	b.n	8004344 <_scanf_float+0x18c>
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80043f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80043fc:	d006      	beq.n	800440c <_scanf_float+0x254>
 80043fe:	0550      	lsls	r0, r2, #21
 8004400:	f57f af0c 	bpl.w	800421c <_scanf_float+0x64>
 8004404:	f1b9 0f00 	cmp.w	r9, #0
 8004408:	f43f af0f 	beq.w	800422a <_scanf_float+0x72>
 800440c:	0591      	lsls	r1, r2, #22
 800440e:	bf58      	it	pl
 8004410:	9901      	ldrpl	r1, [sp, #4]
 8004412:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004416:	bf58      	it	pl
 8004418:	eba9 0101 	subpl.w	r1, r9, r1
 800441c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004420:	f04f 0900 	mov.w	r9, #0
 8004424:	bf58      	it	pl
 8004426:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800442a:	6022      	str	r2, [r4, #0]
 800442c:	e78a      	b.n	8004344 <_scanf_float+0x18c>
 800442e:	f04f 0a03 	mov.w	sl, #3
 8004432:	e787      	b.n	8004344 <_scanf_float+0x18c>
 8004434:	4639      	mov	r1, r7
 8004436:	4640      	mov	r0, r8
 8004438:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800443c:	4798      	blx	r3
 800443e:	2800      	cmp	r0, #0
 8004440:	f43f aedf 	beq.w	8004202 <_scanf_float+0x4a>
 8004444:	e6ea      	b.n	800421c <_scanf_float+0x64>
 8004446:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800444a:	463a      	mov	r2, r7
 800444c:	4640      	mov	r0, r8
 800444e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004452:	4798      	blx	r3
 8004454:	6923      	ldr	r3, [r4, #16]
 8004456:	3b01      	subs	r3, #1
 8004458:	6123      	str	r3, [r4, #16]
 800445a:	e6ec      	b.n	8004236 <_scanf_float+0x7e>
 800445c:	1e6b      	subs	r3, r5, #1
 800445e:	2b06      	cmp	r3, #6
 8004460:	d825      	bhi.n	80044ae <_scanf_float+0x2f6>
 8004462:	2d02      	cmp	r5, #2
 8004464:	d836      	bhi.n	80044d4 <_scanf_float+0x31c>
 8004466:	455e      	cmp	r6, fp
 8004468:	f67f aee8 	bls.w	800423c <_scanf_float+0x84>
 800446c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004470:	463a      	mov	r2, r7
 8004472:	4640      	mov	r0, r8
 8004474:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004478:	4798      	blx	r3
 800447a:	6923      	ldr	r3, [r4, #16]
 800447c:	3b01      	subs	r3, #1
 800447e:	6123      	str	r3, [r4, #16]
 8004480:	e7f1      	b.n	8004466 <_scanf_float+0x2ae>
 8004482:	9802      	ldr	r0, [sp, #8]
 8004484:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004488:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800448c:	463a      	mov	r2, r7
 800448e:	9002      	str	r0, [sp, #8]
 8004490:	4640      	mov	r0, r8
 8004492:	4798      	blx	r3
 8004494:	6923      	ldr	r3, [r4, #16]
 8004496:	3b01      	subs	r3, #1
 8004498:	6123      	str	r3, [r4, #16]
 800449a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800449e:	fa5f fa8a 	uxtb.w	sl, sl
 80044a2:	f1ba 0f02 	cmp.w	sl, #2
 80044a6:	d1ec      	bne.n	8004482 <_scanf_float+0x2ca>
 80044a8:	3d03      	subs	r5, #3
 80044aa:	b2ed      	uxtb	r5, r5
 80044ac:	1b76      	subs	r6, r6, r5
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	05da      	lsls	r2, r3, #23
 80044b2:	d52f      	bpl.n	8004514 <_scanf_float+0x35c>
 80044b4:	055b      	lsls	r3, r3, #21
 80044b6:	d510      	bpl.n	80044da <_scanf_float+0x322>
 80044b8:	455e      	cmp	r6, fp
 80044ba:	f67f aebf 	bls.w	800423c <_scanf_float+0x84>
 80044be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044c2:	463a      	mov	r2, r7
 80044c4:	4640      	mov	r0, r8
 80044c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80044ca:	4798      	blx	r3
 80044cc:	6923      	ldr	r3, [r4, #16]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	6123      	str	r3, [r4, #16]
 80044d2:	e7f1      	b.n	80044b8 <_scanf_float+0x300>
 80044d4:	46aa      	mov	sl, r5
 80044d6:	9602      	str	r6, [sp, #8]
 80044d8:	e7df      	b.n	800449a <_scanf_float+0x2e2>
 80044da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80044de:	6923      	ldr	r3, [r4, #16]
 80044e0:	2965      	cmp	r1, #101	; 0x65
 80044e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80044e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80044ea:	6123      	str	r3, [r4, #16]
 80044ec:	d00c      	beq.n	8004508 <_scanf_float+0x350>
 80044ee:	2945      	cmp	r1, #69	; 0x45
 80044f0:	d00a      	beq.n	8004508 <_scanf_float+0x350>
 80044f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044f6:	463a      	mov	r2, r7
 80044f8:	4640      	mov	r0, r8
 80044fa:	4798      	blx	r3
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004502:	3b01      	subs	r3, #1
 8004504:	1eb5      	subs	r5, r6, #2
 8004506:	6123      	str	r3, [r4, #16]
 8004508:	463a      	mov	r2, r7
 800450a:	4640      	mov	r0, r8
 800450c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004510:	4798      	blx	r3
 8004512:	462e      	mov	r6, r5
 8004514:	6825      	ldr	r5, [r4, #0]
 8004516:	f015 0510 	ands.w	r5, r5, #16
 800451a:	d155      	bne.n	80045c8 <_scanf_float+0x410>
 800451c:	7035      	strb	r5, [r6, #0]
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004528:	d11b      	bne.n	8004562 <_scanf_float+0x3aa>
 800452a:	9b01      	ldr	r3, [sp, #4]
 800452c:	454b      	cmp	r3, r9
 800452e:	eba3 0209 	sub.w	r2, r3, r9
 8004532:	d123      	bne.n	800457c <_scanf_float+0x3c4>
 8004534:	2200      	movs	r2, #0
 8004536:	4659      	mov	r1, fp
 8004538:	4640      	mov	r0, r8
 800453a:	f000 fead 	bl	8005298 <_strtod_r>
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	9b03      	ldr	r3, [sp, #12]
 8004542:	f012 0f02 	tst.w	r2, #2
 8004546:	4606      	mov	r6, r0
 8004548:	460f      	mov	r7, r1
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	d021      	beq.n	8004592 <_scanf_float+0x3da>
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	9903      	ldr	r1, [sp, #12]
 8004552:	600a      	str	r2, [r1, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	e9c3 6700 	strd	r6, r7, [r3]
 800455a:	68e3      	ldr	r3, [r4, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60e3      	str	r3, [r4, #12]
 8004560:	e66d      	b.n	800423e <_scanf_float+0x86>
 8004562:	9b04      	ldr	r3, [sp, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0e5      	beq.n	8004534 <_scanf_float+0x37c>
 8004568:	9905      	ldr	r1, [sp, #20]
 800456a:	230a      	movs	r3, #10
 800456c:	462a      	mov	r2, r5
 800456e:	4640      	mov	r0, r8
 8004570:	3101      	adds	r1, #1
 8004572:	f000 ff13 	bl	800539c <_strtol_r>
 8004576:	9b04      	ldr	r3, [sp, #16]
 8004578:	9e05      	ldr	r6, [sp, #20]
 800457a:	1ac2      	subs	r2, r0, r3
 800457c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004580:	429e      	cmp	r6, r3
 8004582:	bf28      	it	cs
 8004584:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004588:	4630      	mov	r0, r6
 800458a:	4910      	ldr	r1, [pc, #64]	; (80045cc <_scanf_float+0x414>)
 800458c:	f000 f85a 	bl	8004644 <siprintf>
 8004590:	e7d0      	b.n	8004534 <_scanf_float+0x37c>
 8004592:	f012 0f04 	tst.w	r2, #4
 8004596:	f103 0204 	add.w	r2, r3, #4
 800459a:	d1d9      	bne.n	8004550 <_scanf_float+0x398>
 800459c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80045a0:	f8cc 2000 	str.w	r2, [ip]
 80045a4:	f8d3 8000 	ldr.w	r8, [r3]
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	f7fc fa2e 	bl	8000a0c <__aeabi_dcmpun>
 80045b0:	b128      	cbz	r0, 80045be <_scanf_float+0x406>
 80045b2:	4807      	ldr	r0, [pc, #28]	; (80045d0 <_scanf_float+0x418>)
 80045b4:	f000 f80e 	bl	80045d4 <nanf>
 80045b8:	f8c8 0000 	str.w	r0, [r8]
 80045bc:	e7cd      	b.n	800455a <_scanf_float+0x3a2>
 80045be:	4630      	mov	r0, r6
 80045c0:	4639      	mov	r1, r7
 80045c2:	f7fc fa81 	bl	8000ac8 <__aeabi_d2f>
 80045c6:	e7f7      	b.n	80045b8 <_scanf_float+0x400>
 80045c8:	2500      	movs	r5, #0
 80045ca:	e638      	b.n	800423e <_scanf_float+0x86>
 80045cc:	08008248 	.word	0x08008248
 80045d0:	08008650 	.word	0x08008650

080045d4 <nanf>:
 80045d4:	4800      	ldr	r0, [pc, #0]	; (80045d8 <nanf+0x4>)
 80045d6:	4770      	bx	lr
 80045d8:	7fc00000 	.word	0x7fc00000

080045dc <sniprintf>:
 80045dc:	b40c      	push	{r2, r3}
 80045de:	b530      	push	{r4, r5, lr}
 80045e0:	4b17      	ldr	r3, [pc, #92]	; (8004640 <sniprintf+0x64>)
 80045e2:	1e0c      	subs	r4, r1, #0
 80045e4:	681d      	ldr	r5, [r3, #0]
 80045e6:	b09d      	sub	sp, #116	; 0x74
 80045e8:	da08      	bge.n	80045fc <sniprintf+0x20>
 80045ea:	238b      	movs	r3, #139	; 0x8b
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	602b      	str	r3, [r5, #0]
 80045f2:	b01d      	add	sp, #116	; 0x74
 80045f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045f8:	b002      	add	sp, #8
 80045fa:	4770      	bx	lr
 80045fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004600:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004604:	bf0c      	ite	eq
 8004606:	4623      	moveq	r3, r4
 8004608:	f104 33ff 	addne.w	r3, r4, #4294967295
 800460c:	9304      	str	r3, [sp, #16]
 800460e:	9307      	str	r3, [sp, #28]
 8004610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004614:	9002      	str	r0, [sp, #8]
 8004616:	9006      	str	r0, [sp, #24]
 8004618:	f8ad 3016 	strh.w	r3, [sp, #22]
 800461c:	4628      	mov	r0, r5
 800461e:	ab21      	add	r3, sp, #132	; 0x84
 8004620:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004622:	a902      	add	r1, sp, #8
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	f002 fed9 	bl	80073dc <_svfiprintf_r>
 800462a:	1c43      	adds	r3, r0, #1
 800462c:	bfbc      	itt	lt
 800462e:	238b      	movlt	r3, #139	; 0x8b
 8004630:	602b      	strlt	r3, [r5, #0]
 8004632:	2c00      	cmp	r4, #0
 8004634:	d0dd      	beq.n	80045f2 <sniprintf+0x16>
 8004636:	2200      	movs	r2, #0
 8004638:	9b02      	ldr	r3, [sp, #8]
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e7d9      	b.n	80045f2 <sniprintf+0x16>
 800463e:	bf00      	nop
 8004640:	2000000c 	.word	0x2000000c

08004644 <siprintf>:
 8004644:	b40e      	push	{r1, r2, r3}
 8004646:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800464a:	b500      	push	{lr}
 800464c:	b09c      	sub	sp, #112	; 0x70
 800464e:	ab1d      	add	r3, sp, #116	; 0x74
 8004650:	9002      	str	r0, [sp, #8]
 8004652:	9006      	str	r0, [sp, #24]
 8004654:	9107      	str	r1, [sp, #28]
 8004656:	9104      	str	r1, [sp, #16]
 8004658:	4808      	ldr	r0, [pc, #32]	; (800467c <siprintf+0x38>)
 800465a:	4909      	ldr	r1, [pc, #36]	; (8004680 <siprintf+0x3c>)
 800465c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004660:	9105      	str	r1, [sp, #20]
 8004662:	6800      	ldr	r0, [r0, #0]
 8004664:	a902      	add	r1, sp, #8
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	f002 feb8 	bl	80073dc <_svfiprintf_r>
 800466c:	2200      	movs	r2, #0
 800466e:	9b02      	ldr	r3, [sp, #8]
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	b01c      	add	sp, #112	; 0x70
 8004674:	f85d eb04 	ldr.w	lr, [sp], #4
 8004678:	b003      	add	sp, #12
 800467a:	4770      	bx	lr
 800467c:	2000000c 	.word	0x2000000c
 8004680:	ffff0208 	.word	0xffff0208

08004684 <sulp>:
 8004684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004688:	460f      	mov	r7, r1
 800468a:	4690      	mov	r8, r2
 800468c:	f002 fc12 	bl	8006eb4 <__ulp>
 8004690:	4604      	mov	r4, r0
 8004692:	460d      	mov	r5, r1
 8004694:	f1b8 0f00 	cmp.w	r8, #0
 8004698:	d011      	beq.n	80046be <sulp+0x3a>
 800469a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800469e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	dd0b      	ble.n	80046be <sulp+0x3a>
 80046a6:	2400      	movs	r4, #0
 80046a8:	051b      	lsls	r3, r3, #20
 80046aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80046ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80046b2:	4622      	mov	r2, r4
 80046b4:	462b      	mov	r3, r5
 80046b6:	f7fb ff0f 	bl	80004d8 <__aeabi_dmul>
 80046ba:	4604      	mov	r4, r0
 80046bc:	460d      	mov	r5, r1
 80046be:	4620      	mov	r0, r4
 80046c0:	4629      	mov	r1, r5
 80046c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080046c8 <_strtod_l>:
 80046c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046cc:	469b      	mov	fp, r3
 80046ce:	2300      	movs	r3, #0
 80046d0:	b09f      	sub	sp, #124	; 0x7c
 80046d2:	931a      	str	r3, [sp, #104]	; 0x68
 80046d4:	4b9e      	ldr	r3, [pc, #632]	; (8004950 <_strtod_l+0x288>)
 80046d6:	4682      	mov	sl, r0
 80046d8:	681f      	ldr	r7, [r3, #0]
 80046da:	460e      	mov	r6, r1
 80046dc:	4638      	mov	r0, r7
 80046de:	9215      	str	r2, [sp, #84]	; 0x54
 80046e0:	f7fb fd36 	bl	8000150 <strlen>
 80046e4:	f04f 0800 	mov.w	r8, #0
 80046e8:	4604      	mov	r4, r0
 80046ea:	f04f 0900 	mov.w	r9, #0
 80046ee:	9619      	str	r6, [sp, #100]	; 0x64
 80046f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046f2:	781a      	ldrb	r2, [r3, #0]
 80046f4:	2a2b      	cmp	r2, #43	; 0x2b
 80046f6:	d04c      	beq.n	8004792 <_strtod_l+0xca>
 80046f8:	d83a      	bhi.n	8004770 <_strtod_l+0xa8>
 80046fa:	2a0d      	cmp	r2, #13
 80046fc:	d833      	bhi.n	8004766 <_strtod_l+0x9e>
 80046fe:	2a08      	cmp	r2, #8
 8004700:	d833      	bhi.n	800476a <_strtod_l+0xa2>
 8004702:	2a00      	cmp	r2, #0
 8004704:	d03d      	beq.n	8004782 <_strtod_l+0xba>
 8004706:	2300      	movs	r3, #0
 8004708:	930a      	str	r3, [sp, #40]	; 0x28
 800470a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800470c:	782b      	ldrb	r3, [r5, #0]
 800470e:	2b30      	cmp	r3, #48	; 0x30
 8004710:	f040 80aa 	bne.w	8004868 <_strtod_l+0x1a0>
 8004714:	786b      	ldrb	r3, [r5, #1]
 8004716:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800471a:	2b58      	cmp	r3, #88	; 0x58
 800471c:	d166      	bne.n	80047ec <_strtod_l+0x124>
 800471e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004720:	4650      	mov	r0, sl
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	ab1a      	add	r3, sp, #104	; 0x68
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	4a8a      	ldr	r2, [pc, #552]	; (8004954 <_strtod_l+0x28c>)
 800472a:	f8cd b008 	str.w	fp, [sp, #8]
 800472e:	ab1b      	add	r3, sp, #108	; 0x6c
 8004730:	a919      	add	r1, sp, #100	; 0x64
 8004732:	f001 fd17 	bl	8006164 <__gethex>
 8004736:	f010 0607 	ands.w	r6, r0, #7
 800473a:	4604      	mov	r4, r0
 800473c:	d005      	beq.n	800474a <_strtod_l+0x82>
 800473e:	2e06      	cmp	r6, #6
 8004740:	d129      	bne.n	8004796 <_strtod_l+0xce>
 8004742:	2300      	movs	r3, #0
 8004744:	3501      	adds	r5, #1
 8004746:	9519      	str	r5, [sp, #100]	; 0x64
 8004748:	930a      	str	r3, [sp, #40]	; 0x28
 800474a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 858a 	bne.w	8005266 <_strtod_l+0xb9e>
 8004752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004754:	b1d3      	cbz	r3, 800478c <_strtod_l+0xc4>
 8004756:	4642      	mov	r2, r8
 8004758:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	b01f      	add	sp, #124	; 0x7c
 8004762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004766:	2a20      	cmp	r2, #32
 8004768:	d1cd      	bne.n	8004706 <_strtod_l+0x3e>
 800476a:	3301      	adds	r3, #1
 800476c:	9319      	str	r3, [sp, #100]	; 0x64
 800476e:	e7bf      	b.n	80046f0 <_strtod_l+0x28>
 8004770:	2a2d      	cmp	r2, #45	; 0x2d
 8004772:	d1c8      	bne.n	8004706 <_strtod_l+0x3e>
 8004774:	2201      	movs	r2, #1
 8004776:	920a      	str	r2, [sp, #40]	; 0x28
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	9219      	str	r2, [sp, #100]	; 0x64
 800477c:	785b      	ldrb	r3, [r3, #1]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1c3      	bne.n	800470a <_strtod_l+0x42>
 8004782:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004784:	9619      	str	r6, [sp, #100]	; 0x64
 8004786:	2b00      	cmp	r3, #0
 8004788:	f040 856b 	bne.w	8005262 <_strtod_l+0xb9a>
 800478c:	4642      	mov	r2, r8
 800478e:	464b      	mov	r3, r9
 8004790:	e7e4      	b.n	800475c <_strtod_l+0x94>
 8004792:	2200      	movs	r2, #0
 8004794:	e7ef      	b.n	8004776 <_strtod_l+0xae>
 8004796:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004798:	b13a      	cbz	r2, 80047aa <_strtod_l+0xe2>
 800479a:	2135      	movs	r1, #53	; 0x35
 800479c:	a81c      	add	r0, sp, #112	; 0x70
 800479e:	f002 fc8d 	bl	80070bc <__copybits>
 80047a2:	4650      	mov	r0, sl
 80047a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80047a6:	f002 f855 	bl	8006854 <_Bfree>
 80047aa:	3e01      	subs	r6, #1
 80047ac:	2e04      	cmp	r6, #4
 80047ae:	d806      	bhi.n	80047be <_strtod_l+0xf6>
 80047b0:	e8df f006 	tbb	[pc, r6]
 80047b4:	1714030a 	.word	0x1714030a
 80047b8:	0a          	.byte	0x0a
 80047b9:	00          	.byte	0x00
 80047ba:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80047be:	0721      	lsls	r1, r4, #28
 80047c0:	d5c3      	bpl.n	800474a <_strtod_l+0x82>
 80047c2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80047c6:	e7c0      	b.n	800474a <_strtod_l+0x82>
 80047c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80047ca:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80047ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80047d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80047d6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80047da:	e7f0      	b.n	80047be <_strtod_l+0xf6>
 80047dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004958 <_strtod_l+0x290>
 80047e0:	e7ed      	b.n	80047be <_strtod_l+0xf6>
 80047e2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80047e6:	f04f 38ff 	mov.w	r8, #4294967295
 80047ea:	e7e8      	b.n	80047be <_strtod_l+0xf6>
 80047ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	9219      	str	r2, [sp, #100]	; 0x64
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b30      	cmp	r3, #48	; 0x30
 80047f6:	d0f9      	beq.n	80047ec <_strtod_l+0x124>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0a6      	beq.n	800474a <_strtod_l+0x82>
 80047fc:	2301      	movs	r3, #1
 80047fe:	9307      	str	r3, [sp, #28]
 8004800:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004802:	220a      	movs	r2, #10
 8004804:	9308      	str	r3, [sp, #32]
 8004806:	2300      	movs	r3, #0
 8004808:	469b      	mov	fp, r3
 800480a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800480e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004810:	7805      	ldrb	r5, [r0, #0]
 8004812:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004816:	b2d9      	uxtb	r1, r3
 8004818:	2909      	cmp	r1, #9
 800481a:	d927      	bls.n	800486c <_strtod_l+0x1a4>
 800481c:	4622      	mov	r2, r4
 800481e:	4639      	mov	r1, r7
 8004820:	f002 fef2 	bl	8007608 <strncmp>
 8004824:	2800      	cmp	r0, #0
 8004826:	d033      	beq.n	8004890 <_strtod_l+0x1c8>
 8004828:	2000      	movs	r0, #0
 800482a:	462a      	mov	r2, r5
 800482c:	465c      	mov	r4, fp
 800482e:	4603      	mov	r3, r0
 8004830:	9004      	str	r0, [sp, #16]
 8004832:	2a65      	cmp	r2, #101	; 0x65
 8004834:	d001      	beq.n	800483a <_strtod_l+0x172>
 8004836:	2a45      	cmp	r2, #69	; 0x45
 8004838:	d114      	bne.n	8004864 <_strtod_l+0x19c>
 800483a:	b91c      	cbnz	r4, 8004844 <_strtod_l+0x17c>
 800483c:	9a07      	ldr	r2, [sp, #28]
 800483e:	4302      	orrs	r2, r0
 8004840:	d09f      	beq.n	8004782 <_strtod_l+0xba>
 8004842:	2400      	movs	r4, #0
 8004844:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004846:	1c72      	adds	r2, r6, #1
 8004848:	9219      	str	r2, [sp, #100]	; 0x64
 800484a:	7872      	ldrb	r2, [r6, #1]
 800484c:	2a2b      	cmp	r2, #43	; 0x2b
 800484e:	d079      	beq.n	8004944 <_strtod_l+0x27c>
 8004850:	2a2d      	cmp	r2, #45	; 0x2d
 8004852:	f000 8083 	beq.w	800495c <_strtod_l+0x294>
 8004856:	2700      	movs	r7, #0
 8004858:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800485c:	2909      	cmp	r1, #9
 800485e:	f240 8083 	bls.w	8004968 <_strtod_l+0x2a0>
 8004862:	9619      	str	r6, [sp, #100]	; 0x64
 8004864:	2500      	movs	r5, #0
 8004866:	e09f      	b.n	80049a8 <_strtod_l+0x2e0>
 8004868:	2300      	movs	r3, #0
 800486a:	e7c8      	b.n	80047fe <_strtod_l+0x136>
 800486c:	f1bb 0f08 	cmp.w	fp, #8
 8004870:	bfd5      	itete	le
 8004872:	9906      	ldrle	r1, [sp, #24]
 8004874:	9905      	ldrgt	r1, [sp, #20]
 8004876:	fb02 3301 	mlale	r3, r2, r1, r3
 800487a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800487e:	f100 0001 	add.w	r0, r0, #1
 8004882:	bfd4      	ite	le
 8004884:	9306      	strle	r3, [sp, #24]
 8004886:	9305      	strgt	r3, [sp, #20]
 8004888:	f10b 0b01 	add.w	fp, fp, #1
 800488c:	9019      	str	r0, [sp, #100]	; 0x64
 800488e:	e7be      	b.n	800480e <_strtod_l+0x146>
 8004890:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004892:	191a      	adds	r2, r3, r4
 8004894:	9219      	str	r2, [sp, #100]	; 0x64
 8004896:	5d1a      	ldrb	r2, [r3, r4]
 8004898:	f1bb 0f00 	cmp.w	fp, #0
 800489c:	d036      	beq.n	800490c <_strtod_l+0x244>
 800489e:	465c      	mov	r4, fp
 80048a0:	9004      	str	r0, [sp, #16]
 80048a2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80048a6:	2b09      	cmp	r3, #9
 80048a8:	d912      	bls.n	80048d0 <_strtod_l+0x208>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e7c1      	b.n	8004832 <_strtod_l+0x16a>
 80048ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048b0:	3001      	adds	r0, #1
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	9219      	str	r2, [sp, #100]	; 0x64
 80048b6:	785a      	ldrb	r2, [r3, #1]
 80048b8:	2a30      	cmp	r2, #48	; 0x30
 80048ba:	d0f8      	beq.n	80048ae <_strtod_l+0x1e6>
 80048bc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	f200 84d5 	bhi.w	8005270 <_strtod_l+0xba8>
 80048c6:	9004      	str	r0, [sp, #16]
 80048c8:	2000      	movs	r0, #0
 80048ca:	4604      	mov	r4, r0
 80048cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048ce:	9308      	str	r3, [sp, #32]
 80048d0:	3a30      	subs	r2, #48	; 0x30
 80048d2:	f100 0301 	add.w	r3, r0, #1
 80048d6:	d013      	beq.n	8004900 <_strtod_l+0x238>
 80048d8:	9904      	ldr	r1, [sp, #16]
 80048da:	1905      	adds	r5, r0, r4
 80048dc:	4419      	add	r1, r3
 80048de:	9104      	str	r1, [sp, #16]
 80048e0:	4623      	mov	r3, r4
 80048e2:	210a      	movs	r1, #10
 80048e4:	42ab      	cmp	r3, r5
 80048e6:	d113      	bne.n	8004910 <_strtod_l+0x248>
 80048e8:	1823      	adds	r3, r4, r0
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	f104 0401 	add.w	r4, r4, #1
 80048f0:	4404      	add	r4, r0
 80048f2:	dc1b      	bgt.n	800492c <_strtod_l+0x264>
 80048f4:	230a      	movs	r3, #10
 80048f6:	9906      	ldr	r1, [sp, #24]
 80048f8:	fb03 2301 	mla	r3, r3, r1, r2
 80048fc:	9306      	str	r3, [sp, #24]
 80048fe:	2300      	movs	r3, #0
 8004900:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004902:	4618      	mov	r0, r3
 8004904:	1c51      	adds	r1, r2, #1
 8004906:	9119      	str	r1, [sp, #100]	; 0x64
 8004908:	7852      	ldrb	r2, [r2, #1]
 800490a:	e7ca      	b.n	80048a2 <_strtod_l+0x1da>
 800490c:	4658      	mov	r0, fp
 800490e:	e7d3      	b.n	80048b8 <_strtod_l+0x1f0>
 8004910:	2b08      	cmp	r3, #8
 8004912:	dc04      	bgt.n	800491e <_strtod_l+0x256>
 8004914:	9f06      	ldr	r7, [sp, #24]
 8004916:	434f      	muls	r7, r1
 8004918:	9706      	str	r7, [sp, #24]
 800491a:	3301      	adds	r3, #1
 800491c:	e7e2      	b.n	80048e4 <_strtod_l+0x21c>
 800491e:	1c5f      	adds	r7, r3, #1
 8004920:	2f10      	cmp	r7, #16
 8004922:	bfde      	ittt	le
 8004924:	9f05      	ldrle	r7, [sp, #20]
 8004926:	434f      	mulle	r7, r1
 8004928:	9705      	strle	r7, [sp, #20]
 800492a:	e7f6      	b.n	800491a <_strtod_l+0x252>
 800492c:	2c10      	cmp	r4, #16
 800492e:	bfdf      	itttt	le
 8004930:	230a      	movle	r3, #10
 8004932:	9905      	ldrle	r1, [sp, #20]
 8004934:	fb03 2301 	mlale	r3, r3, r1, r2
 8004938:	9305      	strle	r3, [sp, #20]
 800493a:	e7e0      	b.n	80048fe <_strtod_l+0x236>
 800493c:	2300      	movs	r3, #0
 800493e:	9304      	str	r3, [sp, #16]
 8004940:	2301      	movs	r3, #1
 8004942:	e77b      	b.n	800483c <_strtod_l+0x174>
 8004944:	2700      	movs	r7, #0
 8004946:	1cb2      	adds	r2, r6, #2
 8004948:	9219      	str	r2, [sp, #100]	; 0x64
 800494a:	78b2      	ldrb	r2, [r6, #2]
 800494c:	e784      	b.n	8004858 <_strtod_l+0x190>
 800494e:	bf00      	nop
 8004950:	08008498 	.word	0x08008498
 8004954:	08008250 	.word	0x08008250
 8004958:	7ff00000 	.word	0x7ff00000
 800495c:	2701      	movs	r7, #1
 800495e:	e7f2      	b.n	8004946 <_strtod_l+0x27e>
 8004960:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004962:	1c51      	adds	r1, r2, #1
 8004964:	9119      	str	r1, [sp, #100]	; 0x64
 8004966:	7852      	ldrb	r2, [r2, #1]
 8004968:	2a30      	cmp	r2, #48	; 0x30
 800496a:	d0f9      	beq.n	8004960 <_strtod_l+0x298>
 800496c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004970:	2908      	cmp	r1, #8
 8004972:	f63f af77 	bhi.w	8004864 <_strtod_l+0x19c>
 8004976:	f04f 0e0a 	mov.w	lr, #10
 800497a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800497e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004980:	9209      	str	r2, [sp, #36]	; 0x24
 8004982:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004984:	1c51      	adds	r1, r2, #1
 8004986:	9119      	str	r1, [sp, #100]	; 0x64
 8004988:	7852      	ldrb	r2, [r2, #1]
 800498a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800498e:	2d09      	cmp	r5, #9
 8004990:	d935      	bls.n	80049fe <_strtod_l+0x336>
 8004992:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004994:	1b49      	subs	r1, r1, r5
 8004996:	2908      	cmp	r1, #8
 8004998:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800499c:	dc02      	bgt.n	80049a4 <_strtod_l+0x2dc>
 800499e:	4565      	cmp	r5, ip
 80049a0:	bfa8      	it	ge
 80049a2:	4665      	movge	r5, ip
 80049a4:	b107      	cbz	r7, 80049a8 <_strtod_l+0x2e0>
 80049a6:	426d      	negs	r5, r5
 80049a8:	2c00      	cmp	r4, #0
 80049aa:	d14c      	bne.n	8004a46 <_strtod_l+0x37e>
 80049ac:	9907      	ldr	r1, [sp, #28]
 80049ae:	4301      	orrs	r1, r0
 80049b0:	f47f aecb 	bne.w	800474a <_strtod_l+0x82>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f47f aee4 	bne.w	8004782 <_strtod_l+0xba>
 80049ba:	2a69      	cmp	r2, #105	; 0x69
 80049bc:	d026      	beq.n	8004a0c <_strtod_l+0x344>
 80049be:	dc23      	bgt.n	8004a08 <_strtod_l+0x340>
 80049c0:	2a49      	cmp	r2, #73	; 0x49
 80049c2:	d023      	beq.n	8004a0c <_strtod_l+0x344>
 80049c4:	2a4e      	cmp	r2, #78	; 0x4e
 80049c6:	f47f aedc 	bne.w	8004782 <_strtod_l+0xba>
 80049ca:	499d      	ldr	r1, [pc, #628]	; (8004c40 <_strtod_l+0x578>)
 80049cc:	a819      	add	r0, sp, #100	; 0x64
 80049ce:	f001 fe17 	bl	8006600 <__match>
 80049d2:	2800      	cmp	r0, #0
 80049d4:	f43f aed5 	beq.w	8004782 <_strtod_l+0xba>
 80049d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b28      	cmp	r3, #40	; 0x28
 80049de:	d12c      	bne.n	8004a3a <_strtod_l+0x372>
 80049e0:	4998      	ldr	r1, [pc, #608]	; (8004c44 <_strtod_l+0x57c>)
 80049e2:	aa1c      	add	r2, sp, #112	; 0x70
 80049e4:	a819      	add	r0, sp, #100	; 0x64
 80049e6:	f001 fe1f 	bl	8006628 <__hexnan>
 80049ea:	2805      	cmp	r0, #5
 80049ec:	d125      	bne.n	8004a3a <_strtod_l+0x372>
 80049ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80049f0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80049f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80049f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80049fc:	e6a5      	b.n	800474a <_strtod_l+0x82>
 80049fe:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004a02:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004a06:	e7bc      	b.n	8004982 <_strtod_l+0x2ba>
 8004a08:	2a6e      	cmp	r2, #110	; 0x6e
 8004a0a:	e7dc      	b.n	80049c6 <_strtod_l+0x2fe>
 8004a0c:	498e      	ldr	r1, [pc, #568]	; (8004c48 <_strtod_l+0x580>)
 8004a0e:	a819      	add	r0, sp, #100	; 0x64
 8004a10:	f001 fdf6 	bl	8006600 <__match>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	f43f aeb4 	beq.w	8004782 <_strtod_l+0xba>
 8004a1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a1c:	498b      	ldr	r1, [pc, #556]	; (8004c4c <_strtod_l+0x584>)
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	a819      	add	r0, sp, #100	; 0x64
 8004a22:	9319      	str	r3, [sp, #100]	; 0x64
 8004a24:	f001 fdec 	bl	8006600 <__match>
 8004a28:	b910      	cbnz	r0, 8004a30 <_strtod_l+0x368>
 8004a2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	9319      	str	r3, [sp, #100]	; 0x64
 8004a30:	f04f 0800 	mov.w	r8, #0
 8004a34:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004c50 <_strtod_l+0x588>
 8004a38:	e687      	b.n	800474a <_strtod_l+0x82>
 8004a3a:	4886      	ldr	r0, [pc, #536]	; (8004c54 <_strtod_l+0x58c>)
 8004a3c:	f002 fdce 	bl	80075dc <nan>
 8004a40:	4680      	mov	r8, r0
 8004a42:	4689      	mov	r9, r1
 8004a44:	e681      	b.n	800474a <_strtod_l+0x82>
 8004a46:	9b04      	ldr	r3, [sp, #16]
 8004a48:	f1bb 0f00 	cmp.w	fp, #0
 8004a4c:	bf08      	it	eq
 8004a4e:	46a3      	moveq	fp, r4
 8004a50:	1aeb      	subs	r3, r5, r3
 8004a52:	2c10      	cmp	r4, #16
 8004a54:	9806      	ldr	r0, [sp, #24]
 8004a56:	4626      	mov	r6, r4
 8004a58:	9307      	str	r3, [sp, #28]
 8004a5a:	bfa8      	it	ge
 8004a5c:	2610      	movge	r6, #16
 8004a5e:	f7fb fcc1 	bl	80003e4 <__aeabi_ui2d>
 8004a62:	2c09      	cmp	r4, #9
 8004a64:	4680      	mov	r8, r0
 8004a66:	4689      	mov	r9, r1
 8004a68:	dd13      	ble.n	8004a92 <_strtod_l+0x3ca>
 8004a6a:	4b7b      	ldr	r3, [pc, #492]	; (8004c58 <_strtod_l+0x590>)
 8004a6c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004a70:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004a74:	f7fb fd30 	bl	80004d8 <__aeabi_dmul>
 8004a78:	4680      	mov	r8, r0
 8004a7a:	9805      	ldr	r0, [sp, #20]
 8004a7c:	4689      	mov	r9, r1
 8004a7e:	f7fb fcb1 	bl	80003e4 <__aeabi_ui2d>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4640      	mov	r0, r8
 8004a88:	4649      	mov	r1, r9
 8004a8a:	f7fb fb6f 	bl	800016c <__adddf3>
 8004a8e:	4680      	mov	r8, r0
 8004a90:	4689      	mov	r9, r1
 8004a92:	2c0f      	cmp	r4, #15
 8004a94:	dc36      	bgt.n	8004b04 <_strtod_l+0x43c>
 8004a96:	9b07      	ldr	r3, [sp, #28]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f43f ae56 	beq.w	800474a <_strtod_l+0x82>
 8004a9e:	dd22      	ble.n	8004ae6 <_strtod_l+0x41e>
 8004aa0:	2b16      	cmp	r3, #22
 8004aa2:	dc09      	bgt.n	8004ab8 <_strtod_l+0x3f0>
 8004aa4:	496c      	ldr	r1, [pc, #432]	; (8004c58 <_strtod_l+0x590>)
 8004aa6:	4642      	mov	r2, r8
 8004aa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004aac:	464b      	mov	r3, r9
 8004aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ab2:	f7fb fd11 	bl	80004d8 <__aeabi_dmul>
 8004ab6:	e7c3      	b.n	8004a40 <_strtod_l+0x378>
 8004ab8:	9a07      	ldr	r2, [sp, #28]
 8004aba:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	db20      	blt.n	8004b04 <_strtod_l+0x43c>
 8004ac2:	4d65      	ldr	r5, [pc, #404]	; (8004c58 <_strtod_l+0x590>)
 8004ac4:	f1c4 040f 	rsb	r4, r4, #15
 8004ac8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004acc:	4642      	mov	r2, r8
 8004ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	f7fb fd00 	bl	80004d8 <__aeabi_dmul>
 8004ad8:	9b07      	ldr	r3, [sp, #28]
 8004ada:	1b1c      	subs	r4, r3, r4
 8004adc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004ae0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ae4:	e7e5      	b.n	8004ab2 <_strtod_l+0x3ea>
 8004ae6:	9b07      	ldr	r3, [sp, #28]
 8004ae8:	3316      	adds	r3, #22
 8004aea:	db0b      	blt.n	8004b04 <_strtod_l+0x43c>
 8004aec:	9b04      	ldr	r3, [sp, #16]
 8004aee:	4640      	mov	r0, r8
 8004af0:	1b5d      	subs	r5, r3, r5
 8004af2:	4b59      	ldr	r3, [pc, #356]	; (8004c58 <_strtod_l+0x590>)
 8004af4:	4649      	mov	r1, r9
 8004af6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004afa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004afe:	f7fb fe15 	bl	800072c <__aeabi_ddiv>
 8004b02:	e79d      	b.n	8004a40 <_strtod_l+0x378>
 8004b04:	9b07      	ldr	r3, [sp, #28]
 8004b06:	1ba6      	subs	r6, r4, r6
 8004b08:	441e      	add	r6, r3
 8004b0a:	2e00      	cmp	r6, #0
 8004b0c:	dd74      	ble.n	8004bf8 <_strtod_l+0x530>
 8004b0e:	f016 030f 	ands.w	r3, r6, #15
 8004b12:	d00a      	beq.n	8004b2a <_strtod_l+0x462>
 8004b14:	4950      	ldr	r1, [pc, #320]	; (8004c58 <_strtod_l+0x590>)
 8004b16:	4642      	mov	r2, r8
 8004b18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b20:	464b      	mov	r3, r9
 8004b22:	f7fb fcd9 	bl	80004d8 <__aeabi_dmul>
 8004b26:	4680      	mov	r8, r0
 8004b28:	4689      	mov	r9, r1
 8004b2a:	f036 060f 	bics.w	r6, r6, #15
 8004b2e:	d052      	beq.n	8004bd6 <_strtod_l+0x50e>
 8004b30:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004b34:	dd27      	ble.n	8004b86 <_strtod_l+0x4be>
 8004b36:	f04f 0b00 	mov.w	fp, #0
 8004b3a:	f8cd b010 	str.w	fp, [sp, #16]
 8004b3e:	f8cd b020 	str.w	fp, [sp, #32]
 8004b42:	f8cd b018 	str.w	fp, [sp, #24]
 8004b46:	2322      	movs	r3, #34	; 0x22
 8004b48:	f04f 0800 	mov.w	r8, #0
 8004b4c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004c50 <_strtod_l+0x588>
 8004b50:	f8ca 3000 	str.w	r3, [sl]
 8004b54:	9b08      	ldr	r3, [sp, #32]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f43f adf7 	beq.w	800474a <_strtod_l+0x82>
 8004b5c:	4650      	mov	r0, sl
 8004b5e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004b60:	f001 fe78 	bl	8006854 <_Bfree>
 8004b64:	4650      	mov	r0, sl
 8004b66:	9906      	ldr	r1, [sp, #24]
 8004b68:	f001 fe74 	bl	8006854 <_Bfree>
 8004b6c:	4650      	mov	r0, sl
 8004b6e:	9904      	ldr	r1, [sp, #16]
 8004b70:	f001 fe70 	bl	8006854 <_Bfree>
 8004b74:	4650      	mov	r0, sl
 8004b76:	9908      	ldr	r1, [sp, #32]
 8004b78:	f001 fe6c 	bl	8006854 <_Bfree>
 8004b7c:	4659      	mov	r1, fp
 8004b7e:	4650      	mov	r0, sl
 8004b80:	f001 fe68 	bl	8006854 <_Bfree>
 8004b84:	e5e1      	b.n	800474a <_strtod_l+0x82>
 8004b86:	4b35      	ldr	r3, [pc, #212]	; (8004c5c <_strtod_l+0x594>)
 8004b88:	4640      	mov	r0, r8
 8004b8a:	9305      	str	r3, [sp, #20]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4649      	mov	r1, r9
 8004b90:	461f      	mov	r7, r3
 8004b92:	1136      	asrs	r6, r6, #4
 8004b94:	2e01      	cmp	r6, #1
 8004b96:	dc21      	bgt.n	8004bdc <_strtod_l+0x514>
 8004b98:	b10b      	cbz	r3, 8004b9e <_strtod_l+0x4d6>
 8004b9a:	4680      	mov	r8, r0
 8004b9c:	4689      	mov	r9, r1
 8004b9e:	4b2f      	ldr	r3, [pc, #188]	; (8004c5c <_strtod_l+0x594>)
 8004ba0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004ba4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004ba8:	4642      	mov	r2, r8
 8004baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bae:	464b      	mov	r3, r9
 8004bb0:	f7fb fc92 	bl	80004d8 <__aeabi_dmul>
 8004bb4:	4b26      	ldr	r3, [pc, #152]	; (8004c50 <_strtod_l+0x588>)
 8004bb6:	460a      	mov	r2, r1
 8004bb8:	400b      	ands	r3, r1
 8004bba:	4929      	ldr	r1, [pc, #164]	; (8004c60 <_strtod_l+0x598>)
 8004bbc:	4680      	mov	r8, r0
 8004bbe:	428b      	cmp	r3, r1
 8004bc0:	d8b9      	bhi.n	8004b36 <_strtod_l+0x46e>
 8004bc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004bc6:	428b      	cmp	r3, r1
 8004bc8:	bf86      	itte	hi
 8004bca:	f04f 38ff 	movhi.w	r8, #4294967295
 8004bce:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004c64 <_strtod_l+0x59c>
 8004bd2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	9305      	str	r3, [sp, #20]
 8004bda:	e07f      	b.n	8004cdc <_strtod_l+0x614>
 8004bdc:	07f2      	lsls	r2, r6, #31
 8004bde:	d505      	bpl.n	8004bec <_strtod_l+0x524>
 8004be0:	9b05      	ldr	r3, [sp, #20]
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	f7fb fc77 	bl	80004d8 <__aeabi_dmul>
 8004bea:	2301      	movs	r3, #1
 8004bec:	9a05      	ldr	r2, [sp, #20]
 8004bee:	3701      	adds	r7, #1
 8004bf0:	3208      	adds	r2, #8
 8004bf2:	1076      	asrs	r6, r6, #1
 8004bf4:	9205      	str	r2, [sp, #20]
 8004bf6:	e7cd      	b.n	8004b94 <_strtod_l+0x4cc>
 8004bf8:	d0ed      	beq.n	8004bd6 <_strtod_l+0x50e>
 8004bfa:	4276      	negs	r6, r6
 8004bfc:	f016 020f 	ands.w	r2, r6, #15
 8004c00:	d00a      	beq.n	8004c18 <_strtod_l+0x550>
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <_strtod_l+0x590>)
 8004c04:	4640      	mov	r0, r8
 8004c06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	f7fb fd8c 	bl	800072c <__aeabi_ddiv>
 8004c14:	4680      	mov	r8, r0
 8004c16:	4689      	mov	r9, r1
 8004c18:	1136      	asrs	r6, r6, #4
 8004c1a:	d0dc      	beq.n	8004bd6 <_strtod_l+0x50e>
 8004c1c:	2e1f      	cmp	r6, #31
 8004c1e:	dd23      	ble.n	8004c68 <_strtod_l+0x5a0>
 8004c20:	f04f 0b00 	mov.w	fp, #0
 8004c24:	f8cd b010 	str.w	fp, [sp, #16]
 8004c28:	f8cd b020 	str.w	fp, [sp, #32]
 8004c2c:	f8cd b018 	str.w	fp, [sp, #24]
 8004c30:	2322      	movs	r3, #34	; 0x22
 8004c32:	f04f 0800 	mov.w	r8, #0
 8004c36:	f04f 0900 	mov.w	r9, #0
 8004c3a:	f8ca 3000 	str.w	r3, [sl]
 8004c3e:	e789      	b.n	8004b54 <_strtod_l+0x48c>
 8004c40:	08008221 	.word	0x08008221
 8004c44:	08008264 	.word	0x08008264
 8004c48:	08008219 	.word	0x08008219
 8004c4c:	080083a4 	.word	0x080083a4
 8004c50:	7ff00000 	.word	0x7ff00000
 8004c54:	08008650 	.word	0x08008650
 8004c58:	08008530 	.word	0x08008530
 8004c5c:	08008508 	.word	0x08008508
 8004c60:	7ca00000 	.word	0x7ca00000
 8004c64:	7fefffff 	.word	0x7fefffff
 8004c68:	f016 0310 	ands.w	r3, r6, #16
 8004c6c:	bf18      	it	ne
 8004c6e:	236a      	movne	r3, #106	; 0x6a
 8004c70:	4640      	mov	r0, r8
 8004c72:	9305      	str	r3, [sp, #20]
 8004c74:	4649      	mov	r1, r9
 8004c76:	2300      	movs	r3, #0
 8004c78:	4fb0      	ldr	r7, [pc, #704]	; (8004f3c <_strtod_l+0x874>)
 8004c7a:	07f2      	lsls	r2, r6, #31
 8004c7c:	d504      	bpl.n	8004c88 <_strtod_l+0x5c0>
 8004c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c82:	f7fb fc29 	bl	80004d8 <__aeabi_dmul>
 8004c86:	2301      	movs	r3, #1
 8004c88:	1076      	asrs	r6, r6, #1
 8004c8a:	f107 0708 	add.w	r7, r7, #8
 8004c8e:	d1f4      	bne.n	8004c7a <_strtod_l+0x5b2>
 8004c90:	b10b      	cbz	r3, 8004c96 <_strtod_l+0x5ce>
 8004c92:	4680      	mov	r8, r0
 8004c94:	4689      	mov	r9, r1
 8004c96:	9b05      	ldr	r3, [sp, #20]
 8004c98:	b1c3      	cbz	r3, 8004ccc <_strtod_l+0x604>
 8004c9a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004c9e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	dd11      	ble.n	8004ccc <_strtod_l+0x604>
 8004ca8:	2b1f      	cmp	r3, #31
 8004caa:	f340 8127 	ble.w	8004efc <_strtod_l+0x834>
 8004cae:	2b34      	cmp	r3, #52	; 0x34
 8004cb0:	bfd8      	it	le
 8004cb2:	f04f 33ff 	movle.w	r3, #4294967295
 8004cb6:	f04f 0800 	mov.w	r8, #0
 8004cba:	bfcf      	iteee	gt
 8004cbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004cc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004cc4:	fa03 f202 	lslle.w	r2, r3, r2
 8004cc8:	ea02 0901 	andle.w	r9, r2, r1
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2300      	movs	r3, #0
 8004cd0:	4640      	mov	r0, r8
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	f7fb fe68 	bl	80009a8 <__aeabi_dcmpeq>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d1a1      	bne.n	8004c20 <_strtod_l+0x558>
 8004cdc:	9b06      	ldr	r3, [sp, #24]
 8004cde:	465a      	mov	r2, fp
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	4650      	mov	r0, sl
 8004ce4:	4623      	mov	r3, r4
 8004ce6:	9908      	ldr	r1, [sp, #32]
 8004ce8:	f001 fe1c 	bl	8006924 <__s2b>
 8004cec:	9008      	str	r0, [sp, #32]
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	f43f af21 	beq.w	8004b36 <_strtod_l+0x46e>
 8004cf4:	9b04      	ldr	r3, [sp, #16]
 8004cf6:	f04f 0b00 	mov.w	fp, #0
 8004cfa:	1b5d      	subs	r5, r3, r5
 8004cfc:	9b07      	ldr	r3, [sp, #28]
 8004cfe:	f8cd b010 	str.w	fp, [sp, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bfb4      	ite	lt
 8004d06:	462b      	movlt	r3, r5
 8004d08:	2300      	movge	r3, #0
 8004d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8004d0c:	9b07      	ldr	r3, [sp, #28]
 8004d0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d12:	9314      	str	r3, [sp, #80]	; 0x50
 8004d14:	9b08      	ldr	r3, [sp, #32]
 8004d16:	4650      	mov	r0, sl
 8004d18:	6859      	ldr	r1, [r3, #4]
 8004d1a:	f001 fd5b 	bl	80067d4 <_Balloc>
 8004d1e:	9006      	str	r0, [sp, #24]
 8004d20:	2800      	cmp	r0, #0
 8004d22:	f43f af10 	beq.w	8004b46 <_strtod_l+0x47e>
 8004d26:	9b08      	ldr	r3, [sp, #32]
 8004d28:	300c      	adds	r0, #12
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	f103 010c 	add.w	r1, r3, #12
 8004d30:	3202      	adds	r2, #2
 8004d32:	0092      	lsls	r2, r2, #2
 8004d34:	f001 fd40 	bl	80067b8 <memcpy>
 8004d38:	ab1c      	add	r3, sp, #112	; 0x70
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	ab1b      	add	r3, sp, #108	; 0x6c
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	4650      	mov	r0, sl
 8004d46:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004d4a:	f002 f92d 	bl	8006fa8 <__d2b>
 8004d4e:	901a      	str	r0, [sp, #104]	; 0x68
 8004d50:	2800      	cmp	r0, #0
 8004d52:	f43f aef8 	beq.w	8004b46 <_strtod_l+0x47e>
 8004d56:	2101      	movs	r1, #1
 8004d58:	4650      	mov	r0, sl
 8004d5a:	f001 fe7b 	bl	8006a54 <__i2b>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	9004      	str	r0, [sp, #16]
 8004d62:	2800      	cmp	r0, #0
 8004d64:	f43f aeef 	beq.w	8004b46 <_strtod_l+0x47e>
 8004d68:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004d6a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004d6c:	2d00      	cmp	r5, #0
 8004d6e:	bfab      	itete	ge
 8004d70:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004d72:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004d74:	18ee      	addge	r6, r5, r3
 8004d76:	1b5c      	sublt	r4, r3, r5
 8004d78:	9b05      	ldr	r3, [sp, #20]
 8004d7a:	bfa8      	it	ge
 8004d7c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004d7e:	eba5 0503 	sub.w	r5, r5, r3
 8004d82:	4415      	add	r5, r2
 8004d84:	4b6e      	ldr	r3, [pc, #440]	; (8004f40 <_strtod_l+0x878>)
 8004d86:	f105 35ff 	add.w	r5, r5, #4294967295
 8004d8a:	bfb8      	it	lt
 8004d8c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004d8e:	429d      	cmp	r5, r3
 8004d90:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004d94:	f280 80c4 	bge.w	8004f20 <_strtod_l+0x858>
 8004d98:	1b5b      	subs	r3, r3, r5
 8004d9a:	2b1f      	cmp	r3, #31
 8004d9c:	f04f 0701 	mov.w	r7, #1
 8004da0:	eba2 0203 	sub.w	r2, r2, r3
 8004da4:	f300 80b1 	bgt.w	8004f0a <_strtod_l+0x842>
 8004da8:	2500      	movs	r5, #0
 8004daa:	fa07 f303 	lsl.w	r3, r7, r3
 8004dae:	930f      	str	r3, [sp, #60]	; 0x3c
 8004db0:	18b7      	adds	r7, r6, r2
 8004db2:	9b05      	ldr	r3, [sp, #20]
 8004db4:	42be      	cmp	r6, r7
 8004db6:	4414      	add	r4, r2
 8004db8:	441c      	add	r4, r3
 8004dba:	4633      	mov	r3, r6
 8004dbc:	bfa8      	it	ge
 8004dbe:	463b      	movge	r3, r7
 8004dc0:	42a3      	cmp	r3, r4
 8004dc2:	bfa8      	it	ge
 8004dc4:	4623      	movge	r3, r4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bfc2      	ittt	gt
 8004dca:	1aff      	subgt	r7, r7, r3
 8004dcc:	1ae4      	subgt	r4, r4, r3
 8004dce:	1af6      	subgt	r6, r6, r3
 8004dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	dd17      	ble.n	8004e06 <_strtod_l+0x73e>
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4650      	mov	r0, sl
 8004dda:	9904      	ldr	r1, [sp, #16]
 8004ddc:	f001 fef8 	bl	8006bd0 <__pow5mult>
 8004de0:	9004      	str	r0, [sp, #16]
 8004de2:	2800      	cmp	r0, #0
 8004de4:	f43f aeaf 	beq.w	8004b46 <_strtod_l+0x47e>
 8004de8:	4601      	mov	r1, r0
 8004dea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004dec:	4650      	mov	r0, sl
 8004dee:	f001 fe47 	bl	8006a80 <__multiply>
 8004df2:	9009      	str	r0, [sp, #36]	; 0x24
 8004df4:	2800      	cmp	r0, #0
 8004df6:	f43f aea6 	beq.w	8004b46 <_strtod_l+0x47e>
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004dfe:	f001 fd29 	bl	8006854 <_Bfree>
 8004e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e04:	931a      	str	r3, [sp, #104]	; 0x68
 8004e06:	2f00      	cmp	r7, #0
 8004e08:	f300 808e 	bgt.w	8004f28 <_strtod_l+0x860>
 8004e0c:	9b07      	ldr	r3, [sp, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	dd08      	ble.n	8004e24 <_strtod_l+0x75c>
 8004e12:	4650      	mov	r0, sl
 8004e14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004e16:	9906      	ldr	r1, [sp, #24]
 8004e18:	f001 feda 	bl	8006bd0 <__pow5mult>
 8004e1c:	9006      	str	r0, [sp, #24]
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	f43f ae91 	beq.w	8004b46 <_strtod_l+0x47e>
 8004e24:	2c00      	cmp	r4, #0
 8004e26:	dd08      	ble.n	8004e3a <_strtod_l+0x772>
 8004e28:	4622      	mov	r2, r4
 8004e2a:	4650      	mov	r0, sl
 8004e2c:	9906      	ldr	r1, [sp, #24]
 8004e2e:	f001 ff29 	bl	8006c84 <__lshift>
 8004e32:	9006      	str	r0, [sp, #24]
 8004e34:	2800      	cmp	r0, #0
 8004e36:	f43f ae86 	beq.w	8004b46 <_strtod_l+0x47e>
 8004e3a:	2e00      	cmp	r6, #0
 8004e3c:	dd08      	ble.n	8004e50 <_strtod_l+0x788>
 8004e3e:	4632      	mov	r2, r6
 8004e40:	4650      	mov	r0, sl
 8004e42:	9904      	ldr	r1, [sp, #16]
 8004e44:	f001 ff1e 	bl	8006c84 <__lshift>
 8004e48:	9004      	str	r0, [sp, #16]
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	f43f ae7b 	beq.w	8004b46 <_strtod_l+0x47e>
 8004e50:	4650      	mov	r0, sl
 8004e52:	9a06      	ldr	r2, [sp, #24]
 8004e54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004e56:	f001 ffa1 	bl	8006d9c <__mdiff>
 8004e5a:	4683      	mov	fp, r0
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	f43f ae72 	beq.w	8004b46 <_strtod_l+0x47e>
 8004e62:	2400      	movs	r4, #0
 8004e64:	68c3      	ldr	r3, [r0, #12]
 8004e66:	9904      	ldr	r1, [sp, #16]
 8004e68:	60c4      	str	r4, [r0, #12]
 8004e6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e6c:	f001 ff7a 	bl	8006d64 <__mcmp>
 8004e70:	42a0      	cmp	r0, r4
 8004e72:	da6b      	bge.n	8004f4c <_strtod_l+0x884>
 8004e74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e76:	ea53 0308 	orrs.w	r3, r3, r8
 8004e7a:	f040 8091 	bne.w	8004fa0 <_strtod_l+0x8d8>
 8004e7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f040 808c 	bne.w	8004fa0 <_strtod_l+0x8d8>
 8004e88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e8c:	0d1b      	lsrs	r3, r3, #20
 8004e8e:	051b      	lsls	r3, r3, #20
 8004e90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004e94:	f240 8084 	bls.w	8004fa0 <_strtod_l+0x8d8>
 8004e98:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004e9c:	b91b      	cbnz	r3, 8004ea6 <_strtod_l+0x7de>
 8004e9e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	dd7c      	ble.n	8004fa0 <_strtod_l+0x8d8>
 8004ea6:	4659      	mov	r1, fp
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	4650      	mov	r0, sl
 8004eac:	f001 feea 	bl	8006c84 <__lshift>
 8004eb0:	9904      	ldr	r1, [sp, #16]
 8004eb2:	4683      	mov	fp, r0
 8004eb4:	f001 ff56 	bl	8006d64 <__mcmp>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	dd71      	ble.n	8004fa0 <_strtod_l+0x8d8>
 8004ebc:	9905      	ldr	r1, [sp, #20]
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <_strtod_l+0x87c>)
 8004ec2:	2900      	cmp	r1, #0
 8004ec4:	f000 808c 	beq.w	8004fe0 <_strtod_l+0x918>
 8004ec8:	ea02 0109 	and.w	r1, r2, r9
 8004ecc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004ed0:	f300 8086 	bgt.w	8004fe0 <_strtod_l+0x918>
 8004ed4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004ed8:	f77f aeaa 	ble.w	8004c30 <_strtod_l+0x568>
 8004edc:	4640      	mov	r0, r8
 8004ede:	4649      	mov	r1, r9
 8004ee0:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <_strtod_l+0x880>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f7fb faf8 	bl	80004d8 <__aeabi_dmul>
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4303      	orrs	r3, r0
 8004eec:	bf08      	it	eq
 8004eee:	2322      	moveq	r3, #34	; 0x22
 8004ef0:	4680      	mov	r8, r0
 8004ef2:	4689      	mov	r9, r1
 8004ef4:	bf08      	it	eq
 8004ef6:	f8ca 3000 	streq.w	r3, [sl]
 8004efa:	e62f      	b.n	8004b5c <_strtod_l+0x494>
 8004efc:	f04f 32ff 	mov.w	r2, #4294967295
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	ea03 0808 	and.w	r8, r3, r8
 8004f08:	e6e0      	b.n	8004ccc <_strtod_l+0x604>
 8004f0a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004f0e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004f12:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004f16:	35e2      	adds	r5, #226	; 0xe2
 8004f18:	fa07 f505 	lsl.w	r5, r7, r5
 8004f1c:	970f      	str	r7, [sp, #60]	; 0x3c
 8004f1e:	e747      	b.n	8004db0 <_strtod_l+0x6e8>
 8004f20:	2301      	movs	r3, #1
 8004f22:	2500      	movs	r5, #0
 8004f24:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f26:	e743      	b.n	8004db0 <_strtod_l+0x6e8>
 8004f28:	463a      	mov	r2, r7
 8004f2a:	4650      	mov	r0, sl
 8004f2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004f2e:	f001 fea9 	bl	8006c84 <__lshift>
 8004f32:	901a      	str	r0, [sp, #104]	; 0x68
 8004f34:	2800      	cmp	r0, #0
 8004f36:	f47f af69 	bne.w	8004e0c <_strtod_l+0x744>
 8004f3a:	e604      	b.n	8004b46 <_strtod_l+0x47e>
 8004f3c:	08008278 	.word	0x08008278
 8004f40:	fffffc02 	.word	0xfffffc02
 8004f44:	7ff00000 	.word	0x7ff00000
 8004f48:	39500000 	.word	0x39500000
 8004f4c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004f50:	d165      	bne.n	800501e <_strtod_l+0x956>
 8004f52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f58:	b35a      	cbz	r2, 8004fb2 <_strtod_l+0x8ea>
 8004f5a:	4a99      	ldr	r2, [pc, #612]	; (80051c0 <_strtod_l+0xaf8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d12b      	bne.n	8004fb8 <_strtod_l+0x8f0>
 8004f60:	9b05      	ldr	r3, [sp, #20]
 8004f62:	4641      	mov	r1, r8
 8004f64:	b303      	cbz	r3, 8004fa8 <_strtod_l+0x8e0>
 8004f66:	464a      	mov	r2, r9
 8004f68:	4b96      	ldr	r3, [pc, #600]	; (80051c4 <_strtod_l+0xafc>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004f70:	f04f 32ff 	mov.w	r2, #4294967295
 8004f74:	d81b      	bhi.n	8004fae <_strtod_l+0x8e6>
 8004f76:	0d1b      	lsrs	r3, r3, #20
 8004f78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	4299      	cmp	r1, r3
 8004f82:	d119      	bne.n	8004fb8 <_strtod_l+0x8f0>
 8004f84:	4b90      	ldr	r3, [pc, #576]	; (80051c8 <_strtod_l+0xb00>)
 8004f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d102      	bne.n	8004f92 <_strtod_l+0x8ca>
 8004f8c:	3101      	adds	r1, #1
 8004f8e:	f43f adda 	beq.w	8004b46 <_strtod_l+0x47e>
 8004f92:	f04f 0800 	mov.w	r8, #0
 8004f96:	4b8b      	ldr	r3, [pc, #556]	; (80051c4 <_strtod_l+0xafc>)
 8004f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004fa0:	9b05      	ldr	r3, [sp, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d19a      	bne.n	8004edc <_strtod_l+0x814>
 8004fa6:	e5d9      	b.n	8004b5c <_strtod_l+0x494>
 8004fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fac:	e7e8      	b.n	8004f80 <_strtod_l+0x8b8>
 8004fae:	4613      	mov	r3, r2
 8004fb0:	e7e6      	b.n	8004f80 <_strtod_l+0x8b8>
 8004fb2:	ea53 0308 	orrs.w	r3, r3, r8
 8004fb6:	d081      	beq.n	8004ebc <_strtod_l+0x7f4>
 8004fb8:	b1e5      	cbz	r5, 8004ff4 <_strtod_l+0x92c>
 8004fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fbc:	421d      	tst	r5, r3
 8004fbe:	d0ef      	beq.n	8004fa0 <_strtod_l+0x8d8>
 8004fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	9a05      	ldr	r2, [sp, #20]
 8004fc8:	b1c3      	cbz	r3, 8004ffc <_strtod_l+0x934>
 8004fca:	f7ff fb5b 	bl	8004684 <sulp>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fd6:	f7fb f8c9 	bl	800016c <__adddf3>
 8004fda:	4680      	mov	r8, r0
 8004fdc:	4689      	mov	r9, r1
 8004fde:	e7df      	b.n	8004fa0 <_strtod_l+0x8d8>
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004fe6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004fea:	f04f 38ff 	mov.w	r8, #4294967295
 8004fee:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004ff2:	e7d5      	b.n	8004fa0 <_strtod_l+0x8d8>
 8004ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ff6:	ea13 0f08 	tst.w	r3, r8
 8004ffa:	e7e0      	b.n	8004fbe <_strtod_l+0x8f6>
 8004ffc:	f7ff fb42 	bl	8004684 <sulp>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005008:	f7fb f8ae 	bl	8000168 <__aeabi_dsub>
 800500c:	2200      	movs	r2, #0
 800500e:	2300      	movs	r3, #0
 8005010:	4680      	mov	r8, r0
 8005012:	4689      	mov	r9, r1
 8005014:	f7fb fcc8 	bl	80009a8 <__aeabi_dcmpeq>
 8005018:	2800      	cmp	r0, #0
 800501a:	d0c1      	beq.n	8004fa0 <_strtod_l+0x8d8>
 800501c:	e608      	b.n	8004c30 <_strtod_l+0x568>
 800501e:	4658      	mov	r0, fp
 8005020:	9904      	ldr	r1, [sp, #16]
 8005022:	f002 f81d 	bl	8007060 <__ratio>
 8005026:	2200      	movs	r2, #0
 8005028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800502c:	4606      	mov	r6, r0
 800502e:	460f      	mov	r7, r1
 8005030:	f7fb fcce 	bl	80009d0 <__aeabi_dcmple>
 8005034:	2800      	cmp	r0, #0
 8005036:	d070      	beq.n	800511a <_strtod_l+0xa52>
 8005038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d042      	beq.n	80050c4 <_strtod_l+0x9fc>
 800503e:	2600      	movs	r6, #0
 8005040:	4f62      	ldr	r7, [pc, #392]	; (80051cc <_strtod_l+0xb04>)
 8005042:	4d62      	ldr	r5, [pc, #392]	; (80051cc <_strtod_l+0xb04>)
 8005044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800504a:	0d1b      	lsrs	r3, r3, #20
 800504c:	051b      	lsls	r3, r3, #20
 800504e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005050:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005052:	4b5f      	ldr	r3, [pc, #380]	; (80051d0 <_strtod_l+0xb08>)
 8005054:	429a      	cmp	r2, r3
 8005056:	f040 80c3 	bne.w	80051e0 <_strtod_l+0xb18>
 800505a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800505c:	4640      	mov	r0, r8
 800505e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005062:	4649      	mov	r1, r9
 8005064:	f001 ff26 	bl	8006eb4 <__ulp>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4630      	mov	r0, r6
 800506e:	4639      	mov	r1, r7
 8005070:	f7fb fa32 	bl	80004d8 <__aeabi_dmul>
 8005074:	4642      	mov	r2, r8
 8005076:	464b      	mov	r3, r9
 8005078:	f7fb f878 	bl	800016c <__adddf3>
 800507c:	460b      	mov	r3, r1
 800507e:	4951      	ldr	r1, [pc, #324]	; (80051c4 <_strtod_l+0xafc>)
 8005080:	4a54      	ldr	r2, [pc, #336]	; (80051d4 <_strtod_l+0xb0c>)
 8005082:	4019      	ands	r1, r3
 8005084:	4291      	cmp	r1, r2
 8005086:	4680      	mov	r8, r0
 8005088:	d95d      	bls.n	8005146 <_strtod_l+0xa7e>
 800508a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800508c:	4b4e      	ldr	r3, [pc, #312]	; (80051c8 <_strtod_l+0xb00>)
 800508e:	429a      	cmp	r2, r3
 8005090:	d103      	bne.n	800509a <_strtod_l+0x9d2>
 8005092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005094:	3301      	adds	r3, #1
 8005096:	f43f ad56 	beq.w	8004b46 <_strtod_l+0x47e>
 800509a:	f04f 38ff 	mov.w	r8, #4294967295
 800509e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80051c8 <_strtod_l+0xb00>
 80050a2:	4650      	mov	r0, sl
 80050a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80050a6:	f001 fbd5 	bl	8006854 <_Bfree>
 80050aa:	4650      	mov	r0, sl
 80050ac:	9906      	ldr	r1, [sp, #24]
 80050ae:	f001 fbd1 	bl	8006854 <_Bfree>
 80050b2:	4650      	mov	r0, sl
 80050b4:	9904      	ldr	r1, [sp, #16]
 80050b6:	f001 fbcd 	bl	8006854 <_Bfree>
 80050ba:	4659      	mov	r1, fp
 80050bc:	4650      	mov	r0, sl
 80050be:	f001 fbc9 	bl	8006854 <_Bfree>
 80050c2:	e627      	b.n	8004d14 <_strtod_l+0x64c>
 80050c4:	f1b8 0f00 	cmp.w	r8, #0
 80050c8:	d119      	bne.n	80050fe <_strtod_l+0xa36>
 80050ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d0:	b9e3      	cbnz	r3, 800510c <_strtod_l+0xa44>
 80050d2:	2200      	movs	r2, #0
 80050d4:	4630      	mov	r0, r6
 80050d6:	4639      	mov	r1, r7
 80050d8:	4b3c      	ldr	r3, [pc, #240]	; (80051cc <_strtod_l+0xb04>)
 80050da:	f7fb fc6f 	bl	80009bc <__aeabi_dcmplt>
 80050de:	b9c8      	cbnz	r0, 8005114 <_strtod_l+0xa4c>
 80050e0:	2200      	movs	r2, #0
 80050e2:	4630      	mov	r0, r6
 80050e4:	4639      	mov	r1, r7
 80050e6:	4b3c      	ldr	r3, [pc, #240]	; (80051d8 <_strtod_l+0xb10>)
 80050e8:	f7fb f9f6 	bl	80004d8 <__aeabi_dmul>
 80050ec:	4604      	mov	r4, r0
 80050ee:	460d      	mov	r5, r1
 80050f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80050f4:	9416      	str	r4, [sp, #88]	; 0x58
 80050f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80050f8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80050fc:	e7a2      	b.n	8005044 <_strtod_l+0x97c>
 80050fe:	f1b8 0f01 	cmp.w	r8, #1
 8005102:	d103      	bne.n	800510c <_strtod_l+0xa44>
 8005104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005106:	2b00      	cmp	r3, #0
 8005108:	f43f ad92 	beq.w	8004c30 <_strtod_l+0x568>
 800510c:	2600      	movs	r6, #0
 800510e:	2400      	movs	r4, #0
 8005110:	4f32      	ldr	r7, [pc, #200]	; (80051dc <_strtod_l+0xb14>)
 8005112:	e796      	b.n	8005042 <_strtod_l+0x97a>
 8005114:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005116:	4d30      	ldr	r5, [pc, #192]	; (80051d8 <_strtod_l+0xb10>)
 8005118:	e7ea      	b.n	80050f0 <_strtod_l+0xa28>
 800511a:	4b2f      	ldr	r3, [pc, #188]	; (80051d8 <_strtod_l+0xb10>)
 800511c:	2200      	movs	r2, #0
 800511e:	4630      	mov	r0, r6
 8005120:	4639      	mov	r1, r7
 8005122:	f7fb f9d9 	bl	80004d8 <__aeabi_dmul>
 8005126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005128:	4604      	mov	r4, r0
 800512a:	460d      	mov	r5, r1
 800512c:	b933      	cbnz	r3, 800513c <_strtod_l+0xa74>
 800512e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005132:	9010      	str	r0, [sp, #64]	; 0x40
 8005134:	9311      	str	r3, [sp, #68]	; 0x44
 8005136:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800513a:	e783      	b.n	8005044 <_strtod_l+0x97c>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005144:	e7f7      	b.n	8005136 <_strtod_l+0xa6e>
 8005146:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800514a:	9b05      	ldr	r3, [sp, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1a8      	bne.n	80050a2 <_strtod_l+0x9da>
 8005150:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005154:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005156:	0d1b      	lsrs	r3, r3, #20
 8005158:	051b      	lsls	r3, r3, #20
 800515a:	429a      	cmp	r2, r3
 800515c:	d1a1      	bne.n	80050a2 <_strtod_l+0x9da>
 800515e:	4620      	mov	r0, r4
 8005160:	4629      	mov	r1, r5
 8005162:	f7fb fd01 	bl	8000b68 <__aeabi_d2lz>
 8005166:	f7fb f989 	bl	800047c <__aeabi_l2d>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4620      	mov	r0, r4
 8005170:	4629      	mov	r1, r5
 8005172:	f7fa fff9 	bl	8000168 <__aeabi_dsub>
 8005176:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800517c:	ea43 0308 	orr.w	r3, r3, r8
 8005180:	4313      	orrs	r3, r2
 8005182:	4604      	mov	r4, r0
 8005184:	460d      	mov	r5, r1
 8005186:	d066      	beq.n	8005256 <_strtod_l+0xb8e>
 8005188:	a309      	add	r3, pc, #36	; (adr r3, 80051b0 <_strtod_l+0xae8>)
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f7fb fc15 	bl	80009bc <__aeabi_dcmplt>
 8005192:	2800      	cmp	r0, #0
 8005194:	f47f ace2 	bne.w	8004b5c <_strtod_l+0x494>
 8005198:	a307      	add	r3, pc, #28	; (adr r3, 80051b8 <_strtod_l+0xaf0>)
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	4620      	mov	r0, r4
 80051a0:	4629      	mov	r1, r5
 80051a2:	f7fb fc29 	bl	80009f8 <__aeabi_dcmpgt>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	f43f af7b 	beq.w	80050a2 <_strtod_l+0x9da>
 80051ac:	e4d6      	b.n	8004b5c <_strtod_l+0x494>
 80051ae:	bf00      	nop
 80051b0:	94a03595 	.word	0x94a03595
 80051b4:	3fdfffff 	.word	0x3fdfffff
 80051b8:	35afe535 	.word	0x35afe535
 80051bc:	3fe00000 	.word	0x3fe00000
 80051c0:	000fffff 	.word	0x000fffff
 80051c4:	7ff00000 	.word	0x7ff00000
 80051c8:	7fefffff 	.word	0x7fefffff
 80051cc:	3ff00000 	.word	0x3ff00000
 80051d0:	7fe00000 	.word	0x7fe00000
 80051d4:	7c9fffff 	.word	0x7c9fffff
 80051d8:	3fe00000 	.word	0x3fe00000
 80051dc:	bff00000 	.word	0xbff00000
 80051e0:	9b05      	ldr	r3, [sp, #20]
 80051e2:	b313      	cbz	r3, 800522a <_strtod_l+0xb62>
 80051e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80051ea:	d81e      	bhi.n	800522a <_strtod_l+0xb62>
 80051ec:	a326      	add	r3, pc, #152	; (adr r3, 8005288 <_strtod_l+0xbc0>)
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	4620      	mov	r0, r4
 80051f4:	4629      	mov	r1, r5
 80051f6:	f7fb fbeb 	bl	80009d0 <__aeabi_dcmple>
 80051fa:	b190      	cbz	r0, 8005222 <_strtod_l+0xb5a>
 80051fc:	4629      	mov	r1, r5
 80051fe:	4620      	mov	r0, r4
 8005200:	f7fb fc42 	bl	8000a88 <__aeabi_d2uiz>
 8005204:	2801      	cmp	r0, #1
 8005206:	bf38      	it	cc
 8005208:	2001      	movcc	r0, #1
 800520a:	f7fb f8eb 	bl	80003e4 <__aeabi_ui2d>
 800520e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005210:	4604      	mov	r4, r0
 8005212:	460d      	mov	r5, r1
 8005214:	b9d3      	cbnz	r3, 800524c <_strtod_l+0xb84>
 8005216:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800521a:	9012      	str	r0, [sp, #72]	; 0x48
 800521c:	9313      	str	r3, [sp, #76]	; 0x4c
 800521e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005222:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005224:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005228:	1a9f      	subs	r7, r3, r2
 800522a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800522e:	f001 fe41 	bl	8006eb4 <__ulp>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4630      	mov	r0, r6
 8005238:	4639      	mov	r1, r7
 800523a:	f7fb f94d 	bl	80004d8 <__aeabi_dmul>
 800523e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005242:	f7fa ff93 	bl	800016c <__adddf3>
 8005246:	4680      	mov	r8, r0
 8005248:	4689      	mov	r9, r1
 800524a:	e77e      	b.n	800514a <_strtod_l+0xa82>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005254:	e7e3      	b.n	800521e <_strtod_l+0xb56>
 8005256:	a30e      	add	r3, pc, #56	; (adr r3, 8005290 <_strtod_l+0xbc8>)
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	f7fb fbae 	bl	80009bc <__aeabi_dcmplt>
 8005260:	e7a1      	b.n	80051a6 <_strtod_l+0xade>
 8005262:	2300      	movs	r3, #0
 8005264:	930a      	str	r3, [sp, #40]	; 0x28
 8005266:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005268:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	f7ff ba71 	b.w	8004752 <_strtod_l+0x8a>
 8005270:	2a65      	cmp	r2, #101	; 0x65
 8005272:	f43f ab63 	beq.w	800493c <_strtod_l+0x274>
 8005276:	2a45      	cmp	r2, #69	; 0x45
 8005278:	f43f ab60 	beq.w	800493c <_strtod_l+0x274>
 800527c:	2301      	movs	r3, #1
 800527e:	f7ff bb95 	b.w	80049ac <_strtod_l+0x2e4>
 8005282:	bf00      	nop
 8005284:	f3af 8000 	nop.w
 8005288:	ffc00000 	.word	0xffc00000
 800528c:	41dfffff 	.word	0x41dfffff
 8005290:	94a03595 	.word	0x94a03595
 8005294:	3fcfffff 	.word	0x3fcfffff

08005298 <_strtod_r>:
 8005298:	4b01      	ldr	r3, [pc, #4]	; (80052a0 <_strtod_r+0x8>)
 800529a:	f7ff ba15 	b.w	80046c8 <_strtod_l>
 800529e:	bf00      	nop
 80052a0:	20000074 	.word	0x20000074

080052a4 <_strtol_l.constprop.0>:
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052aa:	4680      	mov	r8, r0
 80052ac:	d001      	beq.n	80052b2 <_strtol_l.constprop.0+0xe>
 80052ae:	2b24      	cmp	r3, #36	; 0x24
 80052b0:	d906      	bls.n	80052c0 <_strtol_l.constprop.0+0x1c>
 80052b2:	f7fe faef 	bl	8003894 <__errno>
 80052b6:	2316      	movs	r3, #22
 80052b8:	6003      	str	r3, [r0, #0]
 80052ba:	2000      	movs	r0, #0
 80052bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c0:	460d      	mov	r5, r1
 80052c2:	4f35      	ldr	r7, [pc, #212]	; (8005398 <_strtol_l.constprop.0+0xf4>)
 80052c4:	4628      	mov	r0, r5
 80052c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052ca:	5de6      	ldrb	r6, [r4, r7]
 80052cc:	f016 0608 	ands.w	r6, r6, #8
 80052d0:	d1f8      	bne.n	80052c4 <_strtol_l.constprop.0+0x20>
 80052d2:	2c2d      	cmp	r4, #45	; 0x2d
 80052d4:	d12f      	bne.n	8005336 <_strtol_l.constprop.0+0x92>
 80052d6:	2601      	movs	r6, #1
 80052d8:	782c      	ldrb	r4, [r5, #0]
 80052da:	1c85      	adds	r5, r0, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d057      	beq.n	8005390 <_strtol_l.constprop.0+0xec>
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d109      	bne.n	80052f8 <_strtol_l.constprop.0+0x54>
 80052e4:	2c30      	cmp	r4, #48	; 0x30
 80052e6:	d107      	bne.n	80052f8 <_strtol_l.constprop.0+0x54>
 80052e8:	7828      	ldrb	r0, [r5, #0]
 80052ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80052ee:	2858      	cmp	r0, #88	; 0x58
 80052f0:	d149      	bne.n	8005386 <_strtol_l.constprop.0+0xe2>
 80052f2:	2310      	movs	r3, #16
 80052f4:	786c      	ldrb	r4, [r5, #1]
 80052f6:	3502      	adds	r5, #2
 80052f8:	2700      	movs	r7, #0
 80052fa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80052fe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005302:	fbbe f9f3 	udiv	r9, lr, r3
 8005306:	4638      	mov	r0, r7
 8005308:	fb03 ea19 	mls	sl, r3, r9, lr
 800530c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005310:	f1bc 0f09 	cmp.w	ip, #9
 8005314:	d814      	bhi.n	8005340 <_strtol_l.constprop.0+0x9c>
 8005316:	4664      	mov	r4, ip
 8005318:	42a3      	cmp	r3, r4
 800531a:	dd22      	ble.n	8005362 <_strtol_l.constprop.0+0xbe>
 800531c:	2f00      	cmp	r7, #0
 800531e:	db1d      	blt.n	800535c <_strtol_l.constprop.0+0xb8>
 8005320:	4581      	cmp	r9, r0
 8005322:	d31b      	bcc.n	800535c <_strtol_l.constprop.0+0xb8>
 8005324:	d101      	bne.n	800532a <_strtol_l.constprop.0+0x86>
 8005326:	45a2      	cmp	sl, r4
 8005328:	db18      	blt.n	800535c <_strtol_l.constprop.0+0xb8>
 800532a:	2701      	movs	r7, #1
 800532c:	fb00 4003 	mla	r0, r0, r3, r4
 8005330:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005334:	e7ea      	b.n	800530c <_strtol_l.constprop.0+0x68>
 8005336:	2c2b      	cmp	r4, #43	; 0x2b
 8005338:	bf04      	itt	eq
 800533a:	782c      	ldrbeq	r4, [r5, #0]
 800533c:	1c85      	addeq	r5, r0, #2
 800533e:	e7cd      	b.n	80052dc <_strtol_l.constprop.0+0x38>
 8005340:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005344:	f1bc 0f19 	cmp.w	ip, #25
 8005348:	d801      	bhi.n	800534e <_strtol_l.constprop.0+0xaa>
 800534a:	3c37      	subs	r4, #55	; 0x37
 800534c:	e7e4      	b.n	8005318 <_strtol_l.constprop.0+0x74>
 800534e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005352:	f1bc 0f19 	cmp.w	ip, #25
 8005356:	d804      	bhi.n	8005362 <_strtol_l.constprop.0+0xbe>
 8005358:	3c57      	subs	r4, #87	; 0x57
 800535a:	e7dd      	b.n	8005318 <_strtol_l.constprop.0+0x74>
 800535c:	f04f 37ff 	mov.w	r7, #4294967295
 8005360:	e7e6      	b.n	8005330 <_strtol_l.constprop.0+0x8c>
 8005362:	2f00      	cmp	r7, #0
 8005364:	da07      	bge.n	8005376 <_strtol_l.constprop.0+0xd2>
 8005366:	2322      	movs	r3, #34	; 0x22
 8005368:	4670      	mov	r0, lr
 800536a:	f8c8 3000 	str.w	r3, [r8]
 800536e:	2a00      	cmp	r2, #0
 8005370:	d0a4      	beq.n	80052bc <_strtol_l.constprop.0+0x18>
 8005372:	1e69      	subs	r1, r5, #1
 8005374:	e005      	b.n	8005382 <_strtol_l.constprop.0+0xde>
 8005376:	b106      	cbz	r6, 800537a <_strtol_l.constprop.0+0xd6>
 8005378:	4240      	negs	r0, r0
 800537a:	2a00      	cmp	r2, #0
 800537c:	d09e      	beq.n	80052bc <_strtol_l.constprop.0+0x18>
 800537e:	2f00      	cmp	r7, #0
 8005380:	d1f7      	bne.n	8005372 <_strtol_l.constprop.0+0xce>
 8005382:	6011      	str	r1, [r2, #0]
 8005384:	e79a      	b.n	80052bc <_strtol_l.constprop.0+0x18>
 8005386:	2430      	movs	r4, #48	; 0x30
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1b5      	bne.n	80052f8 <_strtol_l.constprop.0+0x54>
 800538c:	2308      	movs	r3, #8
 800538e:	e7b3      	b.n	80052f8 <_strtol_l.constprop.0+0x54>
 8005390:	2c30      	cmp	r4, #48	; 0x30
 8005392:	d0a9      	beq.n	80052e8 <_strtol_l.constprop.0+0x44>
 8005394:	230a      	movs	r3, #10
 8005396:	e7af      	b.n	80052f8 <_strtol_l.constprop.0+0x54>
 8005398:	080082a1 	.word	0x080082a1

0800539c <_strtol_r>:
 800539c:	f7ff bf82 	b.w	80052a4 <_strtol_l.constprop.0>

080053a0 <quorem>:
 80053a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	6903      	ldr	r3, [r0, #16]
 80053a6:	690c      	ldr	r4, [r1, #16]
 80053a8:	4607      	mov	r7, r0
 80053aa:	42a3      	cmp	r3, r4
 80053ac:	f2c0 8082 	blt.w	80054b4 <quorem+0x114>
 80053b0:	3c01      	subs	r4, #1
 80053b2:	f100 0514 	add.w	r5, r0, #20
 80053b6:	f101 0814 	add.w	r8, r1, #20
 80053ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053c8:	3301      	adds	r3, #1
 80053ca:	429a      	cmp	r2, r3
 80053cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80053d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80053d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053d8:	d331      	bcc.n	800543e <quorem+0x9e>
 80053da:	f04f 0e00 	mov.w	lr, #0
 80053de:	4640      	mov	r0, r8
 80053e0:	46ac      	mov	ip, r5
 80053e2:	46f2      	mov	sl, lr
 80053e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80053e8:	b293      	uxth	r3, r2
 80053ea:	fb06 e303 	mla	r3, r6, r3, lr
 80053ee:	0c12      	lsrs	r2, r2, #16
 80053f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	fb06 e202 	mla	r2, r6, r2, lr
 80053fa:	ebaa 0303 	sub.w	r3, sl, r3
 80053fe:	f8dc a000 	ldr.w	sl, [ip]
 8005402:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005406:	fa1f fa8a 	uxth.w	sl, sl
 800540a:	4453      	add	r3, sl
 800540c:	f8dc a000 	ldr.w	sl, [ip]
 8005410:	b292      	uxth	r2, r2
 8005412:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005416:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800541a:	b29b      	uxth	r3, r3
 800541c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005420:	4581      	cmp	r9, r0
 8005422:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005426:	f84c 3b04 	str.w	r3, [ip], #4
 800542a:	d2db      	bcs.n	80053e4 <quorem+0x44>
 800542c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005430:	b92b      	cbnz	r3, 800543e <quorem+0x9e>
 8005432:	9b01      	ldr	r3, [sp, #4]
 8005434:	3b04      	subs	r3, #4
 8005436:	429d      	cmp	r5, r3
 8005438:	461a      	mov	r2, r3
 800543a:	d32f      	bcc.n	800549c <quorem+0xfc>
 800543c:	613c      	str	r4, [r7, #16]
 800543e:	4638      	mov	r0, r7
 8005440:	f001 fc90 	bl	8006d64 <__mcmp>
 8005444:	2800      	cmp	r0, #0
 8005446:	db25      	blt.n	8005494 <quorem+0xf4>
 8005448:	4628      	mov	r0, r5
 800544a:	f04f 0c00 	mov.w	ip, #0
 800544e:	3601      	adds	r6, #1
 8005450:	f858 1b04 	ldr.w	r1, [r8], #4
 8005454:	f8d0 e000 	ldr.w	lr, [r0]
 8005458:	b28b      	uxth	r3, r1
 800545a:	ebac 0303 	sub.w	r3, ip, r3
 800545e:	fa1f f28e 	uxth.w	r2, lr
 8005462:	4413      	add	r3, r2
 8005464:	0c0a      	lsrs	r2, r1, #16
 8005466:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800546a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800546e:	b29b      	uxth	r3, r3
 8005470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005474:	45c1      	cmp	r9, r8
 8005476:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800547a:	f840 3b04 	str.w	r3, [r0], #4
 800547e:	d2e7      	bcs.n	8005450 <quorem+0xb0>
 8005480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005484:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005488:	b922      	cbnz	r2, 8005494 <quorem+0xf4>
 800548a:	3b04      	subs	r3, #4
 800548c:	429d      	cmp	r5, r3
 800548e:	461a      	mov	r2, r3
 8005490:	d30a      	bcc.n	80054a8 <quorem+0x108>
 8005492:	613c      	str	r4, [r7, #16]
 8005494:	4630      	mov	r0, r6
 8005496:	b003      	add	sp, #12
 8005498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	3b04      	subs	r3, #4
 80054a0:	2a00      	cmp	r2, #0
 80054a2:	d1cb      	bne.n	800543c <quorem+0x9c>
 80054a4:	3c01      	subs	r4, #1
 80054a6:	e7c6      	b.n	8005436 <quorem+0x96>
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	3b04      	subs	r3, #4
 80054ac:	2a00      	cmp	r2, #0
 80054ae:	d1f0      	bne.n	8005492 <quorem+0xf2>
 80054b0:	3c01      	subs	r4, #1
 80054b2:	e7eb      	b.n	800548c <quorem+0xec>
 80054b4:	2000      	movs	r0, #0
 80054b6:	e7ee      	b.n	8005496 <quorem+0xf6>

080054b8 <_dtoa_r>:
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	4616      	mov	r6, r2
 80054be:	461f      	mov	r7, r3
 80054c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80054c2:	b099      	sub	sp, #100	; 0x64
 80054c4:	4605      	mov	r5, r0
 80054c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80054ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80054ce:	b974      	cbnz	r4, 80054ee <_dtoa_r+0x36>
 80054d0:	2010      	movs	r0, #16
 80054d2:	f001 f949 	bl	8006768 <malloc>
 80054d6:	4602      	mov	r2, r0
 80054d8:	6268      	str	r0, [r5, #36]	; 0x24
 80054da:	b920      	cbnz	r0, 80054e6 <_dtoa_r+0x2e>
 80054dc:	21ea      	movs	r1, #234	; 0xea
 80054de:	4ba8      	ldr	r3, [pc, #672]	; (8005780 <_dtoa_r+0x2c8>)
 80054e0:	48a8      	ldr	r0, [pc, #672]	; (8005784 <_dtoa_r+0x2cc>)
 80054e2:	f002 f8b3 	bl	800764c <__assert_func>
 80054e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054ea:	6004      	str	r4, [r0, #0]
 80054ec:	60c4      	str	r4, [r0, #12]
 80054ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054f0:	6819      	ldr	r1, [r3, #0]
 80054f2:	b151      	cbz	r1, 800550a <_dtoa_r+0x52>
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	2301      	movs	r3, #1
 80054f8:	4093      	lsls	r3, r2
 80054fa:	604a      	str	r2, [r1, #4]
 80054fc:	608b      	str	r3, [r1, #8]
 80054fe:	4628      	mov	r0, r5
 8005500:	f001 f9a8 	bl	8006854 <_Bfree>
 8005504:	2200      	movs	r2, #0
 8005506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	1e3b      	subs	r3, r7, #0
 800550c:	bfaf      	iteee	ge
 800550e:	2300      	movge	r3, #0
 8005510:	2201      	movlt	r2, #1
 8005512:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005516:	9305      	strlt	r3, [sp, #20]
 8005518:	bfa8      	it	ge
 800551a:	f8c8 3000 	strge.w	r3, [r8]
 800551e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005522:	4b99      	ldr	r3, [pc, #612]	; (8005788 <_dtoa_r+0x2d0>)
 8005524:	bfb8      	it	lt
 8005526:	f8c8 2000 	strlt.w	r2, [r8]
 800552a:	ea33 0309 	bics.w	r3, r3, r9
 800552e:	d119      	bne.n	8005564 <_dtoa_r+0xac>
 8005530:	f242 730f 	movw	r3, #9999	; 0x270f
 8005534:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800553c:	4333      	orrs	r3, r6
 800553e:	f000 857f 	beq.w	8006040 <_dtoa_r+0xb88>
 8005542:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005544:	b953      	cbnz	r3, 800555c <_dtoa_r+0xa4>
 8005546:	4b91      	ldr	r3, [pc, #580]	; (800578c <_dtoa_r+0x2d4>)
 8005548:	e022      	b.n	8005590 <_dtoa_r+0xd8>
 800554a:	4b91      	ldr	r3, [pc, #580]	; (8005790 <_dtoa_r+0x2d8>)
 800554c:	9303      	str	r3, [sp, #12]
 800554e:	3308      	adds	r3, #8
 8005550:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	9803      	ldr	r0, [sp, #12]
 8005556:	b019      	add	sp, #100	; 0x64
 8005558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555c:	4b8b      	ldr	r3, [pc, #556]	; (800578c <_dtoa_r+0x2d4>)
 800555e:	9303      	str	r3, [sp, #12]
 8005560:	3303      	adds	r3, #3
 8005562:	e7f5      	b.n	8005550 <_dtoa_r+0x98>
 8005564:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005568:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800556c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005570:	2200      	movs	r2, #0
 8005572:	2300      	movs	r3, #0
 8005574:	f7fb fa18 	bl	80009a8 <__aeabi_dcmpeq>
 8005578:	4680      	mov	r8, r0
 800557a:	b158      	cbz	r0, 8005594 <_dtoa_r+0xdc>
 800557c:	2301      	movs	r3, #1
 800557e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8558 	beq.w	800603a <_dtoa_r+0xb82>
 800558a:	4882      	ldr	r0, [pc, #520]	; (8005794 <_dtoa_r+0x2dc>)
 800558c:	6018      	str	r0, [r3, #0]
 800558e:	1e43      	subs	r3, r0, #1
 8005590:	9303      	str	r3, [sp, #12]
 8005592:	e7df      	b.n	8005554 <_dtoa_r+0x9c>
 8005594:	ab16      	add	r3, sp, #88	; 0x58
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	ab17      	add	r3, sp, #92	; 0x5c
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	4628      	mov	r0, r5
 800559e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80055a2:	f001 fd01 	bl	8006fa8 <__d2b>
 80055a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80055aa:	4683      	mov	fp, r0
 80055ac:	2c00      	cmp	r4, #0
 80055ae:	d07f      	beq.n	80056b0 <_dtoa_r+0x1f8>
 80055b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80055ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80055c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80055c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80055ca:	2200      	movs	r2, #0
 80055cc:	4b72      	ldr	r3, [pc, #456]	; (8005798 <_dtoa_r+0x2e0>)
 80055ce:	f7fa fdcb 	bl	8000168 <__aeabi_dsub>
 80055d2:	a365      	add	r3, pc, #404	; (adr r3, 8005768 <_dtoa_r+0x2b0>)
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f7fa ff7e 	bl	80004d8 <__aeabi_dmul>
 80055dc:	a364      	add	r3, pc, #400	; (adr r3, 8005770 <_dtoa_r+0x2b8>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f7fa fdc3 	bl	800016c <__adddf3>
 80055e6:	4606      	mov	r6, r0
 80055e8:	4620      	mov	r0, r4
 80055ea:	460f      	mov	r7, r1
 80055ec:	f7fa ff0a 	bl	8000404 <__aeabi_i2d>
 80055f0:	a361      	add	r3, pc, #388	; (adr r3, 8005778 <_dtoa_r+0x2c0>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa ff6f 	bl	80004d8 <__aeabi_dmul>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4630      	mov	r0, r6
 8005600:	4639      	mov	r1, r7
 8005602:	f7fa fdb3 	bl	800016c <__adddf3>
 8005606:	4606      	mov	r6, r0
 8005608:	460f      	mov	r7, r1
 800560a:	f7fb fa15 	bl	8000a38 <__aeabi_d2iz>
 800560e:	2200      	movs	r2, #0
 8005610:	4682      	mov	sl, r0
 8005612:	2300      	movs	r3, #0
 8005614:	4630      	mov	r0, r6
 8005616:	4639      	mov	r1, r7
 8005618:	f7fb f9d0 	bl	80009bc <__aeabi_dcmplt>
 800561c:	b148      	cbz	r0, 8005632 <_dtoa_r+0x17a>
 800561e:	4650      	mov	r0, sl
 8005620:	f7fa fef0 	bl	8000404 <__aeabi_i2d>
 8005624:	4632      	mov	r2, r6
 8005626:	463b      	mov	r3, r7
 8005628:	f7fb f9be 	bl	80009a8 <__aeabi_dcmpeq>
 800562c:	b908      	cbnz	r0, 8005632 <_dtoa_r+0x17a>
 800562e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005632:	f1ba 0f16 	cmp.w	sl, #22
 8005636:	d858      	bhi.n	80056ea <_dtoa_r+0x232>
 8005638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800563c:	4b57      	ldr	r3, [pc, #348]	; (800579c <_dtoa_r+0x2e4>)
 800563e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f7fb f9b9 	bl	80009bc <__aeabi_dcmplt>
 800564a:	2800      	cmp	r0, #0
 800564c:	d04f      	beq.n	80056ee <_dtoa_r+0x236>
 800564e:	2300      	movs	r3, #0
 8005650:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005654:	930f      	str	r3, [sp, #60]	; 0x3c
 8005656:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005658:	1b1c      	subs	r4, r3, r4
 800565a:	1e63      	subs	r3, r4, #1
 800565c:	9309      	str	r3, [sp, #36]	; 0x24
 800565e:	bf49      	itett	mi
 8005660:	f1c4 0301 	rsbmi	r3, r4, #1
 8005664:	2300      	movpl	r3, #0
 8005666:	9306      	strmi	r3, [sp, #24]
 8005668:	2300      	movmi	r3, #0
 800566a:	bf54      	ite	pl
 800566c:	9306      	strpl	r3, [sp, #24]
 800566e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005670:	f1ba 0f00 	cmp.w	sl, #0
 8005674:	db3d      	blt.n	80056f2 <_dtoa_r+0x23a>
 8005676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005678:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800567c:	4453      	add	r3, sl
 800567e:	9309      	str	r3, [sp, #36]	; 0x24
 8005680:	2300      	movs	r3, #0
 8005682:	930a      	str	r3, [sp, #40]	; 0x28
 8005684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005686:	2b09      	cmp	r3, #9
 8005688:	f200 808c 	bhi.w	80057a4 <_dtoa_r+0x2ec>
 800568c:	2b05      	cmp	r3, #5
 800568e:	bfc4      	itt	gt
 8005690:	3b04      	subgt	r3, #4
 8005692:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005696:	bfc8      	it	gt
 8005698:	2400      	movgt	r4, #0
 800569a:	f1a3 0302 	sub.w	r3, r3, #2
 800569e:	bfd8      	it	le
 80056a0:	2401      	movle	r4, #1
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	f200 808a 	bhi.w	80057bc <_dtoa_r+0x304>
 80056a8:	e8df f003 	tbb	[pc, r3]
 80056ac:	5b4d4f2d 	.word	0x5b4d4f2d
 80056b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80056b4:	441c      	add	r4, r3
 80056b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	bfc3      	ittte	gt
 80056be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80056c2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80056c6:	fa09 f303 	lslgt.w	r3, r9, r3
 80056ca:	f1c3 0320 	rsble	r3, r3, #32
 80056ce:	bfc6      	itte	gt
 80056d0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80056d4:	4318      	orrgt	r0, r3
 80056d6:	fa06 f003 	lslle.w	r0, r6, r3
 80056da:	f7fa fe83 	bl	80003e4 <__aeabi_ui2d>
 80056de:	2301      	movs	r3, #1
 80056e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80056e4:	3c01      	subs	r4, #1
 80056e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80056e8:	e76f      	b.n	80055ca <_dtoa_r+0x112>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e7b2      	b.n	8005654 <_dtoa_r+0x19c>
 80056ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80056f0:	e7b1      	b.n	8005656 <_dtoa_r+0x19e>
 80056f2:	9b06      	ldr	r3, [sp, #24]
 80056f4:	eba3 030a 	sub.w	r3, r3, sl
 80056f8:	9306      	str	r3, [sp, #24]
 80056fa:	f1ca 0300 	rsb	r3, sl, #0
 80056fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005700:	2300      	movs	r3, #0
 8005702:	930e      	str	r3, [sp, #56]	; 0x38
 8005704:	e7be      	b.n	8005684 <_dtoa_r+0x1cc>
 8005706:	2300      	movs	r3, #0
 8005708:	930b      	str	r3, [sp, #44]	; 0x2c
 800570a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800570c:	2b00      	cmp	r3, #0
 800570e:	dc58      	bgt.n	80057c2 <_dtoa_r+0x30a>
 8005710:	f04f 0901 	mov.w	r9, #1
 8005714:	464b      	mov	r3, r9
 8005716:	f8cd 9020 	str.w	r9, [sp, #32]
 800571a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800571e:	2200      	movs	r2, #0
 8005720:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005722:	6042      	str	r2, [r0, #4]
 8005724:	2204      	movs	r2, #4
 8005726:	f102 0614 	add.w	r6, r2, #20
 800572a:	429e      	cmp	r6, r3
 800572c:	6841      	ldr	r1, [r0, #4]
 800572e:	d94e      	bls.n	80057ce <_dtoa_r+0x316>
 8005730:	4628      	mov	r0, r5
 8005732:	f001 f84f 	bl	80067d4 <_Balloc>
 8005736:	9003      	str	r0, [sp, #12]
 8005738:	2800      	cmp	r0, #0
 800573a:	d14c      	bne.n	80057d6 <_dtoa_r+0x31e>
 800573c:	4602      	mov	r2, r0
 800573e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005742:	4b17      	ldr	r3, [pc, #92]	; (80057a0 <_dtoa_r+0x2e8>)
 8005744:	e6cc      	b.n	80054e0 <_dtoa_r+0x28>
 8005746:	2301      	movs	r3, #1
 8005748:	e7de      	b.n	8005708 <_dtoa_r+0x250>
 800574a:	2300      	movs	r3, #0
 800574c:	930b      	str	r3, [sp, #44]	; 0x2c
 800574e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005750:	eb0a 0903 	add.w	r9, sl, r3
 8005754:	f109 0301 	add.w	r3, r9, #1
 8005758:	2b01      	cmp	r3, #1
 800575a:	9308      	str	r3, [sp, #32]
 800575c:	bfb8      	it	lt
 800575e:	2301      	movlt	r3, #1
 8005760:	e7dd      	b.n	800571e <_dtoa_r+0x266>
 8005762:	2301      	movs	r3, #1
 8005764:	e7f2      	b.n	800574c <_dtoa_r+0x294>
 8005766:	bf00      	nop
 8005768:	636f4361 	.word	0x636f4361
 800576c:	3fd287a7 	.word	0x3fd287a7
 8005770:	8b60c8b3 	.word	0x8b60c8b3
 8005774:	3fc68a28 	.word	0x3fc68a28
 8005778:	509f79fb 	.word	0x509f79fb
 800577c:	3fd34413 	.word	0x3fd34413
 8005780:	080083ae 	.word	0x080083ae
 8005784:	080083c5 	.word	0x080083c5
 8005788:	7ff00000 	.word	0x7ff00000
 800578c:	080083aa 	.word	0x080083aa
 8005790:	080083a1 	.word	0x080083a1
 8005794:	08008225 	.word	0x08008225
 8005798:	3ff80000 	.word	0x3ff80000
 800579c:	08008530 	.word	0x08008530
 80057a0:	08008420 	.word	0x08008420
 80057a4:	2401      	movs	r4, #1
 80057a6:	2300      	movs	r3, #0
 80057a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80057aa:	9322      	str	r3, [sp, #136]	; 0x88
 80057ac:	f04f 39ff 	mov.w	r9, #4294967295
 80057b0:	2200      	movs	r2, #0
 80057b2:	2312      	movs	r3, #18
 80057b4:	f8cd 9020 	str.w	r9, [sp, #32]
 80057b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80057ba:	e7b0      	b.n	800571e <_dtoa_r+0x266>
 80057bc:	2301      	movs	r3, #1
 80057be:	930b      	str	r3, [sp, #44]	; 0x2c
 80057c0:	e7f4      	b.n	80057ac <_dtoa_r+0x2f4>
 80057c2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80057c6:	464b      	mov	r3, r9
 80057c8:	f8cd 9020 	str.w	r9, [sp, #32]
 80057cc:	e7a7      	b.n	800571e <_dtoa_r+0x266>
 80057ce:	3101      	adds	r1, #1
 80057d0:	6041      	str	r1, [r0, #4]
 80057d2:	0052      	lsls	r2, r2, #1
 80057d4:	e7a7      	b.n	8005726 <_dtoa_r+0x26e>
 80057d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057d8:	9a03      	ldr	r2, [sp, #12]
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	9b08      	ldr	r3, [sp, #32]
 80057de:	2b0e      	cmp	r3, #14
 80057e0:	f200 80a8 	bhi.w	8005934 <_dtoa_r+0x47c>
 80057e4:	2c00      	cmp	r4, #0
 80057e6:	f000 80a5 	beq.w	8005934 <_dtoa_r+0x47c>
 80057ea:	f1ba 0f00 	cmp.w	sl, #0
 80057ee:	dd34      	ble.n	800585a <_dtoa_r+0x3a2>
 80057f0:	4a9a      	ldr	r2, [pc, #616]	; (8005a5c <_dtoa_r+0x5a4>)
 80057f2:	f00a 030f 	and.w	r3, sl, #15
 80057f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057fa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80057fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005802:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005806:	ea4f 142a 	mov.w	r4, sl, asr #4
 800580a:	d016      	beq.n	800583a <_dtoa_r+0x382>
 800580c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005810:	4b93      	ldr	r3, [pc, #588]	; (8005a60 <_dtoa_r+0x5a8>)
 8005812:	2703      	movs	r7, #3
 8005814:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005818:	f7fa ff88 	bl	800072c <__aeabi_ddiv>
 800581c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005820:	f004 040f 	and.w	r4, r4, #15
 8005824:	4e8e      	ldr	r6, [pc, #568]	; (8005a60 <_dtoa_r+0x5a8>)
 8005826:	b954      	cbnz	r4, 800583e <_dtoa_r+0x386>
 8005828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800582c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005830:	f7fa ff7c 	bl	800072c <__aeabi_ddiv>
 8005834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005838:	e029      	b.n	800588e <_dtoa_r+0x3d6>
 800583a:	2702      	movs	r7, #2
 800583c:	e7f2      	b.n	8005824 <_dtoa_r+0x36c>
 800583e:	07e1      	lsls	r1, r4, #31
 8005840:	d508      	bpl.n	8005854 <_dtoa_r+0x39c>
 8005842:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005846:	e9d6 2300 	ldrd	r2, r3, [r6]
 800584a:	f7fa fe45 	bl	80004d8 <__aeabi_dmul>
 800584e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005852:	3701      	adds	r7, #1
 8005854:	1064      	asrs	r4, r4, #1
 8005856:	3608      	adds	r6, #8
 8005858:	e7e5      	b.n	8005826 <_dtoa_r+0x36e>
 800585a:	f000 80a5 	beq.w	80059a8 <_dtoa_r+0x4f0>
 800585e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005862:	f1ca 0400 	rsb	r4, sl, #0
 8005866:	4b7d      	ldr	r3, [pc, #500]	; (8005a5c <_dtoa_r+0x5a4>)
 8005868:	f004 020f 	and.w	r2, r4, #15
 800586c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f7fa fe30 	bl	80004d8 <__aeabi_dmul>
 8005878:	2702      	movs	r7, #2
 800587a:	2300      	movs	r3, #0
 800587c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005880:	4e77      	ldr	r6, [pc, #476]	; (8005a60 <_dtoa_r+0x5a8>)
 8005882:	1124      	asrs	r4, r4, #4
 8005884:	2c00      	cmp	r4, #0
 8005886:	f040 8084 	bne.w	8005992 <_dtoa_r+0x4da>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1d2      	bne.n	8005834 <_dtoa_r+0x37c>
 800588e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 808b 	beq.w	80059ac <_dtoa_r+0x4f4>
 8005896:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800589a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800589e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058a2:	2200      	movs	r2, #0
 80058a4:	4b6f      	ldr	r3, [pc, #444]	; (8005a64 <_dtoa_r+0x5ac>)
 80058a6:	f7fb f889 	bl	80009bc <__aeabi_dcmplt>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d07e      	beq.n	80059ac <_dtoa_r+0x4f4>
 80058ae:	9b08      	ldr	r3, [sp, #32]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d07b      	beq.n	80059ac <_dtoa_r+0x4f4>
 80058b4:	f1b9 0f00 	cmp.w	r9, #0
 80058b8:	dd38      	ble.n	800592c <_dtoa_r+0x474>
 80058ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058be:	2200      	movs	r2, #0
 80058c0:	4b69      	ldr	r3, [pc, #420]	; (8005a68 <_dtoa_r+0x5b0>)
 80058c2:	f7fa fe09 	bl	80004d8 <__aeabi_dmul>
 80058c6:	464c      	mov	r4, r9
 80058c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058cc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80058d0:	3701      	adds	r7, #1
 80058d2:	4638      	mov	r0, r7
 80058d4:	f7fa fd96 	bl	8000404 <__aeabi_i2d>
 80058d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058dc:	f7fa fdfc 	bl	80004d8 <__aeabi_dmul>
 80058e0:	2200      	movs	r2, #0
 80058e2:	4b62      	ldr	r3, [pc, #392]	; (8005a6c <_dtoa_r+0x5b4>)
 80058e4:	f7fa fc42 	bl	800016c <__adddf3>
 80058e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80058ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058f0:	9611      	str	r6, [sp, #68]	; 0x44
 80058f2:	2c00      	cmp	r4, #0
 80058f4:	d15d      	bne.n	80059b2 <_dtoa_r+0x4fa>
 80058f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058fa:	2200      	movs	r2, #0
 80058fc:	4b5c      	ldr	r3, [pc, #368]	; (8005a70 <_dtoa_r+0x5b8>)
 80058fe:	f7fa fc33 	bl	8000168 <__aeabi_dsub>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800590a:	4633      	mov	r3, r6
 800590c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800590e:	f7fb f873 	bl	80009f8 <__aeabi_dcmpgt>
 8005912:	2800      	cmp	r0, #0
 8005914:	f040 829c 	bne.w	8005e50 <_dtoa_r+0x998>
 8005918:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800591c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800591e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005922:	f7fb f84b 	bl	80009bc <__aeabi_dcmplt>
 8005926:	2800      	cmp	r0, #0
 8005928:	f040 8290 	bne.w	8005e4c <_dtoa_r+0x994>
 800592c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005930:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005934:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005936:	2b00      	cmp	r3, #0
 8005938:	f2c0 8152 	blt.w	8005be0 <_dtoa_r+0x728>
 800593c:	f1ba 0f0e 	cmp.w	sl, #14
 8005940:	f300 814e 	bgt.w	8005be0 <_dtoa_r+0x728>
 8005944:	4b45      	ldr	r3, [pc, #276]	; (8005a5c <_dtoa_r+0x5a4>)
 8005946:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800594a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800594e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005952:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005954:	2b00      	cmp	r3, #0
 8005956:	f280 80db 	bge.w	8005b10 <_dtoa_r+0x658>
 800595a:	9b08      	ldr	r3, [sp, #32]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f300 80d7 	bgt.w	8005b10 <_dtoa_r+0x658>
 8005962:	f040 8272 	bne.w	8005e4a <_dtoa_r+0x992>
 8005966:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800596a:	2200      	movs	r2, #0
 800596c:	4b40      	ldr	r3, [pc, #256]	; (8005a70 <_dtoa_r+0x5b8>)
 800596e:	f7fa fdb3 	bl	80004d8 <__aeabi_dmul>
 8005972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005976:	f7fb f835 	bl	80009e4 <__aeabi_dcmpge>
 800597a:	9c08      	ldr	r4, [sp, #32]
 800597c:	4626      	mov	r6, r4
 800597e:	2800      	cmp	r0, #0
 8005980:	f040 8248 	bne.w	8005e14 <_dtoa_r+0x95c>
 8005984:	2331      	movs	r3, #49	; 0x31
 8005986:	9f03      	ldr	r7, [sp, #12]
 8005988:	f10a 0a01 	add.w	sl, sl, #1
 800598c:	f807 3b01 	strb.w	r3, [r7], #1
 8005990:	e244      	b.n	8005e1c <_dtoa_r+0x964>
 8005992:	07e2      	lsls	r2, r4, #31
 8005994:	d505      	bpl.n	80059a2 <_dtoa_r+0x4ea>
 8005996:	e9d6 2300 	ldrd	r2, r3, [r6]
 800599a:	f7fa fd9d 	bl	80004d8 <__aeabi_dmul>
 800599e:	2301      	movs	r3, #1
 80059a0:	3701      	adds	r7, #1
 80059a2:	1064      	asrs	r4, r4, #1
 80059a4:	3608      	adds	r6, #8
 80059a6:	e76d      	b.n	8005884 <_dtoa_r+0x3cc>
 80059a8:	2702      	movs	r7, #2
 80059aa:	e770      	b.n	800588e <_dtoa_r+0x3d6>
 80059ac:	46d0      	mov	r8, sl
 80059ae:	9c08      	ldr	r4, [sp, #32]
 80059b0:	e78f      	b.n	80058d2 <_dtoa_r+0x41a>
 80059b2:	9903      	ldr	r1, [sp, #12]
 80059b4:	4b29      	ldr	r3, [pc, #164]	; (8005a5c <_dtoa_r+0x5a4>)
 80059b6:	4421      	add	r1, r4
 80059b8:	9112      	str	r1, [sp, #72]	; 0x48
 80059ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80059c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80059c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059c8:	2900      	cmp	r1, #0
 80059ca:	d055      	beq.n	8005a78 <_dtoa_r+0x5c0>
 80059cc:	2000      	movs	r0, #0
 80059ce:	4929      	ldr	r1, [pc, #164]	; (8005a74 <_dtoa_r+0x5bc>)
 80059d0:	f7fa feac 	bl	800072c <__aeabi_ddiv>
 80059d4:	463b      	mov	r3, r7
 80059d6:	4632      	mov	r2, r6
 80059d8:	f7fa fbc6 	bl	8000168 <__aeabi_dsub>
 80059dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059e0:	9f03      	ldr	r7, [sp, #12]
 80059e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059e6:	f7fb f827 	bl	8000a38 <__aeabi_d2iz>
 80059ea:	4604      	mov	r4, r0
 80059ec:	f7fa fd0a 	bl	8000404 <__aeabi_i2d>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059f8:	f7fa fbb6 	bl	8000168 <__aeabi_dsub>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	3430      	adds	r4, #48	; 0x30
 8005a02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a0a:	f807 4b01 	strb.w	r4, [r7], #1
 8005a0e:	f7fa ffd5 	bl	80009bc <__aeabi_dcmplt>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d174      	bne.n	8005b00 <_dtoa_r+0x648>
 8005a16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	4911      	ldr	r1, [pc, #68]	; (8005a64 <_dtoa_r+0x5ac>)
 8005a1e:	f7fa fba3 	bl	8000168 <__aeabi_dsub>
 8005a22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a26:	f7fa ffc9 	bl	80009bc <__aeabi_dcmplt>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	f040 80b7 	bne.w	8005b9e <_dtoa_r+0x6e6>
 8005a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a32:	429f      	cmp	r7, r3
 8005a34:	f43f af7a 	beq.w	800592c <_dtoa_r+0x474>
 8005a38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <_dtoa_r+0x5b0>)
 8005a40:	f7fa fd4a 	bl	80004d8 <__aeabi_dmul>
 8005a44:	2200      	movs	r2, #0
 8005a46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <_dtoa_r+0x5b0>)
 8005a50:	f7fa fd42 	bl	80004d8 <__aeabi_dmul>
 8005a54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a58:	e7c3      	b.n	80059e2 <_dtoa_r+0x52a>
 8005a5a:	bf00      	nop
 8005a5c:	08008530 	.word	0x08008530
 8005a60:	08008508 	.word	0x08008508
 8005a64:	3ff00000 	.word	0x3ff00000
 8005a68:	40240000 	.word	0x40240000
 8005a6c:	401c0000 	.word	0x401c0000
 8005a70:	40140000 	.word	0x40140000
 8005a74:	3fe00000 	.word	0x3fe00000
 8005a78:	4630      	mov	r0, r6
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	f7fa fd2c 	bl	80004d8 <__aeabi_dmul>
 8005a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a86:	9c03      	ldr	r4, [sp, #12]
 8005a88:	9314      	str	r3, [sp, #80]	; 0x50
 8005a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a8e:	f7fa ffd3 	bl	8000a38 <__aeabi_d2iz>
 8005a92:	9015      	str	r0, [sp, #84]	; 0x54
 8005a94:	f7fa fcb6 	bl	8000404 <__aeabi_i2d>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aa0:	f7fa fb62 	bl	8000168 <__aeabi_dsub>
 8005aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	3330      	adds	r3, #48	; 0x30
 8005aaa:	f804 3b01 	strb.w	r3, [r4], #1
 8005aae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ab0:	460f      	mov	r7, r1
 8005ab2:	429c      	cmp	r4, r3
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	d124      	bne.n	8005b04 <_dtoa_r+0x64c>
 8005aba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005abe:	4bb0      	ldr	r3, [pc, #704]	; (8005d80 <_dtoa_r+0x8c8>)
 8005ac0:	f7fa fb54 	bl	800016c <__adddf3>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4630      	mov	r0, r6
 8005aca:	4639      	mov	r1, r7
 8005acc:	f7fa ff94 	bl	80009f8 <__aeabi_dcmpgt>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d163      	bne.n	8005b9c <_dtoa_r+0x6e4>
 8005ad4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ad8:	2000      	movs	r0, #0
 8005ada:	49a9      	ldr	r1, [pc, #676]	; (8005d80 <_dtoa_r+0x8c8>)
 8005adc:	f7fa fb44 	bl	8000168 <__aeabi_dsub>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f7fa ff68 	bl	80009bc <__aeabi_dcmplt>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f43f af1d 	beq.w	800592c <_dtoa_r+0x474>
 8005af2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005af4:	1e7b      	subs	r3, r7, #1
 8005af6:	9314      	str	r3, [sp, #80]	; 0x50
 8005af8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005afc:	2b30      	cmp	r3, #48	; 0x30
 8005afe:	d0f8      	beq.n	8005af2 <_dtoa_r+0x63a>
 8005b00:	46c2      	mov	sl, r8
 8005b02:	e03b      	b.n	8005b7c <_dtoa_r+0x6c4>
 8005b04:	4b9f      	ldr	r3, [pc, #636]	; (8005d84 <_dtoa_r+0x8cc>)
 8005b06:	f7fa fce7 	bl	80004d8 <__aeabi_dmul>
 8005b0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b0e:	e7bc      	b.n	8005a8a <_dtoa_r+0x5d2>
 8005b10:	9f03      	ldr	r7, [sp, #12]
 8005b12:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	4649      	mov	r1, r9
 8005b1e:	f7fa fe05 	bl	800072c <__aeabi_ddiv>
 8005b22:	f7fa ff89 	bl	8000a38 <__aeabi_d2iz>
 8005b26:	4604      	mov	r4, r0
 8005b28:	f7fa fc6c 	bl	8000404 <__aeabi_i2d>
 8005b2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b30:	f7fa fcd2 	bl	80004d8 <__aeabi_dmul>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4640      	mov	r0, r8
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	f7fa fb14 	bl	8000168 <__aeabi_dsub>
 8005b40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005b44:	f807 6b01 	strb.w	r6, [r7], #1
 8005b48:	9e03      	ldr	r6, [sp, #12]
 8005b4a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005b4e:	1bbe      	subs	r6, r7, r6
 8005b50:	45b4      	cmp	ip, r6
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	d136      	bne.n	8005bc6 <_dtoa_r+0x70e>
 8005b58:	f7fa fb08 	bl	800016c <__adddf3>
 8005b5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b60:	4680      	mov	r8, r0
 8005b62:	4689      	mov	r9, r1
 8005b64:	f7fa ff48 	bl	80009f8 <__aeabi_dcmpgt>
 8005b68:	bb58      	cbnz	r0, 8005bc2 <_dtoa_r+0x70a>
 8005b6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b6e:	4640      	mov	r0, r8
 8005b70:	4649      	mov	r1, r9
 8005b72:	f7fa ff19 	bl	80009a8 <__aeabi_dcmpeq>
 8005b76:	b108      	cbz	r0, 8005b7c <_dtoa_r+0x6c4>
 8005b78:	07e1      	lsls	r1, r4, #31
 8005b7a:	d422      	bmi.n	8005bc2 <_dtoa_r+0x70a>
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	4659      	mov	r1, fp
 8005b80:	f000 fe68 	bl	8006854 <_Bfree>
 8005b84:	2300      	movs	r3, #0
 8005b86:	703b      	strb	r3, [r7, #0]
 8005b88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b8a:	f10a 0001 	add.w	r0, sl, #1
 8005b8e:	6018      	str	r0, [r3, #0]
 8005b90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f43f acde 	beq.w	8005554 <_dtoa_r+0x9c>
 8005b98:	601f      	str	r7, [r3, #0]
 8005b9a:	e4db      	b.n	8005554 <_dtoa_r+0x9c>
 8005b9c:	4627      	mov	r7, r4
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	461f      	mov	r7, r3
 8005ba2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ba6:	2a39      	cmp	r2, #57	; 0x39
 8005ba8:	d107      	bne.n	8005bba <_dtoa_r+0x702>
 8005baa:	9a03      	ldr	r2, [sp, #12]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d1f7      	bne.n	8005ba0 <_dtoa_r+0x6e8>
 8005bb0:	2230      	movs	r2, #48	; 0x30
 8005bb2:	9903      	ldr	r1, [sp, #12]
 8005bb4:	f108 0801 	add.w	r8, r8, #1
 8005bb8:	700a      	strb	r2, [r1, #0]
 8005bba:	781a      	ldrb	r2, [r3, #0]
 8005bbc:	3201      	adds	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	e79e      	b.n	8005b00 <_dtoa_r+0x648>
 8005bc2:	46d0      	mov	r8, sl
 8005bc4:	e7eb      	b.n	8005b9e <_dtoa_r+0x6e6>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	4b6e      	ldr	r3, [pc, #440]	; (8005d84 <_dtoa_r+0x8cc>)
 8005bca:	f7fa fc85 	bl	80004d8 <__aeabi_dmul>
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4680      	mov	r8, r0
 8005bd4:	4689      	mov	r9, r1
 8005bd6:	f7fa fee7 	bl	80009a8 <__aeabi_dcmpeq>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d09b      	beq.n	8005b16 <_dtoa_r+0x65e>
 8005bde:	e7cd      	b.n	8005b7c <_dtoa_r+0x6c4>
 8005be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	f000 80d0 	beq.w	8005d88 <_dtoa_r+0x8d0>
 8005be8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005bea:	2a01      	cmp	r2, #1
 8005bec:	f300 80ae 	bgt.w	8005d4c <_dtoa_r+0x894>
 8005bf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005bf2:	2a00      	cmp	r2, #0
 8005bf4:	f000 80a6 	beq.w	8005d44 <_dtoa_r+0x88c>
 8005bf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005bfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005bfe:	9f06      	ldr	r7, [sp, #24]
 8005c00:	9a06      	ldr	r2, [sp, #24]
 8005c02:	2101      	movs	r1, #1
 8005c04:	441a      	add	r2, r3
 8005c06:	9206      	str	r2, [sp, #24]
 8005c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	441a      	add	r2, r3
 8005c0e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c10:	f000 ff20 	bl	8006a54 <__i2b>
 8005c14:	4606      	mov	r6, r0
 8005c16:	2f00      	cmp	r7, #0
 8005c18:	dd0c      	ble.n	8005c34 <_dtoa_r+0x77c>
 8005c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	dd09      	ble.n	8005c34 <_dtoa_r+0x77c>
 8005c20:	42bb      	cmp	r3, r7
 8005c22:	bfa8      	it	ge
 8005c24:	463b      	movge	r3, r7
 8005c26:	9a06      	ldr	r2, [sp, #24]
 8005c28:	1aff      	subs	r7, r7, r3
 8005c2a:	1ad2      	subs	r2, r2, r3
 8005c2c:	9206      	str	r2, [sp, #24]
 8005c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	9309      	str	r3, [sp, #36]	; 0x24
 8005c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c36:	b1f3      	cbz	r3, 8005c76 <_dtoa_r+0x7be>
 8005c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80a8 	beq.w	8005d90 <_dtoa_r+0x8d8>
 8005c40:	2c00      	cmp	r4, #0
 8005c42:	dd10      	ble.n	8005c66 <_dtoa_r+0x7ae>
 8005c44:	4631      	mov	r1, r6
 8005c46:	4622      	mov	r2, r4
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f000 ffc1 	bl	8006bd0 <__pow5mult>
 8005c4e:	465a      	mov	r2, fp
 8005c50:	4601      	mov	r1, r0
 8005c52:	4606      	mov	r6, r0
 8005c54:	4628      	mov	r0, r5
 8005c56:	f000 ff13 	bl	8006a80 <__multiply>
 8005c5a:	4680      	mov	r8, r0
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f000 fdf8 	bl	8006854 <_Bfree>
 8005c64:	46c3      	mov	fp, r8
 8005c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c68:	1b1a      	subs	r2, r3, r4
 8005c6a:	d004      	beq.n	8005c76 <_dtoa_r+0x7be>
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 ffae 	bl	8006bd0 <__pow5mult>
 8005c74:	4683      	mov	fp, r0
 8005c76:	2101      	movs	r1, #1
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f000 feeb 	bl	8006a54 <__i2b>
 8005c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c80:	4604      	mov	r4, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f340 8086 	ble.w	8005d94 <_dtoa_r+0x8dc>
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	f000 ff9f 	bl	8006bd0 <__pow5mult>
 8005c92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c94:	4604      	mov	r4, r0
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	dd7f      	ble.n	8005d9a <_dtoa_r+0x8e2>
 8005c9a:	f04f 0800 	mov.w	r8, #0
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ca4:	6918      	ldr	r0, [r3, #16]
 8005ca6:	f000 fe87 	bl	80069b8 <__hi0bits>
 8005caa:	f1c0 0020 	rsb	r0, r0, #32
 8005cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb0:	4418      	add	r0, r3
 8005cb2:	f010 001f 	ands.w	r0, r0, #31
 8005cb6:	f000 8092 	beq.w	8005dde <_dtoa_r+0x926>
 8005cba:	f1c0 0320 	rsb	r3, r0, #32
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	f340 808a 	ble.w	8005dd8 <_dtoa_r+0x920>
 8005cc4:	f1c0 001c 	rsb	r0, r0, #28
 8005cc8:	9b06      	ldr	r3, [sp, #24]
 8005cca:	4407      	add	r7, r0
 8005ccc:	4403      	add	r3, r0
 8005cce:	9306      	str	r3, [sp, #24]
 8005cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd2:	4403      	add	r3, r0
 8005cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd6:	9b06      	ldr	r3, [sp, #24]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	dd05      	ble.n	8005ce8 <_dtoa_r+0x830>
 8005cdc:	4659      	mov	r1, fp
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f000 ffcf 	bl	8006c84 <__lshift>
 8005ce6:	4683      	mov	fp, r0
 8005ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	dd05      	ble.n	8005cfa <_dtoa_r+0x842>
 8005cee:	4621      	mov	r1, r4
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 ffc6 	bl	8006c84 <__lshift>
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d070      	beq.n	8005de2 <_dtoa_r+0x92a>
 8005d00:	4621      	mov	r1, r4
 8005d02:	4658      	mov	r0, fp
 8005d04:	f001 f82e 	bl	8006d64 <__mcmp>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	da6a      	bge.n	8005de2 <_dtoa_r+0x92a>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4659      	mov	r1, fp
 8005d10:	220a      	movs	r2, #10
 8005d12:	4628      	mov	r0, r5
 8005d14:	f000 fdc0 	bl	8006898 <__multadd>
 8005d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d1a:	4683      	mov	fp, r0
 8005d1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8194 	beq.w	800604e <_dtoa_r+0xb96>
 8005d26:	4631      	mov	r1, r6
 8005d28:	2300      	movs	r3, #0
 8005d2a:	220a      	movs	r2, #10
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f000 fdb3 	bl	8006898 <__multadd>
 8005d32:	f1b9 0f00 	cmp.w	r9, #0
 8005d36:	4606      	mov	r6, r0
 8005d38:	f300 8093 	bgt.w	8005e62 <_dtoa_r+0x9aa>
 8005d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	dc57      	bgt.n	8005df2 <_dtoa_r+0x93a>
 8005d42:	e08e      	b.n	8005e62 <_dtoa_r+0x9aa>
 8005d44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d4a:	e757      	b.n	8005bfc <_dtoa_r+0x744>
 8005d4c:	9b08      	ldr	r3, [sp, #32]
 8005d4e:	1e5c      	subs	r4, r3, #1
 8005d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	bfb7      	itett	lt
 8005d56:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005d58:	1b1c      	subge	r4, r3, r4
 8005d5a:	1ae2      	sublt	r2, r4, r3
 8005d5c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005d5e:	bfbe      	ittt	lt
 8005d60:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005d62:	189b      	addlt	r3, r3, r2
 8005d64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005d66:	9b08      	ldr	r3, [sp, #32]
 8005d68:	bfb8      	it	lt
 8005d6a:	2400      	movlt	r4, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	bfbb      	ittet	lt
 8005d70:	9b06      	ldrlt	r3, [sp, #24]
 8005d72:	9a08      	ldrlt	r2, [sp, #32]
 8005d74:	9f06      	ldrge	r7, [sp, #24]
 8005d76:	1a9f      	sublt	r7, r3, r2
 8005d78:	bfac      	ite	ge
 8005d7a:	9b08      	ldrge	r3, [sp, #32]
 8005d7c:	2300      	movlt	r3, #0
 8005d7e:	e73f      	b.n	8005c00 <_dtoa_r+0x748>
 8005d80:	3fe00000 	.word	0x3fe00000
 8005d84:	40240000 	.word	0x40240000
 8005d88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d8a:	9f06      	ldr	r7, [sp, #24]
 8005d8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005d8e:	e742      	b.n	8005c16 <_dtoa_r+0x75e>
 8005d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d92:	e76b      	b.n	8005c6c <_dtoa_r+0x7b4>
 8005d94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	dc19      	bgt.n	8005dce <_dtoa_r+0x916>
 8005d9a:	9b04      	ldr	r3, [sp, #16]
 8005d9c:	b9bb      	cbnz	r3, 8005dce <_dtoa_r+0x916>
 8005d9e:	9b05      	ldr	r3, [sp, #20]
 8005da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005da4:	b99b      	cbnz	r3, 8005dce <_dtoa_r+0x916>
 8005da6:	9b05      	ldr	r3, [sp, #20]
 8005da8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dac:	0d1b      	lsrs	r3, r3, #20
 8005dae:	051b      	lsls	r3, r3, #20
 8005db0:	b183      	cbz	r3, 8005dd4 <_dtoa_r+0x91c>
 8005db2:	f04f 0801 	mov.w	r8, #1
 8005db6:	9b06      	ldr	r3, [sp, #24]
 8005db8:	3301      	adds	r3, #1
 8005dba:	9306      	str	r3, [sp, #24]
 8005dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f47f af6a 	bne.w	8005c9e <_dtoa_r+0x7e6>
 8005dca:	2001      	movs	r0, #1
 8005dcc:	e76f      	b.n	8005cae <_dtoa_r+0x7f6>
 8005dce:	f04f 0800 	mov.w	r8, #0
 8005dd2:	e7f6      	b.n	8005dc2 <_dtoa_r+0x90a>
 8005dd4:	4698      	mov	r8, r3
 8005dd6:	e7f4      	b.n	8005dc2 <_dtoa_r+0x90a>
 8005dd8:	f43f af7d 	beq.w	8005cd6 <_dtoa_r+0x81e>
 8005ddc:	4618      	mov	r0, r3
 8005dde:	301c      	adds	r0, #28
 8005de0:	e772      	b.n	8005cc8 <_dtoa_r+0x810>
 8005de2:	9b08      	ldr	r3, [sp, #32]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dc36      	bgt.n	8005e56 <_dtoa_r+0x99e>
 8005de8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	dd33      	ble.n	8005e56 <_dtoa_r+0x99e>
 8005dee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005df2:	f1b9 0f00 	cmp.w	r9, #0
 8005df6:	d10d      	bne.n	8005e14 <_dtoa_r+0x95c>
 8005df8:	4621      	mov	r1, r4
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	2205      	movs	r2, #5
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 fd4a 	bl	8006898 <__multadd>
 8005e04:	4601      	mov	r1, r0
 8005e06:	4604      	mov	r4, r0
 8005e08:	4658      	mov	r0, fp
 8005e0a:	f000 ffab 	bl	8006d64 <__mcmp>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	f73f adb8 	bgt.w	8005984 <_dtoa_r+0x4cc>
 8005e14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e16:	9f03      	ldr	r7, [sp, #12]
 8005e18:	ea6f 0a03 	mvn.w	sl, r3
 8005e1c:	f04f 0800 	mov.w	r8, #0
 8005e20:	4621      	mov	r1, r4
 8005e22:	4628      	mov	r0, r5
 8005e24:	f000 fd16 	bl	8006854 <_Bfree>
 8005e28:	2e00      	cmp	r6, #0
 8005e2a:	f43f aea7 	beq.w	8005b7c <_dtoa_r+0x6c4>
 8005e2e:	f1b8 0f00 	cmp.w	r8, #0
 8005e32:	d005      	beq.n	8005e40 <_dtoa_r+0x988>
 8005e34:	45b0      	cmp	r8, r6
 8005e36:	d003      	beq.n	8005e40 <_dtoa_r+0x988>
 8005e38:	4641      	mov	r1, r8
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f000 fd0a 	bl	8006854 <_Bfree>
 8005e40:	4631      	mov	r1, r6
 8005e42:	4628      	mov	r0, r5
 8005e44:	f000 fd06 	bl	8006854 <_Bfree>
 8005e48:	e698      	b.n	8005b7c <_dtoa_r+0x6c4>
 8005e4a:	2400      	movs	r4, #0
 8005e4c:	4626      	mov	r6, r4
 8005e4e:	e7e1      	b.n	8005e14 <_dtoa_r+0x95c>
 8005e50:	46c2      	mov	sl, r8
 8005e52:	4626      	mov	r6, r4
 8005e54:	e596      	b.n	8005984 <_dtoa_r+0x4cc>
 8005e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80fd 	beq.w	800605c <_dtoa_r+0xba4>
 8005e62:	2f00      	cmp	r7, #0
 8005e64:	dd05      	ble.n	8005e72 <_dtoa_r+0x9ba>
 8005e66:	4631      	mov	r1, r6
 8005e68:	463a      	mov	r2, r7
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 ff0a 	bl	8006c84 <__lshift>
 8005e70:	4606      	mov	r6, r0
 8005e72:	f1b8 0f00 	cmp.w	r8, #0
 8005e76:	d05c      	beq.n	8005f32 <_dtoa_r+0xa7a>
 8005e78:	4628      	mov	r0, r5
 8005e7a:	6871      	ldr	r1, [r6, #4]
 8005e7c:	f000 fcaa 	bl	80067d4 <_Balloc>
 8005e80:	4607      	mov	r7, r0
 8005e82:	b928      	cbnz	r0, 8005e90 <_dtoa_r+0x9d8>
 8005e84:	4602      	mov	r2, r0
 8005e86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e8a:	4b7f      	ldr	r3, [pc, #508]	; (8006088 <_dtoa_r+0xbd0>)
 8005e8c:	f7ff bb28 	b.w	80054e0 <_dtoa_r+0x28>
 8005e90:	6932      	ldr	r2, [r6, #16]
 8005e92:	f106 010c 	add.w	r1, r6, #12
 8005e96:	3202      	adds	r2, #2
 8005e98:	0092      	lsls	r2, r2, #2
 8005e9a:	300c      	adds	r0, #12
 8005e9c:	f000 fc8c 	bl	80067b8 <memcpy>
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f000 feed 	bl	8006c84 <__lshift>
 8005eaa:	46b0      	mov	r8, r6
 8005eac:	4606      	mov	r6, r0
 8005eae:	9b03      	ldr	r3, [sp, #12]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	9308      	str	r3, [sp, #32]
 8005eb4:	9b03      	ldr	r3, [sp, #12]
 8005eb6:	444b      	add	r3, r9
 8005eb8:	930a      	str	r3, [sp, #40]	; 0x28
 8005eba:	9b04      	ldr	r3, [sp, #16]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec2:	9b08      	ldr	r3, [sp, #32]
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	4658      	mov	r0, fp
 8005eca:	9304      	str	r3, [sp, #16]
 8005ecc:	f7ff fa68 	bl	80053a0 <quorem>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	4641      	mov	r1, r8
 8005ed4:	3330      	adds	r3, #48	; 0x30
 8005ed6:	9006      	str	r0, [sp, #24]
 8005ed8:	4658      	mov	r0, fp
 8005eda:	930b      	str	r3, [sp, #44]	; 0x2c
 8005edc:	f000 ff42 	bl	8006d64 <__mcmp>
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	4681      	mov	r9, r0
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 ff58 	bl	8006d9c <__mdiff>
 8005eec:	68c2      	ldr	r2, [r0, #12]
 8005eee:	4607      	mov	r7, r0
 8005ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ef2:	bb02      	cbnz	r2, 8005f36 <_dtoa_r+0xa7e>
 8005ef4:	4601      	mov	r1, r0
 8005ef6:	4658      	mov	r0, fp
 8005ef8:	f000 ff34 	bl	8006d64 <__mcmp>
 8005efc:	4602      	mov	r2, r0
 8005efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f00:	4639      	mov	r1, r7
 8005f02:	4628      	mov	r0, r5
 8005f04:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005f08:	f000 fca4 	bl	8006854 <_Bfree>
 8005f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f10:	9f08      	ldr	r7, [sp, #32]
 8005f12:	ea43 0102 	orr.w	r1, r3, r2
 8005f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f1c:	d10d      	bne.n	8005f3a <_dtoa_r+0xa82>
 8005f1e:	2b39      	cmp	r3, #57	; 0x39
 8005f20:	d029      	beq.n	8005f76 <_dtoa_r+0xabe>
 8005f22:	f1b9 0f00 	cmp.w	r9, #0
 8005f26:	dd01      	ble.n	8005f2c <_dtoa_r+0xa74>
 8005f28:	9b06      	ldr	r3, [sp, #24]
 8005f2a:	3331      	adds	r3, #49	; 0x31
 8005f2c:	9a04      	ldr	r2, [sp, #16]
 8005f2e:	7013      	strb	r3, [r2, #0]
 8005f30:	e776      	b.n	8005e20 <_dtoa_r+0x968>
 8005f32:	4630      	mov	r0, r6
 8005f34:	e7b9      	b.n	8005eaa <_dtoa_r+0x9f2>
 8005f36:	2201      	movs	r2, #1
 8005f38:	e7e2      	b.n	8005f00 <_dtoa_r+0xa48>
 8005f3a:	f1b9 0f00 	cmp.w	r9, #0
 8005f3e:	db06      	blt.n	8005f4e <_dtoa_r+0xa96>
 8005f40:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005f42:	ea41 0909 	orr.w	r9, r1, r9
 8005f46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f48:	ea59 0101 	orrs.w	r1, r9, r1
 8005f4c:	d120      	bne.n	8005f90 <_dtoa_r+0xad8>
 8005f4e:	2a00      	cmp	r2, #0
 8005f50:	ddec      	ble.n	8005f2c <_dtoa_r+0xa74>
 8005f52:	4659      	mov	r1, fp
 8005f54:	2201      	movs	r2, #1
 8005f56:	4628      	mov	r0, r5
 8005f58:	9308      	str	r3, [sp, #32]
 8005f5a:	f000 fe93 	bl	8006c84 <__lshift>
 8005f5e:	4621      	mov	r1, r4
 8005f60:	4683      	mov	fp, r0
 8005f62:	f000 feff 	bl	8006d64 <__mcmp>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	9b08      	ldr	r3, [sp, #32]
 8005f6a:	dc02      	bgt.n	8005f72 <_dtoa_r+0xaba>
 8005f6c:	d1de      	bne.n	8005f2c <_dtoa_r+0xa74>
 8005f6e:	07da      	lsls	r2, r3, #31
 8005f70:	d5dc      	bpl.n	8005f2c <_dtoa_r+0xa74>
 8005f72:	2b39      	cmp	r3, #57	; 0x39
 8005f74:	d1d8      	bne.n	8005f28 <_dtoa_r+0xa70>
 8005f76:	2339      	movs	r3, #57	; 0x39
 8005f78:	9a04      	ldr	r2, [sp, #16]
 8005f7a:	7013      	strb	r3, [r2, #0]
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	461f      	mov	r7, r3
 8005f80:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	2a39      	cmp	r2, #57	; 0x39
 8005f88:	d050      	beq.n	800602c <_dtoa_r+0xb74>
 8005f8a:	3201      	adds	r2, #1
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	e747      	b.n	8005e20 <_dtoa_r+0x968>
 8005f90:	2a00      	cmp	r2, #0
 8005f92:	dd03      	ble.n	8005f9c <_dtoa_r+0xae4>
 8005f94:	2b39      	cmp	r3, #57	; 0x39
 8005f96:	d0ee      	beq.n	8005f76 <_dtoa_r+0xabe>
 8005f98:	3301      	adds	r3, #1
 8005f9a:	e7c7      	b.n	8005f2c <_dtoa_r+0xa74>
 8005f9c:	9a08      	ldr	r2, [sp, #32]
 8005f9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005fa0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005fa4:	428a      	cmp	r2, r1
 8005fa6:	d02a      	beq.n	8005ffe <_dtoa_r+0xb46>
 8005fa8:	4659      	mov	r1, fp
 8005faa:	2300      	movs	r3, #0
 8005fac:	220a      	movs	r2, #10
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 fc72 	bl	8006898 <__multadd>
 8005fb4:	45b0      	cmp	r8, r6
 8005fb6:	4683      	mov	fp, r0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	f04f 020a 	mov.w	r2, #10
 8005fc0:	4641      	mov	r1, r8
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	d107      	bne.n	8005fd6 <_dtoa_r+0xb1e>
 8005fc6:	f000 fc67 	bl	8006898 <__multadd>
 8005fca:	4680      	mov	r8, r0
 8005fcc:	4606      	mov	r6, r0
 8005fce:	9b08      	ldr	r3, [sp, #32]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	9308      	str	r3, [sp, #32]
 8005fd4:	e775      	b.n	8005ec2 <_dtoa_r+0xa0a>
 8005fd6:	f000 fc5f 	bl	8006898 <__multadd>
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4680      	mov	r8, r0
 8005fde:	2300      	movs	r3, #0
 8005fe0:	220a      	movs	r2, #10
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	f000 fc58 	bl	8006898 <__multadd>
 8005fe8:	4606      	mov	r6, r0
 8005fea:	e7f0      	b.n	8005fce <_dtoa_r+0xb16>
 8005fec:	f1b9 0f00 	cmp.w	r9, #0
 8005ff0:	bfcc      	ite	gt
 8005ff2:	464f      	movgt	r7, r9
 8005ff4:	2701      	movle	r7, #1
 8005ff6:	f04f 0800 	mov.w	r8, #0
 8005ffa:	9a03      	ldr	r2, [sp, #12]
 8005ffc:	4417      	add	r7, r2
 8005ffe:	4659      	mov	r1, fp
 8006000:	2201      	movs	r2, #1
 8006002:	4628      	mov	r0, r5
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	f000 fe3d 	bl	8006c84 <__lshift>
 800600a:	4621      	mov	r1, r4
 800600c:	4683      	mov	fp, r0
 800600e:	f000 fea9 	bl	8006d64 <__mcmp>
 8006012:	2800      	cmp	r0, #0
 8006014:	dcb2      	bgt.n	8005f7c <_dtoa_r+0xac4>
 8006016:	d102      	bne.n	800601e <_dtoa_r+0xb66>
 8006018:	9b08      	ldr	r3, [sp, #32]
 800601a:	07db      	lsls	r3, r3, #31
 800601c:	d4ae      	bmi.n	8005f7c <_dtoa_r+0xac4>
 800601e:	463b      	mov	r3, r7
 8006020:	461f      	mov	r7, r3
 8006022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006026:	2a30      	cmp	r2, #48	; 0x30
 8006028:	d0fa      	beq.n	8006020 <_dtoa_r+0xb68>
 800602a:	e6f9      	b.n	8005e20 <_dtoa_r+0x968>
 800602c:	9a03      	ldr	r2, [sp, #12]
 800602e:	429a      	cmp	r2, r3
 8006030:	d1a5      	bne.n	8005f7e <_dtoa_r+0xac6>
 8006032:	2331      	movs	r3, #49	; 0x31
 8006034:	f10a 0a01 	add.w	sl, sl, #1
 8006038:	e779      	b.n	8005f2e <_dtoa_r+0xa76>
 800603a:	4b14      	ldr	r3, [pc, #80]	; (800608c <_dtoa_r+0xbd4>)
 800603c:	f7ff baa8 	b.w	8005590 <_dtoa_r+0xd8>
 8006040:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006042:	2b00      	cmp	r3, #0
 8006044:	f47f aa81 	bne.w	800554a <_dtoa_r+0x92>
 8006048:	4b11      	ldr	r3, [pc, #68]	; (8006090 <_dtoa_r+0xbd8>)
 800604a:	f7ff baa1 	b.w	8005590 <_dtoa_r+0xd8>
 800604e:	f1b9 0f00 	cmp.w	r9, #0
 8006052:	dc03      	bgt.n	800605c <_dtoa_r+0xba4>
 8006054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006056:	2b02      	cmp	r3, #2
 8006058:	f73f aecb 	bgt.w	8005df2 <_dtoa_r+0x93a>
 800605c:	9f03      	ldr	r7, [sp, #12]
 800605e:	4621      	mov	r1, r4
 8006060:	4658      	mov	r0, fp
 8006062:	f7ff f99d 	bl	80053a0 <quorem>
 8006066:	9a03      	ldr	r2, [sp, #12]
 8006068:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800606c:	f807 3b01 	strb.w	r3, [r7], #1
 8006070:	1aba      	subs	r2, r7, r2
 8006072:	4591      	cmp	r9, r2
 8006074:	ddba      	ble.n	8005fec <_dtoa_r+0xb34>
 8006076:	4659      	mov	r1, fp
 8006078:	2300      	movs	r3, #0
 800607a:	220a      	movs	r2, #10
 800607c:	4628      	mov	r0, r5
 800607e:	f000 fc0b 	bl	8006898 <__multadd>
 8006082:	4683      	mov	fp, r0
 8006084:	e7eb      	b.n	800605e <_dtoa_r+0xba6>
 8006086:	bf00      	nop
 8006088:	08008420 	.word	0x08008420
 800608c:	08008224 	.word	0x08008224
 8006090:	080083a1 	.word	0x080083a1

08006094 <rshift>:
 8006094:	6903      	ldr	r3, [r0, #16]
 8006096:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800609a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800609e:	f100 0414 	add.w	r4, r0, #20
 80060a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80060a6:	dd46      	ble.n	8006136 <rshift+0xa2>
 80060a8:	f011 011f 	ands.w	r1, r1, #31
 80060ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80060b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80060b4:	d10c      	bne.n	80060d0 <rshift+0x3c>
 80060b6:	4629      	mov	r1, r5
 80060b8:	f100 0710 	add.w	r7, r0, #16
 80060bc:	42b1      	cmp	r1, r6
 80060be:	d335      	bcc.n	800612c <rshift+0x98>
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	1eea      	subs	r2, r5, #3
 80060c6:	4296      	cmp	r6, r2
 80060c8:	bf38      	it	cc
 80060ca:	2300      	movcc	r3, #0
 80060cc:	4423      	add	r3, r4
 80060ce:	e015      	b.n	80060fc <rshift+0x68>
 80060d0:	46a1      	mov	r9, r4
 80060d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80060d6:	f1c1 0820 	rsb	r8, r1, #32
 80060da:	40cf      	lsrs	r7, r1
 80060dc:	f105 0e04 	add.w	lr, r5, #4
 80060e0:	4576      	cmp	r6, lr
 80060e2:	46f4      	mov	ip, lr
 80060e4:	d816      	bhi.n	8006114 <rshift+0x80>
 80060e6:	1a9a      	subs	r2, r3, r2
 80060e8:	0092      	lsls	r2, r2, #2
 80060ea:	3a04      	subs	r2, #4
 80060ec:	3501      	adds	r5, #1
 80060ee:	42ae      	cmp	r6, r5
 80060f0:	bf38      	it	cc
 80060f2:	2200      	movcc	r2, #0
 80060f4:	18a3      	adds	r3, r4, r2
 80060f6:	50a7      	str	r7, [r4, r2]
 80060f8:	b107      	cbz	r7, 80060fc <rshift+0x68>
 80060fa:	3304      	adds	r3, #4
 80060fc:	42a3      	cmp	r3, r4
 80060fe:	eba3 0204 	sub.w	r2, r3, r4
 8006102:	bf08      	it	eq
 8006104:	2300      	moveq	r3, #0
 8006106:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800610a:	6102      	str	r2, [r0, #16]
 800610c:	bf08      	it	eq
 800610e:	6143      	streq	r3, [r0, #20]
 8006110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006114:	f8dc c000 	ldr.w	ip, [ip]
 8006118:	fa0c fc08 	lsl.w	ip, ip, r8
 800611c:	ea4c 0707 	orr.w	r7, ip, r7
 8006120:	f849 7b04 	str.w	r7, [r9], #4
 8006124:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006128:	40cf      	lsrs	r7, r1
 800612a:	e7d9      	b.n	80060e0 <rshift+0x4c>
 800612c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006130:	f847 cf04 	str.w	ip, [r7, #4]!
 8006134:	e7c2      	b.n	80060bc <rshift+0x28>
 8006136:	4623      	mov	r3, r4
 8006138:	e7e0      	b.n	80060fc <rshift+0x68>

0800613a <__hexdig_fun>:
 800613a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800613e:	2b09      	cmp	r3, #9
 8006140:	d802      	bhi.n	8006148 <__hexdig_fun+0xe>
 8006142:	3820      	subs	r0, #32
 8006144:	b2c0      	uxtb	r0, r0
 8006146:	4770      	bx	lr
 8006148:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800614c:	2b05      	cmp	r3, #5
 800614e:	d801      	bhi.n	8006154 <__hexdig_fun+0x1a>
 8006150:	3847      	subs	r0, #71	; 0x47
 8006152:	e7f7      	b.n	8006144 <__hexdig_fun+0xa>
 8006154:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006158:	2b05      	cmp	r3, #5
 800615a:	d801      	bhi.n	8006160 <__hexdig_fun+0x26>
 800615c:	3827      	subs	r0, #39	; 0x27
 800615e:	e7f1      	b.n	8006144 <__hexdig_fun+0xa>
 8006160:	2000      	movs	r0, #0
 8006162:	4770      	bx	lr

08006164 <__gethex>:
 8006164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006168:	b08b      	sub	sp, #44	; 0x2c
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	4bb2      	ldr	r3, [pc, #712]	; (8006438 <__gethex+0x2d4>)
 800616e:	9002      	str	r0, [sp, #8]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	468b      	mov	fp, r1
 8006174:	4618      	mov	r0, r3
 8006176:	4690      	mov	r8, r2
 8006178:	9303      	str	r3, [sp, #12]
 800617a:	f7f9 ffe9 	bl	8000150 <strlen>
 800617e:	4682      	mov	sl, r0
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	f8db 2000 	ldr.w	r2, [fp]
 8006186:	4403      	add	r3, r0
 8006188:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800618c:	9306      	str	r3, [sp, #24]
 800618e:	1c93      	adds	r3, r2, #2
 8006190:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006194:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006198:	32fe      	adds	r2, #254	; 0xfe
 800619a:	18d1      	adds	r1, r2, r3
 800619c:	461f      	mov	r7, r3
 800619e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80061a2:	9101      	str	r1, [sp, #4]
 80061a4:	2830      	cmp	r0, #48	; 0x30
 80061a6:	d0f8      	beq.n	800619a <__gethex+0x36>
 80061a8:	f7ff ffc7 	bl	800613a <__hexdig_fun>
 80061ac:	4604      	mov	r4, r0
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d13a      	bne.n	8006228 <__gethex+0xc4>
 80061b2:	4652      	mov	r2, sl
 80061b4:	4638      	mov	r0, r7
 80061b6:	9903      	ldr	r1, [sp, #12]
 80061b8:	f001 fa26 	bl	8007608 <strncmp>
 80061bc:	4605      	mov	r5, r0
 80061be:	2800      	cmp	r0, #0
 80061c0:	d166      	bne.n	8006290 <__gethex+0x12c>
 80061c2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80061c6:	eb07 060a 	add.w	r6, r7, sl
 80061ca:	f7ff ffb6 	bl	800613a <__hexdig_fun>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d060      	beq.n	8006294 <__gethex+0x130>
 80061d2:	4633      	mov	r3, r6
 80061d4:	7818      	ldrb	r0, [r3, #0]
 80061d6:	461f      	mov	r7, r3
 80061d8:	2830      	cmp	r0, #48	; 0x30
 80061da:	f103 0301 	add.w	r3, r3, #1
 80061de:	d0f9      	beq.n	80061d4 <__gethex+0x70>
 80061e0:	f7ff ffab 	bl	800613a <__hexdig_fun>
 80061e4:	2301      	movs	r3, #1
 80061e6:	fab0 f480 	clz	r4, r0
 80061ea:	4635      	mov	r5, r6
 80061ec:	0964      	lsrs	r4, r4, #5
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	463a      	mov	r2, r7
 80061f2:	4616      	mov	r6, r2
 80061f4:	7830      	ldrb	r0, [r6, #0]
 80061f6:	3201      	adds	r2, #1
 80061f8:	f7ff ff9f 	bl	800613a <__hexdig_fun>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d1f8      	bne.n	80061f2 <__gethex+0x8e>
 8006200:	4652      	mov	r2, sl
 8006202:	4630      	mov	r0, r6
 8006204:	9903      	ldr	r1, [sp, #12]
 8006206:	f001 f9ff 	bl	8007608 <strncmp>
 800620a:	b980      	cbnz	r0, 800622e <__gethex+0xca>
 800620c:	b94d      	cbnz	r5, 8006222 <__gethex+0xbe>
 800620e:	eb06 050a 	add.w	r5, r6, sl
 8006212:	462a      	mov	r2, r5
 8006214:	4616      	mov	r6, r2
 8006216:	7830      	ldrb	r0, [r6, #0]
 8006218:	3201      	adds	r2, #1
 800621a:	f7ff ff8e 	bl	800613a <__hexdig_fun>
 800621e:	2800      	cmp	r0, #0
 8006220:	d1f8      	bne.n	8006214 <__gethex+0xb0>
 8006222:	1bad      	subs	r5, r5, r6
 8006224:	00ad      	lsls	r5, r5, #2
 8006226:	e004      	b.n	8006232 <__gethex+0xce>
 8006228:	2400      	movs	r4, #0
 800622a:	4625      	mov	r5, r4
 800622c:	e7e0      	b.n	80061f0 <__gethex+0x8c>
 800622e:	2d00      	cmp	r5, #0
 8006230:	d1f7      	bne.n	8006222 <__gethex+0xbe>
 8006232:	7833      	ldrb	r3, [r6, #0]
 8006234:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006238:	2b50      	cmp	r3, #80	; 0x50
 800623a:	d139      	bne.n	80062b0 <__gethex+0x14c>
 800623c:	7873      	ldrb	r3, [r6, #1]
 800623e:	2b2b      	cmp	r3, #43	; 0x2b
 8006240:	d02a      	beq.n	8006298 <__gethex+0x134>
 8006242:	2b2d      	cmp	r3, #45	; 0x2d
 8006244:	d02c      	beq.n	80062a0 <__gethex+0x13c>
 8006246:	f04f 0900 	mov.w	r9, #0
 800624a:	1c71      	adds	r1, r6, #1
 800624c:	7808      	ldrb	r0, [r1, #0]
 800624e:	f7ff ff74 	bl	800613a <__hexdig_fun>
 8006252:	1e43      	subs	r3, r0, #1
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b18      	cmp	r3, #24
 8006258:	d82a      	bhi.n	80062b0 <__gethex+0x14c>
 800625a:	f1a0 0210 	sub.w	r2, r0, #16
 800625e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006262:	f7ff ff6a 	bl	800613a <__hexdig_fun>
 8006266:	1e43      	subs	r3, r0, #1
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b18      	cmp	r3, #24
 800626c:	d91b      	bls.n	80062a6 <__gethex+0x142>
 800626e:	f1b9 0f00 	cmp.w	r9, #0
 8006272:	d000      	beq.n	8006276 <__gethex+0x112>
 8006274:	4252      	negs	r2, r2
 8006276:	4415      	add	r5, r2
 8006278:	f8cb 1000 	str.w	r1, [fp]
 800627c:	b1d4      	cbz	r4, 80062b4 <__gethex+0x150>
 800627e:	9b01      	ldr	r3, [sp, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	bf14      	ite	ne
 8006284:	2700      	movne	r7, #0
 8006286:	2706      	moveq	r7, #6
 8006288:	4638      	mov	r0, r7
 800628a:	b00b      	add	sp, #44	; 0x2c
 800628c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006290:	463e      	mov	r6, r7
 8006292:	4625      	mov	r5, r4
 8006294:	2401      	movs	r4, #1
 8006296:	e7cc      	b.n	8006232 <__gethex+0xce>
 8006298:	f04f 0900 	mov.w	r9, #0
 800629c:	1cb1      	adds	r1, r6, #2
 800629e:	e7d5      	b.n	800624c <__gethex+0xe8>
 80062a0:	f04f 0901 	mov.w	r9, #1
 80062a4:	e7fa      	b.n	800629c <__gethex+0x138>
 80062a6:	230a      	movs	r3, #10
 80062a8:	fb03 0202 	mla	r2, r3, r2, r0
 80062ac:	3a10      	subs	r2, #16
 80062ae:	e7d6      	b.n	800625e <__gethex+0xfa>
 80062b0:	4631      	mov	r1, r6
 80062b2:	e7e1      	b.n	8006278 <__gethex+0x114>
 80062b4:	4621      	mov	r1, r4
 80062b6:	1bf3      	subs	r3, r6, r7
 80062b8:	3b01      	subs	r3, #1
 80062ba:	2b07      	cmp	r3, #7
 80062bc:	dc0a      	bgt.n	80062d4 <__gethex+0x170>
 80062be:	9802      	ldr	r0, [sp, #8]
 80062c0:	f000 fa88 	bl	80067d4 <_Balloc>
 80062c4:	4604      	mov	r4, r0
 80062c6:	b940      	cbnz	r0, 80062da <__gethex+0x176>
 80062c8:	4602      	mov	r2, r0
 80062ca:	21de      	movs	r1, #222	; 0xde
 80062cc:	4b5b      	ldr	r3, [pc, #364]	; (800643c <__gethex+0x2d8>)
 80062ce:	485c      	ldr	r0, [pc, #368]	; (8006440 <__gethex+0x2dc>)
 80062d0:	f001 f9bc 	bl	800764c <__assert_func>
 80062d4:	3101      	adds	r1, #1
 80062d6:	105b      	asrs	r3, r3, #1
 80062d8:	e7ef      	b.n	80062ba <__gethex+0x156>
 80062da:	f04f 0b00 	mov.w	fp, #0
 80062de:	f100 0914 	add.w	r9, r0, #20
 80062e2:	f1ca 0301 	rsb	r3, sl, #1
 80062e6:	f8cd 9010 	str.w	r9, [sp, #16]
 80062ea:	f8cd b004 	str.w	fp, [sp, #4]
 80062ee:	9308      	str	r3, [sp, #32]
 80062f0:	42b7      	cmp	r7, r6
 80062f2:	d33f      	bcc.n	8006374 <__gethex+0x210>
 80062f4:	9f04      	ldr	r7, [sp, #16]
 80062f6:	9b01      	ldr	r3, [sp, #4]
 80062f8:	f847 3b04 	str.w	r3, [r7], #4
 80062fc:	eba7 0709 	sub.w	r7, r7, r9
 8006300:	10bf      	asrs	r7, r7, #2
 8006302:	6127      	str	r7, [r4, #16]
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fb57 	bl	80069b8 <__hi0bits>
 800630a:	017f      	lsls	r7, r7, #5
 800630c:	f8d8 6000 	ldr.w	r6, [r8]
 8006310:	1a3f      	subs	r7, r7, r0
 8006312:	42b7      	cmp	r7, r6
 8006314:	dd62      	ble.n	80063dc <__gethex+0x278>
 8006316:	1bbf      	subs	r7, r7, r6
 8006318:	4639      	mov	r1, r7
 800631a:	4620      	mov	r0, r4
 800631c:	f000 fef1 	bl	8007102 <__any_on>
 8006320:	4682      	mov	sl, r0
 8006322:	b1a8      	cbz	r0, 8006350 <__gethex+0x1ec>
 8006324:	f04f 0a01 	mov.w	sl, #1
 8006328:	1e7b      	subs	r3, r7, #1
 800632a:	1159      	asrs	r1, r3, #5
 800632c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006330:	f003 021f 	and.w	r2, r3, #31
 8006334:	fa0a f202 	lsl.w	r2, sl, r2
 8006338:	420a      	tst	r2, r1
 800633a:	d009      	beq.n	8006350 <__gethex+0x1ec>
 800633c:	4553      	cmp	r3, sl
 800633e:	dd05      	ble.n	800634c <__gethex+0x1e8>
 8006340:	4620      	mov	r0, r4
 8006342:	1eb9      	subs	r1, r7, #2
 8006344:	f000 fedd 	bl	8007102 <__any_on>
 8006348:	2800      	cmp	r0, #0
 800634a:	d144      	bne.n	80063d6 <__gethex+0x272>
 800634c:	f04f 0a02 	mov.w	sl, #2
 8006350:	4639      	mov	r1, r7
 8006352:	4620      	mov	r0, r4
 8006354:	f7ff fe9e 	bl	8006094 <rshift>
 8006358:	443d      	add	r5, r7
 800635a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800635e:	42ab      	cmp	r3, r5
 8006360:	da4a      	bge.n	80063f8 <__gethex+0x294>
 8006362:	4621      	mov	r1, r4
 8006364:	9802      	ldr	r0, [sp, #8]
 8006366:	f000 fa75 	bl	8006854 <_Bfree>
 800636a:	2300      	movs	r3, #0
 800636c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800636e:	27a3      	movs	r7, #163	; 0xa3
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	e789      	b.n	8006288 <__gethex+0x124>
 8006374:	1e73      	subs	r3, r6, #1
 8006376:	9a06      	ldr	r2, [sp, #24]
 8006378:	9307      	str	r3, [sp, #28]
 800637a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800637e:	4293      	cmp	r3, r2
 8006380:	d019      	beq.n	80063b6 <__gethex+0x252>
 8006382:	f1bb 0f20 	cmp.w	fp, #32
 8006386:	d107      	bne.n	8006398 <__gethex+0x234>
 8006388:	9b04      	ldr	r3, [sp, #16]
 800638a:	9a01      	ldr	r2, [sp, #4]
 800638c:	f843 2b04 	str.w	r2, [r3], #4
 8006390:	9304      	str	r3, [sp, #16]
 8006392:	2300      	movs	r3, #0
 8006394:	469b      	mov	fp, r3
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800639c:	f7ff fecd 	bl	800613a <__hexdig_fun>
 80063a0:	9b01      	ldr	r3, [sp, #4]
 80063a2:	f000 000f 	and.w	r0, r0, #15
 80063a6:	fa00 f00b 	lsl.w	r0, r0, fp
 80063aa:	4303      	orrs	r3, r0
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	f10b 0b04 	add.w	fp, fp, #4
 80063b2:	9b07      	ldr	r3, [sp, #28]
 80063b4:	e00d      	b.n	80063d2 <__gethex+0x26e>
 80063b6:	9a08      	ldr	r2, [sp, #32]
 80063b8:	1e73      	subs	r3, r6, #1
 80063ba:	4413      	add	r3, r2
 80063bc:	42bb      	cmp	r3, r7
 80063be:	d3e0      	bcc.n	8006382 <__gethex+0x21e>
 80063c0:	4618      	mov	r0, r3
 80063c2:	4652      	mov	r2, sl
 80063c4:	9903      	ldr	r1, [sp, #12]
 80063c6:	9309      	str	r3, [sp, #36]	; 0x24
 80063c8:	f001 f91e 	bl	8007608 <strncmp>
 80063cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d1d7      	bne.n	8006382 <__gethex+0x21e>
 80063d2:	461e      	mov	r6, r3
 80063d4:	e78c      	b.n	80062f0 <__gethex+0x18c>
 80063d6:	f04f 0a03 	mov.w	sl, #3
 80063da:	e7b9      	b.n	8006350 <__gethex+0x1ec>
 80063dc:	da09      	bge.n	80063f2 <__gethex+0x28e>
 80063de:	1bf7      	subs	r7, r6, r7
 80063e0:	4621      	mov	r1, r4
 80063e2:	463a      	mov	r2, r7
 80063e4:	9802      	ldr	r0, [sp, #8]
 80063e6:	f000 fc4d 	bl	8006c84 <__lshift>
 80063ea:	4604      	mov	r4, r0
 80063ec:	1bed      	subs	r5, r5, r7
 80063ee:	f100 0914 	add.w	r9, r0, #20
 80063f2:	f04f 0a00 	mov.w	sl, #0
 80063f6:	e7b0      	b.n	800635a <__gethex+0x1f6>
 80063f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80063fc:	42a8      	cmp	r0, r5
 80063fe:	dd72      	ble.n	80064e6 <__gethex+0x382>
 8006400:	1b45      	subs	r5, r0, r5
 8006402:	42ae      	cmp	r6, r5
 8006404:	dc35      	bgt.n	8006472 <__gethex+0x30e>
 8006406:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d029      	beq.n	8006462 <__gethex+0x2fe>
 800640e:	2b03      	cmp	r3, #3
 8006410:	d02b      	beq.n	800646a <__gethex+0x306>
 8006412:	2b01      	cmp	r3, #1
 8006414:	d11c      	bne.n	8006450 <__gethex+0x2ec>
 8006416:	42ae      	cmp	r6, r5
 8006418:	d11a      	bne.n	8006450 <__gethex+0x2ec>
 800641a:	2e01      	cmp	r6, #1
 800641c:	d112      	bne.n	8006444 <__gethex+0x2e0>
 800641e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006422:	9a05      	ldr	r2, [sp, #20]
 8006424:	2762      	movs	r7, #98	; 0x62
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	2301      	movs	r3, #1
 800642a:	6123      	str	r3, [r4, #16]
 800642c:	f8c9 3000 	str.w	r3, [r9]
 8006430:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006432:	601c      	str	r4, [r3, #0]
 8006434:	e728      	b.n	8006288 <__gethex+0x124>
 8006436:	bf00      	nop
 8006438:	08008498 	.word	0x08008498
 800643c:	08008420 	.word	0x08008420
 8006440:	08008431 	.word	0x08008431
 8006444:	4620      	mov	r0, r4
 8006446:	1e71      	subs	r1, r6, #1
 8006448:	f000 fe5b 	bl	8007102 <__any_on>
 800644c:	2800      	cmp	r0, #0
 800644e:	d1e6      	bne.n	800641e <__gethex+0x2ba>
 8006450:	4621      	mov	r1, r4
 8006452:	9802      	ldr	r0, [sp, #8]
 8006454:	f000 f9fe 	bl	8006854 <_Bfree>
 8006458:	2300      	movs	r3, #0
 800645a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800645c:	2750      	movs	r7, #80	; 0x50
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	e712      	b.n	8006288 <__gethex+0x124>
 8006462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1f3      	bne.n	8006450 <__gethex+0x2ec>
 8006468:	e7d9      	b.n	800641e <__gethex+0x2ba>
 800646a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1d6      	bne.n	800641e <__gethex+0x2ba>
 8006470:	e7ee      	b.n	8006450 <__gethex+0x2ec>
 8006472:	1e6f      	subs	r7, r5, #1
 8006474:	f1ba 0f00 	cmp.w	sl, #0
 8006478:	d132      	bne.n	80064e0 <__gethex+0x37c>
 800647a:	b127      	cbz	r7, 8006486 <__gethex+0x322>
 800647c:	4639      	mov	r1, r7
 800647e:	4620      	mov	r0, r4
 8006480:	f000 fe3f 	bl	8007102 <__any_on>
 8006484:	4682      	mov	sl, r0
 8006486:	2101      	movs	r1, #1
 8006488:	117b      	asrs	r3, r7, #5
 800648a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800648e:	f007 071f 	and.w	r7, r7, #31
 8006492:	fa01 f707 	lsl.w	r7, r1, r7
 8006496:	421f      	tst	r7, r3
 8006498:	f04f 0702 	mov.w	r7, #2
 800649c:	4629      	mov	r1, r5
 800649e:	4620      	mov	r0, r4
 80064a0:	bf18      	it	ne
 80064a2:	f04a 0a02 	orrne.w	sl, sl, #2
 80064a6:	1b76      	subs	r6, r6, r5
 80064a8:	f7ff fdf4 	bl	8006094 <rshift>
 80064ac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80064b0:	f1ba 0f00 	cmp.w	sl, #0
 80064b4:	d048      	beq.n	8006548 <__gethex+0x3e4>
 80064b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d015      	beq.n	80064ea <__gethex+0x386>
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d017      	beq.n	80064f2 <__gethex+0x38e>
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d109      	bne.n	80064da <__gethex+0x376>
 80064c6:	f01a 0f02 	tst.w	sl, #2
 80064ca:	d006      	beq.n	80064da <__gethex+0x376>
 80064cc:	f8d9 0000 	ldr.w	r0, [r9]
 80064d0:	ea4a 0a00 	orr.w	sl, sl, r0
 80064d4:	f01a 0f01 	tst.w	sl, #1
 80064d8:	d10e      	bne.n	80064f8 <__gethex+0x394>
 80064da:	f047 0710 	orr.w	r7, r7, #16
 80064de:	e033      	b.n	8006548 <__gethex+0x3e4>
 80064e0:	f04f 0a01 	mov.w	sl, #1
 80064e4:	e7cf      	b.n	8006486 <__gethex+0x322>
 80064e6:	2701      	movs	r7, #1
 80064e8:	e7e2      	b.n	80064b0 <__gethex+0x34c>
 80064ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064ec:	f1c3 0301 	rsb	r3, r3, #1
 80064f0:	9315      	str	r3, [sp, #84]	; 0x54
 80064f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0f0      	beq.n	80064da <__gethex+0x376>
 80064f8:	f04f 0c00 	mov.w	ip, #0
 80064fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006500:	f104 0314 	add.w	r3, r4, #20
 8006504:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006508:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800650c:	4618      	mov	r0, r3
 800650e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006512:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006516:	d01c      	beq.n	8006552 <__gethex+0x3ee>
 8006518:	3201      	adds	r2, #1
 800651a:	6002      	str	r2, [r0, #0]
 800651c:	2f02      	cmp	r7, #2
 800651e:	f104 0314 	add.w	r3, r4, #20
 8006522:	d13d      	bne.n	80065a0 <__gethex+0x43c>
 8006524:	f8d8 2000 	ldr.w	r2, [r8]
 8006528:	3a01      	subs	r2, #1
 800652a:	42b2      	cmp	r2, r6
 800652c:	d10a      	bne.n	8006544 <__gethex+0x3e0>
 800652e:	2201      	movs	r2, #1
 8006530:	1171      	asrs	r1, r6, #5
 8006532:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006536:	f006 061f 	and.w	r6, r6, #31
 800653a:	fa02 f606 	lsl.w	r6, r2, r6
 800653e:	421e      	tst	r6, r3
 8006540:	bf18      	it	ne
 8006542:	4617      	movne	r7, r2
 8006544:	f047 0720 	orr.w	r7, r7, #32
 8006548:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800654a:	601c      	str	r4, [r3, #0]
 800654c:	9b05      	ldr	r3, [sp, #20]
 800654e:	601d      	str	r5, [r3, #0]
 8006550:	e69a      	b.n	8006288 <__gethex+0x124>
 8006552:	4299      	cmp	r1, r3
 8006554:	f843 cc04 	str.w	ip, [r3, #-4]
 8006558:	d8d8      	bhi.n	800650c <__gethex+0x3a8>
 800655a:	68a3      	ldr	r3, [r4, #8]
 800655c:	459b      	cmp	fp, r3
 800655e:	db17      	blt.n	8006590 <__gethex+0x42c>
 8006560:	6861      	ldr	r1, [r4, #4]
 8006562:	9802      	ldr	r0, [sp, #8]
 8006564:	3101      	adds	r1, #1
 8006566:	f000 f935 	bl	80067d4 <_Balloc>
 800656a:	4681      	mov	r9, r0
 800656c:	b918      	cbnz	r0, 8006576 <__gethex+0x412>
 800656e:	4602      	mov	r2, r0
 8006570:	2184      	movs	r1, #132	; 0x84
 8006572:	4b19      	ldr	r3, [pc, #100]	; (80065d8 <__gethex+0x474>)
 8006574:	e6ab      	b.n	80062ce <__gethex+0x16a>
 8006576:	6922      	ldr	r2, [r4, #16]
 8006578:	f104 010c 	add.w	r1, r4, #12
 800657c:	3202      	adds	r2, #2
 800657e:	0092      	lsls	r2, r2, #2
 8006580:	300c      	adds	r0, #12
 8006582:	f000 f919 	bl	80067b8 <memcpy>
 8006586:	4621      	mov	r1, r4
 8006588:	9802      	ldr	r0, [sp, #8]
 800658a:	f000 f963 	bl	8006854 <_Bfree>
 800658e:	464c      	mov	r4, r9
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	6122      	str	r2, [r4, #16]
 8006596:	2201      	movs	r2, #1
 8006598:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800659c:	615a      	str	r2, [r3, #20]
 800659e:	e7bd      	b.n	800651c <__gethex+0x3b8>
 80065a0:	6922      	ldr	r2, [r4, #16]
 80065a2:	455a      	cmp	r2, fp
 80065a4:	dd0b      	ble.n	80065be <__gethex+0x45a>
 80065a6:	2101      	movs	r1, #1
 80065a8:	4620      	mov	r0, r4
 80065aa:	f7ff fd73 	bl	8006094 <rshift>
 80065ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065b2:	3501      	adds	r5, #1
 80065b4:	42ab      	cmp	r3, r5
 80065b6:	f6ff aed4 	blt.w	8006362 <__gethex+0x1fe>
 80065ba:	2701      	movs	r7, #1
 80065bc:	e7c2      	b.n	8006544 <__gethex+0x3e0>
 80065be:	f016 061f 	ands.w	r6, r6, #31
 80065c2:	d0fa      	beq.n	80065ba <__gethex+0x456>
 80065c4:	4453      	add	r3, sl
 80065c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80065ca:	f000 f9f5 	bl	80069b8 <__hi0bits>
 80065ce:	f1c6 0620 	rsb	r6, r6, #32
 80065d2:	42b0      	cmp	r0, r6
 80065d4:	dbe7      	blt.n	80065a6 <__gethex+0x442>
 80065d6:	e7f0      	b.n	80065ba <__gethex+0x456>
 80065d8:	08008420 	.word	0x08008420

080065dc <L_shift>:
 80065dc:	f1c2 0208 	rsb	r2, r2, #8
 80065e0:	0092      	lsls	r2, r2, #2
 80065e2:	b570      	push	{r4, r5, r6, lr}
 80065e4:	f1c2 0620 	rsb	r6, r2, #32
 80065e8:	6843      	ldr	r3, [r0, #4]
 80065ea:	6804      	ldr	r4, [r0, #0]
 80065ec:	fa03 f506 	lsl.w	r5, r3, r6
 80065f0:	432c      	orrs	r4, r5
 80065f2:	40d3      	lsrs	r3, r2
 80065f4:	6004      	str	r4, [r0, #0]
 80065f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80065fa:	4288      	cmp	r0, r1
 80065fc:	d3f4      	bcc.n	80065e8 <L_shift+0xc>
 80065fe:	bd70      	pop	{r4, r5, r6, pc}

08006600 <__match>:
 8006600:	b530      	push	{r4, r5, lr}
 8006602:	6803      	ldr	r3, [r0, #0]
 8006604:	3301      	adds	r3, #1
 8006606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800660a:	b914      	cbnz	r4, 8006612 <__match+0x12>
 800660c:	6003      	str	r3, [r0, #0]
 800660e:	2001      	movs	r0, #1
 8006610:	bd30      	pop	{r4, r5, pc}
 8006612:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006616:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800661a:	2d19      	cmp	r5, #25
 800661c:	bf98      	it	ls
 800661e:	3220      	addls	r2, #32
 8006620:	42a2      	cmp	r2, r4
 8006622:	d0f0      	beq.n	8006606 <__match+0x6>
 8006624:	2000      	movs	r0, #0
 8006626:	e7f3      	b.n	8006610 <__match+0x10>

08006628 <__hexnan>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	2500      	movs	r5, #0
 800662e:	680b      	ldr	r3, [r1, #0]
 8006630:	4682      	mov	sl, r0
 8006632:	115e      	asrs	r6, r3, #5
 8006634:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006638:	f013 031f 	ands.w	r3, r3, #31
 800663c:	bf18      	it	ne
 800663e:	3604      	addne	r6, #4
 8006640:	1f37      	subs	r7, r6, #4
 8006642:	46b9      	mov	r9, r7
 8006644:	463c      	mov	r4, r7
 8006646:	46ab      	mov	fp, r5
 8006648:	b087      	sub	sp, #28
 800664a:	4690      	mov	r8, r2
 800664c:	6802      	ldr	r2, [r0, #0]
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	f846 5c04 	str.w	r5, [r6, #-4]
 8006654:	9502      	str	r5, [sp, #8]
 8006656:	7851      	ldrb	r1, [r2, #1]
 8006658:	1c53      	adds	r3, r2, #1
 800665a:	9303      	str	r3, [sp, #12]
 800665c:	b341      	cbz	r1, 80066b0 <__hexnan+0x88>
 800665e:	4608      	mov	r0, r1
 8006660:	9205      	str	r2, [sp, #20]
 8006662:	9104      	str	r1, [sp, #16]
 8006664:	f7ff fd69 	bl	800613a <__hexdig_fun>
 8006668:	2800      	cmp	r0, #0
 800666a:	d14f      	bne.n	800670c <__hexnan+0xe4>
 800666c:	9904      	ldr	r1, [sp, #16]
 800666e:	9a05      	ldr	r2, [sp, #20]
 8006670:	2920      	cmp	r1, #32
 8006672:	d818      	bhi.n	80066a6 <__hexnan+0x7e>
 8006674:	9b02      	ldr	r3, [sp, #8]
 8006676:	459b      	cmp	fp, r3
 8006678:	dd13      	ble.n	80066a2 <__hexnan+0x7a>
 800667a:	454c      	cmp	r4, r9
 800667c:	d206      	bcs.n	800668c <__hexnan+0x64>
 800667e:	2d07      	cmp	r5, #7
 8006680:	dc04      	bgt.n	800668c <__hexnan+0x64>
 8006682:	462a      	mov	r2, r5
 8006684:	4649      	mov	r1, r9
 8006686:	4620      	mov	r0, r4
 8006688:	f7ff ffa8 	bl	80065dc <L_shift>
 800668c:	4544      	cmp	r4, r8
 800668e:	d950      	bls.n	8006732 <__hexnan+0x10a>
 8006690:	2300      	movs	r3, #0
 8006692:	f1a4 0904 	sub.w	r9, r4, #4
 8006696:	f844 3c04 	str.w	r3, [r4, #-4]
 800669a:	461d      	mov	r5, r3
 800669c:	464c      	mov	r4, r9
 800669e:	f8cd b008 	str.w	fp, [sp, #8]
 80066a2:	9a03      	ldr	r2, [sp, #12]
 80066a4:	e7d7      	b.n	8006656 <__hexnan+0x2e>
 80066a6:	2929      	cmp	r1, #41	; 0x29
 80066a8:	d156      	bne.n	8006758 <__hexnan+0x130>
 80066aa:	3202      	adds	r2, #2
 80066ac:	f8ca 2000 	str.w	r2, [sl]
 80066b0:	f1bb 0f00 	cmp.w	fp, #0
 80066b4:	d050      	beq.n	8006758 <__hexnan+0x130>
 80066b6:	454c      	cmp	r4, r9
 80066b8:	d206      	bcs.n	80066c8 <__hexnan+0xa0>
 80066ba:	2d07      	cmp	r5, #7
 80066bc:	dc04      	bgt.n	80066c8 <__hexnan+0xa0>
 80066be:	462a      	mov	r2, r5
 80066c0:	4649      	mov	r1, r9
 80066c2:	4620      	mov	r0, r4
 80066c4:	f7ff ff8a 	bl	80065dc <L_shift>
 80066c8:	4544      	cmp	r4, r8
 80066ca:	d934      	bls.n	8006736 <__hexnan+0x10e>
 80066cc:	4623      	mov	r3, r4
 80066ce:	f1a8 0204 	sub.w	r2, r8, #4
 80066d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80066d6:	429f      	cmp	r7, r3
 80066d8:	f842 1f04 	str.w	r1, [r2, #4]!
 80066dc:	d2f9      	bcs.n	80066d2 <__hexnan+0xaa>
 80066de:	1b3b      	subs	r3, r7, r4
 80066e0:	f023 0303 	bic.w	r3, r3, #3
 80066e4:	3304      	adds	r3, #4
 80066e6:	3401      	adds	r4, #1
 80066e8:	3e03      	subs	r6, #3
 80066ea:	42b4      	cmp	r4, r6
 80066ec:	bf88      	it	hi
 80066ee:	2304      	movhi	r3, #4
 80066f0:	2200      	movs	r2, #0
 80066f2:	4443      	add	r3, r8
 80066f4:	f843 2b04 	str.w	r2, [r3], #4
 80066f8:	429f      	cmp	r7, r3
 80066fa:	d2fb      	bcs.n	80066f4 <__hexnan+0xcc>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	b91b      	cbnz	r3, 8006708 <__hexnan+0xe0>
 8006700:	4547      	cmp	r7, r8
 8006702:	d127      	bne.n	8006754 <__hexnan+0x12c>
 8006704:	2301      	movs	r3, #1
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	2005      	movs	r0, #5
 800670a:	e026      	b.n	800675a <__hexnan+0x132>
 800670c:	3501      	adds	r5, #1
 800670e:	2d08      	cmp	r5, #8
 8006710:	f10b 0b01 	add.w	fp, fp, #1
 8006714:	dd06      	ble.n	8006724 <__hexnan+0xfc>
 8006716:	4544      	cmp	r4, r8
 8006718:	d9c3      	bls.n	80066a2 <__hexnan+0x7a>
 800671a:	2300      	movs	r3, #0
 800671c:	2501      	movs	r5, #1
 800671e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006722:	3c04      	subs	r4, #4
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	f000 000f 	and.w	r0, r0, #15
 800672a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800672e:	6022      	str	r2, [r4, #0]
 8006730:	e7b7      	b.n	80066a2 <__hexnan+0x7a>
 8006732:	2508      	movs	r5, #8
 8006734:	e7b5      	b.n	80066a2 <__hexnan+0x7a>
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0df      	beq.n	80066fc <__hexnan+0xd4>
 800673c:	f04f 32ff 	mov.w	r2, #4294967295
 8006740:	f1c3 0320 	rsb	r3, r3, #32
 8006744:	fa22 f303 	lsr.w	r3, r2, r3
 8006748:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800674c:	401a      	ands	r2, r3
 800674e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006752:	e7d3      	b.n	80066fc <__hexnan+0xd4>
 8006754:	3f04      	subs	r7, #4
 8006756:	e7d1      	b.n	80066fc <__hexnan+0xd4>
 8006758:	2004      	movs	r0, #4
 800675a:	b007      	add	sp, #28
 800675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006760 <_localeconv_r>:
 8006760:	4800      	ldr	r0, [pc, #0]	; (8006764 <_localeconv_r+0x4>)
 8006762:	4770      	bx	lr
 8006764:	20000164 	.word	0x20000164

08006768 <malloc>:
 8006768:	4b02      	ldr	r3, [pc, #8]	; (8006774 <malloc+0xc>)
 800676a:	4601      	mov	r1, r0
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	f000 bd65 	b.w	800723c <_malloc_r>
 8006772:	bf00      	nop
 8006774:	2000000c 	.word	0x2000000c

08006778 <__ascii_mbtowc>:
 8006778:	b082      	sub	sp, #8
 800677a:	b901      	cbnz	r1, 800677e <__ascii_mbtowc+0x6>
 800677c:	a901      	add	r1, sp, #4
 800677e:	b142      	cbz	r2, 8006792 <__ascii_mbtowc+0x1a>
 8006780:	b14b      	cbz	r3, 8006796 <__ascii_mbtowc+0x1e>
 8006782:	7813      	ldrb	r3, [r2, #0]
 8006784:	600b      	str	r3, [r1, #0]
 8006786:	7812      	ldrb	r2, [r2, #0]
 8006788:	1e10      	subs	r0, r2, #0
 800678a:	bf18      	it	ne
 800678c:	2001      	movne	r0, #1
 800678e:	b002      	add	sp, #8
 8006790:	4770      	bx	lr
 8006792:	4610      	mov	r0, r2
 8006794:	e7fb      	b.n	800678e <__ascii_mbtowc+0x16>
 8006796:	f06f 0001 	mvn.w	r0, #1
 800679a:	e7f8      	b.n	800678e <__ascii_mbtowc+0x16>

0800679c <memchr>:
 800679c:	4603      	mov	r3, r0
 800679e:	b510      	push	{r4, lr}
 80067a0:	b2c9      	uxtb	r1, r1
 80067a2:	4402      	add	r2, r0
 80067a4:	4293      	cmp	r3, r2
 80067a6:	4618      	mov	r0, r3
 80067a8:	d101      	bne.n	80067ae <memchr+0x12>
 80067aa:	2000      	movs	r0, #0
 80067ac:	e003      	b.n	80067b6 <memchr+0x1a>
 80067ae:	7804      	ldrb	r4, [r0, #0]
 80067b0:	3301      	adds	r3, #1
 80067b2:	428c      	cmp	r4, r1
 80067b4:	d1f6      	bne.n	80067a4 <memchr+0x8>
 80067b6:	bd10      	pop	{r4, pc}

080067b8 <memcpy>:
 80067b8:	440a      	add	r2, r1
 80067ba:	4291      	cmp	r1, r2
 80067bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80067c0:	d100      	bne.n	80067c4 <memcpy+0xc>
 80067c2:	4770      	bx	lr
 80067c4:	b510      	push	{r4, lr}
 80067c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ca:	4291      	cmp	r1, r2
 80067cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067d0:	d1f9      	bne.n	80067c6 <memcpy+0xe>
 80067d2:	bd10      	pop	{r4, pc}

080067d4 <_Balloc>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067d8:	4604      	mov	r4, r0
 80067da:	460d      	mov	r5, r1
 80067dc:	b976      	cbnz	r6, 80067fc <_Balloc+0x28>
 80067de:	2010      	movs	r0, #16
 80067e0:	f7ff ffc2 	bl	8006768 <malloc>
 80067e4:	4602      	mov	r2, r0
 80067e6:	6260      	str	r0, [r4, #36]	; 0x24
 80067e8:	b920      	cbnz	r0, 80067f4 <_Balloc+0x20>
 80067ea:	2166      	movs	r1, #102	; 0x66
 80067ec:	4b17      	ldr	r3, [pc, #92]	; (800684c <_Balloc+0x78>)
 80067ee:	4818      	ldr	r0, [pc, #96]	; (8006850 <_Balloc+0x7c>)
 80067f0:	f000 ff2c 	bl	800764c <__assert_func>
 80067f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067f8:	6006      	str	r6, [r0, #0]
 80067fa:	60c6      	str	r6, [r0, #12]
 80067fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80067fe:	68f3      	ldr	r3, [r6, #12]
 8006800:	b183      	cbz	r3, 8006824 <_Balloc+0x50>
 8006802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800680a:	b9b8      	cbnz	r0, 800683c <_Balloc+0x68>
 800680c:	2101      	movs	r1, #1
 800680e:	fa01 f605 	lsl.w	r6, r1, r5
 8006812:	1d72      	adds	r2, r6, #5
 8006814:	4620      	mov	r0, r4
 8006816:	0092      	lsls	r2, r2, #2
 8006818:	f000 fc94 	bl	8007144 <_calloc_r>
 800681c:	b160      	cbz	r0, 8006838 <_Balloc+0x64>
 800681e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006822:	e00e      	b.n	8006842 <_Balloc+0x6e>
 8006824:	2221      	movs	r2, #33	; 0x21
 8006826:	2104      	movs	r1, #4
 8006828:	4620      	mov	r0, r4
 800682a:	f000 fc8b 	bl	8007144 <_calloc_r>
 800682e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006830:	60f0      	str	r0, [r6, #12]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e4      	bne.n	8006802 <_Balloc+0x2e>
 8006838:	2000      	movs	r0, #0
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	6802      	ldr	r2, [r0, #0]
 800683e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006842:	2300      	movs	r3, #0
 8006844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006848:	e7f7      	b.n	800683a <_Balloc+0x66>
 800684a:	bf00      	nop
 800684c:	080083ae 	.word	0x080083ae
 8006850:	080084ac 	.word	0x080084ac

08006854 <_Bfree>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006858:	4605      	mov	r5, r0
 800685a:	460c      	mov	r4, r1
 800685c:	b976      	cbnz	r6, 800687c <_Bfree+0x28>
 800685e:	2010      	movs	r0, #16
 8006860:	f7ff ff82 	bl	8006768 <malloc>
 8006864:	4602      	mov	r2, r0
 8006866:	6268      	str	r0, [r5, #36]	; 0x24
 8006868:	b920      	cbnz	r0, 8006874 <_Bfree+0x20>
 800686a:	218a      	movs	r1, #138	; 0x8a
 800686c:	4b08      	ldr	r3, [pc, #32]	; (8006890 <_Bfree+0x3c>)
 800686e:	4809      	ldr	r0, [pc, #36]	; (8006894 <_Bfree+0x40>)
 8006870:	f000 feec 	bl	800764c <__assert_func>
 8006874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006878:	6006      	str	r6, [r0, #0]
 800687a:	60c6      	str	r6, [r0, #12]
 800687c:	b13c      	cbz	r4, 800688e <_Bfree+0x3a>
 800687e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006880:	6862      	ldr	r2, [r4, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006888:	6021      	str	r1, [r4, #0]
 800688a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800688e:	bd70      	pop	{r4, r5, r6, pc}
 8006890:	080083ae 	.word	0x080083ae
 8006894:	080084ac 	.word	0x080084ac

08006898 <__multadd>:
 8006898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800689c:	4607      	mov	r7, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	461e      	mov	r6, r3
 80068a2:	2000      	movs	r0, #0
 80068a4:	690d      	ldr	r5, [r1, #16]
 80068a6:	f101 0c14 	add.w	ip, r1, #20
 80068aa:	f8dc 3000 	ldr.w	r3, [ip]
 80068ae:	3001      	adds	r0, #1
 80068b0:	b299      	uxth	r1, r3
 80068b2:	fb02 6101 	mla	r1, r2, r1, r6
 80068b6:	0c1e      	lsrs	r6, r3, #16
 80068b8:	0c0b      	lsrs	r3, r1, #16
 80068ba:	fb02 3306 	mla	r3, r2, r6, r3
 80068be:	b289      	uxth	r1, r1
 80068c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068c4:	4285      	cmp	r5, r0
 80068c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068ca:	f84c 1b04 	str.w	r1, [ip], #4
 80068ce:	dcec      	bgt.n	80068aa <__multadd+0x12>
 80068d0:	b30e      	cbz	r6, 8006916 <__multadd+0x7e>
 80068d2:	68a3      	ldr	r3, [r4, #8]
 80068d4:	42ab      	cmp	r3, r5
 80068d6:	dc19      	bgt.n	800690c <__multadd+0x74>
 80068d8:	6861      	ldr	r1, [r4, #4]
 80068da:	4638      	mov	r0, r7
 80068dc:	3101      	adds	r1, #1
 80068de:	f7ff ff79 	bl	80067d4 <_Balloc>
 80068e2:	4680      	mov	r8, r0
 80068e4:	b928      	cbnz	r0, 80068f2 <__multadd+0x5a>
 80068e6:	4602      	mov	r2, r0
 80068e8:	21b5      	movs	r1, #181	; 0xb5
 80068ea:	4b0c      	ldr	r3, [pc, #48]	; (800691c <__multadd+0x84>)
 80068ec:	480c      	ldr	r0, [pc, #48]	; (8006920 <__multadd+0x88>)
 80068ee:	f000 fead 	bl	800764c <__assert_func>
 80068f2:	6922      	ldr	r2, [r4, #16]
 80068f4:	f104 010c 	add.w	r1, r4, #12
 80068f8:	3202      	adds	r2, #2
 80068fa:	0092      	lsls	r2, r2, #2
 80068fc:	300c      	adds	r0, #12
 80068fe:	f7ff ff5b 	bl	80067b8 <memcpy>
 8006902:	4621      	mov	r1, r4
 8006904:	4638      	mov	r0, r7
 8006906:	f7ff ffa5 	bl	8006854 <_Bfree>
 800690a:	4644      	mov	r4, r8
 800690c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006910:	3501      	adds	r5, #1
 8006912:	615e      	str	r6, [r3, #20]
 8006914:	6125      	str	r5, [r4, #16]
 8006916:	4620      	mov	r0, r4
 8006918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800691c:	08008420 	.word	0x08008420
 8006920:	080084ac 	.word	0x080084ac

08006924 <__s2b>:
 8006924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006928:	4615      	mov	r5, r2
 800692a:	2209      	movs	r2, #9
 800692c:	461f      	mov	r7, r3
 800692e:	3308      	adds	r3, #8
 8006930:	460c      	mov	r4, r1
 8006932:	fb93 f3f2 	sdiv	r3, r3, r2
 8006936:	4606      	mov	r6, r0
 8006938:	2201      	movs	r2, #1
 800693a:	2100      	movs	r1, #0
 800693c:	429a      	cmp	r2, r3
 800693e:	db09      	blt.n	8006954 <__s2b+0x30>
 8006940:	4630      	mov	r0, r6
 8006942:	f7ff ff47 	bl	80067d4 <_Balloc>
 8006946:	b940      	cbnz	r0, 800695a <__s2b+0x36>
 8006948:	4602      	mov	r2, r0
 800694a:	21ce      	movs	r1, #206	; 0xce
 800694c:	4b18      	ldr	r3, [pc, #96]	; (80069b0 <__s2b+0x8c>)
 800694e:	4819      	ldr	r0, [pc, #100]	; (80069b4 <__s2b+0x90>)
 8006950:	f000 fe7c 	bl	800764c <__assert_func>
 8006954:	0052      	lsls	r2, r2, #1
 8006956:	3101      	adds	r1, #1
 8006958:	e7f0      	b.n	800693c <__s2b+0x18>
 800695a:	9b08      	ldr	r3, [sp, #32]
 800695c:	2d09      	cmp	r5, #9
 800695e:	6143      	str	r3, [r0, #20]
 8006960:	f04f 0301 	mov.w	r3, #1
 8006964:	6103      	str	r3, [r0, #16]
 8006966:	dd16      	ble.n	8006996 <__s2b+0x72>
 8006968:	f104 0909 	add.w	r9, r4, #9
 800696c:	46c8      	mov	r8, r9
 800696e:	442c      	add	r4, r5
 8006970:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006974:	4601      	mov	r1, r0
 8006976:	220a      	movs	r2, #10
 8006978:	4630      	mov	r0, r6
 800697a:	3b30      	subs	r3, #48	; 0x30
 800697c:	f7ff ff8c 	bl	8006898 <__multadd>
 8006980:	45a0      	cmp	r8, r4
 8006982:	d1f5      	bne.n	8006970 <__s2b+0x4c>
 8006984:	f1a5 0408 	sub.w	r4, r5, #8
 8006988:	444c      	add	r4, r9
 800698a:	1b2d      	subs	r5, r5, r4
 800698c:	1963      	adds	r3, r4, r5
 800698e:	42bb      	cmp	r3, r7
 8006990:	db04      	blt.n	800699c <__s2b+0x78>
 8006992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006996:	2509      	movs	r5, #9
 8006998:	340a      	adds	r4, #10
 800699a:	e7f6      	b.n	800698a <__s2b+0x66>
 800699c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069a0:	4601      	mov	r1, r0
 80069a2:	220a      	movs	r2, #10
 80069a4:	4630      	mov	r0, r6
 80069a6:	3b30      	subs	r3, #48	; 0x30
 80069a8:	f7ff ff76 	bl	8006898 <__multadd>
 80069ac:	e7ee      	b.n	800698c <__s2b+0x68>
 80069ae:	bf00      	nop
 80069b0:	08008420 	.word	0x08008420
 80069b4:	080084ac 	.word	0x080084ac

080069b8 <__hi0bits>:
 80069b8:	0c02      	lsrs	r2, r0, #16
 80069ba:	0412      	lsls	r2, r2, #16
 80069bc:	4603      	mov	r3, r0
 80069be:	b9ca      	cbnz	r2, 80069f4 <__hi0bits+0x3c>
 80069c0:	0403      	lsls	r3, r0, #16
 80069c2:	2010      	movs	r0, #16
 80069c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80069c8:	bf04      	itt	eq
 80069ca:	021b      	lsleq	r3, r3, #8
 80069cc:	3008      	addeq	r0, #8
 80069ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80069d2:	bf04      	itt	eq
 80069d4:	011b      	lsleq	r3, r3, #4
 80069d6:	3004      	addeq	r0, #4
 80069d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80069dc:	bf04      	itt	eq
 80069de:	009b      	lsleq	r3, r3, #2
 80069e0:	3002      	addeq	r0, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	db05      	blt.n	80069f2 <__hi0bits+0x3a>
 80069e6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80069ea:	f100 0001 	add.w	r0, r0, #1
 80069ee:	bf08      	it	eq
 80069f0:	2020      	moveq	r0, #32
 80069f2:	4770      	bx	lr
 80069f4:	2000      	movs	r0, #0
 80069f6:	e7e5      	b.n	80069c4 <__hi0bits+0xc>

080069f8 <__lo0bits>:
 80069f8:	6803      	ldr	r3, [r0, #0]
 80069fa:	4602      	mov	r2, r0
 80069fc:	f013 0007 	ands.w	r0, r3, #7
 8006a00:	d00b      	beq.n	8006a1a <__lo0bits+0x22>
 8006a02:	07d9      	lsls	r1, r3, #31
 8006a04:	d421      	bmi.n	8006a4a <__lo0bits+0x52>
 8006a06:	0798      	lsls	r0, r3, #30
 8006a08:	bf49      	itett	mi
 8006a0a:	085b      	lsrmi	r3, r3, #1
 8006a0c:	089b      	lsrpl	r3, r3, #2
 8006a0e:	2001      	movmi	r0, #1
 8006a10:	6013      	strmi	r3, [r2, #0]
 8006a12:	bf5c      	itt	pl
 8006a14:	2002      	movpl	r0, #2
 8006a16:	6013      	strpl	r3, [r2, #0]
 8006a18:	4770      	bx	lr
 8006a1a:	b299      	uxth	r1, r3
 8006a1c:	b909      	cbnz	r1, 8006a22 <__lo0bits+0x2a>
 8006a1e:	2010      	movs	r0, #16
 8006a20:	0c1b      	lsrs	r3, r3, #16
 8006a22:	b2d9      	uxtb	r1, r3
 8006a24:	b909      	cbnz	r1, 8006a2a <__lo0bits+0x32>
 8006a26:	3008      	adds	r0, #8
 8006a28:	0a1b      	lsrs	r3, r3, #8
 8006a2a:	0719      	lsls	r1, r3, #28
 8006a2c:	bf04      	itt	eq
 8006a2e:	091b      	lsreq	r3, r3, #4
 8006a30:	3004      	addeq	r0, #4
 8006a32:	0799      	lsls	r1, r3, #30
 8006a34:	bf04      	itt	eq
 8006a36:	089b      	lsreq	r3, r3, #2
 8006a38:	3002      	addeq	r0, #2
 8006a3a:	07d9      	lsls	r1, r3, #31
 8006a3c:	d403      	bmi.n	8006a46 <__lo0bits+0x4e>
 8006a3e:	085b      	lsrs	r3, r3, #1
 8006a40:	f100 0001 	add.w	r0, r0, #1
 8006a44:	d003      	beq.n	8006a4e <__lo0bits+0x56>
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	4770      	bx	lr
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	4770      	bx	lr
 8006a4e:	2020      	movs	r0, #32
 8006a50:	4770      	bx	lr
	...

08006a54 <__i2b>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	460c      	mov	r4, r1
 8006a58:	2101      	movs	r1, #1
 8006a5a:	f7ff febb 	bl	80067d4 <_Balloc>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	b928      	cbnz	r0, 8006a6e <__i2b+0x1a>
 8006a62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a66:	4b04      	ldr	r3, [pc, #16]	; (8006a78 <__i2b+0x24>)
 8006a68:	4804      	ldr	r0, [pc, #16]	; (8006a7c <__i2b+0x28>)
 8006a6a:	f000 fdef 	bl	800764c <__assert_func>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	6144      	str	r4, [r0, #20]
 8006a72:	6103      	str	r3, [r0, #16]
 8006a74:	bd10      	pop	{r4, pc}
 8006a76:	bf00      	nop
 8006a78:	08008420 	.word	0x08008420
 8006a7c:	080084ac 	.word	0x080084ac

08006a80 <__multiply>:
 8006a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a84:	4691      	mov	r9, r2
 8006a86:	690a      	ldr	r2, [r1, #16]
 8006a88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	bfbe      	ittt	lt
 8006a92:	460b      	movlt	r3, r1
 8006a94:	464c      	movlt	r4, r9
 8006a96:	4699      	movlt	r9, r3
 8006a98:	6927      	ldr	r7, [r4, #16]
 8006a9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a9e:	68a3      	ldr	r3, [r4, #8]
 8006aa0:	6861      	ldr	r1, [r4, #4]
 8006aa2:	eb07 060a 	add.w	r6, r7, sl
 8006aa6:	42b3      	cmp	r3, r6
 8006aa8:	b085      	sub	sp, #20
 8006aaa:	bfb8      	it	lt
 8006aac:	3101      	addlt	r1, #1
 8006aae:	f7ff fe91 	bl	80067d4 <_Balloc>
 8006ab2:	b930      	cbnz	r0, 8006ac2 <__multiply+0x42>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	f240 115d 	movw	r1, #349	; 0x15d
 8006aba:	4b43      	ldr	r3, [pc, #268]	; (8006bc8 <__multiply+0x148>)
 8006abc:	4843      	ldr	r0, [pc, #268]	; (8006bcc <__multiply+0x14c>)
 8006abe:	f000 fdc5 	bl	800764c <__assert_func>
 8006ac2:	f100 0514 	add.w	r5, r0, #20
 8006ac6:	462b      	mov	r3, r5
 8006ac8:	2200      	movs	r2, #0
 8006aca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ace:	4543      	cmp	r3, r8
 8006ad0:	d321      	bcc.n	8006b16 <__multiply+0x96>
 8006ad2:	f104 0314 	add.w	r3, r4, #20
 8006ad6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ada:	f109 0314 	add.w	r3, r9, #20
 8006ade:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ae2:	9202      	str	r2, [sp, #8]
 8006ae4:	1b3a      	subs	r2, r7, r4
 8006ae6:	3a15      	subs	r2, #21
 8006ae8:	f022 0203 	bic.w	r2, r2, #3
 8006aec:	3204      	adds	r2, #4
 8006aee:	f104 0115 	add.w	r1, r4, #21
 8006af2:	428f      	cmp	r7, r1
 8006af4:	bf38      	it	cc
 8006af6:	2204      	movcc	r2, #4
 8006af8:	9201      	str	r2, [sp, #4]
 8006afa:	9a02      	ldr	r2, [sp, #8]
 8006afc:	9303      	str	r3, [sp, #12]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d80c      	bhi.n	8006b1c <__multiply+0x9c>
 8006b02:	2e00      	cmp	r6, #0
 8006b04:	dd03      	ble.n	8006b0e <__multiply+0x8e>
 8006b06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d059      	beq.n	8006bc2 <__multiply+0x142>
 8006b0e:	6106      	str	r6, [r0, #16]
 8006b10:	b005      	add	sp, #20
 8006b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b16:	f843 2b04 	str.w	r2, [r3], #4
 8006b1a:	e7d8      	b.n	8006ace <__multiply+0x4e>
 8006b1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b20:	f1ba 0f00 	cmp.w	sl, #0
 8006b24:	d023      	beq.n	8006b6e <__multiply+0xee>
 8006b26:	46a9      	mov	r9, r5
 8006b28:	f04f 0c00 	mov.w	ip, #0
 8006b2c:	f104 0e14 	add.w	lr, r4, #20
 8006b30:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b34:	f8d9 1000 	ldr.w	r1, [r9]
 8006b38:	fa1f fb82 	uxth.w	fp, r2
 8006b3c:	b289      	uxth	r1, r1
 8006b3e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b42:	4461      	add	r1, ip
 8006b44:	f8d9 c000 	ldr.w	ip, [r9]
 8006b48:	0c12      	lsrs	r2, r2, #16
 8006b4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b4e:	fb0a c202 	mla	r2, sl, r2, ip
 8006b52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b56:	b289      	uxth	r1, r1
 8006b58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b5c:	4577      	cmp	r7, lr
 8006b5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b62:	f849 1b04 	str.w	r1, [r9], #4
 8006b66:	d8e3      	bhi.n	8006b30 <__multiply+0xb0>
 8006b68:	9a01      	ldr	r2, [sp, #4]
 8006b6a:	f845 c002 	str.w	ip, [r5, r2]
 8006b6e:	9a03      	ldr	r2, [sp, #12]
 8006b70:	3304      	adds	r3, #4
 8006b72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b76:	f1b9 0f00 	cmp.w	r9, #0
 8006b7a:	d020      	beq.n	8006bbe <__multiply+0x13e>
 8006b7c:	46ae      	mov	lr, r5
 8006b7e:	f04f 0a00 	mov.w	sl, #0
 8006b82:	6829      	ldr	r1, [r5, #0]
 8006b84:	f104 0c14 	add.w	ip, r4, #20
 8006b88:	f8bc b000 	ldrh.w	fp, [ip]
 8006b8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b90:	b289      	uxth	r1, r1
 8006b92:	fb09 220b 	mla	r2, r9, fp, r2
 8006b96:	4492      	add	sl, r2
 8006b98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006b9c:	f84e 1b04 	str.w	r1, [lr], #4
 8006ba0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006ba4:	f8be 1000 	ldrh.w	r1, [lr]
 8006ba8:	0c12      	lsrs	r2, r2, #16
 8006baa:	fb09 1102 	mla	r1, r9, r2, r1
 8006bae:	4567      	cmp	r7, ip
 8006bb0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006bb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bb8:	d8e6      	bhi.n	8006b88 <__multiply+0x108>
 8006bba:	9a01      	ldr	r2, [sp, #4]
 8006bbc:	50a9      	str	r1, [r5, r2]
 8006bbe:	3504      	adds	r5, #4
 8006bc0:	e79b      	b.n	8006afa <__multiply+0x7a>
 8006bc2:	3e01      	subs	r6, #1
 8006bc4:	e79d      	b.n	8006b02 <__multiply+0x82>
 8006bc6:	bf00      	nop
 8006bc8:	08008420 	.word	0x08008420
 8006bcc:	080084ac 	.word	0x080084ac

08006bd0 <__pow5mult>:
 8006bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd4:	4615      	mov	r5, r2
 8006bd6:	f012 0203 	ands.w	r2, r2, #3
 8006bda:	4606      	mov	r6, r0
 8006bdc:	460f      	mov	r7, r1
 8006bde:	d007      	beq.n	8006bf0 <__pow5mult+0x20>
 8006be0:	4c25      	ldr	r4, [pc, #148]	; (8006c78 <__pow5mult+0xa8>)
 8006be2:	3a01      	subs	r2, #1
 8006be4:	2300      	movs	r3, #0
 8006be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bea:	f7ff fe55 	bl	8006898 <__multadd>
 8006bee:	4607      	mov	r7, r0
 8006bf0:	10ad      	asrs	r5, r5, #2
 8006bf2:	d03d      	beq.n	8006c70 <__pow5mult+0xa0>
 8006bf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006bf6:	b97c      	cbnz	r4, 8006c18 <__pow5mult+0x48>
 8006bf8:	2010      	movs	r0, #16
 8006bfa:	f7ff fdb5 	bl	8006768 <malloc>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	6270      	str	r0, [r6, #36]	; 0x24
 8006c02:	b928      	cbnz	r0, 8006c10 <__pow5mult+0x40>
 8006c04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c08:	4b1c      	ldr	r3, [pc, #112]	; (8006c7c <__pow5mult+0xac>)
 8006c0a:	481d      	ldr	r0, [pc, #116]	; (8006c80 <__pow5mult+0xb0>)
 8006c0c:	f000 fd1e 	bl	800764c <__assert_func>
 8006c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c14:	6004      	str	r4, [r0, #0]
 8006c16:	60c4      	str	r4, [r0, #12]
 8006c18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c20:	b94c      	cbnz	r4, 8006c36 <__pow5mult+0x66>
 8006c22:	f240 2171 	movw	r1, #625	; 0x271
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7ff ff14 	bl	8006a54 <__i2b>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4604      	mov	r4, r0
 8006c30:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c34:	6003      	str	r3, [r0, #0]
 8006c36:	f04f 0900 	mov.w	r9, #0
 8006c3a:	07eb      	lsls	r3, r5, #31
 8006c3c:	d50a      	bpl.n	8006c54 <__pow5mult+0x84>
 8006c3e:	4639      	mov	r1, r7
 8006c40:	4622      	mov	r2, r4
 8006c42:	4630      	mov	r0, r6
 8006c44:	f7ff ff1c 	bl	8006a80 <__multiply>
 8006c48:	4680      	mov	r8, r0
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f7ff fe01 	bl	8006854 <_Bfree>
 8006c52:	4647      	mov	r7, r8
 8006c54:	106d      	asrs	r5, r5, #1
 8006c56:	d00b      	beq.n	8006c70 <__pow5mult+0xa0>
 8006c58:	6820      	ldr	r0, [r4, #0]
 8006c5a:	b938      	cbnz	r0, 8006c6c <__pow5mult+0x9c>
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4630      	mov	r0, r6
 8006c62:	f7ff ff0d 	bl	8006a80 <__multiply>
 8006c66:	6020      	str	r0, [r4, #0]
 8006c68:	f8c0 9000 	str.w	r9, [r0]
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	e7e4      	b.n	8006c3a <__pow5mult+0x6a>
 8006c70:	4638      	mov	r0, r7
 8006c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c76:	bf00      	nop
 8006c78:	080085f8 	.word	0x080085f8
 8006c7c:	080083ae 	.word	0x080083ae
 8006c80:	080084ac 	.word	0x080084ac

08006c84 <__lshift>:
 8006c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	460c      	mov	r4, r1
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	4691      	mov	r9, r2
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	6849      	ldr	r1, [r1, #4]
 8006c92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c96:	68a3      	ldr	r3, [r4, #8]
 8006c98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c9c:	f108 0601 	add.w	r6, r8, #1
 8006ca0:	42b3      	cmp	r3, r6
 8006ca2:	db0b      	blt.n	8006cbc <__lshift+0x38>
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f7ff fd95 	bl	80067d4 <_Balloc>
 8006caa:	4605      	mov	r5, r0
 8006cac:	b948      	cbnz	r0, 8006cc2 <__lshift+0x3e>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006cb4:	4b29      	ldr	r3, [pc, #164]	; (8006d5c <__lshift+0xd8>)
 8006cb6:	482a      	ldr	r0, [pc, #168]	; (8006d60 <__lshift+0xdc>)
 8006cb8:	f000 fcc8 	bl	800764c <__assert_func>
 8006cbc:	3101      	adds	r1, #1
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	e7ee      	b.n	8006ca0 <__lshift+0x1c>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f100 0114 	add.w	r1, r0, #20
 8006cc8:	f100 0210 	add.w	r2, r0, #16
 8006ccc:	4618      	mov	r0, r3
 8006cce:	4553      	cmp	r3, sl
 8006cd0:	db37      	blt.n	8006d42 <__lshift+0xbe>
 8006cd2:	6920      	ldr	r0, [r4, #16]
 8006cd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cd8:	f104 0314 	add.w	r3, r4, #20
 8006cdc:	f019 091f 	ands.w	r9, r9, #31
 8006ce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ce4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ce8:	d02f      	beq.n	8006d4a <__lshift+0xc6>
 8006cea:	468a      	mov	sl, r1
 8006cec:	f04f 0c00 	mov.w	ip, #0
 8006cf0:	f1c9 0e20 	rsb	lr, r9, #32
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	fa02 f209 	lsl.w	r2, r2, r9
 8006cfa:	ea42 020c 	orr.w	r2, r2, ip
 8006cfe:	f84a 2b04 	str.w	r2, [sl], #4
 8006d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d06:	4298      	cmp	r0, r3
 8006d08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006d0c:	d8f2      	bhi.n	8006cf4 <__lshift+0x70>
 8006d0e:	1b03      	subs	r3, r0, r4
 8006d10:	3b15      	subs	r3, #21
 8006d12:	f023 0303 	bic.w	r3, r3, #3
 8006d16:	3304      	adds	r3, #4
 8006d18:	f104 0215 	add.w	r2, r4, #21
 8006d1c:	4290      	cmp	r0, r2
 8006d1e:	bf38      	it	cc
 8006d20:	2304      	movcc	r3, #4
 8006d22:	f841 c003 	str.w	ip, [r1, r3]
 8006d26:	f1bc 0f00 	cmp.w	ip, #0
 8006d2a:	d001      	beq.n	8006d30 <__lshift+0xac>
 8006d2c:	f108 0602 	add.w	r6, r8, #2
 8006d30:	3e01      	subs	r6, #1
 8006d32:	4638      	mov	r0, r7
 8006d34:	4621      	mov	r1, r4
 8006d36:	612e      	str	r6, [r5, #16]
 8006d38:	f7ff fd8c 	bl	8006854 <_Bfree>
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d42:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d46:	3301      	adds	r3, #1
 8006d48:	e7c1      	b.n	8006cce <__lshift+0x4a>
 8006d4a:	3904      	subs	r1, #4
 8006d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d50:	4298      	cmp	r0, r3
 8006d52:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d56:	d8f9      	bhi.n	8006d4c <__lshift+0xc8>
 8006d58:	e7ea      	b.n	8006d30 <__lshift+0xac>
 8006d5a:	bf00      	nop
 8006d5c:	08008420 	.word	0x08008420
 8006d60:	080084ac 	.word	0x080084ac

08006d64 <__mcmp>:
 8006d64:	4603      	mov	r3, r0
 8006d66:	690a      	ldr	r2, [r1, #16]
 8006d68:	6900      	ldr	r0, [r0, #16]
 8006d6a:	b530      	push	{r4, r5, lr}
 8006d6c:	1a80      	subs	r0, r0, r2
 8006d6e:	d10d      	bne.n	8006d8c <__mcmp+0x28>
 8006d70:	3314      	adds	r3, #20
 8006d72:	3114      	adds	r1, #20
 8006d74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d84:	4295      	cmp	r5, r2
 8006d86:	d002      	beq.n	8006d8e <__mcmp+0x2a>
 8006d88:	d304      	bcc.n	8006d94 <__mcmp+0x30>
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	bd30      	pop	{r4, r5, pc}
 8006d8e:	42a3      	cmp	r3, r4
 8006d90:	d3f4      	bcc.n	8006d7c <__mcmp+0x18>
 8006d92:	e7fb      	b.n	8006d8c <__mcmp+0x28>
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	e7f8      	b.n	8006d8c <__mcmp+0x28>
	...

08006d9c <__mdiff>:
 8006d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da0:	460d      	mov	r5, r1
 8006da2:	4607      	mov	r7, r0
 8006da4:	4611      	mov	r1, r2
 8006da6:	4628      	mov	r0, r5
 8006da8:	4614      	mov	r4, r2
 8006daa:	f7ff ffdb 	bl	8006d64 <__mcmp>
 8006dae:	1e06      	subs	r6, r0, #0
 8006db0:	d111      	bne.n	8006dd6 <__mdiff+0x3a>
 8006db2:	4631      	mov	r1, r6
 8006db4:	4638      	mov	r0, r7
 8006db6:	f7ff fd0d 	bl	80067d4 <_Balloc>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	b928      	cbnz	r0, 8006dca <__mdiff+0x2e>
 8006dbe:	f240 2132 	movw	r1, #562	; 0x232
 8006dc2:	4b3a      	ldr	r3, [pc, #232]	; (8006eac <__mdiff+0x110>)
 8006dc4:	483a      	ldr	r0, [pc, #232]	; (8006eb0 <__mdiff+0x114>)
 8006dc6:	f000 fc41 	bl	800764c <__assert_func>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd6:	bfa4      	itt	ge
 8006dd8:	4623      	movge	r3, r4
 8006dda:	462c      	movge	r4, r5
 8006ddc:	4638      	mov	r0, r7
 8006dde:	6861      	ldr	r1, [r4, #4]
 8006de0:	bfa6      	itte	ge
 8006de2:	461d      	movge	r5, r3
 8006de4:	2600      	movge	r6, #0
 8006de6:	2601      	movlt	r6, #1
 8006de8:	f7ff fcf4 	bl	80067d4 <_Balloc>
 8006dec:	4602      	mov	r2, r0
 8006dee:	b918      	cbnz	r0, 8006df8 <__mdiff+0x5c>
 8006df0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006df4:	4b2d      	ldr	r3, [pc, #180]	; (8006eac <__mdiff+0x110>)
 8006df6:	e7e5      	b.n	8006dc4 <__mdiff+0x28>
 8006df8:	f102 0814 	add.w	r8, r2, #20
 8006dfc:	46c2      	mov	sl, r8
 8006dfe:	f04f 0c00 	mov.w	ip, #0
 8006e02:	6927      	ldr	r7, [r4, #16]
 8006e04:	60c6      	str	r6, [r0, #12]
 8006e06:	692e      	ldr	r6, [r5, #16]
 8006e08:	f104 0014 	add.w	r0, r4, #20
 8006e0c:	f105 0914 	add.w	r9, r5, #20
 8006e10:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006e14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e18:	3410      	adds	r4, #16
 8006e1a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006e1e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e22:	fa1f f18b 	uxth.w	r1, fp
 8006e26:	448c      	add	ip, r1
 8006e28:	b299      	uxth	r1, r3
 8006e2a:	0c1b      	lsrs	r3, r3, #16
 8006e2c:	ebac 0101 	sub.w	r1, ip, r1
 8006e30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e34:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006e38:	b289      	uxth	r1, r1
 8006e3a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006e3e:	454e      	cmp	r6, r9
 8006e40:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006e44:	f84a 3b04 	str.w	r3, [sl], #4
 8006e48:	d8e7      	bhi.n	8006e1a <__mdiff+0x7e>
 8006e4a:	1b73      	subs	r3, r6, r5
 8006e4c:	3b15      	subs	r3, #21
 8006e4e:	f023 0303 	bic.w	r3, r3, #3
 8006e52:	3515      	adds	r5, #21
 8006e54:	3304      	adds	r3, #4
 8006e56:	42ae      	cmp	r6, r5
 8006e58:	bf38      	it	cc
 8006e5a:	2304      	movcc	r3, #4
 8006e5c:	4418      	add	r0, r3
 8006e5e:	4443      	add	r3, r8
 8006e60:	461e      	mov	r6, r3
 8006e62:	4605      	mov	r5, r0
 8006e64:	4575      	cmp	r5, lr
 8006e66:	d30e      	bcc.n	8006e86 <__mdiff+0xea>
 8006e68:	f10e 0103 	add.w	r1, lr, #3
 8006e6c:	1a09      	subs	r1, r1, r0
 8006e6e:	f021 0103 	bic.w	r1, r1, #3
 8006e72:	3803      	subs	r0, #3
 8006e74:	4586      	cmp	lr, r0
 8006e76:	bf38      	it	cc
 8006e78:	2100      	movcc	r1, #0
 8006e7a:	4419      	add	r1, r3
 8006e7c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006e80:	b18b      	cbz	r3, 8006ea6 <__mdiff+0x10a>
 8006e82:	6117      	str	r7, [r2, #16]
 8006e84:	e7a4      	b.n	8006dd0 <__mdiff+0x34>
 8006e86:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e8a:	fa1f f188 	uxth.w	r1, r8
 8006e8e:	4461      	add	r1, ip
 8006e90:	140c      	asrs	r4, r1, #16
 8006e92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e96:	b289      	uxth	r1, r1
 8006e98:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006e9c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006ea0:	f846 1b04 	str.w	r1, [r6], #4
 8006ea4:	e7de      	b.n	8006e64 <__mdiff+0xc8>
 8006ea6:	3f01      	subs	r7, #1
 8006ea8:	e7e8      	b.n	8006e7c <__mdiff+0xe0>
 8006eaa:	bf00      	nop
 8006eac:	08008420 	.word	0x08008420
 8006eb0:	080084ac 	.word	0x080084ac

08006eb4 <__ulp>:
 8006eb4:	4b11      	ldr	r3, [pc, #68]	; (8006efc <__ulp+0x48>)
 8006eb6:	400b      	ands	r3, r1
 8006eb8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	dd02      	ble.n	8006ec6 <__ulp+0x12>
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4770      	bx	lr
 8006ec6:	425b      	negs	r3, r3
 8006ec8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006ecc:	f04f 0000 	mov.w	r0, #0
 8006ed0:	f04f 0100 	mov.w	r1, #0
 8006ed4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006ed8:	da04      	bge.n	8006ee4 <__ulp+0x30>
 8006eda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ede:	fa43 f102 	asr.w	r1, r3, r2
 8006ee2:	4770      	bx	lr
 8006ee4:	f1a2 0314 	sub.w	r3, r2, #20
 8006ee8:	2b1e      	cmp	r3, #30
 8006eea:	bfd6      	itet	le
 8006eec:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006ef0:	2301      	movgt	r3, #1
 8006ef2:	fa22 f303 	lsrle.w	r3, r2, r3
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	7ff00000 	.word	0x7ff00000

08006f00 <__b2d>:
 8006f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f04:	6907      	ldr	r7, [r0, #16]
 8006f06:	f100 0914 	add.w	r9, r0, #20
 8006f0a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006f0e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006f12:	f1a7 0804 	sub.w	r8, r7, #4
 8006f16:	4630      	mov	r0, r6
 8006f18:	f7ff fd4e 	bl	80069b8 <__hi0bits>
 8006f1c:	f1c0 0320 	rsb	r3, r0, #32
 8006f20:	280a      	cmp	r0, #10
 8006f22:	600b      	str	r3, [r1, #0]
 8006f24:	491f      	ldr	r1, [pc, #124]	; (8006fa4 <__b2d+0xa4>)
 8006f26:	dc17      	bgt.n	8006f58 <__b2d+0x58>
 8006f28:	45c1      	cmp	r9, r8
 8006f2a:	bf28      	it	cs
 8006f2c:	2200      	movcs	r2, #0
 8006f2e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006f32:	fa26 f30c 	lsr.w	r3, r6, ip
 8006f36:	bf38      	it	cc
 8006f38:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006f3c:	ea43 0501 	orr.w	r5, r3, r1
 8006f40:	f100 0315 	add.w	r3, r0, #21
 8006f44:	fa06 f303 	lsl.w	r3, r6, r3
 8006f48:	fa22 f20c 	lsr.w	r2, r2, ip
 8006f4c:	ea43 0402 	orr.w	r4, r3, r2
 8006f50:	4620      	mov	r0, r4
 8006f52:	4629      	mov	r1, r5
 8006f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f58:	45c1      	cmp	r9, r8
 8006f5a:	bf2e      	itee	cs
 8006f5c:	2200      	movcs	r2, #0
 8006f5e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006f62:	f1a7 0808 	subcc.w	r8, r7, #8
 8006f66:	f1b0 030b 	subs.w	r3, r0, #11
 8006f6a:	d016      	beq.n	8006f9a <__b2d+0x9a>
 8006f6c:	f1c3 0720 	rsb	r7, r3, #32
 8006f70:	fa22 f107 	lsr.w	r1, r2, r7
 8006f74:	45c8      	cmp	r8, r9
 8006f76:	fa06 f603 	lsl.w	r6, r6, r3
 8006f7a:	ea46 0601 	orr.w	r6, r6, r1
 8006f7e:	bf94      	ite	ls
 8006f80:	2100      	movls	r1, #0
 8006f82:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006f86:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006f8a:	fa02 f003 	lsl.w	r0, r2, r3
 8006f8e:	40f9      	lsrs	r1, r7
 8006f90:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006f94:	ea40 0401 	orr.w	r4, r0, r1
 8006f98:	e7da      	b.n	8006f50 <__b2d+0x50>
 8006f9a:	4614      	mov	r4, r2
 8006f9c:	ea46 0501 	orr.w	r5, r6, r1
 8006fa0:	e7d6      	b.n	8006f50 <__b2d+0x50>
 8006fa2:	bf00      	nop
 8006fa4:	3ff00000 	.word	0x3ff00000

08006fa8 <__d2b>:
 8006fa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006fac:	2101      	movs	r1, #1
 8006fae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006fb2:	4690      	mov	r8, r2
 8006fb4:	461d      	mov	r5, r3
 8006fb6:	f7ff fc0d 	bl	80067d4 <_Balloc>
 8006fba:	4604      	mov	r4, r0
 8006fbc:	b930      	cbnz	r0, 8006fcc <__d2b+0x24>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	f240 310a 	movw	r1, #778	; 0x30a
 8006fc4:	4b24      	ldr	r3, [pc, #144]	; (8007058 <__d2b+0xb0>)
 8006fc6:	4825      	ldr	r0, [pc, #148]	; (800705c <__d2b+0xb4>)
 8006fc8:	f000 fb40 	bl	800764c <__assert_func>
 8006fcc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006fd0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006fd4:	bb2d      	cbnz	r5, 8007022 <__d2b+0x7a>
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	f1b8 0300 	subs.w	r3, r8, #0
 8006fdc:	d026      	beq.n	800702c <__d2b+0x84>
 8006fde:	4668      	mov	r0, sp
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	f7ff fd09 	bl	80069f8 <__lo0bits>
 8006fe6:	9900      	ldr	r1, [sp, #0]
 8006fe8:	b1f0      	cbz	r0, 8007028 <__d2b+0x80>
 8006fea:	9a01      	ldr	r2, [sp, #4]
 8006fec:	f1c0 0320 	rsb	r3, r0, #32
 8006ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	40c2      	lsrs	r2, r0
 8006ff8:	6163      	str	r3, [r4, #20]
 8006ffa:	9201      	str	r2, [sp, #4]
 8006ffc:	9b01      	ldr	r3, [sp, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bf14      	ite	ne
 8007002:	2102      	movne	r1, #2
 8007004:	2101      	moveq	r1, #1
 8007006:	61a3      	str	r3, [r4, #24]
 8007008:	6121      	str	r1, [r4, #16]
 800700a:	b1c5      	cbz	r5, 800703e <__d2b+0x96>
 800700c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007010:	4405      	add	r5, r0
 8007012:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007016:	603d      	str	r5, [r7, #0]
 8007018:	6030      	str	r0, [r6, #0]
 800701a:	4620      	mov	r0, r4
 800701c:	b002      	add	sp, #8
 800701e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007026:	e7d6      	b.n	8006fd6 <__d2b+0x2e>
 8007028:	6161      	str	r1, [r4, #20]
 800702a:	e7e7      	b.n	8006ffc <__d2b+0x54>
 800702c:	a801      	add	r0, sp, #4
 800702e:	f7ff fce3 	bl	80069f8 <__lo0bits>
 8007032:	2101      	movs	r1, #1
 8007034:	9b01      	ldr	r3, [sp, #4]
 8007036:	6121      	str	r1, [r4, #16]
 8007038:	6163      	str	r3, [r4, #20]
 800703a:	3020      	adds	r0, #32
 800703c:	e7e5      	b.n	800700a <__d2b+0x62>
 800703e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007042:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007046:	6038      	str	r0, [r7, #0]
 8007048:	6918      	ldr	r0, [r3, #16]
 800704a:	f7ff fcb5 	bl	80069b8 <__hi0bits>
 800704e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007052:	6031      	str	r1, [r6, #0]
 8007054:	e7e1      	b.n	800701a <__d2b+0x72>
 8007056:	bf00      	nop
 8007058:	08008420 	.word	0x08008420
 800705c:	080084ac 	.word	0x080084ac

08007060 <__ratio>:
 8007060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	4688      	mov	r8, r1
 8007066:	4669      	mov	r1, sp
 8007068:	4681      	mov	r9, r0
 800706a:	f7ff ff49 	bl	8006f00 <__b2d>
 800706e:	460f      	mov	r7, r1
 8007070:	4604      	mov	r4, r0
 8007072:	460d      	mov	r5, r1
 8007074:	4640      	mov	r0, r8
 8007076:	a901      	add	r1, sp, #4
 8007078:	f7ff ff42 	bl	8006f00 <__b2d>
 800707c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007080:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007084:	468b      	mov	fp, r1
 8007086:	eba3 0c02 	sub.w	ip, r3, r2
 800708a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800708e:	1a9b      	subs	r3, r3, r2
 8007090:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007094:	2b00      	cmp	r3, #0
 8007096:	bfd5      	itete	le
 8007098:	460a      	movle	r2, r1
 800709a:	462a      	movgt	r2, r5
 800709c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80070a0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80070a4:	bfd8      	it	le
 80070a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80070aa:	465b      	mov	r3, fp
 80070ac:	4602      	mov	r2, r0
 80070ae:	4639      	mov	r1, r7
 80070b0:	4620      	mov	r0, r4
 80070b2:	f7f9 fb3b 	bl	800072c <__aeabi_ddiv>
 80070b6:	b003      	add	sp, #12
 80070b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070bc <__copybits>:
 80070bc:	3901      	subs	r1, #1
 80070be:	b570      	push	{r4, r5, r6, lr}
 80070c0:	1149      	asrs	r1, r1, #5
 80070c2:	6914      	ldr	r4, [r2, #16]
 80070c4:	3101      	adds	r1, #1
 80070c6:	f102 0314 	add.w	r3, r2, #20
 80070ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070d2:	1f05      	subs	r5, r0, #4
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	d30c      	bcc.n	80070f2 <__copybits+0x36>
 80070d8:	1aa3      	subs	r3, r4, r2
 80070da:	3b11      	subs	r3, #17
 80070dc:	f023 0303 	bic.w	r3, r3, #3
 80070e0:	3211      	adds	r2, #17
 80070e2:	42a2      	cmp	r2, r4
 80070e4:	bf88      	it	hi
 80070e6:	2300      	movhi	r3, #0
 80070e8:	4418      	add	r0, r3
 80070ea:	2300      	movs	r3, #0
 80070ec:	4288      	cmp	r0, r1
 80070ee:	d305      	bcc.n	80070fc <__copybits+0x40>
 80070f0:	bd70      	pop	{r4, r5, r6, pc}
 80070f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80070f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80070fa:	e7eb      	b.n	80070d4 <__copybits+0x18>
 80070fc:	f840 3b04 	str.w	r3, [r0], #4
 8007100:	e7f4      	b.n	80070ec <__copybits+0x30>

08007102 <__any_on>:
 8007102:	f100 0214 	add.w	r2, r0, #20
 8007106:	6900      	ldr	r0, [r0, #16]
 8007108:	114b      	asrs	r3, r1, #5
 800710a:	4298      	cmp	r0, r3
 800710c:	b510      	push	{r4, lr}
 800710e:	db11      	blt.n	8007134 <__any_on+0x32>
 8007110:	dd0a      	ble.n	8007128 <__any_on+0x26>
 8007112:	f011 011f 	ands.w	r1, r1, #31
 8007116:	d007      	beq.n	8007128 <__any_on+0x26>
 8007118:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800711c:	fa24 f001 	lsr.w	r0, r4, r1
 8007120:	fa00 f101 	lsl.w	r1, r0, r1
 8007124:	428c      	cmp	r4, r1
 8007126:	d10b      	bne.n	8007140 <__any_on+0x3e>
 8007128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800712c:	4293      	cmp	r3, r2
 800712e:	d803      	bhi.n	8007138 <__any_on+0x36>
 8007130:	2000      	movs	r0, #0
 8007132:	bd10      	pop	{r4, pc}
 8007134:	4603      	mov	r3, r0
 8007136:	e7f7      	b.n	8007128 <__any_on+0x26>
 8007138:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800713c:	2900      	cmp	r1, #0
 800713e:	d0f5      	beq.n	800712c <__any_on+0x2a>
 8007140:	2001      	movs	r0, #1
 8007142:	e7f6      	b.n	8007132 <__any_on+0x30>

08007144 <_calloc_r>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	fba1 5402 	umull	r5, r4, r1, r2
 800714a:	b934      	cbnz	r4, 800715a <_calloc_r+0x16>
 800714c:	4629      	mov	r1, r5
 800714e:	f000 f875 	bl	800723c <_malloc_r>
 8007152:	4606      	mov	r6, r0
 8007154:	b928      	cbnz	r0, 8007162 <_calloc_r+0x1e>
 8007156:	4630      	mov	r0, r6
 8007158:	bd70      	pop	{r4, r5, r6, pc}
 800715a:	220c      	movs	r2, #12
 800715c:	2600      	movs	r6, #0
 800715e:	6002      	str	r2, [r0, #0]
 8007160:	e7f9      	b.n	8007156 <_calloc_r+0x12>
 8007162:	462a      	mov	r2, r5
 8007164:	4621      	mov	r1, r4
 8007166:	f7fc fbbf 	bl	80038e8 <memset>
 800716a:	e7f4      	b.n	8007156 <_calloc_r+0x12>

0800716c <_free_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4605      	mov	r5, r0
 8007170:	2900      	cmp	r1, #0
 8007172:	d040      	beq.n	80071f6 <_free_r+0x8a>
 8007174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007178:	1f0c      	subs	r4, r1, #4
 800717a:	2b00      	cmp	r3, #0
 800717c:	bfb8      	it	lt
 800717e:	18e4      	addlt	r4, r4, r3
 8007180:	f000 faae 	bl	80076e0 <__malloc_lock>
 8007184:	4a1c      	ldr	r2, [pc, #112]	; (80071f8 <_free_r+0x8c>)
 8007186:	6813      	ldr	r3, [r2, #0]
 8007188:	b933      	cbnz	r3, 8007198 <_free_r+0x2c>
 800718a:	6063      	str	r3, [r4, #4]
 800718c:	6014      	str	r4, [r2, #0]
 800718e:	4628      	mov	r0, r5
 8007190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007194:	f000 baaa 	b.w	80076ec <__malloc_unlock>
 8007198:	42a3      	cmp	r3, r4
 800719a:	d908      	bls.n	80071ae <_free_r+0x42>
 800719c:	6820      	ldr	r0, [r4, #0]
 800719e:	1821      	adds	r1, r4, r0
 80071a0:	428b      	cmp	r3, r1
 80071a2:	bf01      	itttt	eq
 80071a4:	6819      	ldreq	r1, [r3, #0]
 80071a6:	685b      	ldreq	r3, [r3, #4]
 80071a8:	1809      	addeq	r1, r1, r0
 80071aa:	6021      	streq	r1, [r4, #0]
 80071ac:	e7ed      	b.n	800718a <_free_r+0x1e>
 80071ae:	461a      	mov	r2, r3
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	b10b      	cbz	r3, 80071b8 <_free_r+0x4c>
 80071b4:	42a3      	cmp	r3, r4
 80071b6:	d9fa      	bls.n	80071ae <_free_r+0x42>
 80071b8:	6811      	ldr	r1, [r2, #0]
 80071ba:	1850      	adds	r0, r2, r1
 80071bc:	42a0      	cmp	r0, r4
 80071be:	d10b      	bne.n	80071d8 <_free_r+0x6c>
 80071c0:	6820      	ldr	r0, [r4, #0]
 80071c2:	4401      	add	r1, r0
 80071c4:	1850      	adds	r0, r2, r1
 80071c6:	4283      	cmp	r3, r0
 80071c8:	6011      	str	r1, [r2, #0]
 80071ca:	d1e0      	bne.n	800718e <_free_r+0x22>
 80071cc:	6818      	ldr	r0, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	4401      	add	r1, r0
 80071d2:	6011      	str	r1, [r2, #0]
 80071d4:	6053      	str	r3, [r2, #4]
 80071d6:	e7da      	b.n	800718e <_free_r+0x22>
 80071d8:	d902      	bls.n	80071e0 <_free_r+0x74>
 80071da:	230c      	movs	r3, #12
 80071dc:	602b      	str	r3, [r5, #0]
 80071de:	e7d6      	b.n	800718e <_free_r+0x22>
 80071e0:	6820      	ldr	r0, [r4, #0]
 80071e2:	1821      	adds	r1, r4, r0
 80071e4:	428b      	cmp	r3, r1
 80071e6:	bf01      	itttt	eq
 80071e8:	6819      	ldreq	r1, [r3, #0]
 80071ea:	685b      	ldreq	r3, [r3, #4]
 80071ec:	1809      	addeq	r1, r1, r0
 80071ee:	6021      	streq	r1, [r4, #0]
 80071f0:	6063      	str	r3, [r4, #4]
 80071f2:	6054      	str	r4, [r2, #4]
 80071f4:	e7cb      	b.n	800718e <_free_r+0x22>
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	2000034c 	.word	0x2000034c

080071fc <sbrk_aligned>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4e0e      	ldr	r6, [pc, #56]	; (8007238 <sbrk_aligned+0x3c>)
 8007200:	460c      	mov	r4, r1
 8007202:	6831      	ldr	r1, [r6, #0]
 8007204:	4605      	mov	r5, r0
 8007206:	b911      	cbnz	r1, 800720e <sbrk_aligned+0x12>
 8007208:	f000 f9ee 	bl	80075e8 <_sbrk_r>
 800720c:	6030      	str	r0, [r6, #0]
 800720e:	4621      	mov	r1, r4
 8007210:	4628      	mov	r0, r5
 8007212:	f000 f9e9 	bl	80075e8 <_sbrk_r>
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	d00a      	beq.n	8007230 <sbrk_aligned+0x34>
 800721a:	1cc4      	adds	r4, r0, #3
 800721c:	f024 0403 	bic.w	r4, r4, #3
 8007220:	42a0      	cmp	r0, r4
 8007222:	d007      	beq.n	8007234 <sbrk_aligned+0x38>
 8007224:	1a21      	subs	r1, r4, r0
 8007226:	4628      	mov	r0, r5
 8007228:	f000 f9de 	bl	80075e8 <_sbrk_r>
 800722c:	3001      	adds	r0, #1
 800722e:	d101      	bne.n	8007234 <sbrk_aligned+0x38>
 8007230:	f04f 34ff 	mov.w	r4, #4294967295
 8007234:	4620      	mov	r0, r4
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	20000350 	.word	0x20000350

0800723c <_malloc_r>:
 800723c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007240:	1ccd      	adds	r5, r1, #3
 8007242:	f025 0503 	bic.w	r5, r5, #3
 8007246:	3508      	adds	r5, #8
 8007248:	2d0c      	cmp	r5, #12
 800724a:	bf38      	it	cc
 800724c:	250c      	movcc	r5, #12
 800724e:	2d00      	cmp	r5, #0
 8007250:	4607      	mov	r7, r0
 8007252:	db01      	blt.n	8007258 <_malloc_r+0x1c>
 8007254:	42a9      	cmp	r1, r5
 8007256:	d905      	bls.n	8007264 <_malloc_r+0x28>
 8007258:	230c      	movs	r3, #12
 800725a:	2600      	movs	r6, #0
 800725c:	603b      	str	r3, [r7, #0]
 800725e:	4630      	mov	r0, r6
 8007260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007264:	4e2e      	ldr	r6, [pc, #184]	; (8007320 <_malloc_r+0xe4>)
 8007266:	f000 fa3b 	bl	80076e0 <__malloc_lock>
 800726a:	6833      	ldr	r3, [r6, #0]
 800726c:	461c      	mov	r4, r3
 800726e:	bb34      	cbnz	r4, 80072be <_malloc_r+0x82>
 8007270:	4629      	mov	r1, r5
 8007272:	4638      	mov	r0, r7
 8007274:	f7ff ffc2 	bl	80071fc <sbrk_aligned>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	4604      	mov	r4, r0
 800727c:	d14d      	bne.n	800731a <_malloc_r+0xde>
 800727e:	6834      	ldr	r4, [r6, #0]
 8007280:	4626      	mov	r6, r4
 8007282:	2e00      	cmp	r6, #0
 8007284:	d140      	bne.n	8007308 <_malloc_r+0xcc>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	4631      	mov	r1, r6
 800728a:	4638      	mov	r0, r7
 800728c:	eb04 0803 	add.w	r8, r4, r3
 8007290:	f000 f9aa 	bl	80075e8 <_sbrk_r>
 8007294:	4580      	cmp	r8, r0
 8007296:	d13a      	bne.n	800730e <_malloc_r+0xd2>
 8007298:	6821      	ldr	r1, [r4, #0]
 800729a:	3503      	adds	r5, #3
 800729c:	1a6d      	subs	r5, r5, r1
 800729e:	f025 0503 	bic.w	r5, r5, #3
 80072a2:	3508      	adds	r5, #8
 80072a4:	2d0c      	cmp	r5, #12
 80072a6:	bf38      	it	cc
 80072a8:	250c      	movcc	r5, #12
 80072aa:	4638      	mov	r0, r7
 80072ac:	4629      	mov	r1, r5
 80072ae:	f7ff ffa5 	bl	80071fc <sbrk_aligned>
 80072b2:	3001      	adds	r0, #1
 80072b4:	d02b      	beq.n	800730e <_malloc_r+0xd2>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	442b      	add	r3, r5
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	e00e      	b.n	80072dc <_malloc_r+0xa0>
 80072be:	6822      	ldr	r2, [r4, #0]
 80072c0:	1b52      	subs	r2, r2, r5
 80072c2:	d41e      	bmi.n	8007302 <_malloc_r+0xc6>
 80072c4:	2a0b      	cmp	r2, #11
 80072c6:	d916      	bls.n	80072f6 <_malloc_r+0xba>
 80072c8:	1961      	adds	r1, r4, r5
 80072ca:	42a3      	cmp	r3, r4
 80072cc:	6025      	str	r5, [r4, #0]
 80072ce:	bf18      	it	ne
 80072d0:	6059      	strne	r1, [r3, #4]
 80072d2:	6863      	ldr	r3, [r4, #4]
 80072d4:	bf08      	it	eq
 80072d6:	6031      	streq	r1, [r6, #0]
 80072d8:	5162      	str	r2, [r4, r5]
 80072da:	604b      	str	r3, [r1, #4]
 80072dc:	4638      	mov	r0, r7
 80072de:	f104 060b 	add.w	r6, r4, #11
 80072e2:	f000 fa03 	bl	80076ec <__malloc_unlock>
 80072e6:	f026 0607 	bic.w	r6, r6, #7
 80072ea:	1d23      	adds	r3, r4, #4
 80072ec:	1af2      	subs	r2, r6, r3
 80072ee:	d0b6      	beq.n	800725e <_malloc_r+0x22>
 80072f0:	1b9b      	subs	r3, r3, r6
 80072f2:	50a3      	str	r3, [r4, r2]
 80072f4:	e7b3      	b.n	800725e <_malloc_r+0x22>
 80072f6:	6862      	ldr	r2, [r4, #4]
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	bf0c      	ite	eq
 80072fc:	6032      	streq	r2, [r6, #0]
 80072fe:	605a      	strne	r2, [r3, #4]
 8007300:	e7ec      	b.n	80072dc <_malloc_r+0xa0>
 8007302:	4623      	mov	r3, r4
 8007304:	6864      	ldr	r4, [r4, #4]
 8007306:	e7b2      	b.n	800726e <_malloc_r+0x32>
 8007308:	4634      	mov	r4, r6
 800730a:	6876      	ldr	r6, [r6, #4]
 800730c:	e7b9      	b.n	8007282 <_malloc_r+0x46>
 800730e:	230c      	movs	r3, #12
 8007310:	4638      	mov	r0, r7
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	f000 f9ea 	bl	80076ec <__malloc_unlock>
 8007318:	e7a1      	b.n	800725e <_malloc_r+0x22>
 800731a:	6025      	str	r5, [r4, #0]
 800731c:	e7de      	b.n	80072dc <_malloc_r+0xa0>
 800731e:	bf00      	nop
 8007320:	2000034c 	.word	0x2000034c

08007324 <__ssputs_r>:
 8007324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007328:	688e      	ldr	r6, [r1, #8]
 800732a:	4682      	mov	sl, r0
 800732c:	429e      	cmp	r6, r3
 800732e:	460c      	mov	r4, r1
 8007330:	4690      	mov	r8, r2
 8007332:	461f      	mov	r7, r3
 8007334:	d838      	bhi.n	80073a8 <__ssputs_r+0x84>
 8007336:	898a      	ldrh	r2, [r1, #12]
 8007338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800733c:	d032      	beq.n	80073a4 <__ssputs_r+0x80>
 800733e:	6825      	ldr	r5, [r4, #0]
 8007340:	6909      	ldr	r1, [r1, #16]
 8007342:	3301      	adds	r3, #1
 8007344:	eba5 0901 	sub.w	r9, r5, r1
 8007348:	6965      	ldr	r5, [r4, #20]
 800734a:	444b      	add	r3, r9
 800734c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007354:	106d      	asrs	r5, r5, #1
 8007356:	429d      	cmp	r5, r3
 8007358:	bf38      	it	cc
 800735a:	461d      	movcc	r5, r3
 800735c:	0553      	lsls	r3, r2, #21
 800735e:	d531      	bpl.n	80073c4 <__ssputs_r+0xa0>
 8007360:	4629      	mov	r1, r5
 8007362:	f7ff ff6b 	bl	800723c <_malloc_r>
 8007366:	4606      	mov	r6, r0
 8007368:	b950      	cbnz	r0, 8007380 <__ssputs_r+0x5c>
 800736a:	230c      	movs	r3, #12
 800736c:	f04f 30ff 	mov.w	r0, #4294967295
 8007370:	f8ca 3000 	str.w	r3, [sl]
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800737a:	81a3      	strh	r3, [r4, #12]
 800737c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007380:	464a      	mov	r2, r9
 8007382:	6921      	ldr	r1, [r4, #16]
 8007384:	f7ff fa18 	bl	80067b8 <memcpy>
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800738e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	6126      	str	r6, [r4, #16]
 8007396:	444e      	add	r6, r9
 8007398:	6026      	str	r6, [r4, #0]
 800739a:	463e      	mov	r6, r7
 800739c:	6165      	str	r5, [r4, #20]
 800739e:	eba5 0509 	sub.w	r5, r5, r9
 80073a2:	60a5      	str	r5, [r4, #8]
 80073a4:	42be      	cmp	r6, r7
 80073a6:	d900      	bls.n	80073aa <__ssputs_r+0x86>
 80073a8:	463e      	mov	r6, r7
 80073aa:	4632      	mov	r2, r6
 80073ac:	4641      	mov	r1, r8
 80073ae:	6820      	ldr	r0, [r4, #0]
 80073b0:	f000 f97c 	bl	80076ac <memmove>
 80073b4:	68a3      	ldr	r3, [r4, #8]
 80073b6:	2000      	movs	r0, #0
 80073b8:	1b9b      	subs	r3, r3, r6
 80073ba:	60a3      	str	r3, [r4, #8]
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	4433      	add	r3, r6
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	e7db      	b.n	800737c <__ssputs_r+0x58>
 80073c4:	462a      	mov	r2, r5
 80073c6:	f000 f997 	bl	80076f8 <_realloc_r>
 80073ca:	4606      	mov	r6, r0
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d1e1      	bne.n	8007394 <__ssputs_r+0x70>
 80073d0:	4650      	mov	r0, sl
 80073d2:	6921      	ldr	r1, [r4, #16]
 80073d4:	f7ff feca 	bl	800716c <_free_r>
 80073d8:	e7c7      	b.n	800736a <__ssputs_r+0x46>
	...

080073dc <_svfiprintf_r>:
 80073dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	4698      	mov	r8, r3
 80073e2:	898b      	ldrh	r3, [r1, #12]
 80073e4:	4607      	mov	r7, r0
 80073e6:	061b      	lsls	r3, r3, #24
 80073e8:	460d      	mov	r5, r1
 80073ea:	4614      	mov	r4, r2
 80073ec:	b09d      	sub	sp, #116	; 0x74
 80073ee:	d50e      	bpl.n	800740e <_svfiprintf_r+0x32>
 80073f0:	690b      	ldr	r3, [r1, #16]
 80073f2:	b963      	cbnz	r3, 800740e <_svfiprintf_r+0x32>
 80073f4:	2140      	movs	r1, #64	; 0x40
 80073f6:	f7ff ff21 	bl	800723c <_malloc_r>
 80073fa:	6028      	str	r0, [r5, #0]
 80073fc:	6128      	str	r0, [r5, #16]
 80073fe:	b920      	cbnz	r0, 800740a <_svfiprintf_r+0x2e>
 8007400:	230c      	movs	r3, #12
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	f04f 30ff 	mov.w	r0, #4294967295
 8007408:	e0d1      	b.n	80075ae <_svfiprintf_r+0x1d2>
 800740a:	2340      	movs	r3, #64	; 0x40
 800740c:	616b      	str	r3, [r5, #20]
 800740e:	2300      	movs	r3, #0
 8007410:	9309      	str	r3, [sp, #36]	; 0x24
 8007412:	2320      	movs	r3, #32
 8007414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007418:	2330      	movs	r3, #48	; 0x30
 800741a:	f04f 0901 	mov.w	r9, #1
 800741e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007422:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80075c8 <_svfiprintf_r+0x1ec>
 8007426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800742a:	4623      	mov	r3, r4
 800742c:	469a      	mov	sl, r3
 800742e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007432:	b10a      	cbz	r2, 8007438 <_svfiprintf_r+0x5c>
 8007434:	2a25      	cmp	r2, #37	; 0x25
 8007436:	d1f9      	bne.n	800742c <_svfiprintf_r+0x50>
 8007438:	ebba 0b04 	subs.w	fp, sl, r4
 800743c:	d00b      	beq.n	8007456 <_svfiprintf_r+0x7a>
 800743e:	465b      	mov	r3, fp
 8007440:	4622      	mov	r2, r4
 8007442:	4629      	mov	r1, r5
 8007444:	4638      	mov	r0, r7
 8007446:	f7ff ff6d 	bl	8007324 <__ssputs_r>
 800744a:	3001      	adds	r0, #1
 800744c:	f000 80aa 	beq.w	80075a4 <_svfiprintf_r+0x1c8>
 8007450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007452:	445a      	add	r2, fp
 8007454:	9209      	str	r2, [sp, #36]	; 0x24
 8007456:	f89a 3000 	ldrb.w	r3, [sl]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 80a2 	beq.w	80075a4 <_svfiprintf_r+0x1c8>
 8007460:	2300      	movs	r3, #0
 8007462:	f04f 32ff 	mov.w	r2, #4294967295
 8007466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800746a:	f10a 0a01 	add.w	sl, sl, #1
 800746e:	9304      	str	r3, [sp, #16]
 8007470:	9307      	str	r3, [sp, #28]
 8007472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007476:	931a      	str	r3, [sp, #104]	; 0x68
 8007478:	4654      	mov	r4, sl
 800747a:	2205      	movs	r2, #5
 800747c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007480:	4851      	ldr	r0, [pc, #324]	; (80075c8 <_svfiprintf_r+0x1ec>)
 8007482:	f7ff f98b 	bl	800679c <memchr>
 8007486:	9a04      	ldr	r2, [sp, #16]
 8007488:	b9d8      	cbnz	r0, 80074c2 <_svfiprintf_r+0xe6>
 800748a:	06d0      	lsls	r0, r2, #27
 800748c:	bf44      	itt	mi
 800748e:	2320      	movmi	r3, #32
 8007490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007494:	0711      	lsls	r1, r2, #28
 8007496:	bf44      	itt	mi
 8007498:	232b      	movmi	r3, #43	; 0x2b
 800749a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800749e:	f89a 3000 	ldrb.w	r3, [sl]
 80074a2:	2b2a      	cmp	r3, #42	; 0x2a
 80074a4:	d015      	beq.n	80074d2 <_svfiprintf_r+0xf6>
 80074a6:	4654      	mov	r4, sl
 80074a8:	2000      	movs	r0, #0
 80074aa:	f04f 0c0a 	mov.w	ip, #10
 80074ae:	9a07      	ldr	r2, [sp, #28]
 80074b0:	4621      	mov	r1, r4
 80074b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074b6:	3b30      	subs	r3, #48	; 0x30
 80074b8:	2b09      	cmp	r3, #9
 80074ba:	d94e      	bls.n	800755a <_svfiprintf_r+0x17e>
 80074bc:	b1b0      	cbz	r0, 80074ec <_svfiprintf_r+0x110>
 80074be:	9207      	str	r2, [sp, #28]
 80074c0:	e014      	b.n	80074ec <_svfiprintf_r+0x110>
 80074c2:	eba0 0308 	sub.w	r3, r0, r8
 80074c6:	fa09 f303 	lsl.w	r3, r9, r3
 80074ca:	4313      	orrs	r3, r2
 80074cc:	46a2      	mov	sl, r4
 80074ce:	9304      	str	r3, [sp, #16]
 80074d0:	e7d2      	b.n	8007478 <_svfiprintf_r+0x9c>
 80074d2:	9b03      	ldr	r3, [sp, #12]
 80074d4:	1d19      	adds	r1, r3, #4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	9103      	str	r1, [sp, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bfbb      	ittet	lt
 80074de:	425b      	neglt	r3, r3
 80074e0:	f042 0202 	orrlt.w	r2, r2, #2
 80074e4:	9307      	strge	r3, [sp, #28]
 80074e6:	9307      	strlt	r3, [sp, #28]
 80074e8:	bfb8      	it	lt
 80074ea:	9204      	strlt	r2, [sp, #16]
 80074ec:	7823      	ldrb	r3, [r4, #0]
 80074ee:	2b2e      	cmp	r3, #46	; 0x2e
 80074f0:	d10c      	bne.n	800750c <_svfiprintf_r+0x130>
 80074f2:	7863      	ldrb	r3, [r4, #1]
 80074f4:	2b2a      	cmp	r3, #42	; 0x2a
 80074f6:	d135      	bne.n	8007564 <_svfiprintf_r+0x188>
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	3402      	adds	r4, #2
 80074fc:	1d1a      	adds	r2, r3, #4
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	9203      	str	r2, [sp, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	bfb8      	it	lt
 8007506:	f04f 33ff 	movlt.w	r3, #4294967295
 800750a:	9305      	str	r3, [sp, #20]
 800750c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80075cc <_svfiprintf_r+0x1f0>
 8007510:	2203      	movs	r2, #3
 8007512:	4650      	mov	r0, sl
 8007514:	7821      	ldrb	r1, [r4, #0]
 8007516:	f7ff f941 	bl	800679c <memchr>
 800751a:	b140      	cbz	r0, 800752e <_svfiprintf_r+0x152>
 800751c:	2340      	movs	r3, #64	; 0x40
 800751e:	eba0 000a 	sub.w	r0, r0, sl
 8007522:	fa03 f000 	lsl.w	r0, r3, r0
 8007526:	9b04      	ldr	r3, [sp, #16]
 8007528:	3401      	adds	r4, #1
 800752a:	4303      	orrs	r3, r0
 800752c:	9304      	str	r3, [sp, #16]
 800752e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007532:	2206      	movs	r2, #6
 8007534:	4826      	ldr	r0, [pc, #152]	; (80075d0 <_svfiprintf_r+0x1f4>)
 8007536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800753a:	f7ff f92f 	bl	800679c <memchr>
 800753e:	2800      	cmp	r0, #0
 8007540:	d038      	beq.n	80075b4 <_svfiprintf_r+0x1d8>
 8007542:	4b24      	ldr	r3, [pc, #144]	; (80075d4 <_svfiprintf_r+0x1f8>)
 8007544:	bb1b      	cbnz	r3, 800758e <_svfiprintf_r+0x1b2>
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	3307      	adds	r3, #7
 800754a:	f023 0307 	bic.w	r3, r3, #7
 800754e:	3308      	adds	r3, #8
 8007550:	9303      	str	r3, [sp, #12]
 8007552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007554:	4433      	add	r3, r6
 8007556:	9309      	str	r3, [sp, #36]	; 0x24
 8007558:	e767      	b.n	800742a <_svfiprintf_r+0x4e>
 800755a:	460c      	mov	r4, r1
 800755c:	2001      	movs	r0, #1
 800755e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007562:	e7a5      	b.n	80074b0 <_svfiprintf_r+0xd4>
 8007564:	2300      	movs	r3, #0
 8007566:	f04f 0c0a 	mov.w	ip, #10
 800756a:	4619      	mov	r1, r3
 800756c:	3401      	adds	r4, #1
 800756e:	9305      	str	r3, [sp, #20]
 8007570:	4620      	mov	r0, r4
 8007572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007576:	3a30      	subs	r2, #48	; 0x30
 8007578:	2a09      	cmp	r2, #9
 800757a:	d903      	bls.n	8007584 <_svfiprintf_r+0x1a8>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0c5      	beq.n	800750c <_svfiprintf_r+0x130>
 8007580:	9105      	str	r1, [sp, #20]
 8007582:	e7c3      	b.n	800750c <_svfiprintf_r+0x130>
 8007584:	4604      	mov	r4, r0
 8007586:	2301      	movs	r3, #1
 8007588:	fb0c 2101 	mla	r1, ip, r1, r2
 800758c:	e7f0      	b.n	8007570 <_svfiprintf_r+0x194>
 800758e:	ab03      	add	r3, sp, #12
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	462a      	mov	r2, r5
 8007594:	4638      	mov	r0, r7
 8007596:	4b10      	ldr	r3, [pc, #64]	; (80075d8 <_svfiprintf_r+0x1fc>)
 8007598:	a904      	add	r1, sp, #16
 800759a:	f7fc fa4b 	bl	8003a34 <_printf_float>
 800759e:	1c42      	adds	r2, r0, #1
 80075a0:	4606      	mov	r6, r0
 80075a2:	d1d6      	bne.n	8007552 <_svfiprintf_r+0x176>
 80075a4:	89ab      	ldrh	r3, [r5, #12]
 80075a6:	065b      	lsls	r3, r3, #25
 80075a8:	f53f af2c 	bmi.w	8007404 <_svfiprintf_r+0x28>
 80075ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075ae:	b01d      	add	sp, #116	; 0x74
 80075b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b4:	ab03      	add	r3, sp, #12
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	462a      	mov	r2, r5
 80075ba:	4638      	mov	r0, r7
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <_svfiprintf_r+0x1fc>)
 80075be:	a904      	add	r1, sp, #16
 80075c0:	f7fc fcd4 	bl	8003f6c <_printf_i>
 80075c4:	e7eb      	b.n	800759e <_svfiprintf_r+0x1c2>
 80075c6:	bf00      	nop
 80075c8:	08008604 	.word	0x08008604
 80075cc:	0800860a 	.word	0x0800860a
 80075d0:	0800860e 	.word	0x0800860e
 80075d4:	08003a35 	.word	0x08003a35
 80075d8:	08007325 	.word	0x08007325

080075dc <nan>:
 80075dc:	2000      	movs	r0, #0
 80075de:	4901      	ldr	r1, [pc, #4]	; (80075e4 <nan+0x8>)
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	7ff80000 	.word	0x7ff80000

080075e8 <_sbrk_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	2300      	movs	r3, #0
 80075ec:	4d05      	ldr	r5, [pc, #20]	; (8007604 <_sbrk_r+0x1c>)
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	602b      	str	r3, [r5, #0]
 80075f4:	f7f9 ff3c 	bl	8001470 <_sbrk>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_sbrk_r+0x1a>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_sbrk_r+0x1a>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20000354 	.word	0x20000354

08007608 <strncmp>:
 8007608:	4603      	mov	r3, r0
 800760a:	b510      	push	{r4, lr}
 800760c:	b172      	cbz	r2, 800762c <strncmp+0x24>
 800760e:	3901      	subs	r1, #1
 8007610:	1884      	adds	r4, r0, r2
 8007612:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007616:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800761a:	4290      	cmp	r0, r2
 800761c:	d101      	bne.n	8007622 <strncmp+0x1a>
 800761e:	42a3      	cmp	r3, r4
 8007620:	d101      	bne.n	8007626 <strncmp+0x1e>
 8007622:	1a80      	subs	r0, r0, r2
 8007624:	bd10      	pop	{r4, pc}
 8007626:	2800      	cmp	r0, #0
 8007628:	d1f3      	bne.n	8007612 <strncmp+0xa>
 800762a:	e7fa      	b.n	8007622 <strncmp+0x1a>
 800762c:	4610      	mov	r0, r2
 800762e:	e7f9      	b.n	8007624 <strncmp+0x1c>

08007630 <__ascii_wctomb>:
 8007630:	4603      	mov	r3, r0
 8007632:	4608      	mov	r0, r1
 8007634:	b141      	cbz	r1, 8007648 <__ascii_wctomb+0x18>
 8007636:	2aff      	cmp	r2, #255	; 0xff
 8007638:	d904      	bls.n	8007644 <__ascii_wctomb+0x14>
 800763a:	228a      	movs	r2, #138	; 0x8a
 800763c:	f04f 30ff 	mov.w	r0, #4294967295
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	4770      	bx	lr
 8007644:	2001      	movs	r0, #1
 8007646:	700a      	strb	r2, [r1, #0]
 8007648:	4770      	bx	lr
	...

0800764c <__assert_func>:
 800764c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800764e:	4614      	mov	r4, r2
 8007650:	461a      	mov	r2, r3
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <__assert_func+0x2c>)
 8007654:	4605      	mov	r5, r0
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68d8      	ldr	r0, [r3, #12]
 800765a:	b14c      	cbz	r4, 8007670 <__assert_func+0x24>
 800765c:	4b07      	ldr	r3, [pc, #28]	; (800767c <__assert_func+0x30>)
 800765e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007662:	9100      	str	r1, [sp, #0]
 8007664:	462b      	mov	r3, r5
 8007666:	4906      	ldr	r1, [pc, #24]	; (8007680 <__assert_func+0x34>)
 8007668:	f000 f80e 	bl	8007688 <fiprintf>
 800766c:	f000 fa8a 	bl	8007b84 <abort>
 8007670:	4b04      	ldr	r3, [pc, #16]	; (8007684 <__assert_func+0x38>)
 8007672:	461c      	mov	r4, r3
 8007674:	e7f3      	b.n	800765e <__assert_func+0x12>
 8007676:	bf00      	nop
 8007678:	2000000c 	.word	0x2000000c
 800767c:	08008615 	.word	0x08008615
 8007680:	08008622 	.word	0x08008622
 8007684:	08008650 	.word	0x08008650

08007688 <fiprintf>:
 8007688:	b40e      	push	{r1, r2, r3}
 800768a:	b503      	push	{r0, r1, lr}
 800768c:	4601      	mov	r1, r0
 800768e:	ab03      	add	r3, sp, #12
 8007690:	4805      	ldr	r0, [pc, #20]	; (80076a8 <fiprintf+0x20>)
 8007692:	f853 2b04 	ldr.w	r2, [r3], #4
 8007696:	6800      	ldr	r0, [r0, #0]
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	f000 f883 	bl	80077a4 <_vfiprintf_r>
 800769e:	b002      	add	sp, #8
 80076a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a4:	b003      	add	sp, #12
 80076a6:	4770      	bx	lr
 80076a8:	2000000c 	.word	0x2000000c

080076ac <memmove>:
 80076ac:	4288      	cmp	r0, r1
 80076ae:	b510      	push	{r4, lr}
 80076b0:	eb01 0402 	add.w	r4, r1, r2
 80076b4:	d902      	bls.n	80076bc <memmove+0x10>
 80076b6:	4284      	cmp	r4, r0
 80076b8:	4623      	mov	r3, r4
 80076ba:	d807      	bhi.n	80076cc <memmove+0x20>
 80076bc:	1e43      	subs	r3, r0, #1
 80076be:	42a1      	cmp	r1, r4
 80076c0:	d008      	beq.n	80076d4 <memmove+0x28>
 80076c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076ca:	e7f8      	b.n	80076be <memmove+0x12>
 80076cc:	4601      	mov	r1, r0
 80076ce:	4402      	add	r2, r0
 80076d0:	428a      	cmp	r2, r1
 80076d2:	d100      	bne.n	80076d6 <memmove+0x2a>
 80076d4:	bd10      	pop	{r4, pc}
 80076d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076de:	e7f7      	b.n	80076d0 <memmove+0x24>

080076e0 <__malloc_lock>:
 80076e0:	4801      	ldr	r0, [pc, #4]	; (80076e8 <__malloc_lock+0x8>)
 80076e2:	f000 bc0b 	b.w	8007efc <__retarget_lock_acquire_recursive>
 80076e6:	bf00      	nop
 80076e8:	20000358 	.word	0x20000358

080076ec <__malloc_unlock>:
 80076ec:	4801      	ldr	r0, [pc, #4]	; (80076f4 <__malloc_unlock+0x8>)
 80076ee:	f000 bc06 	b.w	8007efe <__retarget_lock_release_recursive>
 80076f2:	bf00      	nop
 80076f4:	20000358 	.word	0x20000358

080076f8 <_realloc_r>:
 80076f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076fc:	4680      	mov	r8, r0
 80076fe:	4614      	mov	r4, r2
 8007700:	460e      	mov	r6, r1
 8007702:	b921      	cbnz	r1, 800770e <_realloc_r+0x16>
 8007704:	4611      	mov	r1, r2
 8007706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800770a:	f7ff bd97 	b.w	800723c <_malloc_r>
 800770e:	b92a      	cbnz	r2, 800771c <_realloc_r+0x24>
 8007710:	f7ff fd2c 	bl	800716c <_free_r>
 8007714:	4625      	mov	r5, r4
 8007716:	4628      	mov	r0, r5
 8007718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800771c:	f000 fc56 	bl	8007fcc <_malloc_usable_size_r>
 8007720:	4284      	cmp	r4, r0
 8007722:	4607      	mov	r7, r0
 8007724:	d802      	bhi.n	800772c <_realloc_r+0x34>
 8007726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800772a:	d812      	bhi.n	8007752 <_realloc_r+0x5a>
 800772c:	4621      	mov	r1, r4
 800772e:	4640      	mov	r0, r8
 8007730:	f7ff fd84 	bl	800723c <_malloc_r>
 8007734:	4605      	mov	r5, r0
 8007736:	2800      	cmp	r0, #0
 8007738:	d0ed      	beq.n	8007716 <_realloc_r+0x1e>
 800773a:	42bc      	cmp	r4, r7
 800773c:	4622      	mov	r2, r4
 800773e:	4631      	mov	r1, r6
 8007740:	bf28      	it	cs
 8007742:	463a      	movcs	r2, r7
 8007744:	f7ff f838 	bl	80067b8 <memcpy>
 8007748:	4631      	mov	r1, r6
 800774a:	4640      	mov	r0, r8
 800774c:	f7ff fd0e 	bl	800716c <_free_r>
 8007750:	e7e1      	b.n	8007716 <_realloc_r+0x1e>
 8007752:	4635      	mov	r5, r6
 8007754:	e7df      	b.n	8007716 <_realloc_r+0x1e>

08007756 <__sfputc_r>:
 8007756:	6893      	ldr	r3, [r2, #8]
 8007758:	b410      	push	{r4}
 800775a:	3b01      	subs	r3, #1
 800775c:	2b00      	cmp	r3, #0
 800775e:	6093      	str	r3, [r2, #8]
 8007760:	da07      	bge.n	8007772 <__sfputc_r+0x1c>
 8007762:	6994      	ldr	r4, [r2, #24]
 8007764:	42a3      	cmp	r3, r4
 8007766:	db01      	blt.n	800776c <__sfputc_r+0x16>
 8007768:	290a      	cmp	r1, #10
 800776a:	d102      	bne.n	8007772 <__sfputc_r+0x1c>
 800776c:	bc10      	pop	{r4}
 800776e:	f000 b949 	b.w	8007a04 <__swbuf_r>
 8007772:	6813      	ldr	r3, [r2, #0]
 8007774:	1c58      	adds	r0, r3, #1
 8007776:	6010      	str	r0, [r2, #0]
 8007778:	7019      	strb	r1, [r3, #0]
 800777a:	4608      	mov	r0, r1
 800777c:	bc10      	pop	{r4}
 800777e:	4770      	bx	lr

08007780 <__sfputs_r>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	4606      	mov	r6, r0
 8007784:	460f      	mov	r7, r1
 8007786:	4614      	mov	r4, r2
 8007788:	18d5      	adds	r5, r2, r3
 800778a:	42ac      	cmp	r4, r5
 800778c:	d101      	bne.n	8007792 <__sfputs_r+0x12>
 800778e:	2000      	movs	r0, #0
 8007790:	e007      	b.n	80077a2 <__sfputs_r+0x22>
 8007792:	463a      	mov	r2, r7
 8007794:	4630      	mov	r0, r6
 8007796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779a:	f7ff ffdc 	bl	8007756 <__sfputc_r>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	d1f3      	bne.n	800778a <__sfputs_r+0xa>
 80077a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077a4 <_vfiprintf_r>:
 80077a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a8:	460d      	mov	r5, r1
 80077aa:	4614      	mov	r4, r2
 80077ac:	4698      	mov	r8, r3
 80077ae:	4606      	mov	r6, r0
 80077b0:	b09d      	sub	sp, #116	; 0x74
 80077b2:	b118      	cbz	r0, 80077bc <_vfiprintf_r+0x18>
 80077b4:	6983      	ldr	r3, [r0, #24]
 80077b6:	b90b      	cbnz	r3, 80077bc <_vfiprintf_r+0x18>
 80077b8:	f000 fb02 	bl	8007dc0 <__sinit>
 80077bc:	4b89      	ldr	r3, [pc, #548]	; (80079e4 <_vfiprintf_r+0x240>)
 80077be:	429d      	cmp	r5, r3
 80077c0:	d11b      	bne.n	80077fa <_vfiprintf_r+0x56>
 80077c2:	6875      	ldr	r5, [r6, #4]
 80077c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077c6:	07d9      	lsls	r1, r3, #31
 80077c8:	d405      	bmi.n	80077d6 <_vfiprintf_r+0x32>
 80077ca:	89ab      	ldrh	r3, [r5, #12]
 80077cc:	059a      	lsls	r2, r3, #22
 80077ce:	d402      	bmi.n	80077d6 <_vfiprintf_r+0x32>
 80077d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077d2:	f000 fb93 	bl	8007efc <__retarget_lock_acquire_recursive>
 80077d6:	89ab      	ldrh	r3, [r5, #12]
 80077d8:	071b      	lsls	r3, r3, #28
 80077da:	d501      	bpl.n	80077e0 <_vfiprintf_r+0x3c>
 80077dc:	692b      	ldr	r3, [r5, #16]
 80077de:	b9eb      	cbnz	r3, 800781c <_vfiprintf_r+0x78>
 80077e0:	4629      	mov	r1, r5
 80077e2:	4630      	mov	r0, r6
 80077e4:	f000 f960 	bl	8007aa8 <__swsetup_r>
 80077e8:	b1c0      	cbz	r0, 800781c <_vfiprintf_r+0x78>
 80077ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077ec:	07dc      	lsls	r4, r3, #31
 80077ee:	d50e      	bpl.n	800780e <_vfiprintf_r+0x6a>
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	b01d      	add	sp, #116	; 0x74
 80077f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fa:	4b7b      	ldr	r3, [pc, #492]	; (80079e8 <_vfiprintf_r+0x244>)
 80077fc:	429d      	cmp	r5, r3
 80077fe:	d101      	bne.n	8007804 <_vfiprintf_r+0x60>
 8007800:	68b5      	ldr	r5, [r6, #8]
 8007802:	e7df      	b.n	80077c4 <_vfiprintf_r+0x20>
 8007804:	4b79      	ldr	r3, [pc, #484]	; (80079ec <_vfiprintf_r+0x248>)
 8007806:	429d      	cmp	r5, r3
 8007808:	bf08      	it	eq
 800780a:	68f5      	ldreq	r5, [r6, #12]
 800780c:	e7da      	b.n	80077c4 <_vfiprintf_r+0x20>
 800780e:	89ab      	ldrh	r3, [r5, #12]
 8007810:	0598      	lsls	r0, r3, #22
 8007812:	d4ed      	bmi.n	80077f0 <_vfiprintf_r+0x4c>
 8007814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007816:	f000 fb72 	bl	8007efe <__retarget_lock_release_recursive>
 800781a:	e7e9      	b.n	80077f0 <_vfiprintf_r+0x4c>
 800781c:	2300      	movs	r3, #0
 800781e:	9309      	str	r3, [sp, #36]	; 0x24
 8007820:	2320      	movs	r3, #32
 8007822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007826:	2330      	movs	r3, #48	; 0x30
 8007828:	f04f 0901 	mov.w	r9, #1
 800782c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007830:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80079f0 <_vfiprintf_r+0x24c>
 8007834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007838:	4623      	mov	r3, r4
 800783a:	469a      	mov	sl, r3
 800783c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007840:	b10a      	cbz	r2, 8007846 <_vfiprintf_r+0xa2>
 8007842:	2a25      	cmp	r2, #37	; 0x25
 8007844:	d1f9      	bne.n	800783a <_vfiprintf_r+0x96>
 8007846:	ebba 0b04 	subs.w	fp, sl, r4
 800784a:	d00b      	beq.n	8007864 <_vfiprintf_r+0xc0>
 800784c:	465b      	mov	r3, fp
 800784e:	4622      	mov	r2, r4
 8007850:	4629      	mov	r1, r5
 8007852:	4630      	mov	r0, r6
 8007854:	f7ff ff94 	bl	8007780 <__sfputs_r>
 8007858:	3001      	adds	r0, #1
 800785a:	f000 80aa 	beq.w	80079b2 <_vfiprintf_r+0x20e>
 800785e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007860:	445a      	add	r2, fp
 8007862:	9209      	str	r2, [sp, #36]	; 0x24
 8007864:	f89a 3000 	ldrb.w	r3, [sl]
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 80a2 	beq.w	80079b2 <_vfiprintf_r+0x20e>
 800786e:	2300      	movs	r3, #0
 8007870:	f04f 32ff 	mov.w	r2, #4294967295
 8007874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007878:	f10a 0a01 	add.w	sl, sl, #1
 800787c:	9304      	str	r3, [sp, #16]
 800787e:	9307      	str	r3, [sp, #28]
 8007880:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007884:	931a      	str	r3, [sp, #104]	; 0x68
 8007886:	4654      	mov	r4, sl
 8007888:	2205      	movs	r2, #5
 800788a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800788e:	4858      	ldr	r0, [pc, #352]	; (80079f0 <_vfiprintf_r+0x24c>)
 8007890:	f7fe ff84 	bl	800679c <memchr>
 8007894:	9a04      	ldr	r2, [sp, #16]
 8007896:	b9d8      	cbnz	r0, 80078d0 <_vfiprintf_r+0x12c>
 8007898:	06d1      	lsls	r1, r2, #27
 800789a:	bf44      	itt	mi
 800789c:	2320      	movmi	r3, #32
 800789e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078a2:	0713      	lsls	r3, r2, #28
 80078a4:	bf44      	itt	mi
 80078a6:	232b      	movmi	r3, #43	; 0x2b
 80078a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ac:	f89a 3000 	ldrb.w	r3, [sl]
 80078b0:	2b2a      	cmp	r3, #42	; 0x2a
 80078b2:	d015      	beq.n	80078e0 <_vfiprintf_r+0x13c>
 80078b4:	4654      	mov	r4, sl
 80078b6:	2000      	movs	r0, #0
 80078b8:	f04f 0c0a 	mov.w	ip, #10
 80078bc:	9a07      	ldr	r2, [sp, #28]
 80078be:	4621      	mov	r1, r4
 80078c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078c4:	3b30      	subs	r3, #48	; 0x30
 80078c6:	2b09      	cmp	r3, #9
 80078c8:	d94e      	bls.n	8007968 <_vfiprintf_r+0x1c4>
 80078ca:	b1b0      	cbz	r0, 80078fa <_vfiprintf_r+0x156>
 80078cc:	9207      	str	r2, [sp, #28]
 80078ce:	e014      	b.n	80078fa <_vfiprintf_r+0x156>
 80078d0:	eba0 0308 	sub.w	r3, r0, r8
 80078d4:	fa09 f303 	lsl.w	r3, r9, r3
 80078d8:	4313      	orrs	r3, r2
 80078da:	46a2      	mov	sl, r4
 80078dc:	9304      	str	r3, [sp, #16]
 80078de:	e7d2      	b.n	8007886 <_vfiprintf_r+0xe2>
 80078e0:	9b03      	ldr	r3, [sp, #12]
 80078e2:	1d19      	adds	r1, r3, #4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	9103      	str	r1, [sp, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bfbb      	ittet	lt
 80078ec:	425b      	neglt	r3, r3
 80078ee:	f042 0202 	orrlt.w	r2, r2, #2
 80078f2:	9307      	strge	r3, [sp, #28]
 80078f4:	9307      	strlt	r3, [sp, #28]
 80078f6:	bfb8      	it	lt
 80078f8:	9204      	strlt	r2, [sp, #16]
 80078fa:	7823      	ldrb	r3, [r4, #0]
 80078fc:	2b2e      	cmp	r3, #46	; 0x2e
 80078fe:	d10c      	bne.n	800791a <_vfiprintf_r+0x176>
 8007900:	7863      	ldrb	r3, [r4, #1]
 8007902:	2b2a      	cmp	r3, #42	; 0x2a
 8007904:	d135      	bne.n	8007972 <_vfiprintf_r+0x1ce>
 8007906:	9b03      	ldr	r3, [sp, #12]
 8007908:	3402      	adds	r4, #2
 800790a:	1d1a      	adds	r2, r3, #4
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	9203      	str	r2, [sp, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	bfb8      	it	lt
 8007914:	f04f 33ff 	movlt.w	r3, #4294967295
 8007918:	9305      	str	r3, [sp, #20]
 800791a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80079f4 <_vfiprintf_r+0x250>
 800791e:	2203      	movs	r2, #3
 8007920:	4650      	mov	r0, sl
 8007922:	7821      	ldrb	r1, [r4, #0]
 8007924:	f7fe ff3a 	bl	800679c <memchr>
 8007928:	b140      	cbz	r0, 800793c <_vfiprintf_r+0x198>
 800792a:	2340      	movs	r3, #64	; 0x40
 800792c:	eba0 000a 	sub.w	r0, r0, sl
 8007930:	fa03 f000 	lsl.w	r0, r3, r0
 8007934:	9b04      	ldr	r3, [sp, #16]
 8007936:	3401      	adds	r4, #1
 8007938:	4303      	orrs	r3, r0
 800793a:	9304      	str	r3, [sp, #16]
 800793c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007940:	2206      	movs	r2, #6
 8007942:	482d      	ldr	r0, [pc, #180]	; (80079f8 <_vfiprintf_r+0x254>)
 8007944:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007948:	f7fe ff28 	bl	800679c <memchr>
 800794c:	2800      	cmp	r0, #0
 800794e:	d03f      	beq.n	80079d0 <_vfiprintf_r+0x22c>
 8007950:	4b2a      	ldr	r3, [pc, #168]	; (80079fc <_vfiprintf_r+0x258>)
 8007952:	bb1b      	cbnz	r3, 800799c <_vfiprintf_r+0x1f8>
 8007954:	9b03      	ldr	r3, [sp, #12]
 8007956:	3307      	adds	r3, #7
 8007958:	f023 0307 	bic.w	r3, r3, #7
 800795c:	3308      	adds	r3, #8
 800795e:	9303      	str	r3, [sp, #12]
 8007960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007962:	443b      	add	r3, r7
 8007964:	9309      	str	r3, [sp, #36]	; 0x24
 8007966:	e767      	b.n	8007838 <_vfiprintf_r+0x94>
 8007968:	460c      	mov	r4, r1
 800796a:	2001      	movs	r0, #1
 800796c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007970:	e7a5      	b.n	80078be <_vfiprintf_r+0x11a>
 8007972:	2300      	movs	r3, #0
 8007974:	f04f 0c0a 	mov.w	ip, #10
 8007978:	4619      	mov	r1, r3
 800797a:	3401      	adds	r4, #1
 800797c:	9305      	str	r3, [sp, #20]
 800797e:	4620      	mov	r0, r4
 8007980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007984:	3a30      	subs	r2, #48	; 0x30
 8007986:	2a09      	cmp	r2, #9
 8007988:	d903      	bls.n	8007992 <_vfiprintf_r+0x1ee>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0c5      	beq.n	800791a <_vfiprintf_r+0x176>
 800798e:	9105      	str	r1, [sp, #20]
 8007990:	e7c3      	b.n	800791a <_vfiprintf_r+0x176>
 8007992:	4604      	mov	r4, r0
 8007994:	2301      	movs	r3, #1
 8007996:	fb0c 2101 	mla	r1, ip, r1, r2
 800799a:	e7f0      	b.n	800797e <_vfiprintf_r+0x1da>
 800799c:	ab03      	add	r3, sp, #12
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	462a      	mov	r2, r5
 80079a2:	4630      	mov	r0, r6
 80079a4:	4b16      	ldr	r3, [pc, #88]	; (8007a00 <_vfiprintf_r+0x25c>)
 80079a6:	a904      	add	r1, sp, #16
 80079a8:	f7fc f844 	bl	8003a34 <_printf_float>
 80079ac:	4607      	mov	r7, r0
 80079ae:	1c78      	adds	r0, r7, #1
 80079b0:	d1d6      	bne.n	8007960 <_vfiprintf_r+0x1bc>
 80079b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079b4:	07d9      	lsls	r1, r3, #31
 80079b6:	d405      	bmi.n	80079c4 <_vfiprintf_r+0x220>
 80079b8:	89ab      	ldrh	r3, [r5, #12]
 80079ba:	059a      	lsls	r2, r3, #22
 80079bc:	d402      	bmi.n	80079c4 <_vfiprintf_r+0x220>
 80079be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079c0:	f000 fa9d 	bl	8007efe <__retarget_lock_release_recursive>
 80079c4:	89ab      	ldrh	r3, [r5, #12]
 80079c6:	065b      	lsls	r3, r3, #25
 80079c8:	f53f af12 	bmi.w	80077f0 <_vfiprintf_r+0x4c>
 80079cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079ce:	e711      	b.n	80077f4 <_vfiprintf_r+0x50>
 80079d0:	ab03      	add	r3, sp, #12
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	462a      	mov	r2, r5
 80079d6:	4630      	mov	r0, r6
 80079d8:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <_vfiprintf_r+0x25c>)
 80079da:	a904      	add	r1, sp, #16
 80079dc:	f7fc fac6 	bl	8003f6c <_printf_i>
 80079e0:	e7e4      	b.n	80079ac <_vfiprintf_r+0x208>
 80079e2:	bf00      	nop
 80079e4:	08008674 	.word	0x08008674
 80079e8:	08008694 	.word	0x08008694
 80079ec:	08008654 	.word	0x08008654
 80079f0:	08008604 	.word	0x08008604
 80079f4:	0800860a 	.word	0x0800860a
 80079f8:	0800860e 	.word	0x0800860e
 80079fc:	08003a35 	.word	0x08003a35
 8007a00:	08007781 	.word	0x08007781

08007a04 <__swbuf_r>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	460e      	mov	r6, r1
 8007a08:	4614      	mov	r4, r2
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	b118      	cbz	r0, 8007a16 <__swbuf_r+0x12>
 8007a0e:	6983      	ldr	r3, [r0, #24]
 8007a10:	b90b      	cbnz	r3, 8007a16 <__swbuf_r+0x12>
 8007a12:	f000 f9d5 	bl	8007dc0 <__sinit>
 8007a16:	4b21      	ldr	r3, [pc, #132]	; (8007a9c <__swbuf_r+0x98>)
 8007a18:	429c      	cmp	r4, r3
 8007a1a:	d12b      	bne.n	8007a74 <__swbuf_r+0x70>
 8007a1c:	686c      	ldr	r4, [r5, #4]
 8007a1e:	69a3      	ldr	r3, [r4, #24]
 8007a20:	60a3      	str	r3, [r4, #8]
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	071a      	lsls	r2, r3, #28
 8007a26:	d52f      	bpl.n	8007a88 <__swbuf_r+0x84>
 8007a28:	6923      	ldr	r3, [r4, #16]
 8007a2a:	b36b      	cbz	r3, 8007a88 <__swbuf_r+0x84>
 8007a2c:	6923      	ldr	r3, [r4, #16]
 8007a2e:	6820      	ldr	r0, [r4, #0]
 8007a30:	b2f6      	uxtb	r6, r6
 8007a32:	1ac0      	subs	r0, r0, r3
 8007a34:	6963      	ldr	r3, [r4, #20]
 8007a36:	4637      	mov	r7, r6
 8007a38:	4283      	cmp	r3, r0
 8007a3a:	dc04      	bgt.n	8007a46 <__swbuf_r+0x42>
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 f92a 	bl	8007c98 <_fflush_r>
 8007a44:	bb30      	cbnz	r0, 8007a94 <__swbuf_r+0x90>
 8007a46:	68a3      	ldr	r3, [r4, #8]
 8007a48:	3001      	adds	r0, #1
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	60a3      	str	r3, [r4, #8]
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	6022      	str	r2, [r4, #0]
 8007a54:	701e      	strb	r6, [r3, #0]
 8007a56:	6963      	ldr	r3, [r4, #20]
 8007a58:	4283      	cmp	r3, r0
 8007a5a:	d004      	beq.n	8007a66 <__swbuf_r+0x62>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	07db      	lsls	r3, r3, #31
 8007a60:	d506      	bpl.n	8007a70 <__swbuf_r+0x6c>
 8007a62:	2e0a      	cmp	r6, #10
 8007a64:	d104      	bne.n	8007a70 <__swbuf_r+0x6c>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 f915 	bl	8007c98 <_fflush_r>
 8007a6e:	b988      	cbnz	r0, 8007a94 <__swbuf_r+0x90>
 8007a70:	4638      	mov	r0, r7
 8007a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a74:	4b0a      	ldr	r3, [pc, #40]	; (8007aa0 <__swbuf_r+0x9c>)
 8007a76:	429c      	cmp	r4, r3
 8007a78:	d101      	bne.n	8007a7e <__swbuf_r+0x7a>
 8007a7a:	68ac      	ldr	r4, [r5, #8]
 8007a7c:	e7cf      	b.n	8007a1e <__swbuf_r+0x1a>
 8007a7e:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <__swbuf_r+0xa0>)
 8007a80:	429c      	cmp	r4, r3
 8007a82:	bf08      	it	eq
 8007a84:	68ec      	ldreq	r4, [r5, #12]
 8007a86:	e7ca      	b.n	8007a1e <__swbuf_r+0x1a>
 8007a88:	4621      	mov	r1, r4
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	f000 f80c 	bl	8007aa8 <__swsetup_r>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d0cb      	beq.n	8007a2c <__swbuf_r+0x28>
 8007a94:	f04f 37ff 	mov.w	r7, #4294967295
 8007a98:	e7ea      	b.n	8007a70 <__swbuf_r+0x6c>
 8007a9a:	bf00      	nop
 8007a9c:	08008674 	.word	0x08008674
 8007aa0:	08008694 	.word	0x08008694
 8007aa4:	08008654 	.word	0x08008654

08007aa8 <__swsetup_r>:
 8007aa8:	4b32      	ldr	r3, [pc, #200]	; (8007b74 <__swsetup_r+0xcc>)
 8007aaa:	b570      	push	{r4, r5, r6, lr}
 8007aac:	681d      	ldr	r5, [r3, #0]
 8007aae:	4606      	mov	r6, r0
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	b125      	cbz	r5, 8007abe <__swsetup_r+0x16>
 8007ab4:	69ab      	ldr	r3, [r5, #24]
 8007ab6:	b913      	cbnz	r3, 8007abe <__swsetup_r+0x16>
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f000 f981 	bl	8007dc0 <__sinit>
 8007abe:	4b2e      	ldr	r3, [pc, #184]	; (8007b78 <__swsetup_r+0xd0>)
 8007ac0:	429c      	cmp	r4, r3
 8007ac2:	d10f      	bne.n	8007ae4 <__swsetup_r+0x3c>
 8007ac4:	686c      	ldr	r4, [r5, #4]
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007acc:	0719      	lsls	r1, r3, #28
 8007ace:	d42c      	bmi.n	8007b2a <__swsetup_r+0x82>
 8007ad0:	06dd      	lsls	r5, r3, #27
 8007ad2:	d411      	bmi.n	8007af8 <__swsetup_r+0x50>
 8007ad4:	2309      	movs	r3, #9
 8007ad6:	6033      	str	r3, [r6, #0]
 8007ad8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	81a3      	strh	r3, [r4, #12]
 8007ae2:	e03e      	b.n	8007b62 <__swsetup_r+0xba>
 8007ae4:	4b25      	ldr	r3, [pc, #148]	; (8007b7c <__swsetup_r+0xd4>)
 8007ae6:	429c      	cmp	r4, r3
 8007ae8:	d101      	bne.n	8007aee <__swsetup_r+0x46>
 8007aea:	68ac      	ldr	r4, [r5, #8]
 8007aec:	e7eb      	b.n	8007ac6 <__swsetup_r+0x1e>
 8007aee:	4b24      	ldr	r3, [pc, #144]	; (8007b80 <__swsetup_r+0xd8>)
 8007af0:	429c      	cmp	r4, r3
 8007af2:	bf08      	it	eq
 8007af4:	68ec      	ldreq	r4, [r5, #12]
 8007af6:	e7e6      	b.n	8007ac6 <__swsetup_r+0x1e>
 8007af8:	0758      	lsls	r0, r3, #29
 8007afa:	d512      	bpl.n	8007b22 <__swsetup_r+0x7a>
 8007afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007afe:	b141      	cbz	r1, 8007b12 <__swsetup_r+0x6a>
 8007b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b04:	4299      	cmp	r1, r3
 8007b06:	d002      	beq.n	8007b0e <__swsetup_r+0x66>
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f7ff fb2f 	bl	800716c <_free_r>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6363      	str	r3, [r4, #52]	; 0x34
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	6063      	str	r3, [r4, #4]
 8007b1e:	6923      	ldr	r3, [r4, #16]
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	f043 0308 	orr.w	r3, r3, #8
 8007b28:	81a3      	strh	r3, [r4, #12]
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	b94b      	cbnz	r3, 8007b42 <__swsetup_r+0x9a>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b38:	d003      	beq.n	8007b42 <__swsetup_r+0x9a>
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f000 fa05 	bl	8007f4c <__smakebuf_r>
 8007b42:	89a0      	ldrh	r0, [r4, #12]
 8007b44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b48:	f010 0301 	ands.w	r3, r0, #1
 8007b4c:	d00a      	beq.n	8007b64 <__swsetup_r+0xbc>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60a3      	str	r3, [r4, #8]
 8007b52:	6963      	ldr	r3, [r4, #20]
 8007b54:	425b      	negs	r3, r3
 8007b56:	61a3      	str	r3, [r4, #24]
 8007b58:	6923      	ldr	r3, [r4, #16]
 8007b5a:	b943      	cbnz	r3, 8007b6e <__swsetup_r+0xc6>
 8007b5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b60:	d1ba      	bne.n	8007ad8 <__swsetup_r+0x30>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	0781      	lsls	r1, r0, #30
 8007b66:	bf58      	it	pl
 8007b68:	6963      	ldrpl	r3, [r4, #20]
 8007b6a:	60a3      	str	r3, [r4, #8]
 8007b6c:	e7f4      	b.n	8007b58 <__swsetup_r+0xb0>
 8007b6e:	2000      	movs	r0, #0
 8007b70:	e7f7      	b.n	8007b62 <__swsetup_r+0xba>
 8007b72:	bf00      	nop
 8007b74:	2000000c 	.word	0x2000000c
 8007b78:	08008674 	.word	0x08008674
 8007b7c:	08008694 	.word	0x08008694
 8007b80:	08008654 	.word	0x08008654

08007b84 <abort>:
 8007b84:	2006      	movs	r0, #6
 8007b86:	b508      	push	{r3, lr}
 8007b88:	f000 fa50 	bl	800802c <raise>
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	f7f9 fbfc 	bl	800138a <_exit>
	...

08007b94 <__sflush_r>:
 8007b94:	898a      	ldrh	r2, [r1, #12]
 8007b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b98:	4605      	mov	r5, r0
 8007b9a:	0710      	lsls	r0, r2, #28
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	d457      	bmi.n	8007c50 <__sflush_r+0xbc>
 8007ba0:	684b      	ldr	r3, [r1, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	dc04      	bgt.n	8007bb0 <__sflush_r+0x1c>
 8007ba6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dc01      	bgt.n	8007bb0 <__sflush_r+0x1c>
 8007bac:	2000      	movs	r0, #0
 8007bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bb2:	2e00      	cmp	r6, #0
 8007bb4:	d0fa      	beq.n	8007bac <__sflush_r+0x18>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bbc:	682f      	ldr	r7, [r5, #0]
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	d032      	beq.n	8007c28 <__sflush_r+0x94>
 8007bc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	075a      	lsls	r2, r3, #29
 8007bc8:	d505      	bpl.n	8007bd6 <__sflush_r+0x42>
 8007bca:	6863      	ldr	r3, [r4, #4]
 8007bcc:	1ac0      	subs	r0, r0, r3
 8007bce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bd0:	b10b      	cbz	r3, 8007bd6 <__sflush_r+0x42>
 8007bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bd4:	1ac0      	subs	r0, r0, r3
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	4602      	mov	r2, r0
 8007bda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bdc:	4628      	mov	r0, r5
 8007bde:	6a21      	ldr	r1, [r4, #32]
 8007be0:	47b0      	blx	r6
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	d106      	bne.n	8007bf6 <__sflush_r+0x62>
 8007be8:	6829      	ldr	r1, [r5, #0]
 8007bea:	291d      	cmp	r1, #29
 8007bec:	d82c      	bhi.n	8007c48 <__sflush_r+0xb4>
 8007bee:	4a29      	ldr	r2, [pc, #164]	; (8007c94 <__sflush_r+0x100>)
 8007bf0:	40ca      	lsrs	r2, r1
 8007bf2:	07d6      	lsls	r6, r2, #31
 8007bf4:	d528      	bpl.n	8007c48 <__sflush_r+0xb4>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	6062      	str	r2, [r4, #4]
 8007bfa:	6922      	ldr	r2, [r4, #16]
 8007bfc:	04d9      	lsls	r1, r3, #19
 8007bfe:	6022      	str	r2, [r4, #0]
 8007c00:	d504      	bpl.n	8007c0c <__sflush_r+0x78>
 8007c02:	1c42      	adds	r2, r0, #1
 8007c04:	d101      	bne.n	8007c0a <__sflush_r+0x76>
 8007c06:	682b      	ldr	r3, [r5, #0]
 8007c08:	b903      	cbnz	r3, 8007c0c <__sflush_r+0x78>
 8007c0a:	6560      	str	r0, [r4, #84]	; 0x54
 8007c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c0e:	602f      	str	r7, [r5, #0]
 8007c10:	2900      	cmp	r1, #0
 8007c12:	d0cb      	beq.n	8007bac <__sflush_r+0x18>
 8007c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c18:	4299      	cmp	r1, r3
 8007c1a:	d002      	beq.n	8007c22 <__sflush_r+0x8e>
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f7ff faa5 	bl	800716c <_free_r>
 8007c22:	2000      	movs	r0, #0
 8007c24:	6360      	str	r0, [r4, #52]	; 0x34
 8007c26:	e7c2      	b.n	8007bae <__sflush_r+0x1a>
 8007c28:	6a21      	ldr	r1, [r4, #32]
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b0      	blx	r6
 8007c30:	1c41      	adds	r1, r0, #1
 8007c32:	d1c7      	bne.n	8007bc4 <__sflush_r+0x30>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0c4      	beq.n	8007bc4 <__sflush_r+0x30>
 8007c3a:	2b1d      	cmp	r3, #29
 8007c3c:	d001      	beq.n	8007c42 <__sflush_r+0xae>
 8007c3e:	2b16      	cmp	r3, #22
 8007c40:	d101      	bne.n	8007c46 <__sflush_r+0xb2>
 8007c42:	602f      	str	r7, [r5, #0]
 8007c44:	e7b2      	b.n	8007bac <__sflush_r+0x18>
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c4c:	81a3      	strh	r3, [r4, #12]
 8007c4e:	e7ae      	b.n	8007bae <__sflush_r+0x1a>
 8007c50:	690f      	ldr	r7, [r1, #16]
 8007c52:	2f00      	cmp	r7, #0
 8007c54:	d0aa      	beq.n	8007bac <__sflush_r+0x18>
 8007c56:	0793      	lsls	r3, r2, #30
 8007c58:	bf18      	it	ne
 8007c5a:	2300      	movne	r3, #0
 8007c5c:	680e      	ldr	r6, [r1, #0]
 8007c5e:	bf08      	it	eq
 8007c60:	694b      	ldreq	r3, [r1, #20]
 8007c62:	1bf6      	subs	r6, r6, r7
 8007c64:	600f      	str	r7, [r1, #0]
 8007c66:	608b      	str	r3, [r1, #8]
 8007c68:	2e00      	cmp	r6, #0
 8007c6a:	dd9f      	ble.n	8007bac <__sflush_r+0x18>
 8007c6c:	4633      	mov	r3, r6
 8007c6e:	463a      	mov	r2, r7
 8007c70:	4628      	mov	r0, r5
 8007c72:	6a21      	ldr	r1, [r4, #32]
 8007c74:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007c78:	47e0      	blx	ip
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	dc06      	bgt.n	8007c8c <__sflush_r+0xf8>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c88:	81a3      	strh	r3, [r4, #12]
 8007c8a:	e790      	b.n	8007bae <__sflush_r+0x1a>
 8007c8c:	4407      	add	r7, r0
 8007c8e:	1a36      	subs	r6, r6, r0
 8007c90:	e7ea      	b.n	8007c68 <__sflush_r+0xd4>
 8007c92:	bf00      	nop
 8007c94:	20400001 	.word	0x20400001

08007c98 <_fflush_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	690b      	ldr	r3, [r1, #16]
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	b913      	cbnz	r3, 8007ca8 <_fflush_r+0x10>
 8007ca2:	2500      	movs	r5, #0
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	b118      	cbz	r0, 8007cb2 <_fflush_r+0x1a>
 8007caa:	6983      	ldr	r3, [r0, #24]
 8007cac:	b90b      	cbnz	r3, 8007cb2 <_fflush_r+0x1a>
 8007cae:	f000 f887 	bl	8007dc0 <__sinit>
 8007cb2:	4b14      	ldr	r3, [pc, #80]	; (8007d04 <_fflush_r+0x6c>)
 8007cb4:	429c      	cmp	r4, r3
 8007cb6:	d11b      	bne.n	8007cf0 <_fflush_r+0x58>
 8007cb8:	686c      	ldr	r4, [r5, #4]
 8007cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0ef      	beq.n	8007ca2 <_fflush_r+0xa>
 8007cc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cc4:	07d0      	lsls	r0, r2, #31
 8007cc6:	d404      	bmi.n	8007cd2 <_fflush_r+0x3a>
 8007cc8:	0599      	lsls	r1, r3, #22
 8007cca:	d402      	bmi.n	8007cd2 <_fflush_r+0x3a>
 8007ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cce:	f000 f915 	bl	8007efc <__retarget_lock_acquire_recursive>
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	f7ff ff5d 	bl	8007b94 <__sflush_r>
 8007cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cdc:	4605      	mov	r5, r0
 8007cde:	07da      	lsls	r2, r3, #31
 8007ce0:	d4e0      	bmi.n	8007ca4 <_fflush_r+0xc>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	059b      	lsls	r3, r3, #22
 8007ce6:	d4dd      	bmi.n	8007ca4 <_fflush_r+0xc>
 8007ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cea:	f000 f908 	bl	8007efe <__retarget_lock_release_recursive>
 8007cee:	e7d9      	b.n	8007ca4 <_fflush_r+0xc>
 8007cf0:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <_fflush_r+0x70>)
 8007cf2:	429c      	cmp	r4, r3
 8007cf4:	d101      	bne.n	8007cfa <_fflush_r+0x62>
 8007cf6:	68ac      	ldr	r4, [r5, #8]
 8007cf8:	e7df      	b.n	8007cba <_fflush_r+0x22>
 8007cfa:	4b04      	ldr	r3, [pc, #16]	; (8007d0c <_fflush_r+0x74>)
 8007cfc:	429c      	cmp	r4, r3
 8007cfe:	bf08      	it	eq
 8007d00:	68ec      	ldreq	r4, [r5, #12]
 8007d02:	e7da      	b.n	8007cba <_fflush_r+0x22>
 8007d04:	08008674 	.word	0x08008674
 8007d08:	08008694 	.word	0x08008694
 8007d0c:	08008654 	.word	0x08008654

08007d10 <std>:
 8007d10:	2300      	movs	r3, #0
 8007d12:	b510      	push	{r4, lr}
 8007d14:	4604      	mov	r4, r0
 8007d16:	e9c0 3300 	strd	r3, r3, [r0]
 8007d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d1e:	6083      	str	r3, [r0, #8]
 8007d20:	8181      	strh	r1, [r0, #12]
 8007d22:	6643      	str	r3, [r0, #100]	; 0x64
 8007d24:	81c2      	strh	r2, [r0, #14]
 8007d26:	6183      	str	r3, [r0, #24]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	2208      	movs	r2, #8
 8007d2c:	305c      	adds	r0, #92	; 0x5c
 8007d2e:	f7fb fddb 	bl	80038e8 <memset>
 8007d32:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <std+0x38>)
 8007d34:	6224      	str	r4, [r4, #32]
 8007d36:	6263      	str	r3, [r4, #36]	; 0x24
 8007d38:	4b04      	ldr	r3, [pc, #16]	; (8007d4c <std+0x3c>)
 8007d3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d3c:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <std+0x40>)
 8007d3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d40:	4b04      	ldr	r3, [pc, #16]	; (8007d54 <std+0x44>)
 8007d42:	6323      	str	r3, [r4, #48]	; 0x30
 8007d44:	bd10      	pop	{r4, pc}
 8007d46:	bf00      	nop
 8007d48:	08008065 	.word	0x08008065
 8007d4c:	08008087 	.word	0x08008087
 8007d50:	080080bf 	.word	0x080080bf
 8007d54:	080080e3 	.word	0x080080e3

08007d58 <_cleanup_r>:
 8007d58:	4901      	ldr	r1, [pc, #4]	; (8007d60 <_cleanup_r+0x8>)
 8007d5a:	f000 b8af 	b.w	8007ebc <_fwalk_reent>
 8007d5e:	bf00      	nop
 8007d60:	08007c99 	.word	0x08007c99

08007d64 <__sfmoreglue>:
 8007d64:	2268      	movs	r2, #104	; 0x68
 8007d66:	b570      	push	{r4, r5, r6, lr}
 8007d68:	1e4d      	subs	r5, r1, #1
 8007d6a:	4355      	muls	r5, r2
 8007d6c:	460e      	mov	r6, r1
 8007d6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d72:	f7ff fa63 	bl	800723c <_malloc_r>
 8007d76:	4604      	mov	r4, r0
 8007d78:	b140      	cbz	r0, 8007d8c <__sfmoreglue+0x28>
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	e9c0 1600 	strd	r1, r6, [r0]
 8007d80:	300c      	adds	r0, #12
 8007d82:	60a0      	str	r0, [r4, #8]
 8007d84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d88:	f7fb fdae 	bl	80038e8 <memset>
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}

08007d90 <__sfp_lock_acquire>:
 8007d90:	4801      	ldr	r0, [pc, #4]	; (8007d98 <__sfp_lock_acquire+0x8>)
 8007d92:	f000 b8b3 	b.w	8007efc <__retarget_lock_acquire_recursive>
 8007d96:	bf00      	nop
 8007d98:	20000359 	.word	0x20000359

08007d9c <__sfp_lock_release>:
 8007d9c:	4801      	ldr	r0, [pc, #4]	; (8007da4 <__sfp_lock_release+0x8>)
 8007d9e:	f000 b8ae 	b.w	8007efe <__retarget_lock_release_recursive>
 8007da2:	bf00      	nop
 8007da4:	20000359 	.word	0x20000359

08007da8 <__sinit_lock_acquire>:
 8007da8:	4801      	ldr	r0, [pc, #4]	; (8007db0 <__sinit_lock_acquire+0x8>)
 8007daa:	f000 b8a7 	b.w	8007efc <__retarget_lock_acquire_recursive>
 8007dae:	bf00      	nop
 8007db0:	2000035a 	.word	0x2000035a

08007db4 <__sinit_lock_release>:
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <__sinit_lock_release+0x8>)
 8007db6:	f000 b8a2 	b.w	8007efe <__retarget_lock_release_recursive>
 8007dba:	bf00      	nop
 8007dbc:	2000035a 	.word	0x2000035a

08007dc0 <__sinit>:
 8007dc0:	b510      	push	{r4, lr}
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	f7ff fff0 	bl	8007da8 <__sinit_lock_acquire>
 8007dc8:	69a3      	ldr	r3, [r4, #24]
 8007dca:	b11b      	cbz	r3, 8007dd4 <__sinit+0x14>
 8007dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd0:	f7ff bff0 	b.w	8007db4 <__sinit_lock_release>
 8007dd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007dd8:	6523      	str	r3, [r4, #80]	; 0x50
 8007dda:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <__sinit+0x68>)
 8007ddc:	4a13      	ldr	r2, [pc, #76]	; (8007e2c <__sinit+0x6c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007de2:	42a3      	cmp	r3, r4
 8007de4:	bf08      	it	eq
 8007de6:	2301      	moveq	r3, #1
 8007de8:	4620      	mov	r0, r4
 8007dea:	bf08      	it	eq
 8007dec:	61a3      	streq	r3, [r4, #24]
 8007dee:	f000 f81f 	bl	8007e30 <__sfp>
 8007df2:	6060      	str	r0, [r4, #4]
 8007df4:	4620      	mov	r0, r4
 8007df6:	f000 f81b 	bl	8007e30 <__sfp>
 8007dfa:	60a0      	str	r0, [r4, #8]
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f000 f817 	bl	8007e30 <__sfp>
 8007e02:	2200      	movs	r2, #0
 8007e04:	2104      	movs	r1, #4
 8007e06:	60e0      	str	r0, [r4, #12]
 8007e08:	6860      	ldr	r0, [r4, #4]
 8007e0a:	f7ff ff81 	bl	8007d10 <std>
 8007e0e:	2201      	movs	r2, #1
 8007e10:	2109      	movs	r1, #9
 8007e12:	68a0      	ldr	r0, [r4, #8]
 8007e14:	f7ff ff7c 	bl	8007d10 <std>
 8007e18:	2202      	movs	r2, #2
 8007e1a:	2112      	movs	r1, #18
 8007e1c:	68e0      	ldr	r0, [r4, #12]
 8007e1e:	f7ff ff77 	bl	8007d10 <std>
 8007e22:	2301      	movs	r3, #1
 8007e24:	61a3      	str	r3, [r4, #24]
 8007e26:	e7d1      	b.n	8007dcc <__sinit+0xc>
 8007e28:	08008210 	.word	0x08008210
 8007e2c:	08007d59 	.word	0x08007d59

08007e30 <__sfp>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	4607      	mov	r7, r0
 8007e34:	f7ff ffac 	bl	8007d90 <__sfp_lock_acquire>
 8007e38:	4b1e      	ldr	r3, [pc, #120]	; (8007eb4 <__sfp+0x84>)
 8007e3a:	681e      	ldr	r6, [r3, #0]
 8007e3c:	69b3      	ldr	r3, [r6, #24]
 8007e3e:	b913      	cbnz	r3, 8007e46 <__sfp+0x16>
 8007e40:	4630      	mov	r0, r6
 8007e42:	f7ff ffbd 	bl	8007dc0 <__sinit>
 8007e46:	3648      	adds	r6, #72	; 0x48
 8007e48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	d503      	bpl.n	8007e58 <__sfp+0x28>
 8007e50:	6833      	ldr	r3, [r6, #0]
 8007e52:	b30b      	cbz	r3, 8007e98 <__sfp+0x68>
 8007e54:	6836      	ldr	r6, [r6, #0]
 8007e56:	e7f7      	b.n	8007e48 <__sfp+0x18>
 8007e58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e5c:	b9d5      	cbnz	r5, 8007e94 <__sfp+0x64>
 8007e5e:	4b16      	ldr	r3, [pc, #88]	; (8007eb8 <__sfp+0x88>)
 8007e60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e64:	60e3      	str	r3, [r4, #12]
 8007e66:	6665      	str	r5, [r4, #100]	; 0x64
 8007e68:	f000 f847 	bl	8007efa <__retarget_lock_init_recursive>
 8007e6c:	f7ff ff96 	bl	8007d9c <__sfp_lock_release>
 8007e70:	2208      	movs	r2, #8
 8007e72:	4629      	mov	r1, r5
 8007e74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e7c:	6025      	str	r5, [r4, #0]
 8007e7e:	61a5      	str	r5, [r4, #24]
 8007e80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e84:	f7fb fd30 	bl	80038e8 <memset>
 8007e88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e90:	4620      	mov	r0, r4
 8007e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e94:	3468      	adds	r4, #104	; 0x68
 8007e96:	e7d9      	b.n	8007e4c <__sfp+0x1c>
 8007e98:	2104      	movs	r1, #4
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	f7ff ff62 	bl	8007d64 <__sfmoreglue>
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	6030      	str	r0, [r6, #0]
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d1d5      	bne.n	8007e54 <__sfp+0x24>
 8007ea8:	f7ff ff78 	bl	8007d9c <__sfp_lock_release>
 8007eac:	230c      	movs	r3, #12
 8007eae:	603b      	str	r3, [r7, #0]
 8007eb0:	e7ee      	b.n	8007e90 <__sfp+0x60>
 8007eb2:	bf00      	nop
 8007eb4:	08008210 	.word	0x08008210
 8007eb8:	ffff0001 	.word	0xffff0001

08007ebc <_fwalk_reent>:
 8007ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	4688      	mov	r8, r1
 8007ec4:	2700      	movs	r7, #0
 8007ec6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007eca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ece:	f1b9 0901 	subs.w	r9, r9, #1
 8007ed2:	d505      	bpl.n	8007ee0 <_fwalk_reent+0x24>
 8007ed4:	6824      	ldr	r4, [r4, #0]
 8007ed6:	2c00      	cmp	r4, #0
 8007ed8:	d1f7      	bne.n	8007eca <_fwalk_reent+0xe>
 8007eda:	4638      	mov	r0, r7
 8007edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee0:	89ab      	ldrh	r3, [r5, #12]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d907      	bls.n	8007ef6 <_fwalk_reent+0x3a>
 8007ee6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eea:	3301      	adds	r3, #1
 8007eec:	d003      	beq.n	8007ef6 <_fwalk_reent+0x3a>
 8007eee:	4629      	mov	r1, r5
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	47c0      	blx	r8
 8007ef4:	4307      	orrs	r7, r0
 8007ef6:	3568      	adds	r5, #104	; 0x68
 8007ef8:	e7e9      	b.n	8007ece <_fwalk_reent+0x12>

08007efa <__retarget_lock_init_recursive>:
 8007efa:	4770      	bx	lr

08007efc <__retarget_lock_acquire_recursive>:
 8007efc:	4770      	bx	lr

08007efe <__retarget_lock_release_recursive>:
 8007efe:	4770      	bx	lr

08007f00 <__swhatbuf_r>:
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	460e      	mov	r6, r1
 8007f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f08:	4614      	mov	r4, r2
 8007f0a:	2900      	cmp	r1, #0
 8007f0c:	461d      	mov	r5, r3
 8007f0e:	b096      	sub	sp, #88	; 0x58
 8007f10:	da08      	bge.n	8007f24 <__swhatbuf_r+0x24>
 8007f12:	2200      	movs	r2, #0
 8007f14:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f18:	602a      	str	r2, [r5, #0]
 8007f1a:	061a      	lsls	r2, r3, #24
 8007f1c:	d410      	bmi.n	8007f40 <__swhatbuf_r+0x40>
 8007f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f22:	e00e      	b.n	8007f42 <__swhatbuf_r+0x42>
 8007f24:	466a      	mov	r2, sp
 8007f26:	f000 f903 	bl	8008130 <_fstat_r>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	dbf1      	blt.n	8007f12 <__swhatbuf_r+0x12>
 8007f2e:	9a01      	ldr	r2, [sp, #4]
 8007f30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f38:	425a      	negs	r2, r3
 8007f3a:	415a      	adcs	r2, r3
 8007f3c:	602a      	str	r2, [r5, #0]
 8007f3e:	e7ee      	b.n	8007f1e <__swhatbuf_r+0x1e>
 8007f40:	2340      	movs	r3, #64	; 0x40
 8007f42:	2000      	movs	r0, #0
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	b016      	add	sp, #88	; 0x58
 8007f48:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f4c <__smakebuf_r>:
 8007f4c:	898b      	ldrh	r3, [r1, #12]
 8007f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f50:	079d      	lsls	r5, r3, #30
 8007f52:	4606      	mov	r6, r0
 8007f54:	460c      	mov	r4, r1
 8007f56:	d507      	bpl.n	8007f68 <__smakebuf_r+0x1c>
 8007f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	6123      	str	r3, [r4, #16]
 8007f60:	2301      	movs	r3, #1
 8007f62:	6163      	str	r3, [r4, #20]
 8007f64:	b002      	add	sp, #8
 8007f66:	bd70      	pop	{r4, r5, r6, pc}
 8007f68:	466a      	mov	r2, sp
 8007f6a:	ab01      	add	r3, sp, #4
 8007f6c:	f7ff ffc8 	bl	8007f00 <__swhatbuf_r>
 8007f70:	9900      	ldr	r1, [sp, #0]
 8007f72:	4605      	mov	r5, r0
 8007f74:	4630      	mov	r0, r6
 8007f76:	f7ff f961 	bl	800723c <_malloc_r>
 8007f7a:	b948      	cbnz	r0, 8007f90 <__smakebuf_r+0x44>
 8007f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f80:	059a      	lsls	r2, r3, #22
 8007f82:	d4ef      	bmi.n	8007f64 <__smakebuf_r+0x18>
 8007f84:	f023 0303 	bic.w	r3, r3, #3
 8007f88:	f043 0302 	orr.w	r3, r3, #2
 8007f8c:	81a3      	strh	r3, [r4, #12]
 8007f8e:	e7e3      	b.n	8007f58 <__smakebuf_r+0xc>
 8007f90:	4b0d      	ldr	r3, [pc, #52]	; (8007fc8 <__smakebuf_r+0x7c>)
 8007f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	6020      	str	r0, [r4, #0]
 8007f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	9b00      	ldr	r3, [sp, #0]
 8007fa0:	6120      	str	r0, [r4, #16]
 8007fa2:	6163      	str	r3, [r4, #20]
 8007fa4:	9b01      	ldr	r3, [sp, #4]
 8007fa6:	b15b      	cbz	r3, 8007fc0 <__smakebuf_r+0x74>
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fae:	f000 f8d1 	bl	8008154 <_isatty_r>
 8007fb2:	b128      	cbz	r0, 8007fc0 <__smakebuf_r+0x74>
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	f023 0303 	bic.w	r3, r3, #3
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	81a3      	strh	r3, [r4, #12]
 8007fc0:	89a0      	ldrh	r0, [r4, #12]
 8007fc2:	4305      	orrs	r5, r0
 8007fc4:	81a5      	strh	r5, [r4, #12]
 8007fc6:	e7cd      	b.n	8007f64 <__smakebuf_r+0x18>
 8007fc8:	08007d59 	.word	0x08007d59

08007fcc <_malloc_usable_size_r>:
 8007fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fd0:	1f18      	subs	r0, r3, #4
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bfbc      	itt	lt
 8007fd6:	580b      	ldrlt	r3, [r1, r0]
 8007fd8:	18c0      	addlt	r0, r0, r3
 8007fda:	4770      	bx	lr

08007fdc <_raise_r>:
 8007fdc:	291f      	cmp	r1, #31
 8007fde:	b538      	push	{r3, r4, r5, lr}
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	460d      	mov	r5, r1
 8007fe4:	d904      	bls.n	8007ff0 <_raise_r+0x14>
 8007fe6:	2316      	movs	r3, #22
 8007fe8:	6003      	str	r3, [r0, #0]
 8007fea:	f04f 30ff 	mov.w	r0, #4294967295
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ff2:	b112      	cbz	r2, 8007ffa <_raise_r+0x1e>
 8007ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ff8:	b94b      	cbnz	r3, 800800e <_raise_r+0x32>
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f000 f830 	bl	8008060 <_getpid_r>
 8008000:	462a      	mov	r2, r5
 8008002:	4601      	mov	r1, r0
 8008004:	4620      	mov	r0, r4
 8008006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800800a:	f000 b817 	b.w	800803c <_kill_r>
 800800e:	2b01      	cmp	r3, #1
 8008010:	d00a      	beq.n	8008028 <_raise_r+0x4c>
 8008012:	1c59      	adds	r1, r3, #1
 8008014:	d103      	bne.n	800801e <_raise_r+0x42>
 8008016:	2316      	movs	r3, #22
 8008018:	6003      	str	r3, [r0, #0]
 800801a:	2001      	movs	r0, #1
 800801c:	e7e7      	b.n	8007fee <_raise_r+0x12>
 800801e:	2400      	movs	r4, #0
 8008020:	4628      	mov	r0, r5
 8008022:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008026:	4798      	blx	r3
 8008028:	2000      	movs	r0, #0
 800802a:	e7e0      	b.n	8007fee <_raise_r+0x12>

0800802c <raise>:
 800802c:	4b02      	ldr	r3, [pc, #8]	; (8008038 <raise+0xc>)
 800802e:	4601      	mov	r1, r0
 8008030:	6818      	ldr	r0, [r3, #0]
 8008032:	f7ff bfd3 	b.w	8007fdc <_raise_r>
 8008036:	bf00      	nop
 8008038:	2000000c 	.word	0x2000000c

0800803c <_kill_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	2300      	movs	r3, #0
 8008040:	4d06      	ldr	r5, [pc, #24]	; (800805c <_kill_r+0x20>)
 8008042:	4604      	mov	r4, r0
 8008044:	4608      	mov	r0, r1
 8008046:	4611      	mov	r1, r2
 8008048:	602b      	str	r3, [r5, #0]
 800804a:	f7f9 f98e 	bl	800136a <_kill>
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	d102      	bne.n	8008058 <_kill_r+0x1c>
 8008052:	682b      	ldr	r3, [r5, #0]
 8008054:	b103      	cbz	r3, 8008058 <_kill_r+0x1c>
 8008056:	6023      	str	r3, [r4, #0]
 8008058:	bd38      	pop	{r3, r4, r5, pc}
 800805a:	bf00      	nop
 800805c:	20000354 	.word	0x20000354

08008060 <_getpid_r>:
 8008060:	f7f9 b97c 	b.w	800135c <_getpid>

08008064 <__sread>:
 8008064:	b510      	push	{r4, lr}
 8008066:	460c      	mov	r4, r1
 8008068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806c:	f000 f894 	bl	8008198 <_read_r>
 8008070:	2800      	cmp	r0, #0
 8008072:	bfab      	itete	ge
 8008074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008076:	89a3      	ldrhlt	r3, [r4, #12]
 8008078:	181b      	addge	r3, r3, r0
 800807a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800807e:	bfac      	ite	ge
 8008080:	6563      	strge	r3, [r4, #84]	; 0x54
 8008082:	81a3      	strhlt	r3, [r4, #12]
 8008084:	bd10      	pop	{r4, pc}

08008086 <__swrite>:
 8008086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808a:	461f      	mov	r7, r3
 800808c:	898b      	ldrh	r3, [r1, #12]
 800808e:	4605      	mov	r5, r0
 8008090:	05db      	lsls	r3, r3, #23
 8008092:	460c      	mov	r4, r1
 8008094:	4616      	mov	r6, r2
 8008096:	d505      	bpl.n	80080a4 <__swrite+0x1e>
 8008098:	2302      	movs	r3, #2
 800809a:	2200      	movs	r2, #0
 800809c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a0:	f000 f868 	bl	8008174 <_lseek_r>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	4632      	mov	r2, r6
 80080a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	4628      	mov	r0, r5
 80080b0:	463b      	mov	r3, r7
 80080b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ba:	f000 b817 	b.w	80080ec <_write_r>

080080be <__sseek>:
 80080be:	b510      	push	{r4, lr}
 80080c0:	460c      	mov	r4, r1
 80080c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c6:	f000 f855 	bl	8008174 <_lseek_r>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	bf15      	itete	ne
 80080d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80080d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080da:	81a3      	strheq	r3, [r4, #12]
 80080dc:	bf18      	it	ne
 80080de:	81a3      	strhne	r3, [r4, #12]
 80080e0:	bd10      	pop	{r4, pc}

080080e2 <__sclose>:
 80080e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e6:	f000 b813 	b.w	8008110 <_close_r>
	...

080080ec <_write_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	2200      	movs	r2, #0
 80080f6:	4d05      	ldr	r5, [pc, #20]	; (800810c <_write_r+0x20>)
 80080f8:	602a      	str	r2, [r5, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f7f9 f96c 	bl	80013d8 <_write>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d102      	bne.n	800810a <_write_r+0x1e>
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	b103      	cbz	r3, 800810a <_write_r+0x1e>
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	20000354 	.word	0x20000354

08008110 <_close_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	2300      	movs	r3, #0
 8008114:	4d05      	ldr	r5, [pc, #20]	; (800812c <_close_r+0x1c>)
 8008116:	4604      	mov	r4, r0
 8008118:	4608      	mov	r0, r1
 800811a:	602b      	str	r3, [r5, #0]
 800811c:	f7f9 f978 	bl	8001410 <_close>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_close_r+0x1a>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_close_r+0x1a>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	20000354 	.word	0x20000354

08008130 <_fstat_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	2300      	movs	r3, #0
 8008134:	4d06      	ldr	r5, [pc, #24]	; (8008150 <_fstat_r+0x20>)
 8008136:	4604      	mov	r4, r0
 8008138:	4608      	mov	r0, r1
 800813a:	4611      	mov	r1, r2
 800813c:	602b      	str	r3, [r5, #0]
 800813e:	f7f9 f972 	bl	8001426 <_fstat>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	d102      	bne.n	800814c <_fstat_r+0x1c>
 8008146:	682b      	ldr	r3, [r5, #0]
 8008148:	b103      	cbz	r3, 800814c <_fstat_r+0x1c>
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	bf00      	nop
 8008150:	20000354 	.word	0x20000354

08008154 <_isatty_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	2300      	movs	r3, #0
 8008158:	4d05      	ldr	r5, [pc, #20]	; (8008170 <_isatty_r+0x1c>)
 800815a:	4604      	mov	r4, r0
 800815c:	4608      	mov	r0, r1
 800815e:	602b      	str	r3, [r5, #0]
 8008160:	f7f9 f970 	bl	8001444 <_isatty>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_isatty_r+0x1a>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_isatty_r+0x1a>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	20000354 	.word	0x20000354

08008174 <_lseek_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	2200      	movs	r2, #0
 800817e:	4d05      	ldr	r5, [pc, #20]	; (8008194 <_lseek_r+0x20>)
 8008180:	602a      	str	r2, [r5, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	f7f9 f968 	bl	8001458 <_lseek>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d102      	bne.n	8008192 <_lseek_r+0x1e>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	b103      	cbz	r3, 8008192 <_lseek_r+0x1e>
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	20000354 	.word	0x20000354

08008198 <_read_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	4611      	mov	r1, r2
 80081a0:	2200      	movs	r2, #0
 80081a2:	4d05      	ldr	r5, [pc, #20]	; (80081b8 <_read_r+0x20>)
 80081a4:	602a      	str	r2, [r5, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f7f9 f8f9 	bl	800139e <_read>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_read_r+0x1e>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_read_r+0x1e>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	20000354 	.word	0x20000354

080081bc <_init>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr

080081c8 <_fini>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr
