
Imp_catch_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cfc  08003cfc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003cfc  08003cfc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cfc  08003cfc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000070  08003d74  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003d74  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab12  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afc  00000000  00000000  0002abab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002c6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b3b  00000000  00000000  0002de60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c437  00000000  00000000  0004599b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a742  00000000  00000000  00051dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc514  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f8  00000000  00000000  000dc564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c78 	.word	0x08003c78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003c78 	.word	0x08003c78

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <DWT_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DWT_Init(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000160:	4b07      	ldr	r3, [pc, #28]	; (8000180 <DWT_Init+0x24>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a06      	ldr	r2, [pc, #24]	; (8000180 <DWT_Init+0x24>)
 8000166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800016a:	6013      	str	r3, [r2, #0]
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 800016c:	4b05      	ldr	r3, [pc, #20]	; (8000184 <DWT_Init+0x28>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	4a04      	ldr	r2, [pc, #16]	; (8000184 <DWT_Init+0x28>)
 8000172:	f043 0301 	orr.w	r3, r3, #1
 8000176:	6013      	str	r3, [r2, #0]
}
 8000178:	bf00      	nop
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000edfc 	.word	0xe000edfc
 8000184:	e0001000 	.word	0xe0001000

08000188 <delay_us>:

void delay_us(uint32_t us)
{
 8000188:	b480      	push	{r7}
 800018a:	b085      	sub	sp, #20
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000190:	4b0c      	ldr	r3, [pc, #48]	; (80001c4 <delay_us+0x3c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a0c      	ldr	r2, [pc, #48]	; (80001c8 <delay_us+0x40>)
 8000196:	fba2 2303 	umull	r2, r3, r2, r3
 800019a:	0c9a      	lsrs	r2, r3, #18
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	fb02 f303 	mul.w	r3, r2, r3
 80001a2:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 80001a4:	4b09      	ldr	r3, [pc, #36]	; (80001cc <delay_us+0x44>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 80001aa:	bf00      	nop
 80001ac:	4b07      	ldr	r3, [pc, #28]	; (80001cc <delay_us+0x44>)
 80001ae:	685b      	ldr	r3, [r3, #4]
 80001b0:	68fa      	ldr	r2, [r7, #12]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d8fa      	bhi.n	80001ac <delay_us+0x24>
}
 80001b6:	bf00      	nop
 80001b8:	bf00      	nop
 80001ba:	3714      	adds	r7, #20
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	20000000 	.word	0x20000000
 80001c8:	431bde83 	.word	0x431bde83
 80001cc:	e0001000 	.word	0xe0001000

080001d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // переполнение таймеров
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80001e0:	d106      	bne.n	80001f0 <HAL_TIM_PeriodElapsedCallback+0x20>
        {
                count_overflow++;
 80001e2:	4b1a      	ldr	r3, [pc, #104]	; (800024c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	3301      	adds	r3, #1
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	4b17      	ldr	r3, [pc, #92]	; (800024c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80001ee:	701a      	strb	r2, [r3, #0]
        }

        if(htim == &htim1)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a17      	ldr	r2, [pc, #92]	; (8000250 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d125      	bne.n	8000244 <HAL_TIM_PeriodElapsedCallback+0x74>
        {
                T = (Ti / N);
 80001f8:	4b16      	ldr	r3, [pc, #88]	; (8000254 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	4b16      	ldr	r3, [pc, #88]	; (8000258 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	fbb2 f3f3 	udiv	r3, r2, r3
 8000204:	4a15      	ldr	r2, [pc, #84]	; (800025c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000206:	6013      	str	r3, [r2, #0]

                snprintf(trans_str, 96, "Pulse %lu mks\n", falling);
 8000208:	4b15      	ldr	r3, [pc, #84]	; (8000260 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a15      	ldr	r2, [pc, #84]	; (8000264 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800020e:	2160      	movs	r1, #96	; 0x60
 8000210:	4815      	ldr	r0, [pc, #84]	; (8000268 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000212:	f003 f8a3 	bl	800335c <sniprintf>
                //snprintf(trans_str, 96, "Freq %lu Hz\n", 1000000/T);
                HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000216:	4814      	ldr	r0, [pc, #80]	; (8000268 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000218:	f7ff ff98 	bl	800014c <strlen>
 800021c:	4603      	mov	r3, r0
 800021e:	b29a      	uxth	r2, r3
 8000220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000224:	4910      	ldr	r1, [pc, #64]	; (8000268 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000226:	4811      	ldr	r0, [pc, #68]	; (800026c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000228:	f002 fbdb 	bl	80029e2 <HAL_UART_Transmit>

                Ti = 0;
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
                N = 0;
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]

                HAL_TIM_Base_Stop_IT(&htim1);
 8000238:	4805      	ldr	r0, [pc, #20]	; (8000250 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800023a:	f001 fc4d 	bl	8001ad8 <HAL_TIM_Base_Stop_IT>
                HAL_TIM_Base_Start_IT(&htim1);
 800023e:	4804      	ldr	r0, [pc, #16]	; (8000250 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000240:	f001 fbf8 	bl	8001a34 <HAL_TIM_Base_Start_IT>
        }
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001d0 	.word	0x200001d0
 8000250:	2000008c 	.word	0x2000008c
 8000254:	200001c4 	.word	0x200001c4
 8000258:	200001cc 	.word	0x200001cc
 800025c:	200001c8 	.word	0x200001c8
 8000260:	200001c0 	.word	0x200001c0
 8000264:	08003c90 	.word	0x08003c90
 8000268:	20000160 	.word	0x20000160
 800026c:	2000011c 	.word	0x2000011c

08000270 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // таймер измерения импульсов
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000280:	d12b      	bne.n	80002da <HAL_TIM_IC_CaptureCallback+0x6a>
    {
            if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // RISING с LOW на HIGH
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	7f1b      	ldrb	r3, [r3, #28]
 8000286:	2b01      	cmp	r3, #1
 8000288:	d107      	bne.n	800029a <HAL_TIM_IC_CaptureCallback+0x2a>
            {
            	 	__HAL_TIM_SET_COUNTER(&htim2, 0x0000); // обнуление счётчика
 800028a:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x74>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2200      	movs	r2, #0
 8000290:	625a      	str	r2, [r3, #36]	; 0x24
                    count_overflow = 0; // обнуляем переменную
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
 8000298:	e013      	b.n	80002c2 <HAL_TIM_IC_CaptureCallback+0x52>
            }

            else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // FALLING с HIGH на LOW
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	7f1b      	ldrb	r3, [r3, #28]
 800029e:	2b02      	cmp	r3, #2
 80002a0:	d10f      	bne.n	80002c2 <HAL_TIM_IC_CaptureCallback+0x52>
            {
            		falling = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2) + (__HAL_TIM_GET_AUTORELOAD(&htim2) * count_overflow); // чтение значения в регистре захвата/сравнения
 80002a2:	2104      	movs	r1, #4
 80002a4:	480f      	ldr	r0, [pc, #60]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x74>)
 80002a6:	f002 f855 	bl	8002354 <HAL_TIM_ReadCapturedValue>
 80002aa:	4602      	mov	r2, r0
 80002ac:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x74>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <HAL_TIM_IC_CaptureCallback+0x78>)
 80002b4:	7809      	ldrb	r1, [r1, #0]
 80002b6:	b2c9      	uxtb	r1, r1
 80002b8:	fb01 f303 	mul.w	r3, r1, r3
 80002bc:	4413      	add	r3, r2
 80002be:	4a0b      	ldr	r2, [pc, #44]	; (80002ec <HAL_TIM_IC_CaptureCallback+0x7c>)
 80002c0:	6013      	str	r3, [r2, #0]

            }
            Ti = Ti + falling;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <HAL_TIM_IC_CaptureCallback+0x80>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <HAL_TIM_IC_CaptureCallback+0x7c>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4413      	add	r3, r2
 80002cc:	4a08      	ldr	r2, [pc, #32]	; (80002f0 <HAL_TIM_IC_CaptureCallback+0x80>)
 80002ce:	6013      	str	r3, [r2, #0]
            N++;
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <HAL_TIM_IC_CaptureCallback+0x84>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <HAL_TIM_IC_CaptureCallback+0x84>)
 80002d8:	6013      	str	r3, [r2, #0]
    }
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	200000d4 	.word	0x200000d4
 80002e8:	200001d0 	.word	0x200001d0
 80002ec:	200001c0 	.word	0x200001c0
 80002f0:	200001c4 	.word	0x200001c4
 80002f4:	200001cc 	.word	0x200001cc

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fc:	f000 fb50 	bl	80009a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8000300:	f7ff ff2c 	bl	800015c <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000304:	f000 f830 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000308:	f000 f95a 	bl	80005c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800030c:	f000 f92e 	bl	800056c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000310:	f000 f8ca 	bl	80004a8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000314:	f000 f86e 	bl	80003f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000318:	4810      	ldr	r0, [pc, #64]	; (800035c <main+0x64>)
 800031a:	f001 fb8b 	bl	8001a34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800031e:	4810      	ldr	r0, [pc, #64]	; (8000360 <main+0x68>)
 8000320:	f001 fb88 	bl	8001a34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000324:	2100      	movs	r1, #0
 8000326:	480e      	ldr	r0, [pc, #56]	; (8000360 <main+0x68>)
 8000328:	f001 fc54 	bl	8001bd4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800032c:	2104      	movs	r1, #4
 800032e:	480c      	ldr	r0, [pc, #48]	; (8000360 <main+0x68>)
 8000330:	f001 fc50 	bl	8001bd4 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033a:	480a      	ldr	r0, [pc, #40]	; (8000364 <main+0x6c>)
 800033c:	f000 fef8 	bl	8001130 <HAL_GPIO_WritePin>
	  delay_us(3);
 8000340:	2003      	movs	r0, #3
 8000342:	f7ff ff21 	bl	8000188 <delay_us>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800034c:	4805      	ldr	r0, [pc, #20]	; (8000364 <main+0x6c>)
 800034e:	f000 feef 	bl	8001130 <HAL_GPIO_WritePin>
      HAL_Delay(30);
 8000352:	201e      	movs	r0, #30
 8000354:	f000 fb86 	bl	8000a64 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000358:	e7ec      	b.n	8000334 <main+0x3c>
 800035a:	bf00      	nop
 800035c:	2000008c 	.word	0x2000008c
 8000360:	200000d4 	.word	0x200000d4
 8000364:	40010800 	.word	0x40010800

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	; 0x40
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2228      	movs	r2, #40	; 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f002 ffe8 	bl	800334c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038a:	2301      	movs	r3, #1
 800038c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800038e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000392:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000398:	2301      	movs	r3, #1
 800039a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039c:	2302      	movs	r3, #2
 800039e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ac:	f107 0318 	add.w	r3, r7, #24
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fed5 	bl	8001160 <HAL_RCC_OscConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003bc:	f000 f940 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	230f      	movs	r3, #15
 80003c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c4:	2302      	movs	r3, #2
 80003c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 f942 	bl	8001664 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003e6:	f000 f92b 	bl	8000640 <Error_Handler>
  }
}
 80003ea:	bf00      	nop
 80003ec:	3740      	adds	r7, #64	; 0x40
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000408:	463b      	mov	r3, r7
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000410:	4b23      	ldr	r3, [pc, #140]	; (80004a0 <MX_TIM1_Init+0xac>)
 8000412:	4a24      	ldr	r2, [pc, #144]	; (80004a4 <MX_TIM1_Init+0xb0>)
 8000414:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8000416:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <MX_TIM1_Init+0xac>)
 8000418:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800041c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800041e:	4b20      	ldr	r3, [pc, #128]	; (80004a0 <MX_TIM1_Init+0xac>)
 8000420:	2210      	movs	r2, #16
 8000422:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <MX_TIM1_Init+0xac>)
 8000426:	f242 720f 	movw	r2, #9999	; 0x270f
 800042a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <MX_TIM1_Init+0xac>)
 800042e:	2200      	movs	r2, #0
 8000430:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000432:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <MX_TIM1_Init+0xac>)
 8000434:	2200      	movs	r2, #0
 8000436:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000438:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <MX_TIM1_Init+0xac>)
 800043a:	2200      	movs	r2, #0
 800043c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800043e:	4818      	ldr	r0, [pc, #96]	; (80004a0 <MX_TIM1_Init+0xac>)
 8000440:	f001 faa8 	bl	8001994 <HAL_TIM_Base_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800044a:	f000 f8f9 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800044e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000452:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000454:	f107 0308 	add.w	r3, r7, #8
 8000458:	4619      	mov	r1, r3
 800045a:	4811      	ldr	r0, [pc, #68]	; (80004a0 <MX_TIM1_Init+0xac>)
 800045c:	f001 feb5 	bl	80021ca <HAL_TIM_ConfigClockSource>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000466:	f000 f8eb 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800046a:	2108      	movs	r1, #8
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <MX_TIM1_Init+0xac>)
 800046e:	f001 fcb7 	bl	8001de0 <HAL_TIM_OnePulse_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000478:	f000 f8e2 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800047c:	2310      	movs	r3, #16
 800047e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000480:	2380      	movs	r3, #128	; 0x80
 8000482:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000484:	463b      	mov	r3, r7
 8000486:	4619      	mov	r1, r3
 8000488:	4805      	ldr	r0, [pc, #20]	; (80004a0 <MX_TIM1_Init+0xac>)
 800048a:	f002 f9ed 	bl	8002868 <HAL_TIMEx_MasterConfigSynchronization>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000494:	f000 f8d4 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000498:	bf00      	nop
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	2000008c 	.word	0x2000008c
 80004a4:	40012c00 	.word	0x40012c00

080004a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004b8:	463b      	mov	r3, r7
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004c4:	4b28      	ldr	r3, [pc, #160]	; (8000568 <MX_TIM2_Init+0xc0>)
 80004c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80004cc:	4b26      	ldr	r3, [pc, #152]	; (8000568 <MX_TIM2_Init+0xc0>)
 80004ce:	2247      	movs	r2, #71	; 0x47
 80004d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <MX_TIM2_Init+0xc0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 80004d8:	4b23      	ldr	r3, [pc, #140]	; (8000568 <MX_TIM2_Init+0xc0>)
 80004da:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80004de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e0:	4b21      	ldr	r3, [pc, #132]	; (8000568 <MX_TIM2_Init+0xc0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <MX_TIM2_Init+0xc0>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80004ec:	481e      	ldr	r0, [pc, #120]	; (8000568 <MX_TIM2_Init+0xc0>)
 80004ee:	f001 fb21 	bl	8001b34 <HAL_TIM_IC_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004f8:	f000 f8a2 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	4619      	mov	r1, r3
 800050a:	4817      	ldr	r0, [pc, #92]	; (8000568 <MX_TIM2_Init+0xc0>)
 800050c:	f002 f9ac 	bl	8002868 <HAL_TIMEx_MasterConfigSynchronization>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000516:	f000 f893 	bl	8000640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800051e:	2301      	movs	r3, #1
 8000520:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800052a:	463b      	mov	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	4619      	mov	r1, r3
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <MX_TIM2_Init+0xc0>)
 8000532:	f001 fdb6 	bl	80020a2 <HAL_TIM_IC_ConfigChannel>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800053c:	f000 f880 	bl	8000640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000540:	2302      	movs	r3, #2
 8000542:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000544:	2302      	movs	r3, #2
 8000546:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	2204      	movs	r2, #4
 800054c:	4619      	mov	r1, r3
 800054e:	4806      	ldr	r0, [pc, #24]	; (8000568 <MX_TIM2_Init+0xc0>)
 8000550:	f001 fda7 	bl	80020a2 <HAL_TIM_IC_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800055a:	f000 f871 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000d4 	.word	0x200000d4

0800056c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <MX_USART1_UART_Init+0x50>)
 8000574:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 8000578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800057c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 8000592:	220c      	movs	r2, #12
 8000594:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_USART1_UART_Init+0x4c>)
 80005a4:	f002 f9d0 	bl	8002948 <HAL_UART_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005ae:	f000 f847 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	2000011c 	.word	0x2000011c
 80005bc:	40013800 	.word	0x40013800

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_GPIO_Init+0x78>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a17      	ldr	r2, [pc, #92]	; (8000638 <MX_GPIO_Init+0x78>)
 80005da:	f043 0320 	orr.w	r3, r3, #32
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_GPIO_Init+0x78>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0320 	and.w	r3, r3, #32
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_GPIO_Init+0x78>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a11      	ldr	r2, [pc, #68]	; (8000638 <MX_GPIO_Init+0x78>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_GPIO_Init+0x78>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060a:	480c      	ldr	r0, [pc, #48]	; (800063c <MX_GPIO_Init+0x7c>)
 800060c:	f000 fd90 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000614:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2302      	movs	r3, #2
 8000620:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4619      	mov	r1, r3
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_GPIO_Init+0x7c>)
 800062a:	f000 fbfd 	bl	8000e28 <HAL_GPIO_Init>

}
 800062e:	bf00      	nop
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_MspInit+0x5c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <HAL_MspInit+0x5c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_MspInit+0x5c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x5c>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_MspInit+0x5c>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_MspInit+0x5c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_MspInit+0x60>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_MspInit+0x60>)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010000 	.word	0x40010000

080006b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a11      	ldr	r2, [pc, #68]	; (8000704 <HAL_TIM_Base_MspInit+0x54>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d11b      	bne.n	80006fa <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <HAL_TIM_Base_MspInit+0x58>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4a10      	ldr	r2, [pc, #64]	; (8000708 <HAL_TIM_Base_MspInit+0x58>)
 80006c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006cc:	6193      	str	r3, [r2, #24]
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <HAL_TIM_Base_MspInit+0x58>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2019      	movs	r0, #25
 80006e0:	f000 fabb 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006e4:	2019      	movs	r0, #25
 80006e6:	f000 fad4 	bl	8000c92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	201b      	movs	r0, #27
 80006f0:	f000 fab3 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80006f4:	201b      	movs	r0, #27
 80006f6:	f000 facc 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40012c00 	.word	0x40012c00
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800072a:	d12b      	bne.n	8000784 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <HAL_TIM_IC_MspInit+0x80>)
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <HAL_TIM_IC_MspInit+0x80>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	61d3      	str	r3, [r2, #28]
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_TIM_IC_MspInit+0x80>)
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_TIM_IC_MspInit+0x80>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <HAL_TIM_IC_MspInit+0x80>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <HAL_TIM_IC_MspInit+0x80>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800075c:	2301      	movs	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4808      	ldr	r0, [pc, #32]	; (8000790 <HAL_TIM_IC_MspInit+0x84>)
 8000770:	f000 fb5a 	bl	8000e28 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	201c      	movs	r0, #28
 800077a:	f000 fa6e 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800077e:	201c      	movs	r0, #28
 8000780:	f000 fa87 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	40010800 	.word	0x40010800

08000794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a20      	ldr	r2, [pc, #128]	; (8000830 <HAL_UART_MspInit+0x9c>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d139      	bne.n	8000828 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <HAL_UART_MspInit+0xa0>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <HAL_UART_MspInit+0xa0>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <HAL_UART_MspInit+0xa0>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <HAL_UART_MspInit+0xa0>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a18      	ldr	r2, [pc, #96]	; (8000834 <HAL_UART_MspInit+0xa0>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_UART_MspInit+0xa0>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	4619      	mov	r1, r3
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <HAL_UART_MspInit+0xa4>)
 80007fa:	f000 fb15 	bl	8000e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <HAL_UART_MspInit+0xa4>)
 8000814:	f000 fb08 	bl	8000e28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2025      	movs	r0, #37	; 0x25
 800081e:	f000 fa1c 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000822:	2025      	movs	r0, #37	; 0x25
 8000824:	f000 fa35 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40013800 	.word	0x40013800
 8000834:	40021000 	.word	0x40021000
 8000838:	40010800 	.word	0x40010800

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <NMI_Handler+0x4>

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler+0x4>

0800084e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <UsageFault_Handler+0x4>

0800085a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000882:	f000 f8d3 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <TIM1_UP_IRQHandler+0x10>)
 8000892:	f001 fafe 	bl	8001e92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000008c 	.word	0x2000008c

080008a0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <TIM1_CC_IRQHandler+0x10>)
 80008a6:	f001 faf4 	bl	8001e92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000008c 	.word	0x2000008c

080008b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <TIM2_IRQHandler+0x10>)
 80008ba:	f001 faea 	bl	8001e92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000d4 	.word	0x200000d4

080008c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <USART1_IRQHandler+0x10>)
 80008ce:	f002 f91b 	bl	8002b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000011c 	.word	0x2000011c

080008dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <_sbrk+0x5c>)
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <_sbrk+0x60>)
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <_sbrk+0x64>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <_sbrk+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800090c:	f002 fcf4 	bl	80032f8 <__errno>
 8000910:	4603      	mov	r3, r0
 8000912:	220c      	movs	r2, #12
 8000914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	e009      	b.n	8000930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <_sbrk+0x64>)
 800092c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20005000 	.word	0x20005000
 800093c:	00000400 	.word	0x00000400
 8000940:	200001d4 	.word	0x200001d4
 8000944:	200001f0 	.word	0x200001f0

08000948 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800097a:	f7ff ffe5 	bl	8000948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097e:	f002 fcc1 	bl	8003304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000982:	f7ff fcb9 	bl	80002f8 <main>
  bx lr
 8000986:	4770      	bx	lr
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000990:	08003d04 	.word	0x08003d04
  ldr r2, =_sbss
 8000994:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000998:	200001ec 	.word	0x200001ec

0800099c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_2_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_Init+0x28>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_Init+0x28>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f947 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	200f      	movs	r0, #15
 80009b8:	f000 f808 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff fe46 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40022000 	.word	0x40022000

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x54>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x58>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f95f 	bl	8000cae <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f000 f927 	bl	8000c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_InitTick+0x5c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_IncTick+0x1c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_IncTick+0x20>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <HAL_IncTick+0x20>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	200001d8 	.word	0x200001d8

08000a50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <HAL_GetTick+0x10>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	200001d8 	.word	0x200001d8

08000a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a6c:	f7ff fff0 	bl	8000a50 <HAL_GetTick>
 8000a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7c:	d005      	beq.n	8000a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_Delay+0x44>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a8a:	bf00      	nop
 8000a8c:	f7ff ffe0 	bl	8000a50 <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d8f7      	bhi.n	8000a8c <HAL_Delay+0x28>
  {
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4906      	ldr	r1, [pc, #24]	; (8000b44 <__NVIC_EnableIRQ+0x34>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f7ff ff90 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff2d 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6c:	f7ff ff42 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ff90 	bl	8000b9c <NVIC_EncodePriority>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff5f 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff35 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ffa2 	bl	8000c00 <SysTick_Config>
 8000cbc:	4603      	mov	r3, r0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d008      	beq.n	8000cee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2204      	movs	r2, #4
 8000ce0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e020      	b.n	8000d30 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 020e 	bic.w	r2, r2, #14
 8000cfc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 0201 	bic.w	r2, r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
	...

08000d3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d005      	beq.n	8000d5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2204      	movs	r2, #4
 8000d56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e051      	b.n	8000e02 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 020e 	bic.w	r2, r2, #14
 8000d6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0201 	bic.w	r2, r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <HAL_DMA_Abort_IT+0xd0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d029      	beq.n	8000ddc <HAL_DMA_Abort_IT+0xa0>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <HAL_DMA_Abort_IT+0xd4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d022      	beq.n	8000dd8 <HAL_DMA_Abort_IT+0x9c>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <HAL_DMA_Abort_IT+0xd8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d01a      	beq.n	8000dd2 <HAL_DMA_Abort_IT+0x96>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <HAL_DMA_Abort_IT+0xdc>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d012      	beq.n	8000dcc <HAL_DMA_Abort_IT+0x90>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <HAL_DMA_Abort_IT+0xe0>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d00a      	beq.n	8000dc6 <HAL_DMA_Abort_IT+0x8a>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a1a      	ldr	r2, [pc, #104]	; (8000e20 <HAL_DMA_Abort_IT+0xe4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d102      	bne.n	8000dc0 <HAL_DMA_Abort_IT+0x84>
 8000dba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dbe:	e00e      	b.n	8000dde <HAL_DMA_Abort_IT+0xa2>
 8000dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dc4:	e00b      	b.n	8000dde <HAL_DMA_Abort_IT+0xa2>
 8000dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dca:	e008      	b.n	8000dde <HAL_DMA_Abort_IT+0xa2>
 8000dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd0:	e005      	b.n	8000dde <HAL_DMA_Abort_IT+0xa2>
 8000dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd6:	e002      	b.n	8000dde <HAL_DMA_Abort_IT+0xa2>
 8000dd8:	2310      	movs	r3, #16
 8000dda:	e000      	b.n	8000dde <HAL_DMA_Abort_IT+0xa2>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <HAL_DMA_Abort_IT+0xe8>)
 8000de0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	4798      	blx	r3
    } 
  }
  return status;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40020008 	.word	0x40020008
 8000e10:	4002001c 	.word	0x4002001c
 8000e14:	40020030 	.word	0x40020030
 8000e18:	40020044 	.word	0x40020044
 8000e1c:	40020058 	.word	0x40020058
 8000e20:	4002006c 	.word	0x4002006c
 8000e24:	40020000 	.word	0x40020000

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e169      	b.n	8001110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 8158 	bne.w	800110a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	4a9a      	ldr	r2, [pc, #616]	; (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d05e      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e64:	4a98      	ldr	r2, [pc, #608]	; (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d875      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e6a:	4a98      	ldr	r2, [pc, #608]	; (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d058      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e70:	4a96      	ldr	r2, [pc, #600]	; (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d86f      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e76:	4a96      	ldr	r2, [pc, #600]	; (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d052      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e7c:	4a94      	ldr	r2, [pc, #592]	; (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d869      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e82:	4a94      	ldr	r2, [pc, #592]	; (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d04c      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e88:	4a92      	ldr	r2, [pc, #584]	; (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d863      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e8e:	4a92      	ldr	r2, [pc, #584]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d046      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e94:	4a90      	ldr	r2, [pc, #576]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d85d      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d82a      	bhi.n	8000ef4 <HAL_GPIO_Init+0xcc>
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d859      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <HAL_GPIO_Init+0x80>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000f23 	.word	0x08000f23
 8000eac:	08000efd 	.word	0x08000efd
 8000eb0:	08000f0f 	.word	0x08000f0f
 8000eb4:	08000f51 	.word	0x08000f51
 8000eb8:	08000f57 	.word	0x08000f57
 8000ebc:	08000f57 	.word	0x08000f57
 8000ec0:	08000f57 	.word	0x08000f57
 8000ec4:	08000f57 	.word	0x08000f57
 8000ec8:	08000f57 	.word	0x08000f57
 8000ecc:	08000f57 	.word	0x08000f57
 8000ed0:	08000f57 	.word	0x08000f57
 8000ed4:	08000f57 	.word	0x08000f57
 8000ed8:	08000f57 	.word	0x08000f57
 8000edc:	08000f57 	.word	0x08000f57
 8000ee0:	08000f57 	.word	0x08000f57
 8000ee4:	08000f57 	.word	0x08000f57
 8000ee8:	08000f57 	.word	0x08000f57
 8000eec:	08000f05 	.word	0x08000f05
 8000ef0:	08000f19 	.word	0x08000f19
 8000ef4:	4a79      	ldr	r2, [pc, #484]	; (80010dc <HAL_GPIO_Init+0x2b4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000efa:	e02c      	b.n	8000f56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e029      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	623b      	str	r3, [r7, #32]
          break;
 8000f0c:	e024      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	3308      	adds	r3, #8
 8000f14:	623b      	str	r3, [r7, #32]
          break;
 8000f16:	e01f      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	330c      	adds	r3, #12
 8000f1e:	623b      	str	r3, [r7, #32]
          break;
 8000f20:	e01a      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	623b      	str	r3, [r7, #32]
          break;
 8000f2e:	e013      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d105      	bne.n	8000f44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	611a      	str	r2, [r3, #16]
          break;
 8000f42:	e009      	b.n	8000f58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	615a      	str	r2, [r3, #20]
          break;
 8000f4e:	e003      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          break;
 8000f56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2bff      	cmp	r3, #255	; 0xff
 8000f5c:	d801      	bhi.n	8000f62 <HAL_GPIO_Init+0x13a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	e001      	b.n	8000f66 <HAL_GPIO_Init+0x13e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3304      	adds	r3, #4
 8000f66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
 8000f6c:	d802      	bhi.n	8000f74 <HAL_GPIO_Init+0x14c>
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0x152>
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	3b08      	subs	r3, #8
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	210f      	movs	r1, #15
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	6a39      	ldr	r1, [r7, #32]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 80b1 	beq.w	800110a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fc0:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <HAL_GPIO_Init+0x2bc>)
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a40      	ldr	r2, [pc, #256]	; (80010e8 <HAL_GPIO_Init+0x2c0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1ec>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <HAL_GPIO_Init+0x2c4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1e8>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a3e      	ldr	r2, [pc, #248]	; (80010f0 <HAL_GPIO_Init+0x2c8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1e4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a3d      	ldr	r2, [pc, #244]	; (80010f4 <HAL_GPIO_Init+0x2cc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1e0>
 8001004:	2303      	movs	r3, #3
 8001006:	e006      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001008:	2304      	movs	r3, #4
 800100a:	e004      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 800100c:	2302      	movs	r3, #2
 800100e:	e002      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001014:	2300      	movs	r3, #0
 8001016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001018:	f002 0203 	and.w	r2, r2, #3
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	4093      	lsls	r3, r2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001026:	492f      	ldr	r1, [pc, #188]	; (80010e4 <HAL_GPIO_Init+0x2bc>)
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	492c      	ldr	r1, [pc, #176]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	600b      	str	r3, [r1, #0]
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	43db      	mvns	r3, r3
 8001056:	4928      	ldr	r1, [pc, #160]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001058:	4013      	ands	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	4922      	ldr	r1, [pc, #136]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	43db      	mvns	r3, r3
 800107e:	491e      	ldr	r1, [pc, #120]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001080:	4013      	ands	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	4918      	ldr	r1, [pc, #96]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	608b      	str	r3, [r1, #8]
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4914      	ldr	r1, [pc, #80]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d021      	beq.n	80010fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	490e      	ldr	r1, [pc, #56]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	60cb      	str	r3, [r1, #12]
 80010c4:	e021      	b.n	800110a <HAL_GPIO_Init+0x2e2>
 80010c6:	bf00      	nop
 80010c8:	10320000 	.word	0x10320000
 80010cc:	10310000 	.word	0x10310000
 80010d0:	10220000 	.word	0x10220000
 80010d4:	10210000 	.word	0x10210000
 80010d8:	10120000 	.word	0x10120000
 80010dc:	10110000 	.word	0x10110000
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	40011000 	.word	0x40011000
 80010f4:	40011400 	.word	0x40011400
 80010f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_GPIO_Init+0x304>)
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	43db      	mvns	r3, r3
 8001104:	4909      	ldr	r1, [pc, #36]	; (800112c <HAL_GPIO_Init+0x304>)
 8001106:	4013      	ands	r3, r2
 8001108:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	3301      	adds	r3, #1
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	fa22 f303 	lsr.w	r3, r2, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	f47f ae8e 	bne.w	8000e3c <HAL_GPIO_Init+0x14>
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	372c      	adds	r7, #44	; 0x2c
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800114c:	e003      	b.n	8001156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	611a      	str	r2, [r3, #16]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e272      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8087 	beq.w	800128e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001180:	4b92      	ldr	r3, [pc, #584]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 030c 	and.w	r3, r3, #12
 8001188:	2b04      	cmp	r3, #4
 800118a:	d00c      	beq.n	80011a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800118c:	4b8f      	ldr	r3, [pc, #572]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b08      	cmp	r3, #8
 8001196:	d112      	bne.n	80011be <HAL_RCC_OscConfig+0x5e>
 8001198:	4b8c      	ldr	r3, [pc, #560]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d10b      	bne.n	80011be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a6:	4b89      	ldr	r3, [pc, #548]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d06c      	beq.n	800128c <HAL_RCC_OscConfig+0x12c>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d168      	bne.n	800128c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e24c      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x76>
 80011c8:	4b80      	ldr	r3, [pc, #512]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a7f      	ldr	r2, [pc, #508]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e02e      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x98>
 80011de:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a7a      	ldr	r2, [pc, #488]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b78      	ldr	r3, [pc, #480]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a77      	ldr	r2, [pc, #476]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e01d      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0xbc>
 8001202:	4b72      	ldr	r3, [pc, #456]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a71      	ldr	r2, [pc, #452]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b6f      	ldr	r3, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6e      	ldr	r2, [pc, #440]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 800121c:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a6a      	ldr	r2, [pc, #424]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b68      	ldr	r3, [pc, #416]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a67      	ldr	r2, [pc, #412]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fc08 	bl	8000a50 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fc04 	bl	8000a50 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e200      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0xe4>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fbf4 	bl	8000a50 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fbf0 	bl	8000a50 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1ec      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x10c>
 800128a:	e000      	b.n	800128e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d063      	beq.n	8001362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800129a:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d11c      	bne.n	80012ec <HAL_RCC_OscConfig+0x18c>
 80012b2:	4b46      	ldr	r3, [pc, #280]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d116      	bne.n	80012ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	4b43      	ldr	r3, [pc, #268]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x176>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e1c0      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4939      	ldr	r1, [pc, #228]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	e03a      	b.n	8001362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d020      	beq.n	8001336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f4:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HAL_RCC_OscConfig+0x270>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fba9 	bl	8000a50 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fba5 	bl	8000a50 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1a1      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4927      	ldr	r1, [pc, #156]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_RCC_OscConfig+0x270>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fb88 	bl	8000a50 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fb84 	bl	8000a50 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e180      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d03a      	beq.n	80013e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d019      	beq.n	80013aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_RCC_OscConfig+0x274>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fb68 	bl	8000a50 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fb64 	bl	8000a50 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e160      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f000 fad8 	bl	8001958 <RCC_Delay>
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_RCC_OscConfig+0x274>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fb4e 	bl	8000a50 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b6:	e00f      	b.n	80013d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fb4a 	bl	8000a50 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d908      	bls.n	80013d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e146      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	42420000 	.word	0x42420000
 80013d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b92      	ldr	r3, [pc, #584]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e9      	bne.n	80013b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a6 	beq.w	800153e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10d      	bne.n	800141e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a87      	ldr	r2, [pc, #540]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b85      	ldr	r3, [pc, #532]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141e:	4b82      	ldr	r3, [pc, #520]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001426:	2b00      	cmp	r3, #0
 8001428:	d118      	bne.n	800145c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142a:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7e      	ldr	r2, [pc, #504]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001436:	f7ff fb0b 	bl	8000a50 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143e:	f7ff fb07 	bl	8000a50 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e103      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	4b75      	ldr	r3, [pc, #468]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x312>
 8001464:	4b6f      	ldr	r3, [pc, #444]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a6e      	ldr	r2, [pc, #440]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	e02d      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x334>
 800147a:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a69      	ldr	r2, [pc, #420]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a66      	ldr	r2, [pc, #408]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6213      	str	r3, [r2, #32]
 8001492:	e01c      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b05      	cmp	r3, #5
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x356>
 800149c:	4b61      	ldr	r3, [pc, #388]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4a60      	ldr	r2, [pc, #384]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6213      	str	r3, [r2, #32]
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 80014b6:	4b5b      	ldr	r3, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a5a      	ldr	r2, [pc, #360]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	4b58      	ldr	r3, [pc, #352]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a57      	ldr	r2, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d015      	beq.n	8001502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fabb 	bl	8000a50 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fab7 	bl	8000a50 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0b1      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	4b4b      	ldr	r3, [pc, #300]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ee      	beq.n	80014de <HAL_RCC_OscConfig+0x37e>
 8001500:	e014      	b.n	800152c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff faa5 	bl	8000a50 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff faa1 	bl	8000a50 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e09b      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	4b40      	ldr	r3, [pc, #256]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d105      	bne.n	800153e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001532:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a3b      	ldr	r2, [pc, #236]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8087 	beq.w	8001656 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d061      	beq.n	8001618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d146      	bne.n	80015ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff fa75 	bl	8000a50 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff fa71 	bl	8000a50 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e06d      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001590:	d108      	bne.n	80015a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4921      	ldr	r1, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a19      	ldr	r1, [r3, #32]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	430b      	orrs	r3, r1
 80015b6:	491b      	ldr	r1, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fa45 	bl	8000a50 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fa41 	bl	8000a50 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e03d      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x46a>
 80015e8:	e035      	b.n	8001656 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fa2e 	bl	8000a50 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fa2a 	bl	8000a50 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e026      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x498>
 8001616:	e01e      	b.n	8001656 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e019      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
 8001624:	40021000 	.word	0x40021000
 8001628:	40007000 	.word	0x40007000
 800162c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_OscConfig+0x500>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	429a      	cmp	r2, r3
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d001      	beq.n	8001656 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0d0      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d910      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4965      	ldr	r1, [pc, #404]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b8      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	494d      	ldr	r1, [pc, #308]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d040      	beq.n	8001784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d115      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07f      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e073      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4936      	ldr	r1, [pc, #216]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff f97c 	bl	8000a50 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff f978 	bl	8000a50 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e053      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d210      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 0207 	bic.w	r2, r3, #7
 800179a:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e032      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f2:	f000 f821 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f6:	4602      	mov	r2, r0
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	490a      	ldr	r1, [pc, #40]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	5ccb      	ldrb	r3, [r1, r3]
 8001806:	fa22 f303 	lsr.w	r3, r2, r3
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1cc>)
 800180c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1d0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f8da 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	08003cb0 	.word	0x08003cb0
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	b490      	push	{r4, r7}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001840:	1d3c      	adds	r4, r7, #4
 8001842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001848:	f240 2301 	movw	r3, #513	; 0x201
 800184c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x40>
 8001872:	2b08      	cmp	r3, #8
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x46>
 8001876:	e02b      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800187a:	623b      	str	r3, [r7, #32]
      break;
 800187c:	e02b      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3328      	adds	r3, #40	; 0x28
 8001888:	443b      	add	r3, r7
 800188a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800188e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d012      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	0c5b      	lsrs	r3, r3, #17
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	3328      	adds	r3, #40	; 0x28
 80018a6:	443b      	add	r3, r7
 80018a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80018b2:	fb03 f202 	mul.w	r2, r3, r2
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	e004      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	623b      	str	r3, [r7, #32]
      break;
 80018ce:	e002      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80018d2:	623b      	str	r3, [r7, #32]
      break;
 80018d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d6:	6a3b      	ldr	r3, [r7, #32]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc90      	pop	{r4, r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	08003ca0 	.word	0x08003ca0
 80018e8:	40021000 	.word	0x40021000
 80018ec:	007a1200 	.word	0x007a1200
 80018f0:	003d0900 	.word	0x003d0900

080018f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <HAL_RCC_GetHCLKFreq+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff2 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4903      	ldr	r1, [pc, #12]	; (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	08003cc0 	.word	0x08003cc0

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffde 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	0adb      	lsrs	r3, r3, #11
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	08003cc0 	.word	0x08003cc0

08001958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <RCC_Delay+0x34>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <RCC_Delay+0x38>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0a5b      	lsrs	r3, r3, #9
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001974:	bf00      	nop
  }
  while (Delay --);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	60fa      	str	r2, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f9      	bne.n	8001974 <RCC_Delay+0x1c>
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000000 	.word	0x20000000
 8001990:	10624dd3 	.word	0x10624dd3

08001994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e041      	b.n	8001a2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7fe fe78 	bl	80006b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3304      	adds	r3, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	f000 fd1e 	bl	8002414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d001      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e03a      	b.n	8001ac2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a18      	ldr	r2, [pc, #96]	; (8001acc <HAL_TIM_Base_Start_IT+0x98>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00e      	beq.n	8001a8c <HAL_TIM_Base_Start_IT+0x58>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a76:	d009      	beq.n	8001a8c <HAL_TIM_Base_Start_IT+0x58>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d004      	beq.n	8001a8c <HAL_TIM_Base_Start_IT+0x58>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d111      	bne.n	8001ab0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d010      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aae:	e007      	b.n	8001ac0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40012c00 	.word	0x40012c00
 8001ad0:	40000400 	.word	0x40000400
 8001ad4:	40000800 	.word	0x40000800

08001ad8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0201 	bic.w	r2, r2, #1
 8001aee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	f241 1311 	movw	r3, #4369	; 0x1111
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10f      	bne.n	8001b20 <HAL_TIM_Base_Stop_IT+0x48>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6a1a      	ldr	r2, [r3, #32]
 8001b06:	f240 4344 	movw	r3, #1092	; 0x444
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <HAL_TIM_Base_Stop_IT+0x48>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e041      	b.n	8001bca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7fe fdd6 	bl	800070c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f000 fc4e 	bl	8002414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d104      	bne.n	8001bee <HAL_TIM_IC_Start_IT+0x1a>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	e013      	b.n	8001c16 <HAL_TIM_IC_Start_IT+0x42>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d104      	bne.n	8001bfe <HAL_TIM_IC_Start_IT+0x2a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	e00b      	b.n	8001c16 <HAL_TIM_IC_Start_IT+0x42>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d104      	bne.n	8001c0e <HAL_TIM_IC_Start_IT+0x3a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	e003      	b.n	8001c16 <HAL_TIM_IC_Start_IT+0x42>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d104      	bne.n	8001c28 <HAL_TIM_IC_Start_IT+0x54>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	e013      	b.n	8001c50 <HAL_TIM_IC_Start_IT+0x7c>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d104      	bne.n	8001c38 <HAL_TIM_IC_Start_IT+0x64>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	e00b      	b.n	8001c50 <HAL_TIM_IC_Start_IT+0x7c>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d104      	bne.n	8001c48 <HAL_TIM_IC_Start_IT+0x74>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	e003      	b.n	8001c50 <HAL_TIM_IC_Start_IT+0x7c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d102      	bne.n	8001c5e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001c58:	7bbb      	ldrb	r3, [r7, #14]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0b3      	b.n	8001dca <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d104      	bne.n	8001c72 <HAL_TIM_IC_Start_IT+0x9e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c70:	e013      	b.n	8001c9a <HAL_TIM_IC_Start_IT+0xc6>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d104      	bne.n	8001c82 <HAL_TIM_IC_Start_IT+0xae>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c80:	e00b      	b.n	8001c9a <HAL_TIM_IC_Start_IT+0xc6>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d104      	bne.n	8001c92 <HAL_TIM_IC_Start_IT+0xbe>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c90:	e003      	b.n	8001c9a <HAL_TIM_IC_Start_IT+0xc6>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2202      	movs	r2, #2
 8001c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d104      	bne.n	8001caa <HAL_TIM_IC_Start_IT+0xd6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ca8:	e013      	b.n	8001cd2 <HAL_TIM_IC_Start_IT+0xfe>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d104      	bne.n	8001cba <HAL_TIM_IC_Start_IT+0xe6>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cb8:	e00b      	b.n	8001cd2 <HAL_TIM_IC_Start_IT+0xfe>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d104      	bne.n	8001cca <HAL_TIM_IC_Start_IT+0xf6>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc8:	e003      	b.n	8001cd2 <HAL_TIM_IC_Start_IT+0xfe>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	d841      	bhi.n	8001d5c <HAL_TIM_IC_Start_IT+0x188>
 8001cd8:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <HAL_TIM_IC_Start_IT+0x10c>)
 8001cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cde:	bf00      	nop
 8001ce0:	08001d15 	.word	0x08001d15
 8001ce4:	08001d5d 	.word	0x08001d5d
 8001ce8:	08001d5d 	.word	0x08001d5d
 8001cec:	08001d5d 	.word	0x08001d5d
 8001cf0:	08001d27 	.word	0x08001d27
 8001cf4:	08001d5d 	.word	0x08001d5d
 8001cf8:	08001d5d 	.word	0x08001d5d
 8001cfc:	08001d5d 	.word	0x08001d5d
 8001d00:	08001d39 	.word	0x08001d39
 8001d04:	08001d5d 	.word	0x08001d5d
 8001d08:	08001d5d 	.word	0x08001d5d
 8001d0c:	08001d5d 	.word	0x08001d5d
 8001d10:	08001d4b 	.word	0x08001d4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0202 	orr.w	r2, r2, #2
 8001d22:	60da      	str	r2, [r3, #12]
      break;
 8001d24:	e01b      	b.n	8001d5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0204 	orr.w	r2, r2, #4
 8001d34:	60da      	str	r2, [r3, #12]
      break;
 8001d36:	e012      	b.n	8001d5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0208 	orr.w	r2, r2, #8
 8001d46:	60da      	str	r2, [r3, #12]
      break;
 8001d48:	e009      	b.n	8001d5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0210 	orr.w	r2, r2, #16
 8001d58:	60da      	str	r2, [r3, #12]
      break;
 8001d5a:	e000      	b.n	8001d5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8001d5c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	6839      	ldr	r1, [r7, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fd59 	bl	800281e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <HAL_TIM_IC_Start_IT+0x200>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00e      	beq.n	8001d94 <HAL_TIM_IC_Start_IT+0x1c0>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7e:	d009      	beq.n	8001d94 <HAL_TIM_IC_Start_IT+0x1c0>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <HAL_TIM_IC_Start_IT+0x204>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_TIM_IC_Start_IT+0x1c0>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <HAL_TIM_IC_Start_IT+0x208>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d111      	bne.n	8001db8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d010      	beq.n	8001dc8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db6:	e007      	b.n	8001dc8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40000800 	.word	0x40000800

08001de0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e041      	b.n	8001e78 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f839 	bl	8001e80 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4610      	mov	r0, r2
 8001e22:	f000 faf7 	bl	8002414 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0208 	bic.w	r2, r2, #8
 8001e34:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6819      	ldr	r1, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d122      	bne.n	8001eee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d11b      	bne.n	8001eee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f06f 0202 	mvn.w	r2, #2
 8001ebe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7fe f9cb 	bl	8000270 <HAL_TIM_IC_CaptureCallback>
 8001eda:	e005      	b.n	8001ee8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fa7d 	bl	80023dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fa83 	bl	80023ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d122      	bne.n	8001f42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d11b      	bne.n	8001f42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f06f 0204 	mvn.w	r2, #4
 8001f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7fe f9a1 	bl	8000270 <HAL_TIM_IC_CaptureCallback>
 8001f2e:	e005      	b.n	8001f3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fa53 	bl	80023dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fa59 	bl	80023ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d122      	bne.n	8001f96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d11b      	bne.n	8001f96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f06f 0208 	mvn.w	r2, #8
 8001f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7fe f977 	bl	8000270 <HAL_TIM_IC_CaptureCallback>
 8001f82:	e005      	b.n	8001f90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fa29 	bl	80023dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fa2f 	bl	80023ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d122      	bne.n	8001fea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d11b      	bne.n	8001fea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f06f 0210 	mvn.w	r2, #16
 8001fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2208      	movs	r2, #8
 8001fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7fe f94d 	bl	8000270 <HAL_TIM_IC_CaptureCallback>
 8001fd6:	e005      	b.n	8001fe4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f9ff 	bl	80023dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fa05 	bl	80023ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10e      	bne.n	8002016 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d107      	bne.n	8002016 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 0201 	mvn.w	r2, #1
 800200e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7fe f8dd 	bl	80001d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d10e      	bne.n	8002042 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	2b80      	cmp	r3, #128	; 0x80
 8002030:	d107      	bne.n	8002042 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800203a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fc7a 	bl	8002936 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204c:	2b40      	cmp	r3, #64	; 0x40
 800204e:	d10e      	bne.n	800206e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205a:	2b40      	cmp	r3, #64	; 0x40
 800205c:	d107      	bne.n	800206e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f9c9 	bl	8002400 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b20      	cmp	r3, #32
 800207a:	d10e      	bne.n	800209a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b20      	cmp	r3, #32
 8002088:	d107      	bne.n	800209a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f06f 0220 	mvn.w	r2, #32
 8002092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fc45 	bl	8002924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_TIM_IC_ConfigChannel+0x1a>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e082      	b.n	80021c2 <HAL_TIM_IC_ConfigChannel+0x120>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d11b      	bne.n	8002102 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	6819      	ldr	r1, [r3, #0]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f000 f9fd 	bl	80024d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 020c 	bic.w	r2, r2, #12
 80020ec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6999      	ldr	r1, [r3, #24]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	619a      	str	r2, [r3, #24]
 8002100:	e05a      	b.n	80021b8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b04      	cmp	r3, #4
 8002106:	d11c      	bne.n	8002142 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	6819      	ldr	r1, [r3, #0]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f000 fa66 	bl	80025e8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699a      	ldr	r2, [r3, #24]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800212a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6999      	ldr	r1, [r3, #24]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	021a      	lsls	r2, r3, #8
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	619a      	str	r2, [r3, #24]
 8002140:	e03a      	b.n	80021b8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b08      	cmp	r3, #8
 8002146:	d11b      	bne.n	8002180 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	6819      	ldr	r1, [r3, #0]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f000 fab1 	bl	80026be <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 020c 	bic.w	r2, r2, #12
 800216a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69d9      	ldr	r1, [r3, #28]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	61da      	str	r2, [r3, #28]
 800217e:	e01b      	b.n	80021b8 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	6819      	ldr	r1, [r3, #0]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f000 fad0 	bl	8002734 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80021a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69d9      	ldr	r1, [r3, #28]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	021a      	lsls	r2, r3, #8
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_TIM_ConfigClockSource+0x18>
 80021de:	2302      	movs	r3, #2
 80021e0:	e0b3      	b.n	800234a <HAL_TIM_ConfigClockSource+0x180>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2202      	movs	r2, #2
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002200:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002208:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800221a:	d03e      	beq.n	800229a <HAL_TIM_ConfigClockSource+0xd0>
 800221c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002220:	f200 8087 	bhi.w	8002332 <HAL_TIM_ConfigClockSource+0x168>
 8002224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002228:	f000 8085 	beq.w	8002336 <HAL_TIM_ConfigClockSource+0x16c>
 800222c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002230:	d87f      	bhi.n	8002332 <HAL_TIM_ConfigClockSource+0x168>
 8002232:	2b70      	cmp	r3, #112	; 0x70
 8002234:	d01a      	beq.n	800226c <HAL_TIM_ConfigClockSource+0xa2>
 8002236:	2b70      	cmp	r3, #112	; 0x70
 8002238:	d87b      	bhi.n	8002332 <HAL_TIM_ConfigClockSource+0x168>
 800223a:	2b60      	cmp	r3, #96	; 0x60
 800223c:	d050      	beq.n	80022e0 <HAL_TIM_ConfigClockSource+0x116>
 800223e:	2b60      	cmp	r3, #96	; 0x60
 8002240:	d877      	bhi.n	8002332 <HAL_TIM_ConfigClockSource+0x168>
 8002242:	2b50      	cmp	r3, #80	; 0x50
 8002244:	d03c      	beq.n	80022c0 <HAL_TIM_ConfigClockSource+0xf6>
 8002246:	2b50      	cmp	r3, #80	; 0x50
 8002248:	d873      	bhi.n	8002332 <HAL_TIM_ConfigClockSource+0x168>
 800224a:	2b40      	cmp	r3, #64	; 0x40
 800224c:	d058      	beq.n	8002300 <HAL_TIM_ConfigClockSource+0x136>
 800224e:	2b40      	cmp	r3, #64	; 0x40
 8002250:	d86f      	bhi.n	8002332 <HAL_TIM_ConfigClockSource+0x168>
 8002252:	2b30      	cmp	r3, #48	; 0x30
 8002254:	d064      	beq.n	8002320 <HAL_TIM_ConfigClockSource+0x156>
 8002256:	2b30      	cmp	r3, #48	; 0x30
 8002258:	d86b      	bhi.n	8002332 <HAL_TIM_ConfigClockSource+0x168>
 800225a:	2b20      	cmp	r3, #32
 800225c:	d060      	beq.n	8002320 <HAL_TIM_ConfigClockSource+0x156>
 800225e:	2b20      	cmp	r3, #32
 8002260:	d867      	bhi.n	8002332 <HAL_TIM_ConfigClockSource+0x168>
 8002262:	2b00      	cmp	r3, #0
 8002264:	d05c      	beq.n	8002320 <HAL_TIM_ConfigClockSource+0x156>
 8002266:	2b10      	cmp	r3, #16
 8002268:	d05a      	beq.n	8002320 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800226a:	e062      	b.n	8002332 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6899      	ldr	r1, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f000 fab0 	bl	80027e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800228e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]
      break;
 8002298:	e04e      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6899      	ldr	r1, [r3, #8]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f000 fa99 	bl	80027e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022bc:	609a      	str	r2, [r3, #8]
      break;
 80022be:	e03b      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	461a      	mov	r2, r3
 80022ce:	f000 f95d 	bl	800258c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2150      	movs	r1, #80	; 0x50
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fa67 	bl	80027ac <TIM_ITRx_SetConfig>
      break;
 80022de:	e02b      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	461a      	mov	r2, r3
 80022ee:	f000 f9b7 	bl	8002660 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2160      	movs	r1, #96	; 0x60
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fa57 	bl	80027ac <TIM_ITRx_SetConfig>
      break;
 80022fe:	e01b      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	461a      	mov	r2, r3
 800230e:	f000 f93d 	bl	800258c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fa47 	bl	80027ac <TIM_ITRx_SetConfig>
      break;
 800231e:	e00b      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f000 fa3e 	bl	80027ac <TIM_ITRx_SetConfig>
        break;
 8002330:	e002      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002332:	bf00      	nop
 8002334:	e000      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d831      	bhi.n	80023cc <HAL_TIM_ReadCapturedValue+0x78>
 8002368:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <HAL_TIM_ReadCapturedValue+0x1c>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	080023a5 	.word	0x080023a5
 8002374:	080023cd 	.word	0x080023cd
 8002378:	080023cd 	.word	0x080023cd
 800237c:	080023cd 	.word	0x080023cd
 8002380:	080023af 	.word	0x080023af
 8002384:	080023cd 	.word	0x080023cd
 8002388:	080023cd 	.word	0x080023cd
 800238c:	080023cd 	.word	0x080023cd
 8002390:	080023b9 	.word	0x080023b9
 8002394:	080023cd 	.word	0x080023cd
 8002398:	080023cd 	.word	0x080023cd
 800239c:	080023cd 	.word	0x080023cd
 80023a0:	080023c3 	.word	0x080023c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	60fb      	str	r3, [r7, #12]

      break;
 80023ac:	e00f      	b.n	80023ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	60fb      	str	r3, [r7, #12]

      break;
 80023b6:	e00a      	b.n	80023ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	60fb      	str	r3, [r7, #12]

      break;
 80023c0:	e005      	b.n	80023ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	60fb      	str	r3, [r7, #12]

      break;
 80023ca:	e000      	b.n	80023ce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80023cc:	bf00      	nop
  }

  return tmpreg;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop

080023dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
	...

08002414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a29      	ldr	r2, [pc, #164]	; (80024cc <TIM_Base_SetConfig+0xb8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00b      	beq.n	8002444 <TIM_Base_SetConfig+0x30>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002432:	d007      	beq.n	8002444 <TIM_Base_SetConfig+0x30>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <TIM_Base_SetConfig+0xbc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d003      	beq.n	8002444 <TIM_Base_SetConfig+0x30>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <TIM_Base_SetConfig+0xc0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d108      	bne.n	8002456 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <TIM_Base_SetConfig+0xb8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00b      	beq.n	8002476 <TIM_Base_SetConfig+0x62>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002464:	d007      	beq.n	8002476 <TIM_Base_SetConfig+0x62>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a19      	ldr	r2, [pc, #100]	; (80024d0 <TIM_Base_SetConfig+0xbc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d003      	beq.n	8002476 <TIM_Base_SetConfig+0x62>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a18      	ldr	r2, [pc, #96]	; (80024d4 <TIM_Base_SetConfig+0xc0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d108      	bne.n	8002488 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a07      	ldr	r2, [pc, #28]	; (80024cc <TIM_Base_SetConfig+0xb8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d103      	bne.n	80024bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	615a      	str	r2, [r3, #20]
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40000800 	.word	0x40000800

080024d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	f023 0201 	bic.w	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <TIM_TI1_SetConfig+0xa8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00b      	beq.n	800251e <TIM_TI1_SetConfig+0x46>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250c:	d007      	beq.n	800251e <TIM_TI1_SetConfig+0x46>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <TIM_TI1_SetConfig+0xac>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <TIM_TI1_SetConfig+0x46>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <TIM_TI1_SetConfig+0xb0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <TIM_TI1_SetConfig+0x4a>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <TIM_TI1_SetConfig+0x4c>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	e003      	b.n	8002542 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	b2db      	uxtb	r3, r3
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f023 030a 	bic.w	r3, r3, #10
 800255c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f003 030a 	and.w	r3, r3, #10
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	621a      	str	r2, [r3, #32]
}
 8002576:	bf00      	nop
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800

0800258c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	f023 0201 	bic.w	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f023 030a 	bic.w	r3, r3, #10
 80025c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	621a      	str	r2, [r3, #32]
}
 80025de:	bf00      	nop
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	f023 0210 	bic.w	r2, r3, #16
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002626:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	031b      	lsls	r3, r3, #12
 800262c:	b29b      	uxth	r3, r3
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800263a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	621a      	str	r2, [r3, #32]
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f023 0210 	bic.w	r2, r3, #16
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800268a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	031b      	lsls	r3, r3, #12
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800269c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	621a      	str	r2, [r3, #32]
}
 80026b4:	bf00      	nop
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80026be:	b480      	push	{r7}
 80026c0:	b087      	sub	sp, #28
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f023 0303 	bic.w	r3, r3, #3
 80026ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	b2db      	uxtb	r3, r3
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800270e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	621a      	str	r2, [r3, #32]
}
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002760:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002772:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	031b      	lsls	r3, r3, #12
 8002778:	b29b      	uxth	r3, r3
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002786:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	031b      	lsls	r3, r3, #12
 800278c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	621a      	str	r2, [r3, #32]
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f043 0307 	orr.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	609a      	str	r2, [r3, #8]
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	021a      	lsls	r2, r3, #8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	431a      	orrs	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4313      	orrs	r3, r2
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	609a      	str	r2, [r3, #8]
}
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800281e:	b480      	push	{r7}
 8002820:	b087      	sub	sp, #28
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2201      	movs	r2, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a1a      	ldr	r2, [r3, #32]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	43db      	mvns	r3, r3
 8002840:	401a      	ands	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a1a      	ldr	r2, [r3, #32]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	431a      	orrs	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	621a      	str	r2, [r3, #32]
}
 800285c:	bf00      	nop
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
	...

08002868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800287c:	2302      	movs	r3, #2
 800287e:	e046      	b.n	800290e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a16      	ldr	r2, [pc, #88]	; (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00e      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028cc:	d009      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a12      	ldr	r2, [pc, #72]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a10      	ldr	r2, [pc, #64]	; (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10c      	bne.n	80028fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40000400 	.word	0x40000400
 8002920:	40000800 	.word	0x40000800

08002924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e03f      	b.n	80029da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fd ff10 	bl	8000794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fc25 	bl	80031dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b08a      	sub	sp, #40	; 0x28
 80029e6:	af02      	add	r7, sp, #8
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d17c      	bne.n	8002afc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <HAL_UART_Transmit+0x2c>
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e075      	b.n	8002afe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_UART_Transmit+0x3e>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e06e      	b.n	8002afe <HAL_UART_Transmit+0x11c>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2221      	movs	r2, #33	; 0x21
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a36:	f7fe f80b 	bl	8000a50 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	88fa      	ldrh	r2, [r7, #6]
 8002a46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a50:	d108      	bne.n	8002a64 <HAL_UART_Transmit+0x82>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e003      	b.n	8002a6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a74:	e02a      	b.n	8002acc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fa11 	bl	8002ea8 <UART_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e036      	b.n	8002afe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	e007      	b.n	8002abe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3301      	adds	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1cf      	bne.n	8002a76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2140      	movs	r1, #64	; 0x40
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f9e1 	bl	8002ea8 <UART_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e006      	b.n	8002afe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_UART_IRQHandler+0x52>
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fa99 	bl	800308a <UART_Receive_IT>
      return;
 8002b58:	e17b      	b.n	8002e52 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80b1 	beq.w	8002cc4 <HAL_UART_IRQHandler+0x1bc>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_UART_IRQHandler+0x70>
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80a6 	beq.w	8002cc4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_UART_IRQHandler+0x90>
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_UART_IRQHandler+0xb0>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f043 0202 	orr.w	r2, r3, #2
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_UART_IRQHandler+0xd0>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f043 0204 	orr.w	r2, r3, #4
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00f      	beq.n	8002c02 <HAL_UART_IRQHandler+0xfa>
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_UART_IRQHandler+0xee>
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f043 0208 	orr.w	r2, r3, #8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 811e 	beq.w	8002e48 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_UART_IRQHandler+0x11e>
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fa32 	bl	800308a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf14      	ite	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	2300      	moveq	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <HAL_UART_IRQHandler+0x146>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d031      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f974 	bl	8002f3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d023      	beq.n	8002caa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d013      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	4a76      	ldr	r2, [pc, #472]	; (8002e58 <HAL_UART_IRQHandler+0x350>)
 8002c80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe f858 	bl	8000d3c <HAL_DMA_Abort_IT>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca0:	e00e      	b.n	8002cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8ec 	bl	8002e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca8:	e00a      	b.n	8002cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8e8 	bl	8002e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	e006      	b.n	8002cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8e4 	bl	8002e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002cbe:	e0c3      	b.n	8002e48 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc0:	bf00      	nop
    return;
 8002cc2:	e0c1      	b.n	8002e48 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	f040 80a1 	bne.w	8002e10 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 809b 	beq.w	8002e10 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8095 	beq.w	8002e10 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d04e      	beq.n	8002da8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002d14:	8a3b      	ldrh	r3, [r7, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8098 	beq.w	8002e4c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d20:	8a3a      	ldrh	r2, [r7, #16]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	f080 8092 	bcs.w	8002e4c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8a3a      	ldrh	r2, [r7, #16]
 8002d2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d02b      	beq.n	8002d90 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d46:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d66:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0210 	bic.w	r2, r2, #16
 8002d84:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd ff9b 	bl	8000cc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f876 	bl	8002e92 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002da6:	e051      	b.n	8002e4c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d047      	beq.n	8002e50 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002dc0:	8a7b      	ldrh	r3, [r7, #18]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d044      	beq.n	8002e50 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002dd4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0210 	bic.w	r2, r2, #16
 8002e02:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e04:	8a7b      	ldrh	r3, [r7, #18]
 8002e06:	4619      	mov	r1, r3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f842 	bl	8002e92 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e0e:	e01f      	b.n	8002e50 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_UART_IRQHandler+0x324>
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f8c9 	bl	8002fbc <UART_Transmit_IT>
    return;
 8002e2a:	e012      	b.n	8002e52 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00d      	beq.n	8002e52 <HAL_UART_IRQHandler+0x34a>
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f90a 	bl	800305a <UART_EndTransmit_IT>
    return;
 8002e46:	e004      	b.n	8002e52 <HAL_UART_IRQHandler+0x34a>
    return;
 8002e48:	bf00      	nop
 8002e4a:	e002      	b.n	8002e52 <HAL_UART_IRQHandler+0x34a>
      return;
 8002e4c:	bf00      	nop
 8002e4e:	e000      	b.n	8002e52 <HAL_UART_IRQHandler+0x34a>
      return;
 8002e50:	bf00      	nop
  }
}
 8002e52:	3728      	adds	r7, #40	; 0x28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	08002f95 	.word	0x08002f95

08002e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb8:	e02c      	b.n	8002f14 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d028      	beq.n	8002f14 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ec8:	f7fd fdc2 	bl	8000a50 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d21d      	bcs.n	8002f14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ee6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e00f      	b.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d0c3      	beq.n	8002eba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0210 	bic.w	r2, r2, #16
 8002f7a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7ff ff66 	bl	8002e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b21      	cmp	r3, #33	; 0x21
 8002fce:	d13e      	bne.n	800304e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd8:	d114      	bne.n	8003004 <UART_Transmit_IT+0x48>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d110      	bne.n	8003004 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	1c9a      	adds	r2, r3, #2
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	621a      	str	r2, [r3, #32]
 8003002:	e008      	b.n	8003016 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	1c59      	adds	r1, r3, #1
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6211      	str	r1, [r2, #32]
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29b      	uxth	r3, r3
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4619      	mov	r1, r3
 8003024:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003038:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003048:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e000      	b.n	8003050 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800304e:	2302      	movs	r3, #2
  }
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003070:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff feee 	bl	8002e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b22      	cmp	r3, #34	; 0x22
 800309c:	f040 8099 	bne.w	80031d2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a8:	d117      	bne.n	80030da <UART_Receive_IT+0x50>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d113      	bne.n	80030da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	1c9a      	adds	r2, r3, #2
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28
 80030d8:	e026      	b.n	8003128 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ec:	d007      	beq.n	80030fe <UART_Receive_IT+0x74>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <UART_Receive_IT+0x82>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e008      	b.n	800311e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003118:	b2da      	uxtb	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29b      	uxth	r3, r3
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4619      	mov	r1, r3
 8003136:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003138:	2b00      	cmp	r3, #0
 800313a:	d148      	bne.n	80031ce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0220 	bic.w	r2, r2, #32
 800314a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800315a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0201 	bic.w	r2, r2, #1
 800316a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	2b01      	cmp	r3, #1
 800317a:	d123      	bne.n	80031c4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0210 	bic.w	r2, r2, #16
 8003190:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b10      	cmp	r3, #16
 800319e:	d10a      	bne.n	80031b6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff fe68 	bl	8002e92 <HAL_UARTEx_RxEventCallback>
 80031c2:	e002      	b.n	80031ca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff fe52 	bl	8002e6e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e002      	b.n	80031d4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e000      	b.n	80031d4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
  }
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003216:	f023 030c 	bic.w	r3, r3, #12
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	430b      	orrs	r3, r1
 8003222:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <UART_SetConfig+0x114>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d103      	bne.n	800324c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003244:	f7fe fb74 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	e002      	b.n	8003252 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800324c:	f7fe fb5c 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8003250:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <UART_SetConfig+0x118>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	0119      	lsls	r1, r3, #4
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	009a      	lsls	r2, r3, #2
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fbb2 f2f3 	udiv	r2, r2, r3
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <UART_SetConfig+0x118>)
 800328a:	fba3 0302 	umull	r0, r3, r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2064      	movs	r0, #100	; 0x64
 8003292:	fb00 f303 	mul.w	r3, r0, r3
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	3332      	adds	r3, #50	; 0x32
 800329c:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <UART_SetConfig+0x118>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a8:	4419      	add	r1, r3
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009a      	lsls	r2, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <UART_SetConfig+0x118>)
 80032c2:	fba3 0302 	umull	r0, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2064      	movs	r0, #100	; 0x64
 80032ca:	fb00 f303 	mul.w	r3, r0, r3
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	3332      	adds	r3, #50	; 0x32
 80032d4:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <UART_SetConfig+0x118>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	f003 020f 	and.w	r2, r3, #15
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	440a      	add	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40013800 	.word	0x40013800
 80032f4:	51eb851f 	.word	0x51eb851f

080032f8 <__errno>:
 80032f8:	4b01      	ldr	r3, [pc, #4]	; (8003300 <__errno+0x8>)
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	2000000c 	.word	0x2000000c

08003304 <__libc_init_array>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	2600      	movs	r6, #0
 8003308:	4d0c      	ldr	r5, [pc, #48]	; (800333c <__libc_init_array+0x38>)
 800330a:	4c0d      	ldr	r4, [pc, #52]	; (8003340 <__libc_init_array+0x3c>)
 800330c:	1b64      	subs	r4, r4, r5
 800330e:	10a4      	asrs	r4, r4, #2
 8003310:	42a6      	cmp	r6, r4
 8003312:	d109      	bne.n	8003328 <__libc_init_array+0x24>
 8003314:	f000 fcb0 	bl	8003c78 <_init>
 8003318:	2600      	movs	r6, #0
 800331a:	4d0a      	ldr	r5, [pc, #40]	; (8003344 <__libc_init_array+0x40>)
 800331c:	4c0a      	ldr	r4, [pc, #40]	; (8003348 <__libc_init_array+0x44>)
 800331e:	1b64      	subs	r4, r4, r5
 8003320:	10a4      	asrs	r4, r4, #2
 8003322:	42a6      	cmp	r6, r4
 8003324:	d105      	bne.n	8003332 <__libc_init_array+0x2e>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	f855 3b04 	ldr.w	r3, [r5], #4
 800332c:	4798      	blx	r3
 800332e:	3601      	adds	r6, #1
 8003330:	e7ee      	b.n	8003310 <__libc_init_array+0xc>
 8003332:	f855 3b04 	ldr.w	r3, [r5], #4
 8003336:	4798      	blx	r3
 8003338:	3601      	adds	r6, #1
 800333a:	e7f2      	b.n	8003322 <__libc_init_array+0x1e>
 800333c:	08003cfc 	.word	0x08003cfc
 8003340:	08003cfc 	.word	0x08003cfc
 8003344:	08003cfc 	.word	0x08003cfc
 8003348:	08003d00 	.word	0x08003d00

0800334c <memset>:
 800334c:	4603      	mov	r3, r0
 800334e:	4402      	add	r2, r0
 8003350:	4293      	cmp	r3, r2
 8003352:	d100      	bne.n	8003356 <memset+0xa>
 8003354:	4770      	bx	lr
 8003356:	f803 1b01 	strb.w	r1, [r3], #1
 800335a:	e7f9      	b.n	8003350 <memset+0x4>

0800335c <sniprintf>:
 800335c:	b40c      	push	{r2, r3}
 800335e:	b530      	push	{r4, r5, lr}
 8003360:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <sniprintf+0x64>)
 8003362:	1e0c      	subs	r4, r1, #0
 8003364:	681d      	ldr	r5, [r3, #0]
 8003366:	b09d      	sub	sp, #116	; 0x74
 8003368:	da08      	bge.n	800337c <sniprintf+0x20>
 800336a:	238b      	movs	r3, #139	; 0x8b
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	602b      	str	r3, [r5, #0]
 8003372:	b01d      	add	sp, #116	; 0x74
 8003374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003378:	b002      	add	sp, #8
 800337a:	4770      	bx	lr
 800337c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003380:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003384:	bf0c      	ite	eq
 8003386:	4623      	moveq	r3, r4
 8003388:	f104 33ff 	addne.w	r3, r4, #4294967295
 800338c:	9304      	str	r3, [sp, #16]
 800338e:	9307      	str	r3, [sp, #28]
 8003390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003394:	9002      	str	r0, [sp, #8]
 8003396:	9006      	str	r0, [sp, #24]
 8003398:	f8ad 3016 	strh.w	r3, [sp, #22]
 800339c:	4628      	mov	r0, r5
 800339e:	ab21      	add	r3, sp, #132	; 0x84
 80033a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80033a2:	a902      	add	r1, sp, #8
 80033a4:	9301      	str	r3, [sp, #4]
 80033a6:	f000 f869 	bl	800347c <_svfiprintf_r>
 80033aa:	1c43      	adds	r3, r0, #1
 80033ac:	bfbc      	itt	lt
 80033ae:	238b      	movlt	r3, #139	; 0x8b
 80033b0:	602b      	strlt	r3, [r5, #0]
 80033b2:	2c00      	cmp	r4, #0
 80033b4:	d0dd      	beq.n	8003372 <sniprintf+0x16>
 80033b6:	2200      	movs	r2, #0
 80033b8:	9b02      	ldr	r3, [sp, #8]
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e7d9      	b.n	8003372 <sniprintf+0x16>
 80033be:	bf00      	nop
 80033c0:	2000000c 	.word	0x2000000c

080033c4 <__ssputs_r>:
 80033c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033c8:	688e      	ldr	r6, [r1, #8]
 80033ca:	4682      	mov	sl, r0
 80033cc:	429e      	cmp	r6, r3
 80033ce:	460c      	mov	r4, r1
 80033d0:	4690      	mov	r8, r2
 80033d2:	461f      	mov	r7, r3
 80033d4:	d838      	bhi.n	8003448 <__ssputs_r+0x84>
 80033d6:	898a      	ldrh	r2, [r1, #12]
 80033d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033dc:	d032      	beq.n	8003444 <__ssputs_r+0x80>
 80033de:	6825      	ldr	r5, [r4, #0]
 80033e0:	6909      	ldr	r1, [r1, #16]
 80033e2:	3301      	adds	r3, #1
 80033e4:	eba5 0901 	sub.w	r9, r5, r1
 80033e8:	6965      	ldr	r5, [r4, #20]
 80033ea:	444b      	add	r3, r9
 80033ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033f4:	106d      	asrs	r5, r5, #1
 80033f6:	429d      	cmp	r5, r3
 80033f8:	bf38      	it	cc
 80033fa:	461d      	movcc	r5, r3
 80033fc:	0553      	lsls	r3, r2, #21
 80033fe:	d531      	bpl.n	8003464 <__ssputs_r+0xa0>
 8003400:	4629      	mov	r1, r5
 8003402:	f000 fb6f 	bl	8003ae4 <_malloc_r>
 8003406:	4606      	mov	r6, r0
 8003408:	b950      	cbnz	r0, 8003420 <__ssputs_r+0x5c>
 800340a:	230c      	movs	r3, #12
 800340c:	f04f 30ff 	mov.w	r0, #4294967295
 8003410:	f8ca 3000 	str.w	r3, [sl]
 8003414:	89a3      	ldrh	r3, [r4, #12]
 8003416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341a:	81a3      	strh	r3, [r4, #12]
 800341c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003420:	464a      	mov	r2, r9
 8003422:	6921      	ldr	r1, [r4, #16]
 8003424:	f000 face 	bl	80039c4 <memcpy>
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800342e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003432:	81a3      	strh	r3, [r4, #12]
 8003434:	6126      	str	r6, [r4, #16]
 8003436:	444e      	add	r6, r9
 8003438:	6026      	str	r6, [r4, #0]
 800343a:	463e      	mov	r6, r7
 800343c:	6165      	str	r5, [r4, #20]
 800343e:	eba5 0509 	sub.w	r5, r5, r9
 8003442:	60a5      	str	r5, [r4, #8]
 8003444:	42be      	cmp	r6, r7
 8003446:	d900      	bls.n	800344a <__ssputs_r+0x86>
 8003448:	463e      	mov	r6, r7
 800344a:	4632      	mov	r2, r6
 800344c:	4641      	mov	r1, r8
 800344e:	6820      	ldr	r0, [r4, #0]
 8003450:	f000 fac6 	bl	80039e0 <memmove>
 8003454:	68a3      	ldr	r3, [r4, #8]
 8003456:	2000      	movs	r0, #0
 8003458:	1b9b      	subs	r3, r3, r6
 800345a:	60a3      	str	r3, [r4, #8]
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	4433      	add	r3, r6
 8003460:	6023      	str	r3, [r4, #0]
 8003462:	e7db      	b.n	800341c <__ssputs_r+0x58>
 8003464:	462a      	mov	r2, r5
 8003466:	f000 fbb1 	bl	8003bcc <_realloc_r>
 800346a:	4606      	mov	r6, r0
 800346c:	2800      	cmp	r0, #0
 800346e:	d1e1      	bne.n	8003434 <__ssputs_r+0x70>
 8003470:	4650      	mov	r0, sl
 8003472:	6921      	ldr	r1, [r4, #16]
 8003474:	f000 face 	bl	8003a14 <_free_r>
 8003478:	e7c7      	b.n	800340a <__ssputs_r+0x46>
	...

0800347c <_svfiprintf_r>:
 800347c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003480:	4698      	mov	r8, r3
 8003482:	898b      	ldrh	r3, [r1, #12]
 8003484:	4607      	mov	r7, r0
 8003486:	061b      	lsls	r3, r3, #24
 8003488:	460d      	mov	r5, r1
 800348a:	4614      	mov	r4, r2
 800348c:	b09d      	sub	sp, #116	; 0x74
 800348e:	d50e      	bpl.n	80034ae <_svfiprintf_r+0x32>
 8003490:	690b      	ldr	r3, [r1, #16]
 8003492:	b963      	cbnz	r3, 80034ae <_svfiprintf_r+0x32>
 8003494:	2140      	movs	r1, #64	; 0x40
 8003496:	f000 fb25 	bl	8003ae4 <_malloc_r>
 800349a:	6028      	str	r0, [r5, #0]
 800349c:	6128      	str	r0, [r5, #16]
 800349e:	b920      	cbnz	r0, 80034aa <_svfiprintf_r+0x2e>
 80034a0:	230c      	movs	r3, #12
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295
 80034a8:	e0d1      	b.n	800364e <_svfiprintf_r+0x1d2>
 80034aa:	2340      	movs	r3, #64	; 0x40
 80034ac:	616b      	str	r3, [r5, #20]
 80034ae:	2300      	movs	r3, #0
 80034b0:	9309      	str	r3, [sp, #36]	; 0x24
 80034b2:	2320      	movs	r3, #32
 80034b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034b8:	2330      	movs	r3, #48	; 0x30
 80034ba:	f04f 0901 	mov.w	r9, #1
 80034be:	f8cd 800c 	str.w	r8, [sp, #12]
 80034c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003668 <_svfiprintf_r+0x1ec>
 80034c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034ca:	4623      	mov	r3, r4
 80034cc:	469a      	mov	sl, r3
 80034ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034d2:	b10a      	cbz	r2, 80034d8 <_svfiprintf_r+0x5c>
 80034d4:	2a25      	cmp	r2, #37	; 0x25
 80034d6:	d1f9      	bne.n	80034cc <_svfiprintf_r+0x50>
 80034d8:	ebba 0b04 	subs.w	fp, sl, r4
 80034dc:	d00b      	beq.n	80034f6 <_svfiprintf_r+0x7a>
 80034de:	465b      	mov	r3, fp
 80034e0:	4622      	mov	r2, r4
 80034e2:	4629      	mov	r1, r5
 80034e4:	4638      	mov	r0, r7
 80034e6:	f7ff ff6d 	bl	80033c4 <__ssputs_r>
 80034ea:	3001      	adds	r0, #1
 80034ec:	f000 80aa 	beq.w	8003644 <_svfiprintf_r+0x1c8>
 80034f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034f2:	445a      	add	r2, fp
 80034f4:	9209      	str	r2, [sp, #36]	; 0x24
 80034f6:	f89a 3000 	ldrb.w	r3, [sl]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80a2 	beq.w	8003644 <_svfiprintf_r+0x1c8>
 8003500:	2300      	movs	r3, #0
 8003502:	f04f 32ff 	mov.w	r2, #4294967295
 8003506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800350a:	f10a 0a01 	add.w	sl, sl, #1
 800350e:	9304      	str	r3, [sp, #16]
 8003510:	9307      	str	r3, [sp, #28]
 8003512:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003516:	931a      	str	r3, [sp, #104]	; 0x68
 8003518:	4654      	mov	r4, sl
 800351a:	2205      	movs	r2, #5
 800351c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003520:	4851      	ldr	r0, [pc, #324]	; (8003668 <_svfiprintf_r+0x1ec>)
 8003522:	f000 fa41 	bl	80039a8 <memchr>
 8003526:	9a04      	ldr	r2, [sp, #16]
 8003528:	b9d8      	cbnz	r0, 8003562 <_svfiprintf_r+0xe6>
 800352a:	06d0      	lsls	r0, r2, #27
 800352c:	bf44      	itt	mi
 800352e:	2320      	movmi	r3, #32
 8003530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003534:	0711      	lsls	r1, r2, #28
 8003536:	bf44      	itt	mi
 8003538:	232b      	movmi	r3, #43	; 0x2b
 800353a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800353e:	f89a 3000 	ldrb.w	r3, [sl]
 8003542:	2b2a      	cmp	r3, #42	; 0x2a
 8003544:	d015      	beq.n	8003572 <_svfiprintf_r+0xf6>
 8003546:	4654      	mov	r4, sl
 8003548:	2000      	movs	r0, #0
 800354a:	f04f 0c0a 	mov.w	ip, #10
 800354e:	9a07      	ldr	r2, [sp, #28]
 8003550:	4621      	mov	r1, r4
 8003552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003556:	3b30      	subs	r3, #48	; 0x30
 8003558:	2b09      	cmp	r3, #9
 800355a:	d94e      	bls.n	80035fa <_svfiprintf_r+0x17e>
 800355c:	b1b0      	cbz	r0, 800358c <_svfiprintf_r+0x110>
 800355e:	9207      	str	r2, [sp, #28]
 8003560:	e014      	b.n	800358c <_svfiprintf_r+0x110>
 8003562:	eba0 0308 	sub.w	r3, r0, r8
 8003566:	fa09 f303 	lsl.w	r3, r9, r3
 800356a:	4313      	orrs	r3, r2
 800356c:	46a2      	mov	sl, r4
 800356e:	9304      	str	r3, [sp, #16]
 8003570:	e7d2      	b.n	8003518 <_svfiprintf_r+0x9c>
 8003572:	9b03      	ldr	r3, [sp, #12]
 8003574:	1d19      	adds	r1, r3, #4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	9103      	str	r1, [sp, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	bfbb      	ittet	lt
 800357e:	425b      	neglt	r3, r3
 8003580:	f042 0202 	orrlt.w	r2, r2, #2
 8003584:	9307      	strge	r3, [sp, #28]
 8003586:	9307      	strlt	r3, [sp, #28]
 8003588:	bfb8      	it	lt
 800358a:	9204      	strlt	r2, [sp, #16]
 800358c:	7823      	ldrb	r3, [r4, #0]
 800358e:	2b2e      	cmp	r3, #46	; 0x2e
 8003590:	d10c      	bne.n	80035ac <_svfiprintf_r+0x130>
 8003592:	7863      	ldrb	r3, [r4, #1]
 8003594:	2b2a      	cmp	r3, #42	; 0x2a
 8003596:	d135      	bne.n	8003604 <_svfiprintf_r+0x188>
 8003598:	9b03      	ldr	r3, [sp, #12]
 800359a:	3402      	adds	r4, #2
 800359c:	1d1a      	adds	r2, r3, #4
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	9203      	str	r2, [sp, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bfb8      	it	lt
 80035a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80035aa:	9305      	str	r3, [sp, #20]
 80035ac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800366c <_svfiprintf_r+0x1f0>
 80035b0:	2203      	movs	r2, #3
 80035b2:	4650      	mov	r0, sl
 80035b4:	7821      	ldrb	r1, [r4, #0]
 80035b6:	f000 f9f7 	bl	80039a8 <memchr>
 80035ba:	b140      	cbz	r0, 80035ce <_svfiprintf_r+0x152>
 80035bc:	2340      	movs	r3, #64	; 0x40
 80035be:	eba0 000a 	sub.w	r0, r0, sl
 80035c2:	fa03 f000 	lsl.w	r0, r3, r0
 80035c6:	9b04      	ldr	r3, [sp, #16]
 80035c8:	3401      	adds	r4, #1
 80035ca:	4303      	orrs	r3, r0
 80035cc:	9304      	str	r3, [sp, #16]
 80035ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d2:	2206      	movs	r2, #6
 80035d4:	4826      	ldr	r0, [pc, #152]	; (8003670 <_svfiprintf_r+0x1f4>)
 80035d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035da:	f000 f9e5 	bl	80039a8 <memchr>
 80035de:	2800      	cmp	r0, #0
 80035e0:	d038      	beq.n	8003654 <_svfiprintf_r+0x1d8>
 80035e2:	4b24      	ldr	r3, [pc, #144]	; (8003674 <_svfiprintf_r+0x1f8>)
 80035e4:	bb1b      	cbnz	r3, 800362e <_svfiprintf_r+0x1b2>
 80035e6:	9b03      	ldr	r3, [sp, #12]
 80035e8:	3307      	adds	r3, #7
 80035ea:	f023 0307 	bic.w	r3, r3, #7
 80035ee:	3308      	adds	r3, #8
 80035f0:	9303      	str	r3, [sp, #12]
 80035f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035f4:	4433      	add	r3, r6
 80035f6:	9309      	str	r3, [sp, #36]	; 0x24
 80035f8:	e767      	b.n	80034ca <_svfiprintf_r+0x4e>
 80035fa:	460c      	mov	r4, r1
 80035fc:	2001      	movs	r0, #1
 80035fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003602:	e7a5      	b.n	8003550 <_svfiprintf_r+0xd4>
 8003604:	2300      	movs	r3, #0
 8003606:	f04f 0c0a 	mov.w	ip, #10
 800360a:	4619      	mov	r1, r3
 800360c:	3401      	adds	r4, #1
 800360e:	9305      	str	r3, [sp, #20]
 8003610:	4620      	mov	r0, r4
 8003612:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003616:	3a30      	subs	r2, #48	; 0x30
 8003618:	2a09      	cmp	r2, #9
 800361a:	d903      	bls.n	8003624 <_svfiprintf_r+0x1a8>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0c5      	beq.n	80035ac <_svfiprintf_r+0x130>
 8003620:	9105      	str	r1, [sp, #20]
 8003622:	e7c3      	b.n	80035ac <_svfiprintf_r+0x130>
 8003624:	4604      	mov	r4, r0
 8003626:	2301      	movs	r3, #1
 8003628:	fb0c 2101 	mla	r1, ip, r1, r2
 800362c:	e7f0      	b.n	8003610 <_svfiprintf_r+0x194>
 800362e:	ab03      	add	r3, sp, #12
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	462a      	mov	r2, r5
 8003634:	4638      	mov	r0, r7
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <_svfiprintf_r+0x1fc>)
 8003638:	a904      	add	r1, sp, #16
 800363a:	f3af 8000 	nop.w
 800363e:	1c42      	adds	r2, r0, #1
 8003640:	4606      	mov	r6, r0
 8003642:	d1d6      	bne.n	80035f2 <_svfiprintf_r+0x176>
 8003644:	89ab      	ldrh	r3, [r5, #12]
 8003646:	065b      	lsls	r3, r3, #25
 8003648:	f53f af2c 	bmi.w	80034a4 <_svfiprintf_r+0x28>
 800364c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800364e:	b01d      	add	sp, #116	; 0x74
 8003650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003654:	ab03      	add	r3, sp, #12
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	462a      	mov	r2, r5
 800365a:	4638      	mov	r0, r7
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <_svfiprintf_r+0x1fc>)
 800365e:	a904      	add	r1, sp, #16
 8003660:	f000 f87c 	bl	800375c <_printf_i>
 8003664:	e7eb      	b.n	800363e <_svfiprintf_r+0x1c2>
 8003666:	bf00      	nop
 8003668:	08003cc8 	.word	0x08003cc8
 800366c:	08003cce 	.word	0x08003cce
 8003670:	08003cd2 	.word	0x08003cd2
 8003674:	00000000 	.word	0x00000000
 8003678:	080033c5 	.word	0x080033c5

0800367c <_printf_common>:
 800367c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003680:	4616      	mov	r6, r2
 8003682:	4699      	mov	r9, r3
 8003684:	688a      	ldr	r2, [r1, #8]
 8003686:	690b      	ldr	r3, [r1, #16]
 8003688:	4607      	mov	r7, r0
 800368a:	4293      	cmp	r3, r2
 800368c:	bfb8      	it	lt
 800368e:	4613      	movlt	r3, r2
 8003690:	6033      	str	r3, [r6, #0]
 8003692:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003696:	460c      	mov	r4, r1
 8003698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800369c:	b10a      	cbz	r2, 80036a2 <_printf_common+0x26>
 800369e:	3301      	adds	r3, #1
 80036a0:	6033      	str	r3, [r6, #0]
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	0699      	lsls	r1, r3, #26
 80036a6:	bf42      	ittt	mi
 80036a8:	6833      	ldrmi	r3, [r6, #0]
 80036aa:	3302      	addmi	r3, #2
 80036ac:	6033      	strmi	r3, [r6, #0]
 80036ae:	6825      	ldr	r5, [r4, #0]
 80036b0:	f015 0506 	ands.w	r5, r5, #6
 80036b4:	d106      	bne.n	80036c4 <_printf_common+0x48>
 80036b6:	f104 0a19 	add.w	sl, r4, #25
 80036ba:	68e3      	ldr	r3, [r4, #12]
 80036bc:	6832      	ldr	r2, [r6, #0]
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	42ab      	cmp	r3, r5
 80036c2:	dc28      	bgt.n	8003716 <_printf_common+0x9a>
 80036c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036c8:	1e13      	subs	r3, r2, #0
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	bf18      	it	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	0692      	lsls	r2, r2, #26
 80036d2:	d42d      	bmi.n	8003730 <_printf_common+0xb4>
 80036d4:	4649      	mov	r1, r9
 80036d6:	4638      	mov	r0, r7
 80036d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036dc:	47c0      	blx	r8
 80036de:	3001      	adds	r0, #1
 80036e0:	d020      	beq.n	8003724 <_printf_common+0xa8>
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	68e5      	ldr	r5, [r4, #12]
 80036e6:	f003 0306 	and.w	r3, r3, #6
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	bf18      	it	ne
 80036ee:	2500      	movne	r5, #0
 80036f0:	6832      	ldr	r2, [r6, #0]
 80036f2:	f04f 0600 	mov.w	r6, #0
 80036f6:	68a3      	ldr	r3, [r4, #8]
 80036f8:	bf08      	it	eq
 80036fa:	1aad      	subeq	r5, r5, r2
 80036fc:	6922      	ldr	r2, [r4, #16]
 80036fe:	bf08      	it	eq
 8003700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003704:	4293      	cmp	r3, r2
 8003706:	bfc4      	itt	gt
 8003708:	1a9b      	subgt	r3, r3, r2
 800370a:	18ed      	addgt	r5, r5, r3
 800370c:	341a      	adds	r4, #26
 800370e:	42b5      	cmp	r5, r6
 8003710:	d11a      	bne.n	8003748 <_printf_common+0xcc>
 8003712:	2000      	movs	r0, #0
 8003714:	e008      	b.n	8003728 <_printf_common+0xac>
 8003716:	2301      	movs	r3, #1
 8003718:	4652      	mov	r2, sl
 800371a:	4649      	mov	r1, r9
 800371c:	4638      	mov	r0, r7
 800371e:	47c0      	blx	r8
 8003720:	3001      	adds	r0, #1
 8003722:	d103      	bne.n	800372c <_printf_common+0xb0>
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800372c:	3501      	adds	r5, #1
 800372e:	e7c4      	b.n	80036ba <_printf_common+0x3e>
 8003730:	2030      	movs	r0, #48	; 0x30
 8003732:	18e1      	adds	r1, r4, r3
 8003734:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800373e:	4422      	add	r2, r4
 8003740:	3302      	adds	r3, #2
 8003742:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003746:	e7c5      	b.n	80036d4 <_printf_common+0x58>
 8003748:	2301      	movs	r3, #1
 800374a:	4622      	mov	r2, r4
 800374c:	4649      	mov	r1, r9
 800374e:	4638      	mov	r0, r7
 8003750:	47c0      	blx	r8
 8003752:	3001      	adds	r0, #1
 8003754:	d0e6      	beq.n	8003724 <_printf_common+0xa8>
 8003756:	3601      	adds	r6, #1
 8003758:	e7d9      	b.n	800370e <_printf_common+0x92>
	...

0800375c <_printf_i>:
 800375c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003760:	7e0f      	ldrb	r7, [r1, #24]
 8003762:	4691      	mov	r9, r2
 8003764:	2f78      	cmp	r7, #120	; 0x78
 8003766:	4680      	mov	r8, r0
 8003768:	460c      	mov	r4, r1
 800376a:	469a      	mov	sl, r3
 800376c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800376e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003772:	d807      	bhi.n	8003784 <_printf_i+0x28>
 8003774:	2f62      	cmp	r7, #98	; 0x62
 8003776:	d80a      	bhi.n	800378e <_printf_i+0x32>
 8003778:	2f00      	cmp	r7, #0
 800377a:	f000 80d9 	beq.w	8003930 <_printf_i+0x1d4>
 800377e:	2f58      	cmp	r7, #88	; 0x58
 8003780:	f000 80a4 	beq.w	80038cc <_printf_i+0x170>
 8003784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800378c:	e03a      	b.n	8003804 <_printf_i+0xa8>
 800378e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003792:	2b15      	cmp	r3, #21
 8003794:	d8f6      	bhi.n	8003784 <_printf_i+0x28>
 8003796:	a101      	add	r1, pc, #4	; (adr r1, 800379c <_printf_i+0x40>)
 8003798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800379c:	080037f5 	.word	0x080037f5
 80037a0:	08003809 	.word	0x08003809
 80037a4:	08003785 	.word	0x08003785
 80037a8:	08003785 	.word	0x08003785
 80037ac:	08003785 	.word	0x08003785
 80037b0:	08003785 	.word	0x08003785
 80037b4:	08003809 	.word	0x08003809
 80037b8:	08003785 	.word	0x08003785
 80037bc:	08003785 	.word	0x08003785
 80037c0:	08003785 	.word	0x08003785
 80037c4:	08003785 	.word	0x08003785
 80037c8:	08003917 	.word	0x08003917
 80037cc:	08003839 	.word	0x08003839
 80037d0:	080038f9 	.word	0x080038f9
 80037d4:	08003785 	.word	0x08003785
 80037d8:	08003785 	.word	0x08003785
 80037dc:	08003939 	.word	0x08003939
 80037e0:	08003785 	.word	0x08003785
 80037e4:	08003839 	.word	0x08003839
 80037e8:	08003785 	.word	0x08003785
 80037ec:	08003785 	.word	0x08003785
 80037f0:	08003901 	.word	0x08003901
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	1d1a      	adds	r2, r3, #4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	602a      	str	r2, [r5, #0]
 80037fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003804:	2301      	movs	r3, #1
 8003806:	e0a4      	b.n	8003952 <_printf_i+0x1f6>
 8003808:	6820      	ldr	r0, [r4, #0]
 800380a:	6829      	ldr	r1, [r5, #0]
 800380c:	0606      	lsls	r6, r0, #24
 800380e:	f101 0304 	add.w	r3, r1, #4
 8003812:	d50a      	bpl.n	800382a <_printf_i+0xce>
 8003814:	680e      	ldr	r6, [r1, #0]
 8003816:	602b      	str	r3, [r5, #0]
 8003818:	2e00      	cmp	r6, #0
 800381a:	da03      	bge.n	8003824 <_printf_i+0xc8>
 800381c:	232d      	movs	r3, #45	; 0x2d
 800381e:	4276      	negs	r6, r6
 8003820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003824:	230a      	movs	r3, #10
 8003826:	485e      	ldr	r0, [pc, #376]	; (80039a0 <_printf_i+0x244>)
 8003828:	e019      	b.n	800385e <_printf_i+0x102>
 800382a:	680e      	ldr	r6, [r1, #0]
 800382c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003830:	602b      	str	r3, [r5, #0]
 8003832:	bf18      	it	ne
 8003834:	b236      	sxthne	r6, r6
 8003836:	e7ef      	b.n	8003818 <_printf_i+0xbc>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	6820      	ldr	r0, [r4, #0]
 800383c:	1d19      	adds	r1, r3, #4
 800383e:	6029      	str	r1, [r5, #0]
 8003840:	0601      	lsls	r1, r0, #24
 8003842:	d501      	bpl.n	8003848 <_printf_i+0xec>
 8003844:	681e      	ldr	r6, [r3, #0]
 8003846:	e002      	b.n	800384e <_printf_i+0xf2>
 8003848:	0646      	lsls	r6, r0, #25
 800384a:	d5fb      	bpl.n	8003844 <_printf_i+0xe8>
 800384c:	881e      	ldrh	r6, [r3, #0]
 800384e:	2f6f      	cmp	r7, #111	; 0x6f
 8003850:	bf0c      	ite	eq
 8003852:	2308      	moveq	r3, #8
 8003854:	230a      	movne	r3, #10
 8003856:	4852      	ldr	r0, [pc, #328]	; (80039a0 <_printf_i+0x244>)
 8003858:	2100      	movs	r1, #0
 800385a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800385e:	6865      	ldr	r5, [r4, #4]
 8003860:	2d00      	cmp	r5, #0
 8003862:	bfa8      	it	ge
 8003864:	6821      	ldrge	r1, [r4, #0]
 8003866:	60a5      	str	r5, [r4, #8]
 8003868:	bfa4      	itt	ge
 800386a:	f021 0104 	bicge.w	r1, r1, #4
 800386e:	6021      	strge	r1, [r4, #0]
 8003870:	b90e      	cbnz	r6, 8003876 <_printf_i+0x11a>
 8003872:	2d00      	cmp	r5, #0
 8003874:	d04d      	beq.n	8003912 <_printf_i+0x1b6>
 8003876:	4615      	mov	r5, r2
 8003878:	fbb6 f1f3 	udiv	r1, r6, r3
 800387c:	fb03 6711 	mls	r7, r3, r1, r6
 8003880:	5dc7      	ldrb	r7, [r0, r7]
 8003882:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003886:	4637      	mov	r7, r6
 8003888:	42bb      	cmp	r3, r7
 800388a:	460e      	mov	r6, r1
 800388c:	d9f4      	bls.n	8003878 <_printf_i+0x11c>
 800388e:	2b08      	cmp	r3, #8
 8003890:	d10b      	bne.n	80038aa <_printf_i+0x14e>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	07de      	lsls	r6, r3, #31
 8003896:	d508      	bpl.n	80038aa <_printf_i+0x14e>
 8003898:	6923      	ldr	r3, [r4, #16]
 800389a:	6861      	ldr	r1, [r4, #4]
 800389c:	4299      	cmp	r1, r3
 800389e:	bfde      	ittt	le
 80038a0:	2330      	movle	r3, #48	; 0x30
 80038a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038aa:	1b52      	subs	r2, r2, r5
 80038ac:	6122      	str	r2, [r4, #16]
 80038ae:	464b      	mov	r3, r9
 80038b0:	4621      	mov	r1, r4
 80038b2:	4640      	mov	r0, r8
 80038b4:	f8cd a000 	str.w	sl, [sp]
 80038b8:	aa03      	add	r2, sp, #12
 80038ba:	f7ff fedf 	bl	800367c <_printf_common>
 80038be:	3001      	adds	r0, #1
 80038c0:	d14c      	bne.n	800395c <_printf_i+0x200>
 80038c2:	f04f 30ff 	mov.w	r0, #4294967295
 80038c6:	b004      	add	sp, #16
 80038c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038cc:	4834      	ldr	r0, [pc, #208]	; (80039a0 <_printf_i+0x244>)
 80038ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038d2:	6829      	ldr	r1, [r5, #0]
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80038da:	6029      	str	r1, [r5, #0]
 80038dc:	061d      	lsls	r5, r3, #24
 80038de:	d514      	bpl.n	800390a <_printf_i+0x1ae>
 80038e0:	07df      	lsls	r7, r3, #31
 80038e2:	bf44      	itt	mi
 80038e4:	f043 0320 	orrmi.w	r3, r3, #32
 80038e8:	6023      	strmi	r3, [r4, #0]
 80038ea:	b91e      	cbnz	r6, 80038f4 <_printf_i+0x198>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	f023 0320 	bic.w	r3, r3, #32
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	2310      	movs	r3, #16
 80038f6:	e7af      	b.n	8003858 <_printf_i+0xfc>
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	f043 0320 	orr.w	r3, r3, #32
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	2378      	movs	r3, #120	; 0x78
 8003902:	4828      	ldr	r0, [pc, #160]	; (80039a4 <_printf_i+0x248>)
 8003904:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003908:	e7e3      	b.n	80038d2 <_printf_i+0x176>
 800390a:	0659      	lsls	r1, r3, #25
 800390c:	bf48      	it	mi
 800390e:	b2b6      	uxthmi	r6, r6
 8003910:	e7e6      	b.n	80038e0 <_printf_i+0x184>
 8003912:	4615      	mov	r5, r2
 8003914:	e7bb      	b.n	800388e <_printf_i+0x132>
 8003916:	682b      	ldr	r3, [r5, #0]
 8003918:	6826      	ldr	r6, [r4, #0]
 800391a:	1d18      	adds	r0, r3, #4
 800391c:	6961      	ldr	r1, [r4, #20]
 800391e:	6028      	str	r0, [r5, #0]
 8003920:	0635      	lsls	r5, r6, #24
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	d501      	bpl.n	800392a <_printf_i+0x1ce>
 8003926:	6019      	str	r1, [r3, #0]
 8003928:	e002      	b.n	8003930 <_printf_i+0x1d4>
 800392a:	0670      	lsls	r0, r6, #25
 800392c:	d5fb      	bpl.n	8003926 <_printf_i+0x1ca>
 800392e:	8019      	strh	r1, [r3, #0]
 8003930:	2300      	movs	r3, #0
 8003932:	4615      	mov	r5, r2
 8003934:	6123      	str	r3, [r4, #16]
 8003936:	e7ba      	b.n	80038ae <_printf_i+0x152>
 8003938:	682b      	ldr	r3, [r5, #0]
 800393a:	2100      	movs	r1, #0
 800393c:	1d1a      	adds	r2, r3, #4
 800393e:	602a      	str	r2, [r5, #0]
 8003940:	681d      	ldr	r5, [r3, #0]
 8003942:	6862      	ldr	r2, [r4, #4]
 8003944:	4628      	mov	r0, r5
 8003946:	f000 f82f 	bl	80039a8 <memchr>
 800394a:	b108      	cbz	r0, 8003950 <_printf_i+0x1f4>
 800394c:	1b40      	subs	r0, r0, r5
 800394e:	6060      	str	r0, [r4, #4]
 8003950:	6863      	ldr	r3, [r4, #4]
 8003952:	6123      	str	r3, [r4, #16]
 8003954:	2300      	movs	r3, #0
 8003956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800395a:	e7a8      	b.n	80038ae <_printf_i+0x152>
 800395c:	462a      	mov	r2, r5
 800395e:	4649      	mov	r1, r9
 8003960:	4640      	mov	r0, r8
 8003962:	6923      	ldr	r3, [r4, #16]
 8003964:	47d0      	blx	sl
 8003966:	3001      	adds	r0, #1
 8003968:	d0ab      	beq.n	80038c2 <_printf_i+0x166>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	079b      	lsls	r3, r3, #30
 800396e:	d413      	bmi.n	8003998 <_printf_i+0x23c>
 8003970:	68e0      	ldr	r0, [r4, #12]
 8003972:	9b03      	ldr	r3, [sp, #12]
 8003974:	4298      	cmp	r0, r3
 8003976:	bfb8      	it	lt
 8003978:	4618      	movlt	r0, r3
 800397a:	e7a4      	b.n	80038c6 <_printf_i+0x16a>
 800397c:	2301      	movs	r3, #1
 800397e:	4632      	mov	r2, r6
 8003980:	4649      	mov	r1, r9
 8003982:	4640      	mov	r0, r8
 8003984:	47d0      	blx	sl
 8003986:	3001      	adds	r0, #1
 8003988:	d09b      	beq.n	80038c2 <_printf_i+0x166>
 800398a:	3501      	adds	r5, #1
 800398c:	68e3      	ldr	r3, [r4, #12]
 800398e:	9903      	ldr	r1, [sp, #12]
 8003990:	1a5b      	subs	r3, r3, r1
 8003992:	42ab      	cmp	r3, r5
 8003994:	dcf2      	bgt.n	800397c <_printf_i+0x220>
 8003996:	e7eb      	b.n	8003970 <_printf_i+0x214>
 8003998:	2500      	movs	r5, #0
 800399a:	f104 0619 	add.w	r6, r4, #25
 800399e:	e7f5      	b.n	800398c <_printf_i+0x230>
 80039a0:	08003cd9 	.word	0x08003cd9
 80039a4:	08003cea 	.word	0x08003cea

080039a8 <memchr>:
 80039a8:	4603      	mov	r3, r0
 80039aa:	b510      	push	{r4, lr}
 80039ac:	b2c9      	uxtb	r1, r1
 80039ae:	4402      	add	r2, r0
 80039b0:	4293      	cmp	r3, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	d101      	bne.n	80039ba <memchr+0x12>
 80039b6:	2000      	movs	r0, #0
 80039b8:	e003      	b.n	80039c2 <memchr+0x1a>
 80039ba:	7804      	ldrb	r4, [r0, #0]
 80039bc:	3301      	adds	r3, #1
 80039be:	428c      	cmp	r4, r1
 80039c0:	d1f6      	bne.n	80039b0 <memchr+0x8>
 80039c2:	bd10      	pop	{r4, pc}

080039c4 <memcpy>:
 80039c4:	440a      	add	r2, r1
 80039c6:	4291      	cmp	r1, r2
 80039c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80039cc:	d100      	bne.n	80039d0 <memcpy+0xc>
 80039ce:	4770      	bx	lr
 80039d0:	b510      	push	{r4, lr}
 80039d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039d6:	4291      	cmp	r1, r2
 80039d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039dc:	d1f9      	bne.n	80039d2 <memcpy+0xe>
 80039de:	bd10      	pop	{r4, pc}

080039e0 <memmove>:
 80039e0:	4288      	cmp	r0, r1
 80039e2:	b510      	push	{r4, lr}
 80039e4:	eb01 0402 	add.w	r4, r1, r2
 80039e8:	d902      	bls.n	80039f0 <memmove+0x10>
 80039ea:	4284      	cmp	r4, r0
 80039ec:	4623      	mov	r3, r4
 80039ee:	d807      	bhi.n	8003a00 <memmove+0x20>
 80039f0:	1e43      	subs	r3, r0, #1
 80039f2:	42a1      	cmp	r1, r4
 80039f4:	d008      	beq.n	8003a08 <memmove+0x28>
 80039f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039fe:	e7f8      	b.n	80039f2 <memmove+0x12>
 8003a00:	4601      	mov	r1, r0
 8003a02:	4402      	add	r2, r0
 8003a04:	428a      	cmp	r2, r1
 8003a06:	d100      	bne.n	8003a0a <memmove+0x2a>
 8003a08:	bd10      	pop	{r4, pc}
 8003a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a12:	e7f7      	b.n	8003a04 <memmove+0x24>

08003a14 <_free_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4605      	mov	r5, r0
 8003a18:	2900      	cmp	r1, #0
 8003a1a:	d040      	beq.n	8003a9e <_free_r+0x8a>
 8003a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a20:	1f0c      	subs	r4, r1, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bfb8      	it	lt
 8003a26:	18e4      	addlt	r4, r4, r3
 8003a28:	f000 f910 	bl	8003c4c <__malloc_lock>
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <_free_r+0x8c>)
 8003a2e:	6813      	ldr	r3, [r2, #0]
 8003a30:	b933      	cbnz	r3, 8003a40 <_free_r+0x2c>
 8003a32:	6063      	str	r3, [r4, #4]
 8003a34:	6014      	str	r4, [r2, #0]
 8003a36:	4628      	mov	r0, r5
 8003a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a3c:	f000 b90c 	b.w	8003c58 <__malloc_unlock>
 8003a40:	42a3      	cmp	r3, r4
 8003a42:	d908      	bls.n	8003a56 <_free_r+0x42>
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	1821      	adds	r1, r4, r0
 8003a48:	428b      	cmp	r3, r1
 8003a4a:	bf01      	itttt	eq
 8003a4c:	6819      	ldreq	r1, [r3, #0]
 8003a4e:	685b      	ldreq	r3, [r3, #4]
 8003a50:	1809      	addeq	r1, r1, r0
 8003a52:	6021      	streq	r1, [r4, #0]
 8003a54:	e7ed      	b.n	8003a32 <_free_r+0x1e>
 8003a56:	461a      	mov	r2, r3
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	b10b      	cbz	r3, 8003a60 <_free_r+0x4c>
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	d9fa      	bls.n	8003a56 <_free_r+0x42>
 8003a60:	6811      	ldr	r1, [r2, #0]
 8003a62:	1850      	adds	r0, r2, r1
 8003a64:	42a0      	cmp	r0, r4
 8003a66:	d10b      	bne.n	8003a80 <_free_r+0x6c>
 8003a68:	6820      	ldr	r0, [r4, #0]
 8003a6a:	4401      	add	r1, r0
 8003a6c:	1850      	adds	r0, r2, r1
 8003a6e:	4283      	cmp	r3, r0
 8003a70:	6011      	str	r1, [r2, #0]
 8003a72:	d1e0      	bne.n	8003a36 <_free_r+0x22>
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4401      	add	r1, r0
 8003a7a:	6011      	str	r1, [r2, #0]
 8003a7c:	6053      	str	r3, [r2, #4]
 8003a7e:	e7da      	b.n	8003a36 <_free_r+0x22>
 8003a80:	d902      	bls.n	8003a88 <_free_r+0x74>
 8003a82:	230c      	movs	r3, #12
 8003a84:	602b      	str	r3, [r5, #0]
 8003a86:	e7d6      	b.n	8003a36 <_free_r+0x22>
 8003a88:	6820      	ldr	r0, [r4, #0]
 8003a8a:	1821      	adds	r1, r4, r0
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	bf01      	itttt	eq
 8003a90:	6819      	ldreq	r1, [r3, #0]
 8003a92:	685b      	ldreq	r3, [r3, #4]
 8003a94:	1809      	addeq	r1, r1, r0
 8003a96:	6021      	streq	r1, [r4, #0]
 8003a98:	6063      	str	r3, [r4, #4]
 8003a9a:	6054      	str	r4, [r2, #4]
 8003a9c:	e7cb      	b.n	8003a36 <_free_r+0x22>
 8003a9e:	bd38      	pop	{r3, r4, r5, pc}
 8003aa0:	200001dc 	.word	0x200001dc

08003aa4 <sbrk_aligned>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	4e0e      	ldr	r6, [pc, #56]	; (8003ae0 <sbrk_aligned+0x3c>)
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	6831      	ldr	r1, [r6, #0]
 8003aac:	4605      	mov	r5, r0
 8003aae:	b911      	cbnz	r1, 8003ab6 <sbrk_aligned+0x12>
 8003ab0:	f000 f8bc 	bl	8003c2c <_sbrk_r>
 8003ab4:	6030      	str	r0, [r6, #0]
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	4628      	mov	r0, r5
 8003aba:	f000 f8b7 	bl	8003c2c <_sbrk_r>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	d00a      	beq.n	8003ad8 <sbrk_aligned+0x34>
 8003ac2:	1cc4      	adds	r4, r0, #3
 8003ac4:	f024 0403 	bic.w	r4, r4, #3
 8003ac8:	42a0      	cmp	r0, r4
 8003aca:	d007      	beq.n	8003adc <sbrk_aligned+0x38>
 8003acc:	1a21      	subs	r1, r4, r0
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f000 f8ac 	bl	8003c2c <_sbrk_r>
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d101      	bne.n	8003adc <sbrk_aligned+0x38>
 8003ad8:	f04f 34ff 	mov.w	r4, #4294967295
 8003adc:	4620      	mov	r0, r4
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	200001e0 	.word	0x200001e0

08003ae4 <_malloc_r>:
 8003ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae8:	1ccd      	adds	r5, r1, #3
 8003aea:	f025 0503 	bic.w	r5, r5, #3
 8003aee:	3508      	adds	r5, #8
 8003af0:	2d0c      	cmp	r5, #12
 8003af2:	bf38      	it	cc
 8003af4:	250c      	movcc	r5, #12
 8003af6:	2d00      	cmp	r5, #0
 8003af8:	4607      	mov	r7, r0
 8003afa:	db01      	blt.n	8003b00 <_malloc_r+0x1c>
 8003afc:	42a9      	cmp	r1, r5
 8003afe:	d905      	bls.n	8003b0c <_malloc_r+0x28>
 8003b00:	230c      	movs	r3, #12
 8003b02:	2600      	movs	r6, #0
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4630      	mov	r0, r6
 8003b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b0c:	4e2e      	ldr	r6, [pc, #184]	; (8003bc8 <_malloc_r+0xe4>)
 8003b0e:	f000 f89d 	bl	8003c4c <__malloc_lock>
 8003b12:	6833      	ldr	r3, [r6, #0]
 8003b14:	461c      	mov	r4, r3
 8003b16:	bb34      	cbnz	r4, 8003b66 <_malloc_r+0x82>
 8003b18:	4629      	mov	r1, r5
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	f7ff ffc2 	bl	8003aa4 <sbrk_aligned>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	4604      	mov	r4, r0
 8003b24:	d14d      	bne.n	8003bc2 <_malloc_r+0xde>
 8003b26:	6834      	ldr	r4, [r6, #0]
 8003b28:	4626      	mov	r6, r4
 8003b2a:	2e00      	cmp	r6, #0
 8003b2c:	d140      	bne.n	8003bb0 <_malloc_r+0xcc>
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	4631      	mov	r1, r6
 8003b32:	4638      	mov	r0, r7
 8003b34:	eb04 0803 	add.w	r8, r4, r3
 8003b38:	f000 f878 	bl	8003c2c <_sbrk_r>
 8003b3c:	4580      	cmp	r8, r0
 8003b3e:	d13a      	bne.n	8003bb6 <_malloc_r+0xd2>
 8003b40:	6821      	ldr	r1, [r4, #0]
 8003b42:	3503      	adds	r5, #3
 8003b44:	1a6d      	subs	r5, r5, r1
 8003b46:	f025 0503 	bic.w	r5, r5, #3
 8003b4a:	3508      	adds	r5, #8
 8003b4c:	2d0c      	cmp	r5, #12
 8003b4e:	bf38      	it	cc
 8003b50:	250c      	movcc	r5, #12
 8003b52:	4638      	mov	r0, r7
 8003b54:	4629      	mov	r1, r5
 8003b56:	f7ff ffa5 	bl	8003aa4 <sbrk_aligned>
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d02b      	beq.n	8003bb6 <_malloc_r+0xd2>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	442b      	add	r3, r5
 8003b62:	6023      	str	r3, [r4, #0]
 8003b64:	e00e      	b.n	8003b84 <_malloc_r+0xa0>
 8003b66:	6822      	ldr	r2, [r4, #0]
 8003b68:	1b52      	subs	r2, r2, r5
 8003b6a:	d41e      	bmi.n	8003baa <_malloc_r+0xc6>
 8003b6c:	2a0b      	cmp	r2, #11
 8003b6e:	d916      	bls.n	8003b9e <_malloc_r+0xba>
 8003b70:	1961      	adds	r1, r4, r5
 8003b72:	42a3      	cmp	r3, r4
 8003b74:	6025      	str	r5, [r4, #0]
 8003b76:	bf18      	it	ne
 8003b78:	6059      	strne	r1, [r3, #4]
 8003b7a:	6863      	ldr	r3, [r4, #4]
 8003b7c:	bf08      	it	eq
 8003b7e:	6031      	streq	r1, [r6, #0]
 8003b80:	5162      	str	r2, [r4, r5]
 8003b82:	604b      	str	r3, [r1, #4]
 8003b84:	4638      	mov	r0, r7
 8003b86:	f104 060b 	add.w	r6, r4, #11
 8003b8a:	f000 f865 	bl	8003c58 <__malloc_unlock>
 8003b8e:	f026 0607 	bic.w	r6, r6, #7
 8003b92:	1d23      	adds	r3, r4, #4
 8003b94:	1af2      	subs	r2, r6, r3
 8003b96:	d0b6      	beq.n	8003b06 <_malloc_r+0x22>
 8003b98:	1b9b      	subs	r3, r3, r6
 8003b9a:	50a3      	str	r3, [r4, r2]
 8003b9c:	e7b3      	b.n	8003b06 <_malloc_r+0x22>
 8003b9e:	6862      	ldr	r2, [r4, #4]
 8003ba0:	42a3      	cmp	r3, r4
 8003ba2:	bf0c      	ite	eq
 8003ba4:	6032      	streq	r2, [r6, #0]
 8003ba6:	605a      	strne	r2, [r3, #4]
 8003ba8:	e7ec      	b.n	8003b84 <_malloc_r+0xa0>
 8003baa:	4623      	mov	r3, r4
 8003bac:	6864      	ldr	r4, [r4, #4]
 8003bae:	e7b2      	b.n	8003b16 <_malloc_r+0x32>
 8003bb0:	4634      	mov	r4, r6
 8003bb2:	6876      	ldr	r6, [r6, #4]
 8003bb4:	e7b9      	b.n	8003b2a <_malloc_r+0x46>
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	4638      	mov	r0, r7
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	f000 f84c 	bl	8003c58 <__malloc_unlock>
 8003bc0:	e7a1      	b.n	8003b06 <_malloc_r+0x22>
 8003bc2:	6025      	str	r5, [r4, #0]
 8003bc4:	e7de      	b.n	8003b84 <_malloc_r+0xa0>
 8003bc6:	bf00      	nop
 8003bc8:	200001dc 	.word	0x200001dc

08003bcc <_realloc_r>:
 8003bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd0:	4680      	mov	r8, r0
 8003bd2:	4614      	mov	r4, r2
 8003bd4:	460e      	mov	r6, r1
 8003bd6:	b921      	cbnz	r1, 8003be2 <_realloc_r+0x16>
 8003bd8:	4611      	mov	r1, r2
 8003bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bde:	f7ff bf81 	b.w	8003ae4 <_malloc_r>
 8003be2:	b92a      	cbnz	r2, 8003bf0 <_realloc_r+0x24>
 8003be4:	f7ff ff16 	bl	8003a14 <_free_r>
 8003be8:	4625      	mov	r5, r4
 8003bea:	4628      	mov	r0, r5
 8003bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bf0:	f000 f838 	bl	8003c64 <_malloc_usable_size_r>
 8003bf4:	4284      	cmp	r4, r0
 8003bf6:	4607      	mov	r7, r0
 8003bf8:	d802      	bhi.n	8003c00 <_realloc_r+0x34>
 8003bfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bfe:	d812      	bhi.n	8003c26 <_realloc_r+0x5a>
 8003c00:	4621      	mov	r1, r4
 8003c02:	4640      	mov	r0, r8
 8003c04:	f7ff ff6e 	bl	8003ae4 <_malloc_r>
 8003c08:	4605      	mov	r5, r0
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d0ed      	beq.n	8003bea <_realloc_r+0x1e>
 8003c0e:	42bc      	cmp	r4, r7
 8003c10:	4622      	mov	r2, r4
 8003c12:	4631      	mov	r1, r6
 8003c14:	bf28      	it	cs
 8003c16:	463a      	movcs	r2, r7
 8003c18:	f7ff fed4 	bl	80039c4 <memcpy>
 8003c1c:	4631      	mov	r1, r6
 8003c1e:	4640      	mov	r0, r8
 8003c20:	f7ff fef8 	bl	8003a14 <_free_r>
 8003c24:	e7e1      	b.n	8003bea <_realloc_r+0x1e>
 8003c26:	4635      	mov	r5, r6
 8003c28:	e7df      	b.n	8003bea <_realloc_r+0x1e>
	...

08003c2c <_sbrk_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	2300      	movs	r3, #0
 8003c30:	4d05      	ldr	r5, [pc, #20]	; (8003c48 <_sbrk_r+0x1c>)
 8003c32:	4604      	mov	r4, r0
 8003c34:	4608      	mov	r0, r1
 8003c36:	602b      	str	r3, [r5, #0]
 8003c38:	f7fc fe50 	bl	80008dc <_sbrk>
 8003c3c:	1c43      	adds	r3, r0, #1
 8003c3e:	d102      	bne.n	8003c46 <_sbrk_r+0x1a>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	b103      	cbz	r3, 8003c46 <_sbrk_r+0x1a>
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
 8003c48:	200001e4 	.word	0x200001e4

08003c4c <__malloc_lock>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	; (8003c54 <__malloc_lock+0x8>)
 8003c4e:	f000 b811 	b.w	8003c74 <__retarget_lock_acquire_recursive>
 8003c52:	bf00      	nop
 8003c54:	200001e8 	.word	0x200001e8

08003c58 <__malloc_unlock>:
 8003c58:	4801      	ldr	r0, [pc, #4]	; (8003c60 <__malloc_unlock+0x8>)
 8003c5a:	f000 b80c 	b.w	8003c76 <__retarget_lock_release_recursive>
 8003c5e:	bf00      	nop
 8003c60:	200001e8 	.word	0x200001e8

08003c64 <_malloc_usable_size_r>:
 8003c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c68:	1f18      	subs	r0, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bfbc      	itt	lt
 8003c6e:	580b      	ldrlt	r3, [r1, r0]
 8003c70:	18c0      	addlt	r0, r0, r3
 8003c72:	4770      	bx	lr

08003c74 <__retarget_lock_acquire_recursive>:
 8003c74:	4770      	bx	lr

08003c76 <__retarget_lock_release_recursive>:
 8003c76:	4770      	bx	lr

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
