
Imp_catch_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c94  08003c94  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c94  08003c94  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c94  08003c94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000070  08003d0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003d0c  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aac7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afc  00000000  00000000  0002ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b3b  00000000  00000000  0002ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c413  00000000  00000000  00045933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a751  00000000  00000000  00051d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc497  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036b0  00000000  00000000  000dc4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c10 	.word	0x08003c10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003c10 	.word	0x08003c10

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <DWT_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DWT_Init(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000160:	4b07      	ldr	r3, [pc, #28]	; (8000180 <DWT_Init+0x24>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a06      	ldr	r2, [pc, #24]	; (8000180 <DWT_Init+0x24>)
 8000166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800016a:	6013      	str	r3, [r2, #0]
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 800016c:	4b05      	ldr	r3, [pc, #20]	; (8000184 <DWT_Init+0x28>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	4a04      	ldr	r2, [pc, #16]	; (8000184 <DWT_Init+0x28>)
 8000172:	f043 0301 	orr.w	r3, r3, #1
 8000176:	6013      	str	r3, [r2, #0]
}
 8000178:	bf00      	nop
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000edfc 	.word	0xe000edfc
 8000184:	e0001000 	.word	0xe0001000

08000188 <HAL_TIM_PeriodElapsedCallback>:
    DWT->CYCCNT = 0U; // обнуляем счётчик
    while(DWT->CYCCNT < us_count_tic);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // переполнение таймеров
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000198:	d106      	bne.n	80001a8 <HAL_TIM_PeriodElapsedCallback+0x20>
        {
                count_overflow++;
 800019a:	4b1c      	ldr	r3, [pc, #112]	; (800020c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	3301      	adds	r3, #1
 80001a2:	b2da      	uxtb	r2, r3
 80001a4:	4b19      	ldr	r3, [pc, #100]	; (800020c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80001a6:	701a      	strb	r2, [r3, #0]
        }

        if(htim == &htim1)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4a19      	ldr	r2, [pc, #100]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80001ac:	4293      	cmp	r3, r2
 80001ae:	d128      	bne.n	8000202 <HAL_TIM_PeriodElapsedCallback+0x7a>
        {
                T = (Ti / N);
 80001b0:	4b18      	ldr	r3, [pc, #96]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80001bc:	4a17      	ldr	r2, [pc, #92]	; (800021c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80001be:	6013      	str	r3, [r2, #0]

                //snprintf(trans_str, 96, "Pulse %lu mks\n", test);
                //test = 0;
                //snprintf(trans_str, 96, "Pulse %lu mks\n", falling);
                snprintf(trans_str, 96, "Freq %lu Hz\n", 1000000/T);
 80001c0:	4b16      	ldr	r3, [pc, #88]	; (800021c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a16      	ldr	r2, [pc, #88]	; (8000220 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80001c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80001ca:	4a16      	ldr	r2, [pc, #88]	; (8000224 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80001cc:	2160      	movs	r1, #96	; 0x60
 80001ce:	4816      	ldr	r0, [pc, #88]	; (8000228 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80001d0:	f003 f890 	bl	80032f4 <sniprintf>
                HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80001d4:	4814      	ldr	r0, [pc, #80]	; (8000228 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80001d6:	f7ff ffb9 	bl	800014c <strlen>
 80001da:	4603      	mov	r3, r0
 80001dc:	b29a      	uxth	r2, r3
 80001de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e2:	4911      	ldr	r1, [pc, #68]	; (8000228 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80001e4:	4811      	ldr	r0, [pc, #68]	; (800022c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80001e6:	f002 fbc8 	bl	800297a <HAL_UART_Transmit>

                Ti = 0;
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
                N = 0;
 80001f0:	4b09      	ldr	r3, [pc, #36]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]

                HAL_TIM_Base_Stop_IT(&htim1);
 80001f6:	4806      	ldr	r0, [pc, #24]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80001f8:	f001 fc32 	bl	8001a60 <HAL_TIM_Base_Stop_IT>
                HAL_TIM_Base_Start_IT(&htim1);
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80001fe:	f001 fbdd 	bl	80019bc <HAL_TIM_Base_Start_IT>
        }
}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	200001d0 	.word	0x200001d0
 8000210:	2000008c 	.word	0x2000008c
 8000214:	200001c4 	.word	0x200001c4
 8000218:	200001cc 	.word	0x200001cc
 800021c:	200001c8 	.word	0x200001c8
 8000220:	000f4240 	.word	0x000f4240
 8000224:	08003c28 	.word	0x08003c28
 8000228:	20000164 	.word	0x20000164
 800022c:	2000011c 	.word	0x2000011c

08000230 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // таймер измерения импульсов
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000240:	d11a      	bne.n	8000278 <HAL_TIM_IC_CaptureCallback+0x48>
    {
            if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // RISING с LOW на HIGH
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	7f1b      	ldrb	r3, [r3, #28]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d10a      	bne.n	8000260 <HAL_TIM_IC_CaptureCallback+0x30>
            {

            		TIM2->CNT = 0;
 800024a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024e:	2200      	movs	r2, #0
 8000250:	625a      	str	r2, [r3, #36]	; 0x24
            		period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);//период
 8000252:	2100      	movs	r1, #0
 8000254:	480a      	ldr	r0, [pc, #40]	; (8000280 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000256:	f002 f849 	bl	80022ec <HAL_TIM_ReadCapturedValue>
 800025a:	4603      	mov	r3, r0
 800025c:	4a09      	ldr	r2, [pc, #36]	; (8000284 <HAL_TIM_IC_CaptureCallback+0x54>)
 800025e:	6013      	str	r3, [r2, #0]
            		falling = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2) + (__HAL_TIM_GET_AUTORELOAD(&htim2) * count_overflow); // чтение значения в регистре захвата/сравнения
                    Ti = Ti + falling;
            }*/

            //Ti = Ti + period;
    		Ti = Ti + period;
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4413      	add	r3, r2
 800026a:	4a07      	ldr	r2, [pc, #28]	; (8000288 <HAL_TIM_IC_CaptureCallback+0x58>)
 800026c:	6013      	str	r3, [r2, #0]
            N++;
 800026e:	4b07      	ldr	r3, [pc, #28]	; (800028c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3301      	adds	r3, #1
 8000274:	4a05      	ldr	r2, [pc, #20]	; (800028c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000276:	6013      	str	r3, [r2, #0]
    }
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	200000d4 	.word	0x200000d4
 8000284:	20000160 	.word	0x20000160
 8000288:	200001c4 	.word	0x200001c4
 800028c:	200001cc 	.word	0x200001cc

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fb4c 	bl	8000930 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8000298:	f7ff ff60 	bl	800015c <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f81c 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 f968 	bl	8000574 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002a4:	f000 f93c 	bl	8000520 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80002a8:	f000 f8bc 	bl	8000424 <MX_TIM2_Init>
  MX_TIM1_Init();
 80002ac:	f000 f860 	bl	8000370 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80002b0:	4807      	ldr	r0, [pc, #28]	; (80002d0 <main+0x40>)
 80002b2:	f001 fb83 	bl	80019bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80002b6:	4807      	ldr	r0, [pc, #28]	; (80002d4 <main+0x44>)
 80002b8:	f001 fb80 	bl	80019bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80002bc:	2100      	movs	r1, #0
 80002be:	4805      	ldr	r0, [pc, #20]	; (80002d4 <main+0x44>)
 80002c0:	f001 fc54 	bl	8001b6c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80002c4:	2104      	movs	r1, #4
 80002c6:	4803      	ldr	r0, [pc, #12]	; (80002d4 <main+0x44>)
 80002c8:	f001 fc50 	bl	8001b6c <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <main+0x3c>
 80002ce:	bf00      	nop
 80002d0:	2000008c 	.word	0x2000008c
 80002d4:	200000d4 	.word	0x200000d4

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b090      	sub	sp, #64	; 0x40
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	2228      	movs	r2, #40	; 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fffc 	bl	80032e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fa:	2301      	movs	r3, #1
 80002fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000302:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	2302      	movs	r3, #2
 800030e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000314:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000316:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800031a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031c:	f107 0318 	add.w	r3, r7, #24
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fea9 	bl	8001078 <HAL_RCC_OscConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800032c:	f000 f95a 	bl	80005e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
 8000332:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2302      	movs	r3, #2
 8000336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f001 f916 	bl	800157c <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000356:	f000 f945 	bl	80005e4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800035a:	2200      	movs	r2, #0
 800035c:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8000360:	2000      	movs	r0, #0
 8000362:	f001 f9f5 	bl	8001750 <HAL_RCC_MCOConfig>
}
 8000366:	bf00      	nop
 8000368:	3740      	adds	r7, #64	; 0x40
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000384:	463b      	mov	r3, r7
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <MX_TIM1_Init+0xac>)
 800038e:	4a24      	ldr	r2, [pc, #144]	; (8000420 <MX_TIM1_Init+0xb0>)
 8000390:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8000392:	4b22      	ldr	r3, [pc, #136]	; (800041c <MX_TIM1_Init+0xac>)
 8000394:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000398:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800039a:	4b20      	ldr	r3, [pc, #128]	; (800041c <MX_TIM1_Init+0xac>)
 800039c:	2210      	movs	r2, #16
 800039e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80003a0:	4b1e      	ldr	r3, [pc, #120]	; (800041c <MX_TIM1_Init+0xac>)
 80003a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80003a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <MX_TIM1_Init+0xac>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003ae:	4b1b      	ldr	r3, [pc, #108]	; (800041c <MX_TIM1_Init+0xac>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b4:	4b19      	ldr	r3, [pc, #100]	; (800041c <MX_TIM1_Init+0xac>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003ba:	4818      	ldr	r0, [pc, #96]	; (800041c <MX_TIM1_Init+0xac>)
 80003bc:	f001 faae 	bl	800191c <HAL_TIM_Base_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80003c6:	f000 f90d 	bl	80005e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003d0:	f107 0308 	add.w	r3, r7, #8
 80003d4:	4619      	mov	r1, r3
 80003d6:	4811      	ldr	r0, [pc, #68]	; (800041c <MX_TIM1_Init+0xac>)
 80003d8:	f001 fec3 	bl	8002162 <HAL_TIM_ConfigClockSource>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80003e2:	f000 f8ff 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80003e6:	2108      	movs	r1, #8
 80003e8:	480c      	ldr	r0, [pc, #48]	; (800041c <MX_TIM1_Init+0xac>)
 80003ea:	f001 fcc5 	bl	8001d78 <HAL_TIM_OnePulse_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80003f4:	f000 f8f6 	bl	80005e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80003f8:	2310      	movs	r3, #16
 80003fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000400:	463b      	mov	r3, r7
 8000402:	4619      	mov	r1, r3
 8000404:	4805      	ldr	r0, [pc, #20]	; (800041c <MX_TIM1_Init+0xac>)
 8000406:	f002 f9fb 	bl	8002800 <HAL_TIMEx_MasterConfigSynchronization>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000410:	f000 f8e8 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000414:	bf00      	nop
 8000416:	3718      	adds	r7, #24
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	2000008c 	.word	0x2000008c
 8000420:	40012c00 	.word	0x40012c00

08000424 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b08a      	sub	sp, #40	; 0x28
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800042a:	f107 0318 	add.w	r3, r7, #24
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000442:	463b      	mov	r3, r7
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800044e:	4b33      	ldr	r3, [pc, #204]	; (800051c <MX_TIM2_Init+0xf8>)
 8000450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000454:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000456:	4b31      	ldr	r3, [pc, #196]	; (800051c <MX_TIM2_Init+0xf8>)
 8000458:	2247      	movs	r2, #71	; 0x47
 800045a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045c:	4b2f      	ldr	r3, [pc, #188]	; (800051c <MX_TIM2_Init+0xf8>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000462:	4b2e      	ldr	r3, [pc, #184]	; (800051c <MX_TIM2_Init+0xf8>)
 8000464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000468:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800046a:	4b2c      	ldr	r3, [pc, #176]	; (800051c <MX_TIM2_Init+0xf8>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000470:	4b2a      	ldr	r3, [pc, #168]	; (800051c <MX_TIM2_Init+0xf8>)
 8000472:	2200      	movs	r2, #0
 8000474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000476:	4829      	ldr	r0, [pc, #164]	; (800051c <MX_TIM2_Init+0xf8>)
 8000478:	f001 fa50 	bl	800191c <HAL_TIM_Base_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000482:	f000 f8af 	bl	80005e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800048a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800048c:	f107 0318 	add.w	r3, r7, #24
 8000490:	4619      	mov	r1, r3
 8000492:	4822      	ldr	r0, [pc, #136]	; (800051c <MX_TIM2_Init+0xf8>)
 8000494:	f001 fe65 	bl	8002162 <HAL_TIM_ConfigClockSource>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800049e:	f000 f8a1 	bl	80005e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80004a2:	481e      	ldr	r0, [pc, #120]	; (800051c <MX_TIM2_Init+0xf8>)
 80004a4:	f001 fb0a 	bl	8001abc <HAL_TIM_IC_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004ae:	f000 f899 	bl	80005e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	4619      	mov	r1, r3
 80004c0:	4816      	ldr	r0, [pc, #88]	; (800051c <MX_TIM2_Init+0xf8>)
 80004c2:	f002 f99d 	bl	8002800 <HAL_TIMEx_MasterConfigSynchronization>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80004cc:	f000 f88a 	bl	80005e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80004d0:	2300      	movs	r3, #0
 80004d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80004d4:	2301      	movs	r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80004e0:	463b      	mov	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	4619      	mov	r1, r3
 80004e6:	480d      	ldr	r0, [pc, #52]	; (800051c <MX_TIM2_Init+0xf8>)
 80004e8:	f001 fda7 	bl	800203a <HAL_TIM_IC_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80004f2:	f000 f877 	bl	80005e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80004f6:	2302      	movs	r3, #2
 80004f8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80004fa:	2302      	movs	r3, #2
 80004fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80004fe:	463b      	mov	r3, r7
 8000500:	2204      	movs	r2, #4
 8000502:	4619      	mov	r1, r3
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <MX_TIM2_Init+0xf8>)
 8000506:	f001 fd98 	bl	800203a <HAL_TIM_IC_ConfigChannel>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000510:	f000 f868 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000514:	bf00      	nop
 8000516:	3728      	adds	r7, #40	; 0x28
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200000d4 	.word	0x200000d4

08000520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <MX_USART1_UART_Init+0x50>)
 8000528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <MX_USART1_UART_Init+0x4c>)
 800052c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_USART1_UART_Init+0x4c>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000546:	220c      	movs	r2, #12
 8000548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <MX_USART1_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000558:	f002 f9c2 	bl	80028e0 <HAL_UART_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000562:	f000 f83f 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	2000011c 	.word	0x2000011c
 8000570:	40013800 	.word	0x40013800

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_GPIO_Init+0x68>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <MX_GPIO_Init+0x68>)
 800058e:	f043 0320 	orr.w	r3, r3, #32
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_GPIO_Init+0x68>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0320 	and.w	r3, r3, #32
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_GPIO_Init+0x68>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <MX_GPIO_Init+0x68>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <MX_GPIO_Init+0x68>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	4619      	mov	r1, r3
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <MX_GPIO_Init+0x6c>)
 80005ce:	f000 fbcf 	bl	8000d70 <HAL_GPIO_Init>

}
 80005d2:	bf00      	nop
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010800 	.word	0x40010800

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
}
 80005ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ec:	e7fe      	b.n	80005ec <Error_Handler+0x8>
	...

080005f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_MspInit+0x5c>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a14      	ldr	r2, [pc, #80]	; (800064c <HAL_MspInit+0x5c>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6193      	str	r3, [r2, #24]
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_MspInit+0x5c>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_MspInit+0x5c>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <HAL_MspInit+0x5c>)
 8000614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_MspInit+0x5c>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_MspInit+0x60>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <HAL_MspInit+0x60>)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	40021000 	.word	0x40021000
 8000650:	40010000 	.word	0x40010000

08000654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a2a      	ldr	r2, [pc, #168]	; (8000718 <HAL_TIM_Base_MspInit+0xc4>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d11c      	bne.n	80006ae <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000674:	4b29      	ldr	r3, [pc, #164]	; (800071c <HAL_TIM_Base_MspInit+0xc8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a28      	ldr	r2, [pc, #160]	; (800071c <HAL_TIM_Base_MspInit+0xc8>)
 800067a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <HAL_TIM_Base_MspInit+0xc8>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000688:	617b      	str	r3, [r7, #20]
 800068a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2100      	movs	r1, #0
 8000690:	2019      	movs	r0, #25
 8000692:	f000 fa86 	bl	8000ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000696:	2019      	movs	r0, #25
 8000698:	f000 fa9f 	bl	8000bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	201b      	movs	r0, #27
 80006a2:	f000 fa7e 	bl	8000ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80006a6:	201b      	movs	r0, #27
 80006a8:	f000 fa97 	bl	8000bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006ac:	e030      	b.n	8000710 <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM2)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006b6:	d12b      	bne.n	8000710 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <HAL_TIM_Base_MspInit+0xc8>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a17      	ldr	r2, [pc, #92]	; (800071c <HAL_TIM_Base_MspInit+0xc8>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	61d3      	str	r3, [r2, #28]
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_TIM_Base_MspInit+0xc8>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_TIM_Base_MspInit+0xc8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a11      	ldr	r2, [pc, #68]	; (800071c <HAL_TIM_Base_MspInit+0xc8>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_TIM_Base_MspInit+0xc8>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	4619      	mov	r1, r3
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <HAL_TIM_Base_MspInit+0xcc>)
 80006fc:	f000 fb38 	bl	8000d70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	201c      	movs	r0, #28
 8000706:	f000 fa4c 	bl	8000ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800070a:	201c      	movs	r0, #28
 800070c:	f000 fa65 	bl	8000bda <HAL_NVIC_EnableIRQ>
}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	; 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40012c00 	.word	0x40012c00
 800071c:	40021000 	.word	0x40021000
 8000720:	40010800 	.word	0x40010800

08000724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <HAL_UART_MspInit+0x9c>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d139      	bne.n	80007b8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <HAL_UART_MspInit+0xa0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <HAL_UART_MspInit+0xa0>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <HAL_UART_MspInit+0xa0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <HAL_UART_MspInit+0xa0>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <HAL_UART_MspInit+0xa0>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <HAL_UART_MspInit+0xa0>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0304 	and.w	r3, r3, #4
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000778:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	480f      	ldr	r0, [pc, #60]	; (80007c8 <HAL_UART_MspInit+0xa4>)
 800078a:	f000 faf1 	bl	8000d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800078e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	4809      	ldr	r0, [pc, #36]	; (80007c8 <HAL_UART_MspInit+0xa4>)
 80007a4:	f000 fae4 	bl	8000d70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	2025      	movs	r0, #37	; 0x25
 80007ae:	f000 f9f8 	bl	8000ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007b2:	2025      	movs	r0, #37	; 0x25
 80007b4:	f000 fa11 	bl	8000bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40013800 	.word	0x40013800
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <MemManage_Handler+0x4>

080007de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <BusFault_Handler+0x4>

080007e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <UsageFault_Handler+0x4>

080007ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000812:	f000 f8d3 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <TIM1_UP_IRQHandler+0x10>)
 8000822:	f001 fb02 	bl	8001e2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000008c 	.word	0x2000008c

08000830 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <TIM1_CC_IRQHandler+0x10>)
 8000836:	f001 faf8 	bl	8001e2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000008c 	.word	0x2000008c

08000844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <TIM2_IRQHandler+0x10>)
 800084a:	f001 faee 	bl	8001e2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000d4 	.word	0x200000d4

08000858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <USART1_IRQHandler+0x10>)
 800085e:	f002 f91f 	bl	8002aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000011c 	.word	0x2000011c

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800089c:	f002 fcf8 	bl	8003290 <__errno>
 80008a0:	4603      	mov	r3, r0
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <_sbrk+0x64>)
 80008bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20005000 	.word	0x20005000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	200001d4 	.word	0x200001d4
 80008d4:	200001f0 	.word	0x200001f0

080008d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800090a:	f7ff ffe5 	bl	80008d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090e:	f002 fcc5 	bl	800329c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fcbd 	bl	8000290 <main>
  bx lr
 8000916:	4770      	bx	lr
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000920:	08003c9c 	.word	0x08003c9c
  ldr r2, =_sbss
 8000924:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000928:	200001ec 	.word	0x200001ec

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_Init+0x28>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	; (8000958 <HAL_Init+0x28>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f923 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	200f      	movs	r0, #15
 8000948:	f000 f808 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f7ff fe50 	bl	80005f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x54>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x58>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f93b 	bl	8000bf6 <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e00e      	b.n	80009a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d80a      	bhi.n	80009a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f000 f903 	bl	8000ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <HAL_InitTick+0x5c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x1c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x20>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a03      	ldr	r2, [pc, #12]	; (80009dc <HAL_IncTick+0x20>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000008 	.word	0x20000008
 80009dc:	200001d8 	.word	0x200001d8

080009e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <HAL_GetTick+0x10>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	200001d8 	.word	0x200001d8

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0b      	blt.n	8000a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4906      	ldr	r1, [pc, #24]	; (8000a8c <__NVIC_EnableIRQ+0x34>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f7ff ff90 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff2d 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb4:	f7ff ff42 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff ff90 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff5f 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff35 	bl	8000a58 <__NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffa2 	bl	8000b48 <SysTick_Config>
 8000c04:	4603      	mov	r3, r0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b085      	sub	sp, #20
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d008      	beq.n	8000c36 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2204      	movs	r2, #4
 8000c28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e020      	b.n	8000c78 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 020e 	bic.w	r2, r2, #14
 8000c44:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 0201 	bic.w	r2, r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c5e:	2101      	movs	r1, #1
 8000c60:	fa01 f202 	lsl.w	r2, r1, r2
 8000c64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
	...

08000c84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d005      	beq.n	8000ca6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e051      	b.n	8000d4a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 020e 	bic.w	r2, r2, #14
 8000cb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0201 	bic.w	r2, r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <HAL_DMA_Abort_IT+0xd0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d029      	beq.n	8000d24 <HAL_DMA_Abort_IT+0xa0>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a20      	ldr	r2, [pc, #128]	; (8000d58 <HAL_DMA_Abort_IT+0xd4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d022      	beq.n	8000d20 <HAL_DMA_Abort_IT+0x9c>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <HAL_DMA_Abort_IT+0xd8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d01a      	beq.n	8000d1a <HAL_DMA_Abort_IT+0x96>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <HAL_DMA_Abort_IT+0xdc>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d012      	beq.n	8000d14 <HAL_DMA_Abort_IT+0x90>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <HAL_DMA_Abort_IT+0xe0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00a      	beq.n	8000d0e <HAL_DMA_Abort_IT+0x8a>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a1a      	ldr	r2, [pc, #104]	; (8000d68 <HAL_DMA_Abort_IT+0xe4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d102      	bne.n	8000d08 <HAL_DMA_Abort_IT+0x84>
 8000d02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d06:	e00e      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d0c:	e00b      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d12:	e008      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	e005      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1e:	e002      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d20:	2310      	movs	r3, #16
 8000d22:	e000      	b.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000d24:	2301      	movs	r3, #1
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <HAL_DMA_Abort_IT+0xe8>)
 8000d28:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	4798      	blx	r3
    } 
  }
  return status;
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40020008 	.word	0x40020008
 8000d58:	4002001c 	.word	0x4002001c
 8000d5c:	40020030 	.word	0x40020030
 8000d60:	40020044 	.word	0x40020044
 8000d64:	40020058 	.word	0x40020058
 8000d68:	4002006c 	.word	0x4002006c
 8000d6c:	40020000 	.word	0x40020000

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b08b      	sub	sp, #44	; 0x2c
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e169      	b.n	8001058 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d84:	2201      	movs	r2, #1
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f040 8158 	bne.w	8001052 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	4a9a      	ldr	r2, [pc, #616]	; (8001010 <HAL_GPIO_Init+0x2a0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d05e      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000dac:	4a98      	ldr	r2, [pc, #608]	; (8001010 <HAL_GPIO_Init+0x2a0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d875      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000db2:	4a98      	ldr	r2, [pc, #608]	; (8001014 <HAL_GPIO_Init+0x2a4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d058      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000db8:	4a96      	ldr	r2, [pc, #600]	; (8001014 <HAL_GPIO_Init+0x2a4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d86f      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000dbe:	4a96      	ldr	r2, [pc, #600]	; (8001018 <HAL_GPIO_Init+0x2a8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d052      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000dc4:	4a94      	ldr	r2, [pc, #592]	; (8001018 <HAL_GPIO_Init+0x2a8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d869      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000dca:	4a94      	ldr	r2, [pc, #592]	; (800101c <HAL_GPIO_Init+0x2ac>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d04c      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000dd0:	4a92      	ldr	r2, [pc, #584]	; (800101c <HAL_GPIO_Init+0x2ac>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d863      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000dd6:	4a92      	ldr	r2, [pc, #584]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d046      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
 8000ddc:	4a90      	ldr	r2, [pc, #576]	; (8001020 <HAL_GPIO_Init+0x2b0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d85d      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000de2:	2b12      	cmp	r3, #18
 8000de4:	d82a      	bhi.n	8000e3c <HAL_GPIO_Init+0xcc>
 8000de6:	2b12      	cmp	r3, #18
 8000de8:	d859      	bhi.n	8000e9e <HAL_GPIO_Init+0x12e>
 8000dea:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <HAL_GPIO_Init+0x80>)
 8000dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df0:	08000e6b 	.word	0x08000e6b
 8000df4:	08000e45 	.word	0x08000e45
 8000df8:	08000e57 	.word	0x08000e57
 8000dfc:	08000e99 	.word	0x08000e99
 8000e00:	08000e9f 	.word	0x08000e9f
 8000e04:	08000e9f 	.word	0x08000e9f
 8000e08:	08000e9f 	.word	0x08000e9f
 8000e0c:	08000e9f 	.word	0x08000e9f
 8000e10:	08000e9f 	.word	0x08000e9f
 8000e14:	08000e9f 	.word	0x08000e9f
 8000e18:	08000e9f 	.word	0x08000e9f
 8000e1c:	08000e9f 	.word	0x08000e9f
 8000e20:	08000e9f 	.word	0x08000e9f
 8000e24:	08000e9f 	.word	0x08000e9f
 8000e28:	08000e9f 	.word	0x08000e9f
 8000e2c:	08000e9f 	.word	0x08000e9f
 8000e30:	08000e9f 	.word	0x08000e9f
 8000e34:	08000e4d 	.word	0x08000e4d
 8000e38:	08000e61 	.word	0x08000e61
 8000e3c:	4a79      	ldr	r2, [pc, #484]	; (8001024 <HAL_GPIO_Init+0x2b4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e42:	e02c      	b.n	8000e9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	623b      	str	r3, [r7, #32]
          break;
 8000e4a:	e029      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	3304      	adds	r3, #4
 8000e52:	623b      	str	r3, [r7, #32]
          break;
 8000e54:	e024      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	3308      	adds	r3, #8
 8000e5c:	623b      	str	r3, [r7, #32]
          break;
 8000e5e:	e01f      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	330c      	adds	r3, #12
 8000e66:	623b      	str	r3, [r7, #32]
          break;
 8000e68:	e01a      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e72:	2304      	movs	r3, #4
 8000e74:	623b      	str	r3, [r7, #32]
          break;
 8000e76:	e013      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d105      	bne.n	8000e8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e80:	2308      	movs	r3, #8
 8000e82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	611a      	str	r2, [r3, #16]
          break;
 8000e8a:	e009      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	615a      	str	r2, [r3, #20]
          break;
 8000e96:	e003      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
          break;
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x130>
          break;
 8000e9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2bff      	cmp	r3, #255	; 0xff
 8000ea4:	d801      	bhi.n	8000eaa <HAL_GPIO_Init+0x13a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	e001      	b.n	8000eae <HAL_GPIO_Init+0x13e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3304      	adds	r3, #4
 8000eae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2bff      	cmp	r3, #255	; 0xff
 8000eb4:	d802      	bhi.n	8000ebc <HAL_GPIO_Init+0x14c>
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_Init+0x152>
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	3b08      	subs	r3, #8
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	210f      	movs	r1, #15
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	6a39      	ldr	r1, [r7, #32]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	431a      	orrs	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 80b1 	beq.w	8001052 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef0:	4b4d      	ldr	r3, [pc, #308]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a4c      	ldr	r2, [pc, #304]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f08:	4a48      	ldr	r2, [pc, #288]	; (800102c <HAL_GPIO_Init+0x2bc>)
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a40      	ldr	r2, [pc, #256]	; (8001030 <HAL_GPIO_Init+0x2c0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d013      	beq.n	8000f5c <HAL_GPIO_Init+0x1ec>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a3f      	ldr	r2, [pc, #252]	; (8001034 <HAL_GPIO_Init+0x2c4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d00d      	beq.n	8000f58 <HAL_GPIO_Init+0x1e8>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a3e      	ldr	r2, [pc, #248]	; (8001038 <HAL_GPIO_Init+0x2c8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d007      	beq.n	8000f54 <HAL_GPIO_Init+0x1e4>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a3d      	ldr	r2, [pc, #244]	; (800103c <HAL_GPIO_Init+0x2cc>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d101      	bne.n	8000f50 <HAL_GPIO_Init+0x1e0>
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e006      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f50:	2304      	movs	r3, #4
 8000f52:	e004      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f60:	f002 0203 	and.w	r2, r2, #3
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	4093      	lsls	r3, r2
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f6e:	492f      	ldr	r1, [pc, #188]	; (800102c <HAL_GPIO_Init+0x2bc>)
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	492c      	ldr	r1, [pc, #176]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	600b      	str	r3, [r1, #0]
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4928      	ldr	r1, [pc, #160]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d006      	beq.n	8000fbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	4922      	ldr	r1, [pc, #136]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	491e      	ldr	r1, [pc, #120]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	4918      	ldr	r1, [pc, #96]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	608b      	str	r3, [r1, #8]
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	4914      	ldr	r1, [pc, #80]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d021      	beq.n	8001044 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	490e      	ldr	r1, [pc, #56]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	60cb      	str	r3, [r1, #12]
 800100c:	e021      	b.n	8001052 <HAL_GPIO_Init+0x2e2>
 800100e:	bf00      	nop
 8001010:	10320000 	.word	0x10320000
 8001014:	10310000 	.word	0x10310000
 8001018:	10220000 	.word	0x10220000
 800101c:	10210000 	.word	0x10210000
 8001020:	10120000 	.word	0x10120000
 8001024:	10110000 	.word	0x10110000
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000
 8001030:	40010800 	.word	0x40010800
 8001034:	40010c00 	.word	0x40010c00
 8001038:	40011000 	.word	0x40011000
 800103c:	40011400 	.word	0x40011400
 8001040:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_GPIO_Init+0x304>)
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	43db      	mvns	r3, r3
 800104c:	4909      	ldr	r1, [pc, #36]	; (8001074 <HAL_GPIO_Init+0x304>)
 800104e:	4013      	ands	r3, r2
 8001050:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	3301      	adds	r3, #1
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	fa22 f303 	lsr.w	r3, r2, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	f47f ae8e 	bne.w	8000d84 <HAL_GPIO_Init+0x14>
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	372c      	adds	r7, #44	; 0x2c
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e272      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 8087 	beq.w	80011a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001098:	4b92      	ldr	r3, [pc, #584]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 030c 	and.w	r3, r3, #12
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d00c      	beq.n	80010be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010a4:	4b8f      	ldr	r3, [pc, #572]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d112      	bne.n	80010d6 <HAL_RCC_OscConfig+0x5e>
 80010b0:	4b8c      	ldr	r3, [pc, #560]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010bc:	d10b      	bne.n	80010d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010be:	4b89      	ldr	r3, [pc, #548]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d06c      	beq.n	80011a4 <HAL_RCC_OscConfig+0x12c>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d168      	bne.n	80011a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e24c      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010de:	d106      	bne.n	80010ee <HAL_RCC_OscConfig+0x76>
 80010e0:	4b80      	ldr	r3, [pc, #512]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a7f      	ldr	r2, [pc, #508]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	e02e      	b.n	800114c <HAL_RCC_OscConfig+0xd4>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10c      	bne.n	8001110 <HAL_RCC_OscConfig+0x98>
 80010f6:	4b7b      	ldr	r3, [pc, #492]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a7a      	ldr	r2, [pc, #488]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b78      	ldr	r3, [pc, #480]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a77      	ldr	r2, [pc, #476]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e01d      	b.n	800114c <HAL_RCC_OscConfig+0xd4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0xbc>
 800111a:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a71      	ldr	r2, [pc, #452]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b6f      	ldr	r3, [pc, #444]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a6e      	ldr	r2, [pc, #440]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e00b      	b.n	800114c <HAL_RCC_OscConfig+0xd4>
 8001134:	4b6b      	ldr	r3, [pc, #428]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a6a      	ldr	r2, [pc, #424]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 800113a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b68      	ldr	r3, [pc, #416]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a67      	ldr	r2, [pc, #412]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d013      	beq.n	800117c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fc44 	bl	80009e0 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fc40 	bl	80009e0 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e200      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0xe4>
 800117a:	e014      	b.n	80011a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fc30 	bl	80009e0 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fc2c 	bl	80009e0 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e1ec      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x10c>
 80011a2:	e000      	b.n	80011a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d063      	beq.n	800127a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011b2:	4b4c      	ldr	r3, [pc, #304]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00b      	beq.n	80011d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011be:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d11c      	bne.n	8001204 <HAL_RCC_OscConfig+0x18c>
 80011ca:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d116      	bne.n	8001204 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	4b43      	ldr	r3, [pc, #268]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <HAL_RCC_OscConfig+0x176>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d001      	beq.n	80011ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e1c0      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4939      	ldr	r1, [pc, #228]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001202:	e03a      	b.n	800127a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800120c:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001212:	f7ff fbe5 	bl	80009e0 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fbe1 	bl	80009e0 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e1a1      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4927      	ldr	r1, [pc, #156]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
 800124c:	e015      	b.n	800127a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fbc4 	bl	80009e0 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125c:	f7ff fbc0 	bl	80009e0 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e180      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d03a      	beq.n	80012fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d019      	beq.n	80012c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_RCC_OscConfig+0x274>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001294:	f7ff fba4 	bl	80009e0 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff fba0 	bl	80009e0 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e160      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f000 fb10 	bl	80018e0 <RCC_Delay>
 80012c0:	e01c      	b.n	80012fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_RCC_OscConfig+0x274>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fb8a 	bl	80009e0 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ce:	e00f      	b.n	80012f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff fb86 	bl	80009e0 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d908      	bls.n	80012f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e146      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	42420000 	.word	0x42420000
 80012ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	4b92      	ldr	r3, [pc, #584]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1e9      	bne.n	80012d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80a6 	beq.w	8001456 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130e:	4b8b      	ldr	r3, [pc, #556]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10d      	bne.n	8001336 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b88      	ldr	r3, [pc, #544]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a87      	ldr	r2, [pc, #540]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	61d3      	str	r3, [r2, #28]
 8001326:	4b85      	ldr	r3, [pc, #532]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001332:	2301      	movs	r3, #1
 8001334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001336:	4b82      	ldr	r3, [pc, #520]	; (8001540 <HAL_RCC_OscConfig+0x4c8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d118      	bne.n	8001374 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001342:	4b7f      	ldr	r3, [pc, #508]	; (8001540 <HAL_RCC_OscConfig+0x4c8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a7e      	ldr	r2, [pc, #504]	; (8001540 <HAL_RCC_OscConfig+0x4c8>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134e:	f7ff fb47 	bl	80009e0 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001356:	f7ff fb43 	bl	80009e0 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b64      	cmp	r3, #100	; 0x64
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e103      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001368:	4b75      	ldr	r3, [pc, #468]	; (8001540 <HAL_RCC_OscConfig+0x4c8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x312>
 800137c:	4b6f      	ldr	r3, [pc, #444]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4a6e      	ldr	r2, [pc, #440]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6213      	str	r3, [r2, #32]
 8001388:	e02d      	b.n	80013e6 <HAL_RCC_OscConfig+0x36e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x334>
 8001392:	4b6a      	ldr	r3, [pc, #424]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4a69      	ldr	r2, [pc, #420]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	6213      	str	r3, [r2, #32]
 800139e:	4b67      	ldr	r3, [pc, #412]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a66      	ldr	r2, [pc, #408]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	f023 0304 	bic.w	r3, r3, #4
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	e01c      	b.n	80013e6 <HAL_RCC_OscConfig+0x36e>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d10c      	bne.n	80013ce <HAL_RCC_OscConfig+0x356>
 80013b4:	4b61      	ldr	r3, [pc, #388]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a60      	ldr	r2, [pc, #384]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6213      	str	r3, [r2, #32]
 80013c0:	4b5e      	ldr	r3, [pc, #376]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a5d      	ldr	r2, [pc, #372]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6213      	str	r3, [r2, #32]
 80013cc:	e00b      	b.n	80013e6 <HAL_RCC_OscConfig+0x36e>
 80013ce:	4b5b      	ldr	r3, [pc, #364]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a5a      	ldr	r2, [pc, #360]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6213      	str	r3, [r2, #32]
 80013da:	4b58      	ldr	r3, [pc, #352]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a57      	ldr	r2, [pc, #348]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d015      	beq.n	800141a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff faf7 	bl	80009e0 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff faf3 	bl	80009e0 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	; 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e0b1      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140c:	4b4b      	ldr	r3, [pc, #300]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0ee      	beq.n	80013f6 <HAL_RCC_OscConfig+0x37e>
 8001418:	e014      	b.n	8001444 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fae1 	bl	80009e0 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff fadd 	bl	80009e0 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e09b      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	4b40      	ldr	r3, [pc, #256]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1ee      	bne.n	8001422 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d105      	bne.n	8001456 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144a:	4b3c      	ldr	r3, [pc, #240]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a3b      	ldr	r2, [pc, #236]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001454:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8087 	beq.w	800156e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001460:	4b36      	ldr	r3, [pc, #216]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d061      	beq.n	8001530 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d146      	bne.n	8001502 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001474:	4b33      	ldr	r3, [pc, #204]	; (8001544 <HAL_RCC_OscConfig+0x4cc>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fab1 	bl	80009e0 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff faad 	bl	80009e0 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e06d      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d108      	bne.n	80014bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	4921      	ldr	r1, [pc, #132]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a19      	ldr	r1, [r3, #32]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	430b      	orrs	r3, r1
 80014ce:	491b      	ldr	r1, [pc, #108]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_RCC_OscConfig+0x4cc>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fa81 	bl	80009e0 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e2:	f7ff fa7d 	bl	80009e0 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e03d      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x46a>
 8001500:	e035      	b.n	800156e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_RCC_OscConfig+0x4cc>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fa6a 	bl	80009e0 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fa66 	bl	80009e0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e026      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x498>
 800152e:	e01e      	b.n	800156e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d107      	bne.n	8001548 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e019      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
 800153c:	40021000 	.word	0x40021000
 8001540:	40007000 	.word	0x40007000
 8001544:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_RCC_OscConfig+0x500>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	429a      	cmp	r2, r3
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0d0      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001590:	4b6a      	ldr	r3, [pc, #424]	; (800173c <HAL_RCC_ClockConfig+0x1c0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d910      	bls.n	80015c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b67      	ldr	r3, [pc, #412]	; (800173c <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 0207 	bic.w	r2, r3, #7
 80015a6:	4965      	ldr	r1, [pc, #404]	; (800173c <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b63      	ldr	r3, [pc, #396]	; (800173c <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0b8      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d020      	beq.n	800160e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d8:	4b59      	ldr	r3, [pc, #356]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4a58      	ldr	r2, [pc, #352]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f0:	4b53      	ldr	r3, [pc, #332]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a52      	ldr	r2, [pc, #328]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fc:	4b50      	ldr	r3, [pc, #320]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	494d      	ldr	r1, [pc, #308]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	4313      	orrs	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d040      	beq.n	800169c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	4b47      	ldr	r3, [pc, #284]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d115      	bne.n	800165a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e07f      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163a:	4b41      	ldr	r3, [pc, #260]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e073      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e06b      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800165a:	4b39      	ldr	r3, [pc, #228]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f023 0203 	bic.w	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4936      	ldr	r1, [pc, #216]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800166c:	f7ff f9b8 	bl	80009e0 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	e00a      	b.n	800168a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001674:	f7ff f9b4 	bl	80009e0 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e053      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 020c 	and.w	r2, r3, #12
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	429a      	cmp	r2, r3
 800169a:	d1eb      	bne.n	8001674 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_RCC_ClockConfig+0x1c0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d210      	bcs.n	80016cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 0207 	bic.w	r2, r3, #7
 80016b2:	4922      	ldr	r1, [pc, #136]	; (800173c <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e032      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4916      	ldr	r1, [pc, #88]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	490e      	ldr	r1, [pc, #56]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800170a:	f000 f859 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 800170e:	4602      	mov	r2, r0
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	490a      	ldr	r1, [pc, #40]	; (8001744 <HAL_RCC_ClockConfig+0x1c8>)
 800171c:	5ccb      	ldrb	r3, [r1, r3]
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <HAL_RCC_ClockConfig+0x1cc>)
 8001724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_RCC_ClockConfig+0x1d0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f916 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40022000 	.word	0x40022000
 8001740:	40021000 	.word	0x40021000
 8001744:	08003c48 	.word	0x08003c48
 8001748:	20000000 	.word	0x20000000
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8001776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177a:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_RCC_MCOConfig+0x68>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <HAL_RCC_MCOConfig+0x68>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_RCC_MCOConfig+0x68>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001794:	f107 0318 	add.w	r3, r7, #24
 8001798:	4619      	mov	r1, r3
 800179a:	4808      	ldr	r0, [pc, #32]	; (80017bc <HAL_RCC_MCOConfig+0x6c>)
 800179c:	f7ff fae8 	bl	8000d70 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_RCC_MCOConfig+0x68>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80017a8:	4903      	ldr	r1, [pc, #12]	; (80017b8 <HAL_RCC_MCOConfig+0x68>)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	; 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010800 	.word	0x40010800

080017c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c0:	b490      	push	{r4, r7}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017c6:	4b29      	ldr	r3, [pc, #164]	; (800186c <HAL_RCC_GetSysClockFreq+0xac>)
 80017c8:	1d3c      	adds	r4, r7, #4
 80017ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017d0:	f240 2301 	movw	r3, #513	; 0x201
 80017d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d002      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x40>
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d003      	beq.n	8001806 <HAL_RCC_GetSysClockFreq+0x46>
 80017fe:	e02b      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001802:	623b      	str	r3, [r7, #32]
      break;
 8001804:	e02b      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	0c9b      	lsrs	r3, r3, #18
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3328      	adds	r3, #40	; 0x28
 8001810:	443b      	add	r3, r7
 8001812:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001816:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d012      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	0c5b      	lsrs	r3, r3, #17
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	3328      	adds	r3, #40	; 0x28
 800182e:	443b      	add	r3, r7
 8001830:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001834:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <HAL_RCC_GetSysClockFreq+0xb4>)
 800183a:	fb03 f202 	mul.w	r2, r3, r2
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	fbb2 f3f3 	udiv	r3, r2, r3
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
 8001846:	e004      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_RCC_GetSysClockFreq+0xb8>)
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	623b      	str	r3, [r7, #32]
      break;
 8001856:	e002      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_GetSysClockFreq+0xb4>)
 800185a:	623b      	str	r3, [r7, #32]
      break;
 800185c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800185e:	6a3b      	ldr	r3, [r7, #32]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bc90      	pop	{r4, r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	08003c38 	.word	0x08003c38
 8001870:	40021000 	.word	0x40021000
 8001874:	007a1200 	.word	0x007a1200
 8001878:	003d0900 	.word	0x003d0900

0800187c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <HAL_RCC_GetHCLKFreq+0x10>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000000 	.word	0x20000000

08001890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001894:	f7ff fff2 	bl	800187c <HAL_RCC_GetHCLKFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	4903      	ldr	r1, [pc, #12]	; (80018b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	08003c58 	.word	0x08003c58

080018b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018bc:	f7ff ffde 	bl	800187c <HAL_RCC_GetHCLKFreq>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	0adb      	lsrs	r3, r3, #11
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	4903      	ldr	r1, [pc, #12]	; (80018dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	08003c58 	.word	0x08003c58

080018e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <RCC_Delay+0x34>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <RCC_Delay+0x38>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018fc:	bf00      	nop
  }
  while (Delay --);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	60fa      	str	r2, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f9      	bne.n	80018fc <RCC_Delay+0x1c>
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	20000000 	.word	0x20000000
 8001918:	10624dd3 	.word	0x10624dd3

0800191c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e041      	b.n	80019b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7fe fe86 	bl	8000654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3304      	adds	r3, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4610      	mov	r0, r2
 800195c:	f000 fd26 	bl	80023ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d001      	beq.n	80019d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e03a      	b.n	8001a4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <HAL_TIM_Base_Start_IT+0x98>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00e      	beq.n	8001a14 <HAL_TIM_Base_Start_IT+0x58>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fe:	d009      	beq.n	8001a14 <HAL_TIM_Base_Start_IT+0x58>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d004      	beq.n	8001a14 <HAL_TIM_Base_Start_IT+0x58>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <HAL_TIM_Base_Start_IT+0xa0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d111      	bne.n	8001a38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d010      	beq.n	8001a48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a36:	e007      	b.n	8001a48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40012c00 	.word	0x40012c00
 8001a58:	40000400 	.word	0x40000400
 8001a5c:	40000800 	.word	0x40000800

08001a60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6a1a      	ldr	r2, [r3, #32]
 8001a7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10f      	bne.n	8001aa8 <HAL_TIM_Base_Stop_IT+0x48>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6a1a      	ldr	r2, [r3, #32]
 8001a8e:	f240 4344 	movw	r3, #1092	; 0x444
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d107      	bne.n	8001aa8 <HAL_TIM_Base_Stop_IT+0x48>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e041      	b.n	8001b52 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f839 	bl	8001b5a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3304      	adds	r3, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f000 fc56 	bl	80023ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d104      	bne.n	8001b86 <HAL_TIM_IC_Start_IT+0x1a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	e013      	b.n	8001bae <HAL_TIM_IC_Start_IT+0x42>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d104      	bne.n	8001b96 <HAL_TIM_IC_Start_IT+0x2a>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	e00b      	b.n	8001bae <HAL_TIM_IC_Start_IT+0x42>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d104      	bne.n	8001ba6 <HAL_TIM_IC_Start_IT+0x3a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	e003      	b.n	8001bae <HAL_TIM_IC_Start_IT+0x42>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d104      	bne.n	8001bc0 <HAL_TIM_IC_Start_IT+0x54>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	e013      	b.n	8001be8 <HAL_TIM_IC_Start_IT+0x7c>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d104      	bne.n	8001bd0 <HAL_TIM_IC_Start_IT+0x64>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e00b      	b.n	8001be8 <HAL_TIM_IC_Start_IT+0x7c>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d104      	bne.n	8001be0 <HAL_TIM_IC_Start_IT+0x74>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	e003      	b.n	8001be8 <HAL_TIM_IC_Start_IT+0x7c>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d102      	bne.n	8001bf6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001bf0:	7bbb      	ldrb	r3, [r7, #14]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d001      	beq.n	8001bfa <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0b3      	b.n	8001d62 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d104      	bne.n	8001c0a <HAL_TIM_IC_Start_IT+0x9e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c08:	e013      	b.n	8001c32 <HAL_TIM_IC_Start_IT+0xc6>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d104      	bne.n	8001c1a <HAL_TIM_IC_Start_IT+0xae>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c18:	e00b      	b.n	8001c32 <HAL_TIM_IC_Start_IT+0xc6>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d104      	bne.n	8001c2a <HAL_TIM_IC_Start_IT+0xbe>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c28:	e003      	b.n	8001c32 <HAL_TIM_IC_Start_IT+0xc6>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d104      	bne.n	8001c42 <HAL_TIM_IC_Start_IT+0xd6>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c40:	e013      	b.n	8001c6a <HAL_TIM_IC_Start_IT+0xfe>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d104      	bne.n	8001c52 <HAL_TIM_IC_Start_IT+0xe6>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c50:	e00b      	b.n	8001c6a <HAL_TIM_IC_Start_IT+0xfe>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d104      	bne.n	8001c62 <HAL_TIM_IC_Start_IT+0xf6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c60:	e003      	b.n	8001c6a <HAL_TIM_IC_Start_IT+0xfe>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2202      	movs	r2, #2
 8001c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d841      	bhi.n	8001cf4 <HAL_TIM_IC_Start_IT+0x188>
 8001c70:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <HAL_TIM_IC_Start_IT+0x10c>)
 8001c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c76:	bf00      	nop
 8001c78:	08001cad 	.word	0x08001cad
 8001c7c:	08001cf5 	.word	0x08001cf5
 8001c80:	08001cf5 	.word	0x08001cf5
 8001c84:	08001cf5 	.word	0x08001cf5
 8001c88:	08001cbf 	.word	0x08001cbf
 8001c8c:	08001cf5 	.word	0x08001cf5
 8001c90:	08001cf5 	.word	0x08001cf5
 8001c94:	08001cf5 	.word	0x08001cf5
 8001c98:	08001cd1 	.word	0x08001cd1
 8001c9c:	08001cf5 	.word	0x08001cf5
 8001ca0:	08001cf5 	.word	0x08001cf5
 8001ca4:	08001cf5 	.word	0x08001cf5
 8001ca8:	08001ce3 	.word	0x08001ce3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0202 	orr.w	r2, r2, #2
 8001cba:	60da      	str	r2, [r3, #12]
      break;
 8001cbc:	e01b      	b.n	8001cf6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0204 	orr.w	r2, r2, #4
 8001ccc:	60da      	str	r2, [r3, #12]
      break;
 8001cce:	e012      	b.n	8001cf6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0208 	orr.w	r2, r2, #8
 8001cde:	60da      	str	r2, [r3, #12]
      break;
 8001ce0:	e009      	b.n	8001cf6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0210 	orr.w	r2, r2, #16
 8001cf0:	60da      	str	r2, [r3, #12]
      break;
 8001cf2:	e000      	b.n	8001cf6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8001cf4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fd59 	bl	80027b6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <HAL_TIM_IC_Start_IT+0x200>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00e      	beq.n	8001d2c <HAL_TIM_IC_Start_IT+0x1c0>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d16:	d009      	beq.n	8001d2c <HAL_TIM_IC_Start_IT+0x1c0>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_TIM_IC_Start_IT+0x204>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_TIM_IC_Start_IT+0x1c0>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_TIM_IC_Start_IT+0x208>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d111      	bne.n	8001d50 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d010      	beq.n	8001d60 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4e:	e007      	b.n	8001d60 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40000800 	.word	0x40000800

08001d78 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e041      	b.n	8001e10 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d106      	bne.n	8001da6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f839 	bl	8001e18 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2202      	movs	r2, #2
 8001daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3304      	adds	r3, #4
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f000 faf7 	bl	80023ac <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0208 	bic.w	r2, r2, #8
 8001dcc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6819      	ldr	r1, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d122      	bne.n	8001e86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d11b      	bne.n	8001e86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f06f 0202 	mvn.w	r2, #2
 8001e56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7fe f9df 	bl	8000230 <HAL_TIM_IC_CaptureCallback>
 8001e72:	e005      	b.n	8001e80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fa7d 	bl	8002374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fa83 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d122      	bne.n	8001eda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d11b      	bne.n	8001eda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f06f 0204 	mvn.w	r2, #4
 8001eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7fe f9b5 	bl	8000230 <HAL_TIM_IC_CaptureCallback>
 8001ec6:	e005      	b.n	8001ed4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fa53 	bl	8002374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fa59 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d122      	bne.n	8001f2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d11b      	bne.n	8001f2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f06f 0208 	mvn.w	r2, #8
 8001efe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2204      	movs	r2, #4
 8001f04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7fe f98b 	bl	8000230 <HAL_TIM_IC_CaptureCallback>
 8001f1a:	e005      	b.n	8001f28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fa29 	bl	8002374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fa2f 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	d122      	bne.n	8001f82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d11b      	bne.n	8001f82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f06f 0210 	mvn.w	r2, #16
 8001f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2208      	movs	r2, #8
 8001f58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7fe f961 	bl	8000230 <HAL_TIM_IC_CaptureCallback>
 8001f6e:	e005      	b.n	8001f7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f9ff 	bl	8002374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa05 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10e      	bne.n	8001fae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f06f 0201 	mvn.w	r2, #1
 8001fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7fe f8ed 	bl	8000188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb8:	2b80      	cmp	r3, #128	; 0x80
 8001fba:	d10e      	bne.n	8001fda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc6:	2b80      	cmp	r3, #128	; 0x80
 8001fc8:	d107      	bne.n	8001fda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fc7a 	bl	80028ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe4:	2b40      	cmp	r3, #64	; 0x40
 8001fe6:	d10e      	bne.n	8002006 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff2:	2b40      	cmp	r3, #64	; 0x40
 8001ff4:	d107      	bne.n	8002006 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f9c9 	bl	8002398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b20      	cmp	r3, #32
 8002012:	d10e      	bne.n	8002032 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b20      	cmp	r3, #32
 8002020:	d107      	bne.n	8002032 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f06f 0220 	mvn.w	r2, #32
 800202a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fc45 	bl	80028bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002050:	2302      	movs	r3, #2
 8002052:	e082      	b.n	800215a <HAL_TIM_IC_ConfigChannel+0x120>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11b      	bne.n	800209a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	6819      	ldr	r1, [r3, #0]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f000 f9fd 	bl	8002470 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 020c 	bic.w	r2, r2, #12
 8002084:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6999      	ldr	r1, [r3, #24]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	619a      	str	r2, [r3, #24]
 8002098:	e05a      	b.n	8002150 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b04      	cmp	r3, #4
 800209e:	d11c      	bne.n	80020da <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f000 fa66 	bl	8002580 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80020c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6999      	ldr	r1, [r3, #24]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	021a      	lsls	r2, r3, #8
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	619a      	str	r2, [r3, #24]
 80020d8:	e03a      	b.n	8002150 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d11b      	bne.n	8002118 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	6819      	ldr	r1, [r3, #0]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f000 fab1 	bl	8002656 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69da      	ldr	r2, [r3, #28]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 020c 	bic.w	r2, r2, #12
 8002102:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69d9      	ldr	r1, [r3, #28]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	61da      	str	r2, [r3, #28]
 8002116:	e01b      	b.n	8002150 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f000 fad0 	bl	80026cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800213a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69d9      	ldr	r1, [r3, #28]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	021a      	lsls	r2, r3, #8
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_TIM_ConfigClockSource+0x18>
 8002176:	2302      	movs	r3, #2
 8002178:	e0b3      	b.n	80022e2 <HAL_TIM_ConfigClockSource+0x180>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002198:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021a0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b2:	d03e      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0xd0>
 80021b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b8:	f200 8087 	bhi.w	80022ca <HAL_TIM_ConfigClockSource+0x168>
 80021bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c0:	f000 8085 	beq.w	80022ce <HAL_TIM_ConfigClockSource+0x16c>
 80021c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c8:	d87f      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x168>
 80021ca:	2b70      	cmp	r3, #112	; 0x70
 80021cc:	d01a      	beq.n	8002204 <HAL_TIM_ConfigClockSource+0xa2>
 80021ce:	2b70      	cmp	r3, #112	; 0x70
 80021d0:	d87b      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x168>
 80021d2:	2b60      	cmp	r3, #96	; 0x60
 80021d4:	d050      	beq.n	8002278 <HAL_TIM_ConfigClockSource+0x116>
 80021d6:	2b60      	cmp	r3, #96	; 0x60
 80021d8:	d877      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x168>
 80021da:	2b50      	cmp	r3, #80	; 0x50
 80021dc:	d03c      	beq.n	8002258 <HAL_TIM_ConfigClockSource+0xf6>
 80021de:	2b50      	cmp	r3, #80	; 0x50
 80021e0:	d873      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x168>
 80021e2:	2b40      	cmp	r3, #64	; 0x40
 80021e4:	d058      	beq.n	8002298 <HAL_TIM_ConfigClockSource+0x136>
 80021e6:	2b40      	cmp	r3, #64	; 0x40
 80021e8:	d86f      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x168>
 80021ea:	2b30      	cmp	r3, #48	; 0x30
 80021ec:	d064      	beq.n	80022b8 <HAL_TIM_ConfigClockSource+0x156>
 80021ee:	2b30      	cmp	r3, #48	; 0x30
 80021f0:	d86b      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x168>
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d060      	beq.n	80022b8 <HAL_TIM_ConfigClockSource+0x156>
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d867      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x168>
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d05c      	beq.n	80022b8 <HAL_TIM_ConfigClockSource+0x156>
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d05a      	beq.n	80022b8 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002202:	e062      	b.n	80022ca <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6899      	ldr	r1, [r3, #8]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f000 fab0 	bl	8002778 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002226:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	609a      	str	r2, [r3, #8]
      break;
 8002230:	e04e      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f000 fa99 	bl	8002778 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002254:	609a      	str	r2, [r3, #8]
      break;
 8002256:	e03b      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	461a      	mov	r2, r3
 8002266:	f000 f95d 	bl	8002524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2150      	movs	r1, #80	; 0x50
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fa67 	bl	8002744 <TIM_ITRx_SetConfig>
      break;
 8002276:	e02b      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	461a      	mov	r2, r3
 8002286:	f000 f9b7 	bl	80025f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2160      	movs	r1, #96	; 0x60
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fa57 	bl	8002744 <TIM_ITRx_SetConfig>
      break;
 8002296:	e01b      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	461a      	mov	r2, r3
 80022a6:	f000 f93d 	bl	8002524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fa47 	bl	8002744 <TIM_ITRx_SetConfig>
      break;
 80022b6:	e00b      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4610      	mov	r0, r2
 80022c4:	f000 fa3e 	bl	8002744 <TIM_ITRx_SetConfig>
        break;
 80022c8:	e002      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022ca:	bf00      	nop
 80022cc:	e000      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b0c      	cmp	r3, #12
 80022fe:	d831      	bhi.n	8002364 <HAL_TIM_ReadCapturedValue+0x78>
 8002300:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002306:	bf00      	nop
 8002308:	0800233d 	.word	0x0800233d
 800230c:	08002365 	.word	0x08002365
 8002310:	08002365 	.word	0x08002365
 8002314:	08002365 	.word	0x08002365
 8002318:	08002347 	.word	0x08002347
 800231c:	08002365 	.word	0x08002365
 8002320:	08002365 	.word	0x08002365
 8002324:	08002365 	.word	0x08002365
 8002328:	08002351 	.word	0x08002351
 800232c:	08002365 	.word	0x08002365
 8002330:	08002365 	.word	0x08002365
 8002334:	08002365 	.word	0x08002365
 8002338:	0800235b 	.word	0x0800235b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002342:	60fb      	str	r3, [r7, #12]

      break;
 8002344:	e00f      	b.n	8002366 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	60fb      	str	r3, [r7, #12]

      break;
 800234e:	e00a      	b.n	8002366 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	60fb      	str	r3, [r7, #12]

      break;
 8002358:	e005      	b.n	8002366 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	60fb      	str	r3, [r7, #12]

      break;
 8002362:	e000      	b.n	8002366 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002364:	bf00      	nop
  }

  return tmpreg;
 8002366:	68fb      	ldr	r3, [r7, #12]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop

08002374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
	...

080023ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a29      	ldr	r2, [pc, #164]	; (8002464 <TIM_Base_SetConfig+0xb8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00b      	beq.n	80023dc <TIM_Base_SetConfig+0x30>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ca:	d007      	beq.n	80023dc <TIM_Base_SetConfig+0x30>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a26      	ldr	r2, [pc, #152]	; (8002468 <TIM_Base_SetConfig+0xbc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d003      	beq.n	80023dc <TIM_Base_SetConfig+0x30>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a25      	ldr	r2, [pc, #148]	; (800246c <TIM_Base_SetConfig+0xc0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d108      	bne.n	80023ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <TIM_Base_SetConfig+0xb8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00b      	beq.n	800240e <TIM_Base_SetConfig+0x62>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fc:	d007      	beq.n	800240e <TIM_Base_SetConfig+0x62>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a19      	ldr	r2, [pc, #100]	; (8002468 <TIM_Base_SetConfig+0xbc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d003      	beq.n	800240e <TIM_Base_SetConfig+0x62>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <TIM_Base_SetConfig+0xc0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d108      	bne.n	8002420 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a07      	ldr	r2, [pc, #28]	; (8002464 <TIM_Base_SetConfig+0xb8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d103      	bne.n	8002454 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	615a      	str	r2, [r3, #20]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	40012c00 	.word	0x40012c00
 8002468:	40000400 	.word	0x40000400
 800246c:	40000800 	.word	0x40000800

08002470 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	f023 0201 	bic.w	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <TIM_TI1_SetConfig+0xa8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00b      	beq.n	80024b6 <TIM_TI1_SetConfig+0x46>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a4:	d007      	beq.n	80024b6 <TIM_TI1_SetConfig+0x46>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4a1c      	ldr	r2, [pc, #112]	; (800251c <TIM_TI1_SetConfig+0xac>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d003      	beq.n	80024b6 <TIM_TI1_SetConfig+0x46>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <TIM_TI1_SetConfig+0xb0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <TIM_TI1_SetConfig+0x4a>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <TIM_TI1_SetConfig+0x4c>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e003      	b.n	80024da <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f023 030a 	bic.w	r3, r3, #10
 80024f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f003 030a 	and.w	r3, r3, #10
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	621a      	str	r2, [r3, #32]
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40000400 	.word	0x40000400
 8002520:	40000800 	.word	0x40000800

08002524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	f023 0201 	bic.w	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800254e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f023 030a 	bic.w	r3, r3, #10
 8002560:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4313      	orrs	r3, r2
 8002568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	621a      	str	r2, [r3, #32]
}
 8002576:	bf00      	nop
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f023 0210 	bic.w	r2, r3, #16
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	031b      	lsls	r3, r3, #12
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	621a      	str	r2, [r3, #32]
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f023 0210 	bic.w	r2, r3, #16
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002622:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	031b      	lsls	r3, r3, #12
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002634:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	621a      	str	r2, [r3, #32]
}
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002656:	b480      	push	{r7}
 8002658:	b087      	sub	sp, #28
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002692:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	b2db      	uxtb	r3, r3
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	621a      	str	r2, [r3, #32]
}
 80026c2:	bf00      	nop
 80026c4:	371c      	adds	r7, #28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800270a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	031b      	lsls	r3, r3, #12
 8002710:	b29b      	uxth	r3, r3
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800271e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	031b      	lsls	r3, r3, #12
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	621a      	str	r2, [r3, #32]
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	f043 0307 	orr.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	609a      	str	r2, [r3, #8]
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	021a      	lsls	r2, r3, #8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	431a      	orrs	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	609a      	str	r2, [r3, #8]
}
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b087      	sub	sp, #28
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2201      	movs	r2, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a1a      	ldr	r2, [r3, #32]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	401a      	ands	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a1a      	ldr	r2, [r3, #32]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	431a      	orrs	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	621a      	str	r2, [r3, #32]
}
 80027f4:	bf00      	nop
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002814:	2302      	movs	r3, #2
 8002816:	e046      	b.n	80028a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00e      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002864:	d009      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d004      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10c      	bne.n	8002894 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	4313      	orrs	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800

080028bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e03f      	b.n	8002972 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fd ff0c 	bl	8000724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fc25 	bl	8003174 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b08a      	sub	sp, #40	; 0x28
 800297e:	af02      	add	r7, sp, #8
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4613      	mov	r3, r2
 8002988:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b20      	cmp	r3, #32
 8002998:	d17c      	bne.n	8002a94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_UART_Transmit+0x2c>
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e075      	b.n	8002a96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_UART_Transmit+0x3e>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e06e      	b.n	8002a96 <HAL_UART_Transmit+0x11c>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2221      	movs	r2, #33	; 0x21
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ce:	f7fe f807 	bl	80009e0 <HAL_GetTick>
 80029d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	88fa      	ldrh	r2, [r7, #6]
 80029d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e8:	d108      	bne.n	80029fc <HAL_UART_Transmit+0x82>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d104      	bne.n	80029fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	e003      	b.n	8002a04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a0c:	e02a      	b.n	8002a64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2200      	movs	r2, #0
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 fa11 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e036      	b.n	8002a96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10b      	bne.n	8002a46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	3302      	adds	r3, #2
 8002a42:	61bb      	str	r3, [r7, #24]
 8002a44:	e007      	b.n	8002a56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	781a      	ldrb	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	3301      	adds	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1cf      	bne.n	8002a0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2140      	movs	r1, #64	; 0x40
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f9e1 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e006      	b.n	8002a96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_UART_IRQHandler+0x52>
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fa99 	bl	8003022 <UART_Receive_IT>
      return;
 8002af0:	e17b      	b.n	8002dea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80b1 	beq.w	8002c5c <HAL_UART_IRQHandler+0x1bc>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_UART_IRQHandler+0x70>
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80a6 	beq.w	8002c5c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_UART_IRQHandler+0x90>
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f043 0201 	orr.w	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_UART_IRQHandler+0xb0>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f043 0202 	orr.w	r2, r3, #2
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_UART_IRQHandler+0xd0>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f043 0204 	orr.w	r2, r3, #4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00f      	beq.n	8002b9a <HAL_UART_IRQHandler+0xfa>
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d104      	bne.n	8002b8e <HAL_UART_IRQHandler+0xee>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f043 0208 	orr.w	r2, r3, #8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 811e 	beq.w	8002de0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d007      	beq.n	8002bbe <HAL_UART_IRQHandler+0x11e>
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fa32 	bl	8003022 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <HAL_UART_IRQHandler+0x146>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d031      	beq.n	8002c4a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f974 	bl	8002ed4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d023      	beq.n	8002c42 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c08:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d013      	beq.n	8002c3a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	4a76      	ldr	r2, [pc, #472]	; (8002df0 <HAL_UART_IRQHandler+0x350>)
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe f830 	bl	8000c84 <HAL_DMA_Abort_IT>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c34:	4610      	mov	r0, r2
 8002c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c38:	e00e      	b.n	8002c58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8ec 	bl	8002e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c40:	e00a      	b.n	8002c58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f8e8 	bl	8002e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	e006      	b.n	8002c58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8e4 	bl	8002e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c56:	e0c3      	b.n	8002de0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c58:	bf00      	nop
    return;
 8002c5a:	e0c1      	b.n	8002de0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	f040 80a1 	bne.w	8002da8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 809b 	beq.w	8002da8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8095 	beq.w	8002da8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d04e      	beq.n	8002d40 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002cac:	8a3b      	ldrh	r3, [r7, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8098 	beq.w	8002de4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cb8:	8a3a      	ldrh	r2, [r7, #16]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	f080 8092 	bcs.w	8002de4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8a3a      	ldrh	r2, [r7, #16]
 8002cc4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d02b      	beq.n	8002d28 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cde:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cfe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0210 	bic.w	r2, r2, #16
 8002d1c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd ff73 	bl	8000c0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	4619      	mov	r1, r3
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f876 	bl	8002e2a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d3e:	e051      	b.n	8002de4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d047      	beq.n	8002de8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002d58:	8a7b      	ldrh	r3, [r7, #18]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d044      	beq.n	8002de8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d6c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0210 	bic.w	r2, r2, #16
 8002d9a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d9c:	8a7b      	ldrh	r3, [r7, #18]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f842 	bl	8002e2a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002da6:	e01f      	b.n	8002de8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x324>
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f8c9 	bl	8002f54 <UART_Transmit_IT>
    return;
 8002dc2:	e012      	b.n	8002dea <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00d      	beq.n	8002dea <HAL_UART_IRQHandler+0x34a>
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f90a 	bl	8002ff2 <UART_EndTransmit_IT>
    return;
 8002dde:	e004      	b.n	8002dea <HAL_UART_IRQHandler+0x34a>
    return;
 8002de0:	bf00      	nop
 8002de2:	e002      	b.n	8002dea <HAL_UART_IRQHandler+0x34a>
      return;
 8002de4:	bf00      	nop
 8002de6:	e000      	b.n	8002dea <HAL_UART_IRQHandler+0x34a>
      return;
 8002de8:	bf00      	nop
  }
}
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	08002f2d 	.word	0x08002f2d

08002df4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e50:	e02c      	b.n	8002eac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d028      	beq.n	8002eac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e60:	f7fd fdbe 	bl	80009e0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d21d      	bcs.n	8002eac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e00f      	b.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d0c3      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002eea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d107      	bne.n	8002f14 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0210 	bic.w	r2, r2, #16
 8002f12:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f7ff ff66 	bl	8002e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b21      	cmp	r3, #33	; 0x21
 8002f66:	d13e      	bne.n	8002fe6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d114      	bne.n	8002f9c <UART_Transmit_IT+0x48>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d110      	bne.n	8002f9c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	1c9a      	adds	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	621a      	str	r2, [r3, #32]
 8002f9a:	e008      	b.n	8002fae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	1c59      	adds	r1, r3, #1
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6211      	str	r1, [r2, #32]
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e000      	b.n	8002fe8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003008:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff feee 	bl	8002df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b22      	cmp	r3, #34	; 0x22
 8003034:	f040 8099 	bne.w	800316a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003040:	d117      	bne.n	8003072 <UART_Receive_IT+0x50>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d113      	bne.n	8003072 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	b29b      	uxth	r3, r3
 800305c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003060:	b29a      	uxth	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	1c9a      	adds	r2, r3, #2
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
 8003070:	e026      	b.n	80030c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003084:	d007      	beq.n	8003096 <UART_Receive_IT+0x74>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10a      	bne.n	80030a4 <UART_Receive_IT+0x82>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	e008      	b.n	80030b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4619      	mov	r1, r3
 80030ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d148      	bne.n	8003166 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0220 	bic.w	r2, r2, #32
 80030e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	2b01      	cmp	r3, #1
 8003112:	d123      	bne.n	800315c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0210 	bic.w	r2, r2, #16
 8003128:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b10      	cmp	r3, #16
 8003136:	d10a      	bne.n	800314e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003152:	4619      	mov	r1, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff fe68 	bl	8002e2a <HAL_UARTEx_RxEventCallback>
 800315a:	e002      	b.n	8003162 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fe52 	bl	8002e06 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e002      	b.n	800316c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031ae:	f023 030c 	bic.w	r3, r3, #12
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2c      	ldr	r2, [pc, #176]	; (8003288 <UART_SetConfig+0x114>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d103      	bne.n	80031e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031dc:	f7fe fb6c 	bl	80018b8 <HAL_RCC_GetPCLK2Freq>
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	e002      	b.n	80031ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031e4:	f7fe fb54 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
 80031e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009a      	lsls	r2, r3, #2
 80031f4:	441a      	add	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	4a22      	ldr	r2, [pc, #136]	; (800328c <UART_SetConfig+0x118>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	0119      	lsls	r1, r3, #4
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009a      	lsls	r2, r3, #2
 8003214:	441a      	add	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <UART_SetConfig+0x118>)
 8003222:	fba3 0302 	umull	r0, r3, r3, r2
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2064      	movs	r0, #100	; 0x64
 800322a:	fb00 f303 	mul.w	r3, r0, r3
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	3332      	adds	r3, #50	; 0x32
 8003234:	4a15      	ldr	r2, [pc, #84]	; (800328c <UART_SetConfig+0x118>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003240:	4419      	add	r1, r3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009a      	lsls	r2, r3, #2
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	fbb2 f2f3 	udiv	r2, r2, r3
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <UART_SetConfig+0x118>)
 800325a:	fba3 0302 	umull	r0, r3, r3, r2
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2064      	movs	r0, #100	; 0x64
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	3332      	adds	r3, #50	; 0x32
 800326c:	4a07      	ldr	r2, [pc, #28]	; (800328c <UART_SetConfig+0x118>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	f003 020f 	and.w	r2, r3, #15
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	440a      	add	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40013800 	.word	0x40013800
 800328c:	51eb851f 	.word	0x51eb851f

08003290 <__errno>:
 8003290:	4b01      	ldr	r3, [pc, #4]	; (8003298 <__errno+0x8>)
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	2000000c 	.word	0x2000000c

0800329c <__libc_init_array>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	2600      	movs	r6, #0
 80032a0:	4d0c      	ldr	r5, [pc, #48]	; (80032d4 <__libc_init_array+0x38>)
 80032a2:	4c0d      	ldr	r4, [pc, #52]	; (80032d8 <__libc_init_array+0x3c>)
 80032a4:	1b64      	subs	r4, r4, r5
 80032a6:	10a4      	asrs	r4, r4, #2
 80032a8:	42a6      	cmp	r6, r4
 80032aa:	d109      	bne.n	80032c0 <__libc_init_array+0x24>
 80032ac:	f000 fcb0 	bl	8003c10 <_init>
 80032b0:	2600      	movs	r6, #0
 80032b2:	4d0a      	ldr	r5, [pc, #40]	; (80032dc <__libc_init_array+0x40>)
 80032b4:	4c0a      	ldr	r4, [pc, #40]	; (80032e0 <__libc_init_array+0x44>)
 80032b6:	1b64      	subs	r4, r4, r5
 80032b8:	10a4      	asrs	r4, r4, #2
 80032ba:	42a6      	cmp	r6, r4
 80032bc:	d105      	bne.n	80032ca <__libc_init_array+0x2e>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c4:	4798      	blx	r3
 80032c6:	3601      	adds	r6, #1
 80032c8:	e7ee      	b.n	80032a8 <__libc_init_array+0xc>
 80032ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ce:	4798      	blx	r3
 80032d0:	3601      	adds	r6, #1
 80032d2:	e7f2      	b.n	80032ba <__libc_init_array+0x1e>
 80032d4:	08003c94 	.word	0x08003c94
 80032d8:	08003c94 	.word	0x08003c94
 80032dc:	08003c94 	.word	0x08003c94
 80032e0:	08003c98 	.word	0x08003c98

080032e4 <memset>:
 80032e4:	4603      	mov	r3, r0
 80032e6:	4402      	add	r2, r0
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <memset+0xa>
 80032ec:	4770      	bx	lr
 80032ee:	f803 1b01 	strb.w	r1, [r3], #1
 80032f2:	e7f9      	b.n	80032e8 <memset+0x4>

080032f4 <sniprintf>:
 80032f4:	b40c      	push	{r2, r3}
 80032f6:	b530      	push	{r4, r5, lr}
 80032f8:	4b17      	ldr	r3, [pc, #92]	; (8003358 <sniprintf+0x64>)
 80032fa:	1e0c      	subs	r4, r1, #0
 80032fc:	681d      	ldr	r5, [r3, #0]
 80032fe:	b09d      	sub	sp, #116	; 0x74
 8003300:	da08      	bge.n	8003314 <sniprintf+0x20>
 8003302:	238b      	movs	r3, #139	; 0x8b
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	602b      	str	r3, [r5, #0]
 800330a:	b01d      	add	sp, #116	; 0x74
 800330c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003310:	b002      	add	sp, #8
 8003312:	4770      	bx	lr
 8003314:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003318:	f8ad 3014 	strh.w	r3, [sp, #20]
 800331c:	bf0c      	ite	eq
 800331e:	4623      	moveq	r3, r4
 8003320:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003324:	9304      	str	r3, [sp, #16]
 8003326:	9307      	str	r3, [sp, #28]
 8003328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800332c:	9002      	str	r0, [sp, #8]
 800332e:	9006      	str	r0, [sp, #24]
 8003330:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003334:	4628      	mov	r0, r5
 8003336:	ab21      	add	r3, sp, #132	; 0x84
 8003338:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800333a:	a902      	add	r1, sp, #8
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	f000 f869 	bl	8003414 <_svfiprintf_r>
 8003342:	1c43      	adds	r3, r0, #1
 8003344:	bfbc      	itt	lt
 8003346:	238b      	movlt	r3, #139	; 0x8b
 8003348:	602b      	strlt	r3, [r5, #0]
 800334a:	2c00      	cmp	r4, #0
 800334c:	d0dd      	beq.n	800330a <sniprintf+0x16>
 800334e:	2200      	movs	r2, #0
 8003350:	9b02      	ldr	r3, [sp, #8]
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	e7d9      	b.n	800330a <sniprintf+0x16>
 8003356:	bf00      	nop
 8003358:	2000000c 	.word	0x2000000c

0800335c <__ssputs_r>:
 800335c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003360:	688e      	ldr	r6, [r1, #8]
 8003362:	4682      	mov	sl, r0
 8003364:	429e      	cmp	r6, r3
 8003366:	460c      	mov	r4, r1
 8003368:	4690      	mov	r8, r2
 800336a:	461f      	mov	r7, r3
 800336c:	d838      	bhi.n	80033e0 <__ssputs_r+0x84>
 800336e:	898a      	ldrh	r2, [r1, #12]
 8003370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003374:	d032      	beq.n	80033dc <__ssputs_r+0x80>
 8003376:	6825      	ldr	r5, [r4, #0]
 8003378:	6909      	ldr	r1, [r1, #16]
 800337a:	3301      	adds	r3, #1
 800337c:	eba5 0901 	sub.w	r9, r5, r1
 8003380:	6965      	ldr	r5, [r4, #20]
 8003382:	444b      	add	r3, r9
 8003384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800338c:	106d      	asrs	r5, r5, #1
 800338e:	429d      	cmp	r5, r3
 8003390:	bf38      	it	cc
 8003392:	461d      	movcc	r5, r3
 8003394:	0553      	lsls	r3, r2, #21
 8003396:	d531      	bpl.n	80033fc <__ssputs_r+0xa0>
 8003398:	4629      	mov	r1, r5
 800339a:	f000 fb6f 	bl	8003a7c <_malloc_r>
 800339e:	4606      	mov	r6, r0
 80033a0:	b950      	cbnz	r0, 80033b8 <__ssputs_r+0x5c>
 80033a2:	230c      	movs	r3, #12
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	f8ca 3000 	str.w	r3, [sl]
 80033ac:	89a3      	ldrh	r3, [r4, #12]
 80033ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b2:	81a3      	strh	r3, [r4, #12]
 80033b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b8:	464a      	mov	r2, r9
 80033ba:	6921      	ldr	r1, [r4, #16]
 80033bc:	f000 face 	bl	800395c <memcpy>
 80033c0:	89a3      	ldrh	r3, [r4, #12]
 80033c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ca:	81a3      	strh	r3, [r4, #12]
 80033cc:	6126      	str	r6, [r4, #16]
 80033ce:	444e      	add	r6, r9
 80033d0:	6026      	str	r6, [r4, #0]
 80033d2:	463e      	mov	r6, r7
 80033d4:	6165      	str	r5, [r4, #20]
 80033d6:	eba5 0509 	sub.w	r5, r5, r9
 80033da:	60a5      	str	r5, [r4, #8]
 80033dc:	42be      	cmp	r6, r7
 80033de:	d900      	bls.n	80033e2 <__ssputs_r+0x86>
 80033e0:	463e      	mov	r6, r7
 80033e2:	4632      	mov	r2, r6
 80033e4:	4641      	mov	r1, r8
 80033e6:	6820      	ldr	r0, [r4, #0]
 80033e8:	f000 fac6 	bl	8003978 <memmove>
 80033ec:	68a3      	ldr	r3, [r4, #8]
 80033ee:	2000      	movs	r0, #0
 80033f0:	1b9b      	subs	r3, r3, r6
 80033f2:	60a3      	str	r3, [r4, #8]
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	4433      	add	r3, r6
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	e7db      	b.n	80033b4 <__ssputs_r+0x58>
 80033fc:	462a      	mov	r2, r5
 80033fe:	f000 fbb1 	bl	8003b64 <_realloc_r>
 8003402:	4606      	mov	r6, r0
 8003404:	2800      	cmp	r0, #0
 8003406:	d1e1      	bne.n	80033cc <__ssputs_r+0x70>
 8003408:	4650      	mov	r0, sl
 800340a:	6921      	ldr	r1, [r4, #16]
 800340c:	f000 face 	bl	80039ac <_free_r>
 8003410:	e7c7      	b.n	80033a2 <__ssputs_r+0x46>
	...

08003414 <_svfiprintf_r>:
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	4698      	mov	r8, r3
 800341a:	898b      	ldrh	r3, [r1, #12]
 800341c:	4607      	mov	r7, r0
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	460d      	mov	r5, r1
 8003422:	4614      	mov	r4, r2
 8003424:	b09d      	sub	sp, #116	; 0x74
 8003426:	d50e      	bpl.n	8003446 <_svfiprintf_r+0x32>
 8003428:	690b      	ldr	r3, [r1, #16]
 800342a:	b963      	cbnz	r3, 8003446 <_svfiprintf_r+0x32>
 800342c:	2140      	movs	r1, #64	; 0x40
 800342e:	f000 fb25 	bl	8003a7c <_malloc_r>
 8003432:	6028      	str	r0, [r5, #0]
 8003434:	6128      	str	r0, [r5, #16]
 8003436:	b920      	cbnz	r0, 8003442 <_svfiprintf_r+0x2e>
 8003438:	230c      	movs	r3, #12
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	e0d1      	b.n	80035e6 <_svfiprintf_r+0x1d2>
 8003442:	2340      	movs	r3, #64	; 0x40
 8003444:	616b      	str	r3, [r5, #20]
 8003446:	2300      	movs	r3, #0
 8003448:	9309      	str	r3, [sp, #36]	; 0x24
 800344a:	2320      	movs	r3, #32
 800344c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003450:	2330      	movs	r3, #48	; 0x30
 8003452:	f04f 0901 	mov.w	r9, #1
 8003456:	f8cd 800c 	str.w	r8, [sp, #12]
 800345a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003600 <_svfiprintf_r+0x1ec>
 800345e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003462:	4623      	mov	r3, r4
 8003464:	469a      	mov	sl, r3
 8003466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800346a:	b10a      	cbz	r2, 8003470 <_svfiprintf_r+0x5c>
 800346c:	2a25      	cmp	r2, #37	; 0x25
 800346e:	d1f9      	bne.n	8003464 <_svfiprintf_r+0x50>
 8003470:	ebba 0b04 	subs.w	fp, sl, r4
 8003474:	d00b      	beq.n	800348e <_svfiprintf_r+0x7a>
 8003476:	465b      	mov	r3, fp
 8003478:	4622      	mov	r2, r4
 800347a:	4629      	mov	r1, r5
 800347c:	4638      	mov	r0, r7
 800347e:	f7ff ff6d 	bl	800335c <__ssputs_r>
 8003482:	3001      	adds	r0, #1
 8003484:	f000 80aa 	beq.w	80035dc <_svfiprintf_r+0x1c8>
 8003488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800348a:	445a      	add	r2, fp
 800348c:	9209      	str	r2, [sp, #36]	; 0x24
 800348e:	f89a 3000 	ldrb.w	r3, [sl]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80a2 	beq.w	80035dc <_svfiprintf_r+0x1c8>
 8003498:	2300      	movs	r3, #0
 800349a:	f04f 32ff 	mov.w	r2, #4294967295
 800349e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034a2:	f10a 0a01 	add.w	sl, sl, #1
 80034a6:	9304      	str	r3, [sp, #16]
 80034a8:	9307      	str	r3, [sp, #28]
 80034aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034ae:	931a      	str	r3, [sp, #104]	; 0x68
 80034b0:	4654      	mov	r4, sl
 80034b2:	2205      	movs	r2, #5
 80034b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b8:	4851      	ldr	r0, [pc, #324]	; (8003600 <_svfiprintf_r+0x1ec>)
 80034ba:	f000 fa41 	bl	8003940 <memchr>
 80034be:	9a04      	ldr	r2, [sp, #16]
 80034c0:	b9d8      	cbnz	r0, 80034fa <_svfiprintf_r+0xe6>
 80034c2:	06d0      	lsls	r0, r2, #27
 80034c4:	bf44      	itt	mi
 80034c6:	2320      	movmi	r3, #32
 80034c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034cc:	0711      	lsls	r1, r2, #28
 80034ce:	bf44      	itt	mi
 80034d0:	232b      	movmi	r3, #43	; 0x2b
 80034d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034d6:	f89a 3000 	ldrb.w	r3, [sl]
 80034da:	2b2a      	cmp	r3, #42	; 0x2a
 80034dc:	d015      	beq.n	800350a <_svfiprintf_r+0xf6>
 80034de:	4654      	mov	r4, sl
 80034e0:	2000      	movs	r0, #0
 80034e2:	f04f 0c0a 	mov.w	ip, #10
 80034e6:	9a07      	ldr	r2, [sp, #28]
 80034e8:	4621      	mov	r1, r4
 80034ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034ee:	3b30      	subs	r3, #48	; 0x30
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	d94e      	bls.n	8003592 <_svfiprintf_r+0x17e>
 80034f4:	b1b0      	cbz	r0, 8003524 <_svfiprintf_r+0x110>
 80034f6:	9207      	str	r2, [sp, #28]
 80034f8:	e014      	b.n	8003524 <_svfiprintf_r+0x110>
 80034fa:	eba0 0308 	sub.w	r3, r0, r8
 80034fe:	fa09 f303 	lsl.w	r3, r9, r3
 8003502:	4313      	orrs	r3, r2
 8003504:	46a2      	mov	sl, r4
 8003506:	9304      	str	r3, [sp, #16]
 8003508:	e7d2      	b.n	80034b0 <_svfiprintf_r+0x9c>
 800350a:	9b03      	ldr	r3, [sp, #12]
 800350c:	1d19      	adds	r1, r3, #4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	9103      	str	r1, [sp, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	bfbb      	ittet	lt
 8003516:	425b      	neglt	r3, r3
 8003518:	f042 0202 	orrlt.w	r2, r2, #2
 800351c:	9307      	strge	r3, [sp, #28]
 800351e:	9307      	strlt	r3, [sp, #28]
 8003520:	bfb8      	it	lt
 8003522:	9204      	strlt	r2, [sp, #16]
 8003524:	7823      	ldrb	r3, [r4, #0]
 8003526:	2b2e      	cmp	r3, #46	; 0x2e
 8003528:	d10c      	bne.n	8003544 <_svfiprintf_r+0x130>
 800352a:	7863      	ldrb	r3, [r4, #1]
 800352c:	2b2a      	cmp	r3, #42	; 0x2a
 800352e:	d135      	bne.n	800359c <_svfiprintf_r+0x188>
 8003530:	9b03      	ldr	r3, [sp, #12]
 8003532:	3402      	adds	r4, #2
 8003534:	1d1a      	adds	r2, r3, #4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	9203      	str	r2, [sp, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	bfb8      	it	lt
 800353e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003542:	9305      	str	r3, [sp, #20]
 8003544:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003604 <_svfiprintf_r+0x1f0>
 8003548:	2203      	movs	r2, #3
 800354a:	4650      	mov	r0, sl
 800354c:	7821      	ldrb	r1, [r4, #0]
 800354e:	f000 f9f7 	bl	8003940 <memchr>
 8003552:	b140      	cbz	r0, 8003566 <_svfiprintf_r+0x152>
 8003554:	2340      	movs	r3, #64	; 0x40
 8003556:	eba0 000a 	sub.w	r0, r0, sl
 800355a:	fa03 f000 	lsl.w	r0, r3, r0
 800355e:	9b04      	ldr	r3, [sp, #16]
 8003560:	3401      	adds	r4, #1
 8003562:	4303      	orrs	r3, r0
 8003564:	9304      	str	r3, [sp, #16]
 8003566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800356a:	2206      	movs	r2, #6
 800356c:	4826      	ldr	r0, [pc, #152]	; (8003608 <_svfiprintf_r+0x1f4>)
 800356e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003572:	f000 f9e5 	bl	8003940 <memchr>
 8003576:	2800      	cmp	r0, #0
 8003578:	d038      	beq.n	80035ec <_svfiprintf_r+0x1d8>
 800357a:	4b24      	ldr	r3, [pc, #144]	; (800360c <_svfiprintf_r+0x1f8>)
 800357c:	bb1b      	cbnz	r3, 80035c6 <_svfiprintf_r+0x1b2>
 800357e:	9b03      	ldr	r3, [sp, #12]
 8003580:	3307      	adds	r3, #7
 8003582:	f023 0307 	bic.w	r3, r3, #7
 8003586:	3308      	adds	r3, #8
 8003588:	9303      	str	r3, [sp, #12]
 800358a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800358c:	4433      	add	r3, r6
 800358e:	9309      	str	r3, [sp, #36]	; 0x24
 8003590:	e767      	b.n	8003462 <_svfiprintf_r+0x4e>
 8003592:	460c      	mov	r4, r1
 8003594:	2001      	movs	r0, #1
 8003596:	fb0c 3202 	mla	r2, ip, r2, r3
 800359a:	e7a5      	b.n	80034e8 <_svfiprintf_r+0xd4>
 800359c:	2300      	movs	r3, #0
 800359e:	f04f 0c0a 	mov.w	ip, #10
 80035a2:	4619      	mov	r1, r3
 80035a4:	3401      	adds	r4, #1
 80035a6:	9305      	str	r3, [sp, #20]
 80035a8:	4620      	mov	r0, r4
 80035aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035ae:	3a30      	subs	r2, #48	; 0x30
 80035b0:	2a09      	cmp	r2, #9
 80035b2:	d903      	bls.n	80035bc <_svfiprintf_r+0x1a8>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0c5      	beq.n	8003544 <_svfiprintf_r+0x130>
 80035b8:	9105      	str	r1, [sp, #20]
 80035ba:	e7c3      	b.n	8003544 <_svfiprintf_r+0x130>
 80035bc:	4604      	mov	r4, r0
 80035be:	2301      	movs	r3, #1
 80035c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80035c4:	e7f0      	b.n	80035a8 <_svfiprintf_r+0x194>
 80035c6:	ab03      	add	r3, sp, #12
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	462a      	mov	r2, r5
 80035cc:	4638      	mov	r0, r7
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <_svfiprintf_r+0x1fc>)
 80035d0:	a904      	add	r1, sp, #16
 80035d2:	f3af 8000 	nop.w
 80035d6:	1c42      	adds	r2, r0, #1
 80035d8:	4606      	mov	r6, r0
 80035da:	d1d6      	bne.n	800358a <_svfiprintf_r+0x176>
 80035dc:	89ab      	ldrh	r3, [r5, #12]
 80035de:	065b      	lsls	r3, r3, #25
 80035e0:	f53f af2c 	bmi.w	800343c <_svfiprintf_r+0x28>
 80035e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035e6:	b01d      	add	sp, #116	; 0x74
 80035e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ec:	ab03      	add	r3, sp, #12
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	462a      	mov	r2, r5
 80035f2:	4638      	mov	r0, r7
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <_svfiprintf_r+0x1fc>)
 80035f6:	a904      	add	r1, sp, #16
 80035f8:	f000 f87c 	bl	80036f4 <_printf_i>
 80035fc:	e7eb      	b.n	80035d6 <_svfiprintf_r+0x1c2>
 80035fe:	bf00      	nop
 8003600:	08003c60 	.word	0x08003c60
 8003604:	08003c66 	.word	0x08003c66
 8003608:	08003c6a 	.word	0x08003c6a
 800360c:	00000000 	.word	0x00000000
 8003610:	0800335d 	.word	0x0800335d

08003614 <_printf_common>:
 8003614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003618:	4616      	mov	r6, r2
 800361a:	4699      	mov	r9, r3
 800361c:	688a      	ldr	r2, [r1, #8]
 800361e:	690b      	ldr	r3, [r1, #16]
 8003620:	4607      	mov	r7, r0
 8003622:	4293      	cmp	r3, r2
 8003624:	bfb8      	it	lt
 8003626:	4613      	movlt	r3, r2
 8003628:	6033      	str	r3, [r6, #0]
 800362a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800362e:	460c      	mov	r4, r1
 8003630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003634:	b10a      	cbz	r2, 800363a <_printf_common+0x26>
 8003636:	3301      	adds	r3, #1
 8003638:	6033      	str	r3, [r6, #0]
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	0699      	lsls	r1, r3, #26
 800363e:	bf42      	ittt	mi
 8003640:	6833      	ldrmi	r3, [r6, #0]
 8003642:	3302      	addmi	r3, #2
 8003644:	6033      	strmi	r3, [r6, #0]
 8003646:	6825      	ldr	r5, [r4, #0]
 8003648:	f015 0506 	ands.w	r5, r5, #6
 800364c:	d106      	bne.n	800365c <_printf_common+0x48>
 800364e:	f104 0a19 	add.w	sl, r4, #25
 8003652:	68e3      	ldr	r3, [r4, #12]
 8003654:	6832      	ldr	r2, [r6, #0]
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	42ab      	cmp	r3, r5
 800365a:	dc28      	bgt.n	80036ae <_printf_common+0x9a>
 800365c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003660:	1e13      	subs	r3, r2, #0
 8003662:	6822      	ldr	r2, [r4, #0]
 8003664:	bf18      	it	ne
 8003666:	2301      	movne	r3, #1
 8003668:	0692      	lsls	r2, r2, #26
 800366a:	d42d      	bmi.n	80036c8 <_printf_common+0xb4>
 800366c:	4649      	mov	r1, r9
 800366e:	4638      	mov	r0, r7
 8003670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003674:	47c0      	blx	r8
 8003676:	3001      	adds	r0, #1
 8003678:	d020      	beq.n	80036bc <_printf_common+0xa8>
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	68e5      	ldr	r5, [r4, #12]
 800367e:	f003 0306 	and.w	r3, r3, #6
 8003682:	2b04      	cmp	r3, #4
 8003684:	bf18      	it	ne
 8003686:	2500      	movne	r5, #0
 8003688:	6832      	ldr	r2, [r6, #0]
 800368a:	f04f 0600 	mov.w	r6, #0
 800368e:	68a3      	ldr	r3, [r4, #8]
 8003690:	bf08      	it	eq
 8003692:	1aad      	subeq	r5, r5, r2
 8003694:	6922      	ldr	r2, [r4, #16]
 8003696:	bf08      	it	eq
 8003698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800369c:	4293      	cmp	r3, r2
 800369e:	bfc4      	itt	gt
 80036a0:	1a9b      	subgt	r3, r3, r2
 80036a2:	18ed      	addgt	r5, r5, r3
 80036a4:	341a      	adds	r4, #26
 80036a6:	42b5      	cmp	r5, r6
 80036a8:	d11a      	bne.n	80036e0 <_printf_common+0xcc>
 80036aa:	2000      	movs	r0, #0
 80036ac:	e008      	b.n	80036c0 <_printf_common+0xac>
 80036ae:	2301      	movs	r3, #1
 80036b0:	4652      	mov	r2, sl
 80036b2:	4649      	mov	r1, r9
 80036b4:	4638      	mov	r0, r7
 80036b6:	47c0      	blx	r8
 80036b8:	3001      	adds	r0, #1
 80036ba:	d103      	bne.n	80036c4 <_printf_common+0xb0>
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c4:	3501      	adds	r5, #1
 80036c6:	e7c4      	b.n	8003652 <_printf_common+0x3e>
 80036c8:	2030      	movs	r0, #48	; 0x30
 80036ca:	18e1      	adds	r1, r4, r3
 80036cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036d6:	4422      	add	r2, r4
 80036d8:	3302      	adds	r3, #2
 80036da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036de:	e7c5      	b.n	800366c <_printf_common+0x58>
 80036e0:	2301      	movs	r3, #1
 80036e2:	4622      	mov	r2, r4
 80036e4:	4649      	mov	r1, r9
 80036e6:	4638      	mov	r0, r7
 80036e8:	47c0      	blx	r8
 80036ea:	3001      	adds	r0, #1
 80036ec:	d0e6      	beq.n	80036bc <_printf_common+0xa8>
 80036ee:	3601      	adds	r6, #1
 80036f0:	e7d9      	b.n	80036a6 <_printf_common+0x92>
	...

080036f4 <_printf_i>:
 80036f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036f8:	7e0f      	ldrb	r7, [r1, #24]
 80036fa:	4691      	mov	r9, r2
 80036fc:	2f78      	cmp	r7, #120	; 0x78
 80036fe:	4680      	mov	r8, r0
 8003700:	460c      	mov	r4, r1
 8003702:	469a      	mov	sl, r3
 8003704:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800370a:	d807      	bhi.n	800371c <_printf_i+0x28>
 800370c:	2f62      	cmp	r7, #98	; 0x62
 800370e:	d80a      	bhi.n	8003726 <_printf_i+0x32>
 8003710:	2f00      	cmp	r7, #0
 8003712:	f000 80d9 	beq.w	80038c8 <_printf_i+0x1d4>
 8003716:	2f58      	cmp	r7, #88	; 0x58
 8003718:	f000 80a4 	beq.w	8003864 <_printf_i+0x170>
 800371c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003724:	e03a      	b.n	800379c <_printf_i+0xa8>
 8003726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800372a:	2b15      	cmp	r3, #21
 800372c:	d8f6      	bhi.n	800371c <_printf_i+0x28>
 800372e:	a101      	add	r1, pc, #4	; (adr r1, 8003734 <_printf_i+0x40>)
 8003730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003734:	0800378d 	.word	0x0800378d
 8003738:	080037a1 	.word	0x080037a1
 800373c:	0800371d 	.word	0x0800371d
 8003740:	0800371d 	.word	0x0800371d
 8003744:	0800371d 	.word	0x0800371d
 8003748:	0800371d 	.word	0x0800371d
 800374c:	080037a1 	.word	0x080037a1
 8003750:	0800371d 	.word	0x0800371d
 8003754:	0800371d 	.word	0x0800371d
 8003758:	0800371d 	.word	0x0800371d
 800375c:	0800371d 	.word	0x0800371d
 8003760:	080038af 	.word	0x080038af
 8003764:	080037d1 	.word	0x080037d1
 8003768:	08003891 	.word	0x08003891
 800376c:	0800371d 	.word	0x0800371d
 8003770:	0800371d 	.word	0x0800371d
 8003774:	080038d1 	.word	0x080038d1
 8003778:	0800371d 	.word	0x0800371d
 800377c:	080037d1 	.word	0x080037d1
 8003780:	0800371d 	.word	0x0800371d
 8003784:	0800371d 	.word	0x0800371d
 8003788:	08003899 	.word	0x08003899
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	1d1a      	adds	r2, r3, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	602a      	str	r2, [r5, #0]
 8003794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800379c:	2301      	movs	r3, #1
 800379e:	e0a4      	b.n	80038ea <_printf_i+0x1f6>
 80037a0:	6820      	ldr	r0, [r4, #0]
 80037a2:	6829      	ldr	r1, [r5, #0]
 80037a4:	0606      	lsls	r6, r0, #24
 80037a6:	f101 0304 	add.w	r3, r1, #4
 80037aa:	d50a      	bpl.n	80037c2 <_printf_i+0xce>
 80037ac:	680e      	ldr	r6, [r1, #0]
 80037ae:	602b      	str	r3, [r5, #0]
 80037b0:	2e00      	cmp	r6, #0
 80037b2:	da03      	bge.n	80037bc <_printf_i+0xc8>
 80037b4:	232d      	movs	r3, #45	; 0x2d
 80037b6:	4276      	negs	r6, r6
 80037b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037bc:	230a      	movs	r3, #10
 80037be:	485e      	ldr	r0, [pc, #376]	; (8003938 <_printf_i+0x244>)
 80037c0:	e019      	b.n	80037f6 <_printf_i+0x102>
 80037c2:	680e      	ldr	r6, [r1, #0]
 80037c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037c8:	602b      	str	r3, [r5, #0]
 80037ca:	bf18      	it	ne
 80037cc:	b236      	sxthne	r6, r6
 80037ce:	e7ef      	b.n	80037b0 <_printf_i+0xbc>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	6820      	ldr	r0, [r4, #0]
 80037d4:	1d19      	adds	r1, r3, #4
 80037d6:	6029      	str	r1, [r5, #0]
 80037d8:	0601      	lsls	r1, r0, #24
 80037da:	d501      	bpl.n	80037e0 <_printf_i+0xec>
 80037dc:	681e      	ldr	r6, [r3, #0]
 80037de:	e002      	b.n	80037e6 <_printf_i+0xf2>
 80037e0:	0646      	lsls	r6, r0, #25
 80037e2:	d5fb      	bpl.n	80037dc <_printf_i+0xe8>
 80037e4:	881e      	ldrh	r6, [r3, #0]
 80037e6:	2f6f      	cmp	r7, #111	; 0x6f
 80037e8:	bf0c      	ite	eq
 80037ea:	2308      	moveq	r3, #8
 80037ec:	230a      	movne	r3, #10
 80037ee:	4852      	ldr	r0, [pc, #328]	; (8003938 <_printf_i+0x244>)
 80037f0:	2100      	movs	r1, #0
 80037f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037f6:	6865      	ldr	r5, [r4, #4]
 80037f8:	2d00      	cmp	r5, #0
 80037fa:	bfa8      	it	ge
 80037fc:	6821      	ldrge	r1, [r4, #0]
 80037fe:	60a5      	str	r5, [r4, #8]
 8003800:	bfa4      	itt	ge
 8003802:	f021 0104 	bicge.w	r1, r1, #4
 8003806:	6021      	strge	r1, [r4, #0]
 8003808:	b90e      	cbnz	r6, 800380e <_printf_i+0x11a>
 800380a:	2d00      	cmp	r5, #0
 800380c:	d04d      	beq.n	80038aa <_printf_i+0x1b6>
 800380e:	4615      	mov	r5, r2
 8003810:	fbb6 f1f3 	udiv	r1, r6, r3
 8003814:	fb03 6711 	mls	r7, r3, r1, r6
 8003818:	5dc7      	ldrb	r7, [r0, r7]
 800381a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800381e:	4637      	mov	r7, r6
 8003820:	42bb      	cmp	r3, r7
 8003822:	460e      	mov	r6, r1
 8003824:	d9f4      	bls.n	8003810 <_printf_i+0x11c>
 8003826:	2b08      	cmp	r3, #8
 8003828:	d10b      	bne.n	8003842 <_printf_i+0x14e>
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	07de      	lsls	r6, r3, #31
 800382e:	d508      	bpl.n	8003842 <_printf_i+0x14e>
 8003830:	6923      	ldr	r3, [r4, #16]
 8003832:	6861      	ldr	r1, [r4, #4]
 8003834:	4299      	cmp	r1, r3
 8003836:	bfde      	ittt	le
 8003838:	2330      	movle	r3, #48	; 0x30
 800383a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800383e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003842:	1b52      	subs	r2, r2, r5
 8003844:	6122      	str	r2, [r4, #16]
 8003846:	464b      	mov	r3, r9
 8003848:	4621      	mov	r1, r4
 800384a:	4640      	mov	r0, r8
 800384c:	f8cd a000 	str.w	sl, [sp]
 8003850:	aa03      	add	r2, sp, #12
 8003852:	f7ff fedf 	bl	8003614 <_printf_common>
 8003856:	3001      	adds	r0, #1
 8003858:	d14c      	bne.n	80038f4 <_printf_i+0x200>
 800385a:	f04f 30ff 	mov.w	r0, #4294967295
 800385e:	b004      	add	sp, #16
 8003860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003864:	4834      	ldr	r0, [pc, #208]	; (8003938 <_printf_i+0x244>)
 8003866:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800386a:	6829      	ldr	r1, [r5, #0]
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003872:	6029      	str	r1, [r5, #0]
 8003874:	061d      	lsls	r5, r3, #24
 8003876:	d514      	bpl.n	80038a2 <_printf_i+0x1ae>
 8003878:	07df      	lsls	r7, r3, #31
 800387a:	bf44      	itt	mi
 800387c:	f043 0320 	orrmi.w	r3, r3, #32
 8003880:	6023      	strmi	r3, [r4, #0]
 8003882:	b91e      	cbnz	r6, 800388c <_printf_i+0x198>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	f023 0320 	bic.w	r3, r3, #32
 800388a:	6023      	str	r3, [r4, #0]
 800388c:	2310      	movs	r3, #16
 800388e:	e7af      	b.n	80037f0 <_printf_i+0xfc>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	f043 0320 	orr.w	r3, r3, #32
 8003896:	6023      	str	r3, [r4, #0]
 8003898:	2378      	movs	r3, #120	; 0x78
 800389a:	4828      	ldr	r0, [pc, #160]	; (800393c <_printf_i+0x248>)
 800389c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038a0:	e7e3      	b.n	800386a <_printf_i+0x176>
 80038a2:	0659      	lsls	r1, r3, #25
 80038a4:	bf48      	it	mi
 80038a6:	b2b6      	uxthmi	r6, r6
 80038a8:	e7e6      	b.n	8003878 <_printf_i+0x184>
 80038aa:	4615      	mov	r5, r2
 80038ac:	e7bb      	b.n	8003826 <_printf_i+0x132>
 80038ae:	682b      	ldr	r3, [r5, #0]
 80038b0:	6826      	ldr	r6, [r4, #0]
 80038b2:	1d18      	adds	r0, r3, #4
 80038b4:	6961      	ldr	r1, [r4, #20]
 80038b6:	6028      	str	r0, [r5, #0]
 80038b8:	0635      	lsls	r5, r6, #24
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	d501      	bpl.n	80038c2 <_printf_i+0x1ce>
 80038be:	6019      	str	r1, [r3, #0]
 80038c0:	e002      	b.n	80038c8 <_printf_i+0x1d4>
 80038c2:	0670      	lsls	r0, r6, #25
 80038c4:	d5fb      	bpl.n	80038be <_printf_i+0x1ca>
 80038c6:	8019      	strh	r1, [r3, #0]
 80038c8:	2300      	movs	r3, #0
 80038ca:	4615      	mov	r5, r2
 80038cc:	6123      	str	r3, [r4, #16]
 80038ce:	e7ba      	b.n	8003846 <_printf_i+0x152>
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	2100      	movs	r1, #0
 80038d4:	1d1a      	adds	r2, r3, #4
 80038d6:	602a      	str	r2, [r5, #0]
 80038d8:	681d      	ldr	r5, [r3, #0]
 80038da:	6862      	ldr	r2, [r4, #4]
 80038dc:	4628      	mov	r0, r5
 80038de:	f000 f82f 	bl	8003940 <memchr>
 80038e2:	b108      	cbz	r0, 80038e8 <_printf_i+0x1f4>
 80038e4:	1b40      	subs	r0, r0, r5
 80038e6:	6060      	str	r0, [r4, #4]
 80038e8:	6863      	ldr	r3, [r4, #4]
 80038ea:	6123      	str	r3, [r4, #16]
 80038ec:	2300      	movs	r3, #0
 80038ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038f2:	e7a8      	b.n	8003846 <_printf_i+0x152>
 80038f4:	462a      	mov	r2, r5
 80038f6:	4649      	mov	r1, r9
 80038f8:	4640      	mov	r0, r8
 80038fa:	6923      	ldr	r3, [r4, #16]
 80038fc:	47d0      	blx	sl
 80038fe:	3001      	adds	r0, #1
 8003900:	d0ab      	beq.n	800385a <_printf_i+0x166>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	079b      	lsls	r3, r3, #30
 8003906:	d413      	bmi.n	8003930 <_printf_i+0x23c>
 8003908:	68e0      	ldr	r0, [r4, #12]
 800390a:	9b03      	ldr	r3, [sp, #12]
 800390c:	4298      	cmp	r0, r3
 800390e:	bfb8      	it	lt
 8003910:	4618      	movlt	r0, r3
 8003912:	e7a4      	b.n	800385e <_printf_i+0x16a>
 8003914:	2301      	movs	r3, #1
 8003916:	4632      	mov	r2, r6
 8003918:	4649      	mov	r1, r9
 800391a:	4640      	mov	r0, r8
 800391c:	47d0      	blx	sl
 800391e:	3001      	adds	r0, #1
 8003920:	d09b      	beq.n	800385a <_printf_i+0x166>
 8003922:	3501      	adds	r5, #1
 8003924:	68e3      	ldr	r3, [r4, #12]
 8003926:	9903      	ldr	r1, [sp, #12]
 8003928:	1a5b      	subs	r3, r3, r1
 800392a:	42ab      	cmp	r3, r5
 800392c:	dcf2      	bgt.n	8003914 <_printf_i+0x220>
 800392e:	e7eb      	b.n	8003908 <_printf_i+0x214>
 8003930:	2500      	movs	r5, #0
 8003932:	f104 0619 	add.w	r6, r4, #25
 8003936:	e7f5      	b.n	8003924 <_printf_i+0x230>
 8003938:	08003c71 	.word	0x08003c71
 800393c:	08003c82 	.word	0x08003c82

08003940 <memchr>:
 8003940:	4603      	mov	r3, r0
 8003942:	b510      	push	{r4, lr}
 8003944:	b2c9      	uxtb	r1, r1
 8003946:	4402      	add	r2, r0
 8003948:	4293      	cmp	r3, r2
 800394a:	4618      	mov	r0, r3
 800394c:	d101      	bne.n	8003952 <memchr+0x12>
 800394e:	2000      	movs	r0, #0
 8003950:	e003      	b.n	800395a <memchr+0x1a>
 8003952:	7804      	ldrb	r4, [r0, #0]
 8003954:	3301      	adds	r3, #1
 8003956:	428c      	cmp	r4, r1
 8003958:	d1f6      	bne.n	8003948 <memchr+0x8>
 800395a:	bd10      	pop	{r4, pc}

0800395c <memcpy>:
 800395c:	440a      	add	r2, r1
 800395e:	4291      	cmp	r1, r2
 8003960:	f100 33ff 	add.w	r3, r0, #4294967295
 8003964:	d100      	bne.n	8003968 <memcpy+0xc>
 8003966:	4770      	bx	lr
 8003968:	b510      	push	{r4, lr}
 800396a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800396e:	4291      	cmp	r1, r2
 8003970:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003974:	d1f9      	bne.n	800396a <memcpy+0xe>
 8003976:	bd10      	pop	{r4, pc}

08003978 <memmove>:
 8003978:	4288      	cmp	r0, r1
 800397a:	b510      	push	{r4, lr}
 800397c:	eb01 0402 	add.w	r4, r1, r2
 8003980:	d902      	bls.n	8003988 <memmove+0x10>
 8003982:	4284      	cmp	r4, r0
 8003984:	4623      	mov	r3, r4
 8003986:	d807      	bhi.n	8003998 <memmove+0x20>
 8003988:	1e43      	subs	r3, r0, #1
 800398a:	42a1      	cmp	r1, r4
 800398c:	d008      	beq.n	80039a0 <memmove+0x28>
 800398e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003992:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003996:	e7f8      	b.n	800398a <memmove+0x12>
 8003998:	4601      	mov	r1, r0
 800399a:	4402      	add	r2, r0
 800399c:	428a      	cmp	r2, r1
 800399e:	d100      	bne.n	80039a2 <memmove+0x2a>
 80039a0:	bd10      	pop	{r4, pc}
 80039a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039aa:	e7f7      	b.n	800399c <memmove+0x24>

080039ac <_free_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	4605      	mov	r5, r0
 80039b0:	2900      	cmp	r1, #0
 80039b2:	d040      	beq.n	8003a36 <_free_r+0x8a>
 80039b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039b8:	1f0c      	subs	r4, r1, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bfb8      	it	lt
 80039be:	18e4      	addlt	r4, r4, r3
 80039c0:	f000 f910 	bl	8003be4 <__malloc_lock>
 80039c4:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <_free_r+0x8c>)
 80039c6:	6813      	ldr	r3, [r2, #0]
 80039c8:	b933      	cbnz	r3, 80039d8 <_free_r+0x2c>
 80039ca:	6063      	str	r3, [r4, #4]
 80039cc:	6014      	str	r4, [r2, #0]
 80039ce:	4628      	mov	r0, r5
 80039d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039d4:	f000 b90c 	b.w	8003bf0 <__malloc_unlock>
 80039d8:	42a3      	cmp	r3, r4
 80039da:	d908      	bls.n	80039ee <_free_r+0x42>
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	1821      	adds	r1, r4, r0
 80039e0:	428b      	cmp	r3, r1
 80039e2:	bf01      	itttt	eq
 80039e4:	6819      	ldreq	r1, [r3, #0]
 80039e6:	685b      	ldreq	r3, [r3, #4]
 80039e8:	1809      	addeq	r1, r1, r0
 80039ea:	6021      	streq	r1, [r4, #0]
 80039ec:	e7ed      	b.n	80039ca <_free_r+0x1e>
 80039ee:	461a      	mov	r2, r3
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	b10b      	cbz	r3, 80039f8 <_free_r+0x4c>
 80039f4:	42a3      	cmp	r3, r4
 80039f6:	d9fa      	bls.n	80039ee <_free_r+0x42>
 80039f8:	6811      	ldr	r1, [r2, #0]
 80039fa:	1850      	adds	r0, r2, r1
 80039fc:	42a0      	cmp	r0, r4
 80039fe:	d10b      	bne.n	8003a18 <_free_r+0x6c>
 8003a00:	6820      	ldr	r0, [r4, #0]
 8003a02:	4401      	add	r1, r0
 8003a04:	1850      	adds	r0, r2, r1
 8003a06:	4283      	cmp	r3, r0
 8003a08:	6011      	str	r1, [r2, #0]
 8003a0a:	d1e0      	bne.n	80039ce <_free_r+0x22>
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4401      	add	r1, r0
 8003a12:	6011      	str	r1, [r2, #0]
 8003a14:	6053      	str	r3, [r2, #4]
 8003a16:	e7da      	b.n	80039ce <_free_r+0x22>
 8003a18:	d902      	bls.n	8003a20 <_free_r+0x74>
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	602b      	str	r3, [r5, #0]
 8003a1e:	e7d6      	b.n	80039ce <_free_r+0x22>
 8003a20:	6820      	ldr	r0, [r4, #0]
 8003a22:	1821      	adds	r1, r4, r0
 8003a24:	428b      	cmp	r3, r1
 8003a26:	bf01      	itttt	eq
 8003a28:	6819      	ldreq	r1, [r3, #0]
 8003a2a:	685b      	ldreq	r3, [r3, #4]
 8003a2c:	1809      	addeq	r1, r1, r0
 8003a2e:	6021      	streq	r1, [r4, #0]
 8003a30:	6063      	str	r3, [r4, #4]
 8003a32:	6054      	str	r4, [r2, #4]
 8003a34:	e7cb      	b.n	80039ce <_free_r+0x22>
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
 8003a38:	200001dc 	.word	0x200001dc

08003a3c <sbrk_aligned>:
 8003a3c:	b570      	push	{r4, r5, r6, lr}
 8003a3e:	4e0e      	ldr	r6, [pc, #56]	; (8003a78 <sbrk_aligned+0x3c>)
 8003a40:	460c      	mov	r4, r1
 8003a42:	6831      	ldr	r1, [r6, #0]
 8003a44:	4605      	mov	r5, r0
 8003a46:	b911      	cbnz	r1, 8003a4e <sbrk_aligned+0x12>
 8003a48:	f000 f8bc 	bl	8003bc4 <_sbrk_r>
 8003a4c:	6030      	str	r0, [r6, #0]
 8003a4e:	4621      	mov	r1, r4
 8003a50:	4628      	mov	r0, r5
 8003a52:	f000 f8b7 	bl	8003bc4 <_sbrk_r>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	d00a      	beq.n	8003a70 <sbrk_aligned+0x34>
 8003a5a:	1cc4      	adds	r4, r0, #3
 8003a5c:	f024 0403 	bic.w	r4, r4, #3
 8003a60:	42a0      	cmp	r0, r4
 8003a62:	d007      	beq.n	8003a74 <sbrk_aligned+0x38>
 8003a64:	1a21      	subs	r1, r4, r0
 8003a66:	4628      	mov	r0, r5
 8003a68:	f000 f8ac 	bl	8003bc4 <_sbrk_r>
 8003a6c:	3001      	adds	r0, #1
 8003a6e:	d101      	bne.n	8003a74 <sbrk_aligned+0x38>
 8003a70:	f04f 34ff 	mov.w	r4, #4294967295
 8003a74:	4620      	mov	r0, r4
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
 8003a78:	200001e0 	.word	0x200001e0

08003a7c <_malloc_r>:
 8003a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a80:	1ccd      	adds	r5, r1, #3
 8003a82:	f025 0503 	bic.w	r5, r5, #3
 8003a86:	3508      	adds	r5, #8
 8003a88:	2d0c      	cmp	r5, #12
 8003a8a:	bf38      	it	cc
 8003a8c:	250c      	movcc	r5, #12
 8003a8e:	2d00      	cmp	r5, #0
 8003a90:	4607      	mov	r7, r0
 8003a92:	db01      	blt.n	8003a98 <_malloc_r+0x1c>
 8003a94:	42a9      	cmp	r1, r5
 8003a96:	d905      	bls.n	8003aa4 <_malloc_r+0x28>
 8003a98:	230c      	movs	r3, #12
 8003a9a:	2600      	movs	r6, #0
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aa4:	4e2e      	ldr	r6, [pc, #184]	; (8003b60 <_malloc_r+0xe4>)
 8003aa6:	f000 f89d 	bl	8003be4 <__malloc_lock>
 8003aaa:	6833      	ldr	r3, [r6, #0]
 8003aac:	461c      	mov	r4, r3
 8003aae:	bb34      	cbnz	r4, 8003afe <_malloc_r+0x82>
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	f7ff ffc2 	bl	8003a3c <sbrk_aligned>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	4604      	mov	r4, r0
 8003abc:	d14d      	bne.n	8003b5a <_malloc_r+0xde>
 8003abe:	6834      	ldr	r4, [r6, #0]
 8003ac0:	4626      	mov	r6, r4
 8003ac2:	2e00      	cmp	r6, #0
 8003ac4:	d140      	bne.n	8003b48 <_malloc_r+0xcc>
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	4631      	mov	r1, r6
 8003aca:	4638      	mov	r0, r7
 8003acc:	eb04 0803 	add.w	r8, r4, r3
 8003ad0:	f000 f878 	bl	8003bc4 <_sbrk_r>
 8003ad4:	4580      	cmp	r8, r0
 8003ad6:	d13a      	bne.n	8003b4e <_malloc_r+0xd2>
 8003ad8:	6821      	ldr	r1, [r4, #0]
 8003ada:	3503      	adds	r5, #3
 8003adc:	1a6d      	subs	r5, r5, r1
 8003ade:	f025 0503 	bic.w	r5, r5, #3
 8003ae2:	3508      	adds	r5, #8
 8003ae4:	2d0c      	cmp	r5, #12
 8003ae6:	bf38      	it	cc
 8003ae8:	250c      	movcc	r5, #12
 8003aea:	4638      	mov	r0, r7
 8003aec:	4629      	mov	r1, r5
 8003aee:	f7ff ffa5 	bl	8003a3c <sbrk_aligned>
 8003af2:	3001      	adds	r0, #1
 8003af4:	d02b      	beq.n	8003b4e <_malloc_r+0xd2>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	442b      	add	r3, r5
 8003afa:	6023      	str	r3, [r4, #0]
 8003afc:	e00e      	b.n	8003b1c <_malloc_r+0xa0>
 8003afe:	6822      	ldr	r2, [r4, #0]
 8003b00:	1b52      	subs	r2, r2, r5
 8003b02:	d41e      	bmi.n	8003b42 <_malloc_r+0xc6>
 8003b04:	2a0b      	cmp	r2, #11
 8003b06:	d916      	bls.n	8003b36 <_malloc_r+0xba>
 8003b08:	1961      	adds	r1, r4, r5
 8003b0a:	42a3      	cmp	r3, r4
 8003b0c:	6025      	str	r5, [r4, #0]
 8003b0e:	bf18      	it	ne
 8003b10:	6059      	strne	r1, [r3, #4]
 8003b12:	6863      	ldr	r3, [r4, #4]
 8003b14:	bf08      	it	eq
 8003b16:	6031      	streq	r1, [r6, #0]
 8003b18:	5162      	str	r2, [r4, r5]
 8003b1a:	604b      	str	r3, [r1, #4]
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	f104 060b 	add.w	r6, r4, #11
 8003b22:	f000 f865 	bl	8003bf0 <__malloc_unlock>
 8003b26:	f026 0607 	bic.w	r6, r6, #7
 8003b2a:	1d23      	adds	r3, r4, #4
 8003b2c:	1af2      	subs	r2, r6, r3
 8003b2e:	d0b6      	beq.n	8003a9e <_malloc_r+0x22>
 8003b30:	1b9b      	subs	r3, r3, r6
 8003b32:	50a3      	str	r3, [r4, r2]
 8003b34:	e7b3      	b.n	8003a9e <_malloc_r+0x22>
 8003b36:	6862      	ldr	r2, [r4, #4]
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	bf0c      	ite	eq
 8003b3c:	6032      	streq	r2, [r6, #0]
 8003b3e:	605a      	strne	r2, [r3, #4]
 8003b40:	e7ec      	b.n	8003b1c <_malloc_r+0xa0>
 8003b42:	4623      	mov	r3, r4
 8003b44:	6864      	ldr	r4, [r4, #4]
 8003b46:	e7b2      	b.n	8003aae <_malloc_r+0x32>
 8003b48:	4634      	mov	r4, r6
 8003b4a:	6876      	ldr	r6, [r6, #4]
 8003b4c:	e7b9      	b.n	8003ac2 <_malloc_r+0x46>
 8003b4e:	230c      	movs	r3, #12
 8003b50:	4638      	mov	r0, r7
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	f000 f84c 	bl	8003bf0 <__malloc_unlock>
 8003b58:	e7a1      	b.n	8003a9e <_malloc_r+0x22>
 8003b5a:	6025      	str	r5, [r4, #0]
 8003b5c:	e7de      	b.n	8003b1c <_malloc_r+0xa0>
 8003b5e:	bf00      	nop
 8003b60:	200001dc 	.word	0x200001dc

08003b64 <_realloc_r>:
 8003b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b68:	4680      	mov	r8, r0
 8003b6a:	4614      	mov	r4, r2
 8003b6c:	460e      	mov	r6, r1
 8003b6e:	b921      	cbnz	r1, 8003b7a <_realloc_r+0x16>
 8003b70:	4611      	mov	r1, r2
 8003b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b76:	f7ff bf81 	b.w	8003a7c <_malloc_r>
 8003b7a:	b92a      	cbnz	r2, 8003b88 <_realloc_r+0x24>
 8003b7c:	f7ff ff16 	bl	80039ac <_free_r>
 8003b80:	4625      	mov	r5, r4
 8003b82:	4628      	mov	r0, r5
 8003b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b88:	f000 f838 	bl	8003bfc <_malloc_usable_size_r>
 8003b8c:	4284      	cmp	r4, r0
 8003b8e:	4607      	mov	r7, r0
 8003b90:	d802      	bhi.n	8003b98 <_realloc_r+0x34>
 8003b92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b96:	d812      	bhi.n	8003bbe <_realloc_r+0x5a>
 8003b98:	4621      	mov	r1, r4
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	f7ff ff6e 	bl	8003a7c <_malloc_r>
 8003ba0:	4605      	mov	r5, r0
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d0ed      	beq.n	8003b82 <_realloc_r+0x1e>
 8003ba6:	42bc      	cmp	r4, r7
 8003ba8:	4622      	mov	r2, r4
 8003baa:	4631      	mov	r1, r6
 8003bac:	bf28      	it	cs
 8003bae:	463a      	movcs	r2, r7
 8003bb0:	f7ff fed4 	bl	800395c <memcpy>
 8003bb4:	4631      	mov	r1, r6
 8003bb6:	4640      	mov	r0, r8
 8003bb8:	f7ff fef8 	bl	80039ac <_free_r>
 8003bbc:	e7e1      	b.n	8003b82 <_realloc_r+0x1e>
 8003bbe:	4635      	mov	r5, r6
 8003bc0:	e7df      	b.n	8003b82 <_realloc_r+0x1e>
	...

08003bc4 <_sbrk_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	4d05      	ldr	r5, [pc, #20]	; (8003be0 <_sbrk_r+0x1c>)
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	f7fc fe4c 	bl	800086c <_sbrk>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_sbrk_r+0x1a>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_sbrk_r+0x1a>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	200001e4 	.word	0x200001e4

08003be4 <__malloc_lock>:
 8003be4:	4801      	ldr	r0, [pc, #4]	; (8003bec <__malloc_lock+0x8>)
 8003be6:	f000 b811 	b.w	8003c0c <__retarget_lock_acquire_recursive>
 8003bea:	bf00      	nop
 8003bec:	200001e8 	.word	0x200001e8

08003bf0 <__malloc_unlock>:
 8003bf0:	4801      	ldr	r0, [pc, #4]	; (8003bf8 <__malloc_unlock+0x8>)
 8003bf2:	f000 b80c 	b.w	8003c0e <__retarget_lock_release_recursive>
 8003bf6:	bf00      	nop
 8003bf8:	200001e8 	.word	0x200001e8

08003bfc <_malloc_usable_size_r>:
 8003bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c00:	1f18      	subs	r0, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bfbc      	itt	lt
 8003c06:	580b      	ldrlt	r3, [r1, r0]
 8003c08:	18c0      	addlt	r0, r0, r3
 8003c0a:	4770      	bx	lr

08003c0c <__retarget_lock_acquire_recursive>:
 8003c0c:	4770      	bx	lr

08003c0e <__retarget_lock_release_recursive>:
 8003c0e:	4770      	bx	lr

08003c10 <_init>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr

08003c1c <_fini>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	bf00      	nop
 8003c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c22:	bc08      	pop	{r3}
 8003c24:	469e      	mov	lr, r3
 8003c26:	4770      	bx	lr
