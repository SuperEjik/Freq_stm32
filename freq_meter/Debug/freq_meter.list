
freq_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08005dd0  08005dd0  00015dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08006364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000144  200001dc  08006540  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000320  08006540  00020320  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e5f7  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001fdf  00000000  00000000  0002e7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00006f46  00000000  00000000  000307db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000920  00000000  00000000  00037728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000bc8  00000000  00000000  00038048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00016067  00000000  00000000  00038c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ee70  00000000  00000000  0004ec77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007384e  00000000  00000000  0005dae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000d1335  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002df0  00000000  00000000  000d1388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005db8 	.word	0x08005db8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005db8 	.word	0x08005db8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_InitTick+0x3c>)
{
 8000e10:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e12:	7818      	ldrb	r0, [r3, #0]
 8000e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e18:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <HAL_InitTick+0x40>)
 8000e1e:	6810      	ldr	r0, [r2, #0]
 8000e20:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e24:	f000 f8b0 	bl	8000f88 <HAL_SYSTICK_Config>
 8000e28:	4604      	mov	r4, r0
 8000e2a:	b958      	cbnz	r0, 8000e44 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2c:	2d0f      	cmp	r5, #15
 8000e2e:	d809      	bhi.n	8000e44 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	4602      	mov	r2, r0
 8000e32:	4629      	mov	r1, r5
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f84c 	bl	8000ed4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <HAL_InitTick+0x44>)
 8000e40:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e42:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e44:	2001      	movs	r0, #1
 8000e46:	e7fc      	b.n	8000e42 <HAL_InitTick+0x36>
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x20>)
{
 8000e56:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	f043 0310 	orr.w	r3, r3, #16
 8000e60:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e62:	f000 f81b 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff ffd0 	bl	8000e0c <HAL_InitTick>
  HAL_MspInit();
 8000e6c:	f001 ff22 	bl	8002cb4 <HAL_MspInit>
}
 8000e70:	2000      	movs	r0, #0
 8000e72:	bd08      	pop	{r3, pc}
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e78:	4a03      	ldr	r2, [pc, #12]	; (8000e88 <HAL_IncTick+0x10>)
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <HAL_IncTick+0x14>)
 8000e7c:	6811      	ldr	r1, [r2, #0]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	440b      	add	r3, r1
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200001f8 	.word	0x200001f8
 8000e8c:	20000000 	.word	0x20000000

08000e90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e90:	4b01      	ldr	r3, [pc, #4]	; (8000e98 <HAL_GetTick+0x8>)
 8000e92:	6818      	ldr	r0, [r3, #0]
}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200001f8 	.word	0x200001f8

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000e9c:	1ec3      	subs	r3, r0, #3
 8000e9e:	2b04      	cmp	r3, #4
{
 8000ea0:	b510      	push	{r4, lr}
 8000ea2:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000ea4:	d903      	bls.n	8000eae <HAL_NVIC_SetPriorityGrouping+0x12>
 8000ea6:	21a2      	movs	r1, #162	; 0xa2
 8000ea8:	4808      	ldr	r0, [pc, #32]	; (8000ecc <HAL_NVIC_SetPriorityGrouping+0x30>)
 8000eaa:	f001 fef7 	bl	8002c9c <assert_failed>

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000eae:	0223      	lsls	r3, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb0:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4906      	ldr	r1, [pc, #24]	; (8000ed0 <HAL_NVIC_SetPriorityGrouping+0x34>)
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eba:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebc:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebe:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8000ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ec8:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000eca:	bd10      	pop	{r4, pc}
 8000ecc:	08005dd0 	.word	0x08005dd0
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000ed4:	2a0f      	cmp	r2, #15
{ 
 8000ed6:	b570      	push	{r4, r5, r6, lr}
 8000ed8:	4605      	mov	r5, r0
 8000eda:	460c      	mov	r4, r1
 8000edc:	4616      	mov	r6, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000ede:	d903      	bls.n	8000ee8 <HAL_NVIC_SetPriority+0x14>
 8000ee0:	21ba      	movs	r1, #186	; 0xba
 8000ee2:	481b      	ldr	r0, [pc, #108]	; (8000f50 <HAL_NVIC_SetPriority+0x7c>)
 8000ee4:	f001 feda 	bl	8002c9c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000ee8:	2c0f      	cmp	r4, #15
 8000eea:	d903      	bls.n	8000ef4 <HAL_NVIC_SetPriority+0x20>
 8000eec:	21bb      	movs	r1, #187	; 0xbb
 8000eee:	4818      	ldr	r0, [pc, #96]	; (8000f50 <HAL_NVIC_SetPriority+0x7c>)
 8000ef0:	f001 fed4 	bl	8002c9c <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_NVIC_SetPriority+0x80>)
 8000ef6:	68d8      	ldr	r0, [r3, #12]
 8000ef8:	f3c0 2002 	ubfx	r0, r0, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	f1c0 0307 	rsb	r3, r0, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f00:	1d02      	adds	r2, r0, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f08:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0a:	f04f 32ff 	mov.w	r2, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	bf98      	it	ls
 8000f10:	2000      	movls	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	bf88      	it	hi
 8000f18:	3803      	subhi	r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1a:	ea24 0303 	bic.w	r3, r4, r3
 8000f1e:	4083      	lsls	r3, r0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	fa02 f000 	lsl.w	r0, r2, r0
 8000f24:	ea26 0600 	bic.w	r6, r6, r0
  if ((int32_t)(IRQn) < 0)
 8000f28:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2a:	ea43 0306 	orr.w	r3, r3, r6
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	bfac      	ite	ge
 8000f30:	f105 4560 	addge.w	r5, r5, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	4a08      	ldrlt	r2, [pc, #32]	; (8000f58 <HAL_NVIC_SetPriority+0x84>)
 8000f36:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	bfb5      	itete	lt
 8000f3e:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	f505 4561 	addge.w	r5, r5, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	5553      	strblt	r3, [r2, r5]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	f885 3300 	strbge.w	r3, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f4c:	bd70      	pop	{r4, r5, r6, pc}
 8000f4e:	bf00      	nop
 8000f50:	08005dd0 	.word	0x08005dd0
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	e000ed14 	.word	0xe000ed14

08000f5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000f5e:	1e04      	subs	r4, r0, #0
 8000f60:	da03      	bge.n	8000f6a <HAL_NVIC_EnableIRQ+0xe>
 8000f62:	21ce      	movs	r1, #206	; 0xce
 8000f64:	4806      	ldr	r0, [pc, #24]	; (8000f80 <HAL_NVIC_EnableIRQ+0x24>)
 8000f66:	f001 fe99 	bl	8002c9c <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	0962      	lsrs	r2, r4, #5
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_NVIC_EnableIRQ+0x28>)
 8000f70:	f004 041f 	and.w	r4, r4, #31
 8000f74:	fa00 f404 	lsl.w	r4, r0, r4
 8000f78:	f843 4022 	str.w	r4, [r3, r2, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f7c:	bd10      	pop	{r4, pc}
 8000f7e:	bf00      	nop
 8000f80:	08005dd0 	.word	0x08005dd0
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	3801      	subs	r0, #1
 8000f8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f8e:	d20b      	bcs.n	8000fa8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	21f0      	movs	r1, #240	; 0xf0
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f98:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fa8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000fb4:	f8df 9294 	ldr.w	r9, [pc, #660]	; 800124c <HAL_GPIO_Init+0x29c>
{
 8000fb8:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000fba:	4548      	cmp	r0, r9
{
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000fc0:	d012      	beq.n	8000fe8 <HAL_GPIO_Init+0x38>
 8000fc2:	4ba3      	ldr	r3, [pc, #652]	; (8001250 <HAL_GPIO_Init+0x2a0>)
 8000fc4:	4298      	cmp	r0, r3
 8000fc6:	d00f      	beq.n	8000fe8 <HAL_GPIO_Init+0x38>
 8000fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fcc:	4298      	cmp	r0, r3
 8000fce:	d00b      	beq.n	8000fe8 <HAL_GPIO_Init+0x38>
 8000fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fd4:	4298      	cmp	r0, r3
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_Init+0x38>
 8000fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fdc:	4298      	cmp	r0, r3
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x38>
 8000fe0:	21cd      	movs	r1, #205	; 0xcd
 8000fe2:	489c      	ldr	r0, [pc, #624]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 8000fe4:	f001 fe5a 	bl	8002c9c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000fe8:	682b      	ldr	r3, [r5, #0]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	b112      	cbz	r2, 8000ff4 <HAL_GPIO_Init+0x44>
 8000fee:	0c1b      	lsrs	r3, r3, #16
 8000ff0:	041b      	lsls	r3, r3, #16
 8000ff2:	b11b      	cbz	r3, 8000ffc <HAL_GPIO_Init+0x4c>
 8000ff4:	21ce      	movs	r1, #206	; 0xce
 8000ff6:	4897      	ldr	r0, [pc, #604]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 8000ff8:	f001 fe50 	bl	8002c9c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000ffc:	686b      	ldr	r3, [r5, #4]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d917      	bls.n	8001032 <HAL_GPIO_Init+0x82>
 8001002:	f1a3 0211 	sub.w	r2, r3, #17
 8001006:	2a01      	cmp	r2, #1
 8001008:	d913      	bls.n	8001032 <HAL_GPIO_Init+0x82>
 800100a:	4993      	ldr	r1, [pc, #588]	; (8001258 <HAL_GPIO_Init+0x2a8>)
 800100c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001010:	428a      	cmp	r2, r1
 8001012:	d00e      	beq.n	8001032 <HAL_GPIO_Init+0x82>
 8001014:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8001018:	428b      	cmp	r3, r1
 800101a:	d00a      	beq.n	8001032 <HAL_GPIO_Init+0x82>
 800101c:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8001020:	428a      	cmp	r2, r1
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x82>
 8001024:	4a8d      	ldr	r2, [pc, #564]	; (800125c <HAL_GPIO_Init+0x2ac>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x82>
 800102a:	21cf      	movs	r1, #207	; 0xcf
 800102c:	4889      	ldr	r0, [pc, #548]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 800102e:	f001 fe35 	bl	8002c9c <assert_failed>
{
 8001032:	2600      	movs	r6, #0
 8001034:	46b0      	mov	r8, r6
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001036:	f8df a228 	ldr.w	sl, [pc, #552]	; 8001260 <HAL_GPIO_Init+0x2b0>
 800103a:	f8df b228 	ldr.w	fp, [pc, #552]	; 8001264 <HAL_GPIO_Init+0x2b4>
    ioposition = (0x01U << position);
 800103e:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001040:	6829      	ldr	r1, [r5, #0]
    ioposition = (0x01U << position);
 8001042:	fa02 f208 	lsl.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001046:	ea32 0301 	bics.w	r3, r2, r1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	ea02 0701 	and.w	r7, r2, r1
    if (iocurrent == ioposition)
 800104e:	f040 8094 	bne.w	800117a <HAL_GPIO_Init+0x1ca>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001052:	454c      	cmp	r4, r9
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0xce>
 8001056:	497e      	ldr	r1, [pc, #504]	; (8001250 <HAL_GPIO_Init+0x2a0>)
 8001058:	428c      	cmp	r4, r1
 800105a:	d010      	beq.n	800107e <HAL_GPIO_Init+0xce>
 800105c:	4b82      	ldr	r3, [pc, #520]	; (8001268 <HAL_GPIO_Init+0x2b8>)
 800105e:	429c      	cmp	r4, r3
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0xce>
 8001062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001066:	428c      	cmp	r4, r1
 8001068:	d009      	beq.n	800107e <HAL_GPIO_Init+0xce>
 800106a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800106e:	428c      	cmp	r4, r1
 8001070:	d005      	beq.n	800107e <HAL_GPIO_Init+0xce>
 8001072:	21dd      	movs	r1, #221	; 0xdd
 8001074:	4877      	ldr	r0, [pc, #476]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 8001076:	9201      	str	r2, [sp, #4]
 8001078:	f001 fe10 	bl	8002c9c <assert_failed>
 800107c:	9a01      	ldr	r2, [sp, #4]
      switch (GPIO_Init->Mode)
 800107e:	6869      	ldr	r1, [r5, #4]
 8001080:	2903      	cmp	r1, #3
 8001082:	d808      	bhi.n	8001096 <HAL_GPIO_Init+0xe6>
 8001084:	3901      	subs	r1, #1
 8001086:	2902      	cmp	r1, #2
 8001088:	f200 8091 	bhi.w	80011ae <HAL_GPIO_Init+0x1fe>
 800108c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001090:	00be00a9 	.word	0x00be00a9
 8001094:	00d4      	.short	0x00d4
 8001096:	2912      	cmp	r1, #18
 8001098:	f000 80c3 	beq.w	8001222 <HAL_GPIO_Init+0x272>
 800109c:	d876      	bhi.n	800118c <HAL_GPIO_Init+0x1dc>
 800109e:	2911      	cmp	r1, #17
 80010a0:	f000 80a9 	beq.w	80011f6 <HAL_GPIO_Init+0x246>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010a4:	2fff      	cmp	r7, #255	; 0xff
 80010a6:	bf98      	it	ls
 80010a8:	4622      	movls	r2, r4
 80010aa:	ea4f 0188 	mov.w	r1, r8, lsl #2
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80010ae:	bf98      	it	ls
 80010b0:	4608      	movls	r0, r1
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010b2:	f04f 0c0f 	mov.w	ip, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010b6:	bf84      	itt	hi
 80010b8:	1d22      	addhi	r2, r4, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80010ba:	f1a1 0020 	subhi.w	r0, r1, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010be:	6811      	ldr	r1, [r2, #0]
 80010c0:	fa0c fe00 	lsl.w	lr, ip, r0
 80010c4:	ea21 010e 	bic.w	r1, r1, lr
 80010c8:	fa06 f000 	lsl.w	r0, r6, r0
 80010cc:	4301      	orrs	r1, r0
 80010ce:	6011      	str	r1, [r2, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d0:	6868      	ldr	r0, [r5, #4]
 80010d2:	00c3      	lsls	r3, r0, #3
 80010d4:	d551      	bpl.n	800117a <HAL_GPIO_Init+0x1ca>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010d6:	f8da 2018 	ldr.w	r2, [sl, #24]
 80010da:	f028 0103 	bic.w	r1, r8, #3
 80010de:	f042 0201 	orr.w	r2, r2, #1
 80010e2:	f8ca 2018 	str.w	r2, [sl, #24]
 80010e6:	f8da 2018 	ldr.w	r2, [sl, #24]
 80010ea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80010ee:	f002 0201 	and.w	r2, r2, #1
 80010f2:	9203      	str	r2, [sp, #12]
 80010f4:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80010f8:	f008 0e03 	and.w	lr, r8, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010fc:	9a03      	ldr	r2, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80010fe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001102:	688a      	ldr	r2, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001104:	fa0c fc0e 	lsl.w	ip, ip, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001108:	454c      	cmp	r4, r9
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800110a:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110e:	f000 8097 	beq.w	8001240 <HAL_GPIO_Init+0x290>
 8001112:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x2a0>)
 8001114:	4294      	cmp	r4, r2
 8001116:	f000 8095 	beq.w	8001244 <HAL_GPIO_Init+0x294>
 800111a:	4b53      	ldr	r3, [pc, #332]	; (8001268 <HAL_GPIO_Init+0x2b8>)
 800111c:	429c      	cmp	r4, r3
 800111e:	f000 8093 	beq.w	8001248 <HAL_GPIO_Init+0x298>
 8001122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001126:	4294      	cmp	r4, r2
 8001128:	bf0c      	ite	eq
 800112a:	2203      	moveq	r2, #3
 800112c:	2204      	movne	r2, #4
 800112e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001132:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 8001136:	608a      	str	r2, [r1, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001138:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800113c:	03c1      	lsls	r1, r0, #15
          SET_BIT(EXTI->IMR, iocurrent);
 800113e:	bf4c      	ite	mi
 8001140:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001142:	43ba      	bicpl	r2, r7
 8001144:	f8cb 2000 	str.w	r2, [fp]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001148:	f8db 2004 	ldr.w	r2, [fp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800114c:	0383      	lsls	r3, r0, #14
          SET_BIT(EXTI->EMR, iocurrent);
 800114e:	bf4c      	ite	mi
 8001150:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001152:	43ba      	bicpl	r2, r7
 8001154:	f8cb 2004 	str.w	r2, [fp, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001158:	f8db 2008 	ldr.w	r2, [fp, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800115c:	02c1      	lsls	r1, r0, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 800115e:	bf4c      	ite	mi
 8001160:	433a      	orrmi	r2, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001162:	43ba      	bicpl	r2, r7
 8001164:	f8cb 2008 	str.w	r2, [fp, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001168:	f8db 200c 	ldr.w	r2, [fp, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800116c:	0283      	lsls	r3, r0, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 800116e:	bf4c      	ite	mi
 8001170:	4317      	orrmi	r7, r2
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001172:	ea22 0707 	bicpl.w	r7, r2, r7
 8001176:	f8cb 700c 	str.w	r7, [fp, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800117a:	f108 0801 	add.w	r8, r8, #1
 800117e:	f1b8 0f10 	cmp.w	r8, #16
 8001182:	f47f af5c 	bne.w	800103e <HAL_GPIO_Init+0x8e>
        }
      }
    }
  }
}
 8001186:	b005      	add	sp, #20
 8001188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800118c:	4833      	ldr	r0, [pc, #204]	; (800125c <HAL_GPIO_Init+0x2ac>)
 800118e:	4281      	cmp	r1, r0
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x1fe>
 8001192:	d820      	bhi.n	80011d6 <HAL_GPIO_Init+0x226>
 8001194:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8001198:	4281      	cmp	r1, r0
 800119a:	d008      	beq.n	80011ae <HAL_GPIO_Init+0x1fe>
 800119c:	f500 2070 	add.w	r0, r0, #983040	; 0xf0000
 80011a0:	4281      	cmp	r1, r0
 80011a2:	d004      	beq.n	80011ae <HAL_GPIO_Init+0x1fe>
 80011a4:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80011a8:	4281      	cmp	r1, r0
 80011aa:	f47f af7b 	bne.w	80010a4 <HAL_GPIO_Init+0xf4>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80011ae:	68a9      	ldr	r1, [r5, #8]
 80011b0:	2902      	cmp	r1, #2
 80011b2:	d906      	bls.n	80011c2 <HAL_GPIO_Init+0x212>
 80011b4:	f240 1107 	movw	r1, #263	; 0x107
 80011b8:	4826      	ldr	r0, [pc, #152]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 80011ba:	9201      	str	r2, [sp, #4]
 80011bc:	f001 fd6e 	bl	8002c9c <assert_failed>
 80011c0:	9a01      	ldr	r2, [sp, #4]
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011c2:	68a9      	ldr	r1, [r5, #8]
 80011c4:	2900      	cmp	r1, #0
 80011c6:	d039      	beq.n	800123c <HAL_GPIO_Init+0x28c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011c8:	2901      	cmp	r1, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ca:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 80011ce:	bf0c      	ite	eq
 80011d0:	6122      	streq	r2, [r4, #16]
            GPIOx->BRR = ioposition;
 80011d2:	6162      	strne	r2, [r4, #20]
 80011d4:	e766      	b.n	80010a4 <HAL_GPIO_Init+0xf4>
      switch (GPIO_Init->Mode)
 80011d6:	4825      	ldr	r0, [pc, #148]	; (800126c <HAL_GPIO_Init+0x2bc>)
 80011d8:	4281      	cmp	r1, r0
 80011da:	d0e8      	beq.n	80011ae <HAL_GPIO_Init+0x1fe>
 80011dc:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80011e0:	e7e2      	b.n	80011a8 <HAL_GPIO_Init+0x1f8>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80011e2:	68ea      	ldr	r2, [r5, #12]
 80011e4:	3a01      	subs	r2, #1
 80011e6:	2a02      	cmp	r2, #2
 80011e8:	d903      	bls.n	80011f2 <HAL_GPIO_Init+0x242>
 80011ea:	21e5      	movs	r1, #229	; 0xe5
 80011ec:	4819      	ldr	r0, [pc, #100]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 80011ee:	f001 fd55 	bl	8002c9c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011f2:	68ee      	ldr	r6, [r5, #12]
          break;
 80011f4:	e756      	b.n	80010a4 <HAL_GPIO_Init+0xf4>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80011f6:	68ea      	ldr	r2, [r5, #12]
 80011f8:	3a01      	subs	r2, #1
 80011fa:	2a02      	cmp	r2, #2
 80011fc:	d903      	bls.n	8001206 <HAL_GPIO_Init+0x256>
 80011fe:	21ec      	movs	r1, #236	; 0xec
 8001200:	4814      	ldr	r0, [pc, #80]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 8001202:	f001 fd4b 	bl	8002c9c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001206:	68ee      	ldr	r6, [r5, #12]
 8001208:	3604      	adds	r6, #4
          break;
 800120a:	e74b      	b.n	80010a4 <HAL_GPIO_Init+0xf4>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800120c:	68ea      	ldr	r2, [r5, #12]
 800120e:	3a01      	subs	r2, #1
 8001210:	2a02      	cmp	r2, #2
 8001212:	d903      	bls.n	800121c <HAL_GPIO_Init+0x26c>
 8001214:	21f3      	movs	r1, #243	; 0xf3
 8001216:	480f      	ldr	r0, [pc, #60]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 8001218:	f001 fd40 	bl	8002c9c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800121c:	68ee      	ldr	r6, [r5, #12]
 800121e:	3608      	adds	r6, #8
          break;
 8001220:	e740      	b.n	80010a4 <HAL_GPIO_Init+0xf4>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001222:	68ea      	ldr	r2, [r5, #12]
 8001224:	3a01      	subs	r2, #1
 8001226:	2a02      	cmp	r2, #2
 8001228:	d903      	bls.n	8001232 <HAL_GPIO_Init+0x282>
 800122a:	21fa      	movs	r1, #250	; 0xfa
 800122c:	4809      	ldr	r0, [pc, #36]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 800122e:	f001 fd35 	bl	8002c9c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001232:	68ee      	ldr	r6, [r5, #12]
 8001234:	360c      	adds	r6, #12
          break;
 8001236:	e735      	b.n	80010a4 <HAL_GPIO_Init+0xf4>
      switch (GPIO_Init->Mode)
 8001238:	2600      	movs	r6, #0
 800123a:	e733      	b.n	80010a4 <HAL_GPIO_Init+0xf4>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800123c:	2604      	movs	r6, #4
 800123e:	e731      	b.n	80010a4 <HAL_GPIO_Init+0xf4>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001240:	2200      	movs	r2, #0
 8001242:	e774      	b.n	800112e <HAL_GPIO_Init+0x17e>
 8001244:	2201      	movs	r2, #1
 8001246:	e772      	b.n	800112e <HAL_GPIO_Init+0x17e>
 8001248:	2202      	movs	r2, #2
 800124a:	e770      	b.n	800112e <HAL_GPIO_Init+0x17e>
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	08005e0b 	.word	0x08005e0b
 8001258:	10110000 	.word	0x10110000
 800125c:	10220000 	.word	0x10220000
 8001260:	40021000 	.word	0x40021000
 8001264:	40010400 	.word	0x40010400
 8001268:	40011000 	.word	0x40011000
 800126c:	10310000 	.word	0x10310000

08001270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8001274:	4604      	mov	r4, r0
 8001276:	b920      	cbnz	r0, 8001282 <HAL_RCC_OscConfig+0x12>
 8001278:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800127c:	4882      	ldr	r0, [pc, #520]	; (8001488 <HAL_RCC_OscConfig+0x218>)
 800127e:	f001 fd0d 	bl	8002c9c <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	b9ab      	cbnz	r3, 80012b2 <HAL_RCC_OscConfig+0x42>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	0719      	lsls	r1, r3, #28
 800128a:	f100 80c5 	bmi.w	8001418 <HAL_RCC_OscConfig+0x1a8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	075a      	lsls	r2, r3, #29
 8001292:	f100 8101 	bmi.w	8001498 <HAL_RCC_OscConfig+0x228>
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001296:	69e3      	ldr	r3, [r4, #28]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d904      	bls.n	80012a6 <HAL_RCC_OscConfig+0x36>
 800129c:	f240 21b9 	movw	r1, #697	; 0x2b9
 80012a0:	4879      	ldr	r0, [pc, #484]	; (8001488 <HAL_RCC_OscConfig+0x218>)
 80012a2:	f001 fcfb 	bl	8002c9c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a6:	69e2      	ldr	r2, [r4, #28]
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	f040 8166 	bne.w	800157a <HAL_RCC_OscConfig+0x30a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80012ae:	2000      	movs	r0, #0
 80012b0:	e029      	b.n	8001306 <HAL_RCC_OscConfig+0x96>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80012b2:	071b      	lsls	r3, r3, #28
 80012b4:	d104      	bne.n	80012c0 <HAL_RCC_OscConfig+0x50>
 80012b6:	f240 1171 	movw	r1, #369	; 0x171
 80012ba:	4873      	ldr	r0, [pc, #460]	; (8001488 <HAL_RCC_OscConfig+0x218>)
 80012bc:	f001 fcee 	bl	8002c9c <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	07df      	lsls	r7, r3, #31
 80012c4:	d530      	bpl.n	8001328 <HAL_RCC_OscConfig+0xb8>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80012c6:	6863      	ldr	r3, [r4, #4]
 80012c8:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80012cc:	d007      	beq.n	80012de <HAL_RCC_OscConfig+0x6e>
 80012ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d2:	d004      	beq.n	80012de <HAL_RCC_OscConfig+0x6e>
 80012d4:	f240 1177 	movw	r1, #375	; 0x177
 80012d8:	486b      	ldr	r0, [pc, #428]	; (8001488 <HAL_RCC_OscConfig+0x218>)
 80012da:	f001 fcdf 	bl	8002c9c <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012de:	4d6b      	ldr	r5, [pc, #428]	; (800148c <HAL_RCC_OscConfig+0x21c>)
 80012e0:	686b      	ldr	r3, [r5, #4]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d007      	beq.n	80012fa <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ea:	686b      	ldr	r3, [r5, #4]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d10b      	bne.n	800130c <HAL_RCC_OscConfig+0x9c>
 80012f4:	686b      	ldr	r3, [r5, #4]
 80012f6:	03de      	lsls	r6, r3, #15
 80012f8:	d508      	bpl.n	800130c <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fa:	682b      	ldr	r3, [r5, #0]
 80012fc:	039d      	lsls	r5, r3, #14
 80012fe:	d513      	bpl.n	8001328 <HAL_RCC_OscConfig+0xb8>
 8001300:	6863      	ldr	r3, [r4, #4]
 8001302:	b98b      	cbnz	r3, 8001328 <HAL_RCC_OscConfig+0xb8>
        return HAL_ERROR;
 8001304:	2001      	movs	r0, #1
}
 8001306:	b002      	add	sp, #8
 8001308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130c:	6863      	ldr	r3, [r4, #4]
 800130e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001312:	d137      	bne.n	8001384 <HAL_RCC_OscConfig+0x114>
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800131c:	f7ff fdb8 	bl	8000e90 <HAL_GetTick>
 8001320:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	0398      	lsls	r0, r3, #14
 8001326:	d551      	bpl.n	80013cc <HAL_RCC_OscConfig+0x15c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	079a      	lsls	r2, r3, #30
 800132c:	d5ab      	bpl.n	8001286 <HAL_RCC_OscConfig+0x16>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800132e:	6923      	ldr	r3, [r4, #16]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d904      	bls.n	800133e <HAL_RCC_OscConfig+0xce>
 8001334:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001338:	4853      	ldr	r0, [pc, #332]	; (8001488 <HAL_RCC_OscConfig+0x218>)
 800133a:	f001 fcaf 	bl	8002c9c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800133e:	6963      	ldr	r3, [r4, #20]
 8001340:	2b1f      	cmp	r3, #31
 8001342:	d904      	bls.n	800134e <HAL_RCC_OscConfig+0xde>
 8001344:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001348:	484f      	ldr	r0, [pc, #316]	; (8001488 <HAL_RCC_OscConfig+0x218>)
 800134a:	f001 fca7 	bl	8002c9c <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800134e:	4d4f      	ldr	r5, [pc, #316]	; (800148c <HAL_RCC_OscConfig+0x21c>)
 8001350:	686b      	ldr	r3, [r5, #4]
 8001352:	f013 0f0c 	tst.w	r3, #12
 8001356:	d007      	beq.n	8001368 <HAL_RCC_OscConfig+0xf8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001358:	686b      	ldr	r3, [r5, #4]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b08      	cmp	r3, #8
 8001360:	d13b      	bne.n	80013da <HAL_RCC_OscConfig+0x16a>
 8001362:	686b      	ldr	r3, [r5, #4]
 8001364:	03da      	lsls	r2, r3, #15
 8001366:	d438      	bmi.n	80013da <HAL_RCC_OscConfig+0x16a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	079b      	lsls	r3, r3, #30
 800136c:	d502      	bpl.n	8001374 <HAL_RCC_OscConfig+0x104>
 800136e:	6923      	ldr	r3, [r4, #16]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d1c7      	bne.n	8001304 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	682b      	ldr	r3, [r5, #0]
 8001376:	6962      	ldr	r2, [r4, #20]
 8001378:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800137c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001380:	602b      	str	r3, [r5, #0]
 8001382:	e780      	b.n	8001286 <HAL_RCC_OscConfig+0x16>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001384:	b99b      	cbnz	r3, 80013ae <HAL_RCC_OscConfig+0x13e>
 8001386:	682b      	ldr	r3, [r5, #0]
 8001388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138c:	602b      	str	r3, [r5, #0]
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001394:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001396:	f7ff fd7b 	bl	8000e90 <HAL_GetTick>
 800139a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	0399      	lsls	r1, r3, #14
 80013a0:	d5c2      	bpl.n	8001328 <HAL_RCC_OscConfig+0xb8>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a2:	f7ff fd75 	bl	8000e90 <HAL_GetTick>
 80013a6:	1b80      	subs	r0, r0, r6
 80013a8:	2864      	cmp	r0, #100	; 0x64
 80013aa:	d9f7      	bls.n	800139c <HAL_RCC_OscConfig+0x12c>
 80013ac:	e013      	b.n	80013d6 <HAL_RCC_OscConfig+0x166>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b2:	682b      	ldr	r3, [r5, #0]
 80013b4:	d103      	bne.n	80013be <HAL_RCC_OscConfig+0x14e>
 80013b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ba:	602b      	str	r3, [r5, #0]
 80013bc:	e7aa      	b.n	8001314 <HAL_RCC_OscConfig+0xa4>
 80013be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c2:	602b      	str	r3, [r5, #0]
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ca:	e7a6      	b.n	800131a <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fd60 	bl	8000e90 <HAL_GetTick>
 80013d0:	1b80      	subs	r0, r0, r6
 80013d2:	2864      	cmp	r0, #100	; 0x64
 80013d4:	d9a5      	bls.n	8001322 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80013d6:	2003      	movs	r0, #3
 80013d8:	e795      	b.n	8001306 <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013da:	6922      	ldr	r2, [r4, #16]
 80013dc:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <HAL_RCC_OscConfig+0x220>)
 80013de:	b16a      	cbz	r2, 80013fc <HAL_RCC_OscConfig+0x18c>
        __HAL_RCC_HSI_ENABLE();
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013e4:	f7ff fd54 	bl	8000e90 <HAL_GetTick>
 80013e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ea:	682b      	ldr	r3, [r5, #0]
 80013ec:	079f      	lsls	r7, r3, #30
 80013ee:	d4c1      	bmi.n	8001374 <HAL_RCC_OscConfig+0x104>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fd4e 	bl	8000e90 <HAL_GetTick>
 80013f4:	1b80      	subs	r0, r0, r6
 80013f6:	2802      	cmp	r0, #2
 80013f8:	d9f7      	bls.n	80013ea <HAL_RCC_OscConfig+0x17a>
 80013fa:	e7ec      	b.n	80013d6 <HAL_RCC_OscConfig+0x166>
        __HAL_RCC_HSI_DISABLE();
 80013fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013fe:	f7ff fd47 	bl	8000e90 <HAL_GetTick>
 8001402:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	0798      	lsls	r0, r3, #30
 8001408:	f57f af3d 	bpl.w	8001286 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fd40 	bl	8000e90 <HAL_GetTick>
 8001410:	1b80      	subs	r0, r0, r6
 8001412:	2802      	cmp	r0, #2
 8001414:	d9f6      	bls.n	8001404 <HAL_RCC_OscConfig+0x194>
 8001416:	e7de      	b.n	80013d6 <HAL_RCC_OscConfig+0x166>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001418:	69a3      	ldr	r3, [r4, #24]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d904      	bls.n	8001428 <HAL_RCC_OscConfig+0x1b8>
 800141e:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001422:	4819      	ldr	r0, [pc, #100]	; (8001488 <HAL_RCC_OscConfig+0x218>)
 8001424:	f001 fc3a 	bl	8002c9c <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001428:	69a2      	ldr	r2, [r4, #24]
 800142a:	4e18      	ldr	r6, [pc, #96]	; (800148c <HAL_RCC_OscConfig+0x21c>)
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_RCC_OscConfig+0x220>)
 800142e:	b1e2      	cbz	r2, 800146a <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 8001430:	2201      	movs	r2, #1
 8001432:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001436:	f7ff fd2b 	bl	8000e90 <HAL_GetTick>
 800143a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800143e:	079b      	lsls	r3, r3, #30
 8001440:	d50d      	bpl.n	800145e <HAL_RCC_OscConfig+0x1ee>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001442:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_RCC_OscConfig+0x224>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fbb3 f3f2 	udiv	r3, r3, r2
 800144e:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001450:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001452:	9b01      	ldr	r3, [sp, #4]
 8001454:	1e5a      	subs	r2, r3, #1
 8001456:	9201      	str	r2, [sp, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f9      	bne.n	8001450 <HAL_RCC_OscConfig+0x1e0>
 800145c:	e717      	b.n	800128e <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff fd17 	bl	8000e90 <HAL_GetTick>
 8001462:	1b40      	subs	r0, r0, r5
 8001464:	2802      	cmp	r0, #2
 8001466:	d9e9      	bls.n	800143c <HAL_RCC_OscConfig+0x1cc>
 8001468:	e7b5      	b.n	80013d6 <HAL_RCC_OscConfig+0x166>
      __HAL_RCC_LSI_DISABLE();
 800146a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800146e:	f7ff fd0f 	bl	8000e90 <HAL_GetTick>
 8001472:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001476:	079f      	lsls	r7, r3, #30
 8001478:	f57f af09 	bpl.w	800128e <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fd08 	bl	8000e90 <HAL_GetTick>
 8001480:	1b40      	subs	r0, r0, r5
 8001482:	2802      	cmp	r0, #2
 8001484:	d9f6      	bls.n	8001474 <HAL_RCC_OscConfig+0x204>
 8001486:	e7a6      	b.n	80013d6 <HAL_RCC_OscConfig+0x166>
 8001488:	08005e44 	.word	0x08005e44
 800148c:	40021000 	.word	0x40021000
 8001490:	42420000 	.word	0x42420000
 8001494:	20000008 	.word	0x20000008
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001498:	68e3      	ldr	r3, [r4, #12]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d906      	bls.n	80014ac <HAL_RCC_OscConfig+0x23c>
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d004      	beq.n	80014ac <HAL_RCC_OscConfig+0x23c>
 80014a2:	f240 211b 	movw	r1, #539	; 0x21b
 80014a6:	486e      	ldr	r0, [pc, #440]	; (8001660 <HAL_RCC_OscConfig+0x3f0>)
 80014a8:	f001 fbf8 	bl	8002c9c <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ac:	4d6d      	ldr	r5, [pc, #436]	; (8001664 <HAL_RCC_OscConfig+0x3f4>)
 80014ae:	69eb      	ldr	r3, [r5, #28]
 80014b0:	00d8      	lsls	r0, r3, #3
 80014b2:	d424      	bmi.n	80014fe <HAL_RCC_OscConfig+0x28e>
      pwrclkchanged = SET;
 80014b4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	69eb      	ldr	r3, [r5, #28]
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	61eb      	str	r3, [r5, #28]
 80014be:	69eb      	ldr	r3, [r5, #28]
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	4e67      	ldr	r6, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x3f8>)
 80014ca:	6833      	ldr	r3, [r6, #0]
 80014cc:	05d9      	lsls	r1, r3, #23
 80014ce:	d518      	bpl.n	8001502 <HAL_RCC_OscConfig+0x292>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d0:	68e3      	ldr	r3, [r4, #12]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d126      	bne.n	8001524 <HAL_RCC_OscConfig+0x2b4>
 80014d6:	6a2b      	ldr	r3, [r5, #32]
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80014de:	f7ff fcd7 	bl	8000e90 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80014e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e8:	6a2b      	ldr	r3, [r5, #32]
 80014ea:	079b      	lsls	r3, r3, #30
 80014ec:	d53f      	bpl.n	800156e <HAL_RCC_OscConfig+0x2fe>
    if(pwrclkchanged == SET)
 80014ee:	2f00      	cmp	r7, #0
 80014f0:	f43f aed1 	beq.w	8001296 <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f4:	69eb      	ldr	r3, [r5, #28]
 80014f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014fa:	61eb      	str	r3, [r5, #28]
 80014fc:	e6cb      	b.n	8001296 <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2700      	movs	r7, #0
 8001500:	e7e2      	b.n	80014c8 <HAL_RCC_OscConfig+0x258>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001502:	6833      	ldr	r3, [r6, #0]
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800150a:	f7ff fcc1 	bl	8000e90 <HAL_GetTick>
 800150e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001510:	6833      	ldr	r3, [r6, #0]
 8001512:	05da      	lsls	r2, r3, #23
 8001514:	d4dc      	bmi.n	80014d0 <HAL_RCC_OscConfig+0x260>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001516:	f7ff fcbb 	bl	8000e90 <HAL_GetTick>
 800151a:	eba0 0008 	sub.w	r0, r0, r8
 800151e:	2864      	cmp	r0, #100	; 0x64
 8001520:	d9f6      	bls.n	8001510 <HAL_RCC_OscConfig+0x2a0>
 8001522:	e758      	b.n	80013d6 <HAL_RCC_OscConfig+0x166>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	b9ab      	cbnz	r3, 8001552 <HAL_RCC_OscConfig+0x2e2>
 8001526:	6a2b      	ldr	r3, [r5, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	622b      	str	r3, [r5, #32]
 8001532:	6a2b      	ldr	r3, [r5, #32]
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800153a:	f7ff fca9 	bl	8000e90 <HAL_GetTick>
 800153e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	6a2b      	ldr	r3, [r5, #32]
 8001542:	0798      	lsls	r0, r3, #30
 8001544:	d5d3      	bpl.n	80014ee <HAL_RCC_OscConfig+0x27e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7ff fca3 	bl	8000e90 <HAL_GetTick>
 800154a:	1b80      	subs	r0, r0, r6
 800154c:	4540      	cmp	r0, r8
 800154e:	d9f7      	bls.n	8001540 <HAL_RCC_OscConfig+0x2d0>
 8001550:	e741      	b.n	80013d6 <HAL_RCC_OscConfig+0x166>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001552:	2b05      	cmp	r3, #5
 8001554:	6a2b      	ldr	r3, [r5, #32]
 8001556:	d103      	bne.n	8001560 <HAL_RCC_OscConfig+0x2f0>
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	622b      	str	r3, [r5, #32]
 800155e:	e7ba      	b.n	80014d6 <HAL_RCC_OscConfig+0x266>
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	622b      	str	r3, [r5, #32]
 8001566:	6a2b      	ldr	r3, [r5, #32]
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	e7b6      	b.n	80014dc <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff fc8f 	bl	8000e90 <HAL_GetTick>
 8001572:	1b80      	subs	r0, r0, r6
 8001574:	4540      	cmp	r0, r8
 8001576:	d9b7      	bls.n	80014e8 <HAL_RCC_OscConfig+0x278>
 8001578:	e72d      	b.n	80013d6 <HAL_RCC_OscConfig+0x166>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157a:	4d3a      	ldr	r5, [pc, #232]	; (8001664 <HAL_RCC_OscConfig+0x3f4>)
 800157c:	686b      	ldr	r3, [r5, #4]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	f43f aebe 	beq.w	8001304 <HAL_RCC_OscConfig+0x94>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001588:	2a02      	cmp	r2, #2
 800158a:	d159      	bne.n	8001640 <HAL_RCC_OscConfig+0x3d0>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800158c:	6a23      	ldr	r3, [r4, #32]
 800158e:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8001592:	d004      	beq.n	800159e <HAL_RCC_OscConfig+0x32e>
 8001594:	f240 21c2 	movw	r1, #706	; 0x2c2
 8001598:	4831      	ldr	r0, [pc, #196]	; (8001660 <HAL_RCC_OscConfig+0x3f0>)
 800159a:	f001 fb7f 	bl	8002c9c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800159e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015a0:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 80015a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80015a8:	d010      	beq.n	80015cc <HAL_RCC_OscConfig+0x35c>
 80015aa:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80015ae:	d00d      	beq.n	80015cc <HAL_RCC_OscConfig+0x35c>
 80015b0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80015b4:	d00a      	beq.n	80015cc <HAL_RCC_OscConfig+0x35c>
 80015b6:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80015ba:	d007      	beq.n	80015cc <HAL_RCC_OscConfig+0x35c>
 80015bc:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80015c0:	d004      	beq.n	80015cc <HAL_RCC_OscConfig+0x35c>
 80015c2:	f240 21c3 	movw	r1, #707	; 0x2c3
 80015c6:	4826      	ldr	r0, [pc, #152]	; (8001660 <HAL_RCC_OscConfig+0x3f0>)
 80015c8:	f001 fb68 	bl	8002c9c <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 80015cc:	2200      	movs	r2, #0
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_RCC_OscConfig+0x3fc>)
 80015d0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80015d2:	f7ff fc5d 	bl	8000e90 <HAL_GetTick>
 80015d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d8:	682b      	ldr	r3, [r5, #0]
 80015da:	0199      	lsls	r1, r3, #6
 80015dc:	d42a      	bmi.n	8001634 <HAL_RCC_OscConfig+0x3c4>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015de:	6a23      	ldr	r3, [r4, #32]
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d10e      	bne.n	8001604 <HAL_RCC_OscConfig+0x394>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80015e6:	68a3      	ldr	r3, [r4, #8]
 80015e8:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 80015ec:	d004      	beq.n	80015f8 <HAL_RCC_OscConfig+0x388>
 80015ee:	f240 21d9 	movw	r1, #729	; 0x2d9
 80015f2:	481b      	ldr	r0, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x3f0>)
 80015f4:	f001 fb52 	bl	8002c9c <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015f8:	686b      	ldr	r3, [r5, #4]
 80015fa:	68a2      	ldr	r2, [r4, #8]
 80015fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001600:	4313      	orrs	r3, r2
 8001602:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001604:	686a      	ldr	r2, [r5, #4]
 8001606:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 800160a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800160e:	430b      	orrs	r3, r1
 8001610:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001612:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001614:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_RCC_OscConfig+0x3fc>)
 8001618:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800161a:	f7ff fc39 	bl	8000e90 <HAL_GetTick>
 800161e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	019a      	lsls	r2, r3, #6
 8001624:	f53f ae43 	bmi.w	80012ae <HAL_RCC_OscConfig+0x3e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff fc32 	bl	8000e90 <HAL_GetTick>
 800162c:	1b00      	subs	r0, r0, r4
 800162e:	2802      	cmp	r0, #2
 8001630:	d9f6      	bls.n	8001620 <HAL_RCC_OscConfig+0x3b0>
 8001632:	e6d0      	b.n	80013d6 <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fc2c 	bl	8000e90 <HAL_GetTick>
 8001638:	1b80      	subs	r0, r0, r6
 800163a:	2802      	cmp	r0, #2
 800163c:	d9cc      	bls.n	80015d8 <HAL_RCC_OscConfig+0x368>
 800163e:	e6ca      	b.n	80013d6 <HAL_RCC_OscConfig+0x166>
        __HAL_RCC_PLL_DISABLE();
 8001640:	2200      	movs	r2, #0
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_RCC_OscConfig+0x3fc>)
 8001644:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001646:	f7ff fc23 	bl	8000e90 <HAL_GetTick>
 800164a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164c:	682b      	ldr	r3, [r5, #0]
 800164e:	019b      	lsls	r3, r3, #6
 8001650:	f57f ae2d 	bpl.w	80012ae <HAL_RCC_OscConfig+0x3e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff fc1c 	bl	8000e90 <HAL_GetTick>
 8001658:	1b00      	subs	r0, r0, r4
 800165a:	2802      	cmp	r0, #2
 800165c:	d9f6      	bls.n	800164c <HAL_RCC_OscConfig+0x3dc>
 800165e:	e6ba      	b.n	80013d6 <HAL_RCC_OscConfig+0x166>
 8001660:	08005e44 	.word	0x08005e44
 8001664:	40021000 	.word	0x40021000
 8001668:	40007000 	.word	0x40007000
 800166c:	42420000 	.word	0x42420000

08001670 <HAL_RCC_MCOConfig>:
{
 8001670:	b570      	push	{r4, r5, r6, lr}
 8001672:	4606      	mov	r6, r0
 8001674:	b086      	sub	sp, #24
 8001676:	460c      	mov	r4, r1
 8001678:	4615      	mov	r5, r2
  GPIO_InitTypeDef gpio = {0U};
 800167a:	2100      	movs	r1, #0
 800167c:	2210      	movs	r2, #16
 800167e:	a802      	add	r0, sp, #8
 8001680:	f001 fca4 	bl	8002fcc <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
 8001684:	b126      	cbz	r6, 8001690 <HAL_RCC_MCOConfig+0x20>
 8001686:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 800168a:	481b      	ldr	r0, [pc, #108]	; (80016f8 <HAL_RCC_MCOConfig+0x88>)
 800168c:	f001 fb06 	bl	8002c9c <assert_failed>
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 8001690:	b125      	cbz	r5, 800169c <HAL_RCC_MCOConfig+0x2c>
 8001692:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8001696:	4818      	ldr	r0, [pc, #96]	; (80016f8 <HAL_RCC_MCOConfig+0x88>)
 8001698:	f001 fb00 	bl	8002c9c <assert_failed>
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 800169c:	f024 7300 	bic.w	r3, r4, #33554432	; 0x2000000
 80016a0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80016a4:	d00a      	beq.n	80016bc <HAL_RCC_MCOConfig+0x4c>
 80016a6:	f1b4 6fc0 	cmp.w	r4, #100663296	; 0x6000000
 80016aa:	d007      	beq.n	80016bc <HAL_RCC_MCOConfig+0x4c>
 80016ac:	f034 6380 	bics.w	r3, r4, #67108864	; 0x4000000
 80016b0:	d004      	beq.n	80016bc <HAL_RCC_MCOConfig+0x4c>
 80016b2:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <HAL_RCC_MCOConfig+0x88>)
 80016b8:	f001 faf0 	bl	8002c9c <assert_failed>
  gpio.Mode      = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
  gpio.Pull      = GPIO_NOPULL;
 80016be:	2103      	movs	r1, #3
  gpio.Mode      = GPIO_MODE_AF_PP;
 80016c0:	9303      	str	r3, [sp, #12]
  gpio.Pull      = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e9cd 3104 	strd	r3, r1, [sp, #16]
  gpio.Pin       = MCO1_PIN;
 80016c8:	f44f 7380 	mov.w	r3, #256	; 0x100
  MCO1_CLK_ENABLE();
 80016cc:	4d0b      	ldr	r5, [pc, #44]	; (80016fc <HAL_RCC_MCOConfig+0x8c>)
  gpio.Pin       = MCO1_PIN;
 80016ce:	9302      	str	r3, [sp, #8]
  MCO1_CLK_ENABLE();
 80016d0:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80016d2:	a902      	add	r1, sp, #8
  MCO1_CLK_ENABLE();
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	61ab      	str	r3, [r5, #24]
 80016da:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80016dc:	4808      	ldr	r0, [pc, #32]	; (8001700 <HAL_RCC_MCOConfig+0x90>)
  MCO1_CLK_ENABLE();
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80016e6:	f7ff fc63 	bl	8000fb0 <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80016ea:	6869      	ldr	r1, [r5, #4]
 80016ec:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80016f0:	430c      	orrs	r4, r1
 80016f2:	606c      	str	r4, [r5, #4]
}
 80016f4:	b006      	add	sp, #24
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
 80016f8:	08005e44 	.word	0x08005e44
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010800 	.word	0x40010800

08001704 <HAL_RCC_GetSysClockFreq>:
{
 8001704:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001708:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800170a:	ac02      	add	r4, sp, #8
 800170c:	f103 0510 	add.w	r5, r3, #16
 8001710:	4622      	mov	r2, r4
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	6859      	ldr	r1, [r3, #4]
 8001716:	3308      	adds	r3, #8
 8001718:	c203      	stmia	r2!, {r0, r1}
 800171a:	42ab      	cmp	r3, r5
 800171c:	4614      	mov	r4, r2
 800171e:	d1f7      	bne.n	8001710 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001720:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001724:	4911      	ldr	r1, [pc, #68]	; (800176c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001726:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800172a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800172c:	f003 020c 	and.w	r2, r3, #12
 8001730:	2a08      	cmp	r2, #8
 8001732:	d117      	bne.n	8001764 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001734:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001738:	3218      	adds	r2, #24
 800173a:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800173c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800173e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001742:	d50c      	bpl.n	800175e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001744:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001748:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800174c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800174e:	3318      	adds	r3, #24
 8001750:	446b      	add	r3, sp
 8001752:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001756:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800175a:	b007      	add	sp, #28
 800175c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_RCC_GetSysClockFreq+0x70>)
 8001760:	4358      	muls	r0, r3
 8001762:	e7fa      	b.n	800175a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001766:	e7f8      	b.n	800175a <HAL_RCC_GetSysClockFreq+0x56>
 8001768:	08005e7c 	.word	0x08005e7c
 800176c:	40021000 	.word	0x40021000
 8001770:	007a1200 	.word	0x007a1200
 8001774:	003d0900 	.word	0x003d0900

08001778 <HAL_RCC_ClockConfig>:
{
 8001778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800177c:	460d      	mov	r5, r1
  assert_param(RCC_ClkInitStruct != NULL);
 800177e:	4604      	mov	r4, r0
 8001780:	b920      	cbnz	r0, 800178c <HAL_RCC_ClockConfig+0x14>
 8001782:	f240 312e 	movw	r1, #814	; 0x32e
 8001786:	487e      	ldr	r0, [pc, #504]	; (8001980 <HAL_RCC_ClockConfig+0x208>)
 8001788:	f001 fa88 	bl	8002c9c <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	071e      	lsls	r6, r3, #28
 8001790:	d104      	bne.n	800179c <HAL_RCC_ClockConfig+0x24>
 8001792:	f240 312f 	movw	r1, #815	; 0x32f
 8001796:	487a      	ldr	r0, [pc, #488]	; (8001980 <HAL_RCC_ClockConfig+0x208>)
 8001798:	f001 fa80 	bl	8002c9c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800179c:	2d02      	cmp	r5, #2
 800179e:	d904      	bls.n	80017aa <HAL_RCC_ClockConfig+0x32>
 80017a0:	f44f 714c 	mov.w	r1, #816	; 0x330
 80017a4:	4876      	ldr	r0, [pc, #472]	; (8001980 <HAL_RCC_ClockConfig+0x208>)
 80017a6:	f001 fa79 	bl	8002c9c <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017aa:	4a76      	ldr	r2, [pc, #472]	; (8001984 <HAL_RCC_ClockConfig+0x20c>)
 80017ac:	6813      	ldr	r3, [r2, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	42ab      	cmp	r3, r5
 80017b4:	d33c      	bcc.n	8001830 <HAL_RCC_ClockConfig+0xb8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	0798      	lsls	r0, r3, #30
 80017ba:	d446      	bmi.n	800184a <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	07da      	lsls	r2, r3, #31
 80017c0:	d46f      	bmi.n	80018a2 <HAL_RCC_ClockConfig+0x12a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80017c2:	4a70      	ldr	r2, [pc, #448]	; (8001984 <HAL_RCC_ClockConfig+0x20c>)
 80017c4:	6813      	ldr	r3, [r2, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	42ab      	cmp	r3, r5
 80017cc:	f200 80b3 	bhi.w	8001936 <HAL_RCC_ClockConfig+0x1be>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	4d6d      	ldr	r5, [pc, #436]	; (8001988 <HAL_RCC_ClockConfig+0x210>)
 80017d4:	f013 0f04 	tst.w	r3, #4
 80017d8:	f040 80b9 	bne.w	800194e <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	071b      	lsls	r3, r3, #28
 80017e0:	d517      	bpl.n	8001812 <HAL_RCC_ClockConfig+0x9a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80017e2:	6923      	ldr	r3, [r4, #16]
 80017e4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80017e8:	d00c      	beq.n	8001804 <HAL_RCC_ClockConfig+0x8c>
 80017ea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80017ee:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80017f2:	d007      	beq.n	8001804 <HAL_RCC_ClockConfig+0x8c>
 80017f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80017f8:	d004      	beq.n	8001804 <HAL_RCC_ClockConfig+0x8c>
 80017fa:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 80017fe:	4860      	ldr	r0, [pc, #384]	; (8001980 <HAL_RCC_ClockConfig+0x208>)
 8001800:	f001 fa4c 	bl	8002c9c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001804:	686b      	ldr	r3, [r5, #4]
 8001806:	6922      	ldr	r2, [r4, #16]
 8001808:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800180c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001810:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001812:	f7ff ff77 	bl	8001704 <HAL_RCC_GetSysClockFreq>
 8001816:	686b      	ldr	r3, [r5, #4]
 8001818:	4a5c      	ldr	r2, [pc, #368]	; (800198c <HAL_RCC_ClockConfig+0x214>)
 800181a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800181e:	5cd3      	ldrb	r3, [r2, r3]
 8001820:	40d8      	lsrs	r0, r3
 8001822:	4b5b      	ldr	r3, [pc, #364]	; (8001990 <HAL_RCC_ClockConfig+0x218>)
 8001824:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff faf0 	bl	8000e0c <HAL_InitTick>
  return HAL_OK;
 800182c:	2000      	movs	r0, #0
 800182e:	e00a      	b.n	8001846 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001830:	6813      	ldr	r3, [r2, #0]
 8001832:	f023 0307 	bic.w	r3, r3, #7
 8001836:	432b      	orrs	r3, r5
 8001838:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800183a:	6813      	ldr	r3, [r2, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	42ab      	cmp	r3, r5
 8001842:	d0b8      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
 8001844:	2001      	movs	r0, #1
}
 8001846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184a:	4e4f      	ldr	r6, [pc, #316]	; (8001988 <HAL_RCC_ClockConfig+0x210>)
 800184c:	f013 0f04 	tst.w	r3, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001850:	bf1e      	ittt	ne
 8001852:	6872      	ldrne	r2, [r6, #4]
 8001854:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001858:	6072      	strne	r2, [r6, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	0719      	lsls	r1, r3, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800185c:	bf42      	ittt	mi
 800185e:	6873      	ldrmi	r3, [r6, #4]
 8001860:	f443 5360 	orrmi.w	r3, r3, #14336	; 0x3800
 8001864:	6073      	strmi	r3, [r6, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001866:	68a3      	ldr	r3, [r4, #8]
 8001868:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 800186c:	d012      	beq.n	8001894 <HAL_RCC_ClockConfig+0x11c>
 800186e:	f023 0220 	bic.w	r2, r3, #32
 8001872:	2a90      	cmp	r2, #144	; 0x90
 8001874:	d00e      	beq.n	8001894 <HAL_RCC_ClockConfig+0x11c>
 8001876:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800187a:	2aa0      	cmp	r2, #160	; 0xa0
 800187c:	d00a      	beq.n	8001894 <HAL_RCC_ClockConfig+0x11c>
 800187e:	f023 0210 	bic.w	r2, r3, #16
 8001882:	2ac0      	cmp	r2, #192	; 0xc0
 8001884:	d006      	beq.n	8001894 <HAL_RCC_ClockConfig+0x11c>
 8001886:	2bf0      	cmp	r3, #240	; 0xf0
 8001888:	d004      	beq.n	8001894 <HAL_RCC_ClockConfig+0x11c>
 800188a:	f240 3156 	movw	r1, #854	; 0x356
 800188e:	483c      	ldr	r0, [pc, #240]	; (8001980 <HAL_RCC_ClockConfig+0x208>)
 8001890:	f001 fa04 	bl	8002c9c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001894:	6873      	ldr	r3, [r6, #4]
 8001896:	68a2      	ldr	r2, [r4, #8]
 8001898:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800189c:	4313      	orrs	r3, r2
 800189e:	6073      	str	r3, [r6, #4]
 80018a0:	e78c      	b.n	80017bc <HAL_RCC_ClockConfig+0x44>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80018a2:	6863      	ldr	r3, [r4, #4]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d904      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x13a>
 80018a8:	f240 315d 	movw	r1, #861	; 0x35d
 80018ac:	4834      	ldr	r0, [pc, #208]	; (8001980 <HAL_RCC_ClockConfig+0x208>)
 80018ae:	f001 f9f5 	bl	8002c9c <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	6862      	ldr	r2, [r4, #4]
 80018b4:	4e34      	ldr	r6, [pc, #208]	; (8001988 <HAL_RCC_ClockConfig+0x210>)
 80018b6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b8:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ba:	d11c      	bne.n	80018f6 <HAL_RCC_ClockConfig+0x17e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	d0c0      	beq.n	8001844 <HAL_RCC_ClockConfig+0xcc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	6873      	ldr	r3, [r6, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c8:	f023 0303 	bic.w	r3, r3, #3
 80018cc:	4313      	orrs	r3, r2
 80018ce:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80018d0:	f7ff fade 	bl	8000e90 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80018d6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d114      	bne.n	8001906 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018dc:	6873      	ldr	r3, [r6, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	f43f af6d 	beq.w	80017c2 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7ff fad2 	bl	8000e90 <HAL_GetTick>
 80018ec:	1bc0      	subs	r0, r0, r7
 80018ee:	4540      	cmp	r0, r8
 80018f0:	d9f4      	bls.n	80018dc <HAL_RCC_ClockConfig+0x164>
          return HAL_TIMEOUT;
 80018f2:	2003      	movs	r0, #3
 80018f4:	e7a7      	b.n	8001846 <HAL_RCC_ClockConfig+0xce>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f6:	2a02      	cmp	r2, #2
 80018f8:	d102      	bne.n	8001900 <HAL_RCC_ClockConfig+0x188>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018fe:	e7df      	b.n	80018c0 <HAL_RCC_ClockConfig+0x148>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	f013 0f02 	tst.w	r3, #2
 8001904:	e7dc      	b.n	80018c0 <HAL_RCC_ClockConfig+0x148>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001906:	2b02      	cmp	r3, #2
 8001908:	d110      	bne.n	800192c <HAL_RCC_ClockConfig+0x1b4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800190a:	6873      	ldr	r3, [r6, #4]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	f43f af56 	beq.w	80017c2 <HAL_RCC_ClockConfig+0x4a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001916:	f7ff fabb 	bl	8000e90 <HAL_GetTick>
 800191a:	1bc0      	subs	r0, r0, r7
 800191c:	4540      	cmp	r0, r8
 800191e:	d9f4      	bls.n	800190a <HAL_RCC_ClockConfig+0x192>
 8001920:	e7e7      	b.n	80018f2 <HAL_RCC_ClockConfig+0x17a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001922:	f7ff fab5 	bl	8000e90 <HAL_GetTick>
 8001926:	1bc0      	subs	r0, r0, r7
 8001928:	4540      	cmp	r0, r8
 800192a:	d8e2      	bhi.n	80018f2 <HAL_RCC_ClockConfig+0x17a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800192c:	6873      	ldr	r3, [r6, #4]
 800192e:	f013 0f0c 	tst.w	r3, #12
 8001932:	d1f6      	bne.n	8001922 <HAL_RCC_ClockConfig+0x1aa>
 8001934:	e745      	b.n	80017c2 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	6813      	ldr	r3, [r2, #0]
 8001938:	f023 0307 	bic.w	r3, r3, #7
 800193c:	432b      	orrs	r3, r5
 800193e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001940:	6813      	ldr	r3, [r2, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	42ab      	cmp	r3, r5
 8001948:	f47f af7c 	bne.w	8001844 <HAL_RCC_ClockConfig+0xcc>
 800194c:	e740      	b.n	80017d0 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800194e:	68e3      	ldr	r3, [r4, #12]
 8001950:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001954:	d00c      	beq.n	8001970 <HAL_RCC_ClockConfig+0x1f8>
 8001956:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800195a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800195e:	d007      	beq.n	8001970 <HAL_RCC_ClockConfig+0x1f8>
 8001960:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001964:	d004      	beq.n	8001970 <HAL_RCC_ClockConfig+0x1f8>
 8001966:	f240 31b1 	movw	r1, #945	; 0x3b1
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <HAL_RCC_ClockConfig+0x208>)
 800196c:	f001 f996 	bl	8002c9c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	686b      	ldr	r3, [r5, #4]
 8001972:	68e2      	ldr	r2, [r4, #12]
 8001974:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001978:	4313      	orrs	r3, r2
 800197a:	606b      	str	r3, [r5, #4]
 800197c:	e72e      	b.n	80017dc <HAL_RCC_ClockConfig+0x64>
 800197e:	bf00      	nop
 8001980:	08005e44 	.word	0x08005e44
 8001984:	40022000 	.word	0x40022000
 8001988:	40021000 	.word	0x40021000
 800198c:	08005f6c 	.word	0x08005f6c
 8001990:	20000008 	.word	0x20000008

08001994 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800199e:	5cd3      	ldrb	r3, [r2, r3]
 80019a0:	4a03      	ldr	r2, [pc, #12]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019a2:	6810      	ldr	r0, [r2, #0]
}    
 80019a4:	40d8      	lsrs	r0, r3
 80019a6:	4770      	bx	lr
 80019a8:	40021000 	.word	0x40021000
 80019ac:	08005f7c 	.word	0x08005f7c
 80019b0:	20000008 	.word	0x20000008

080019b4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80019be:	5cd3      	ldrb	r3, [r2, r3]
 80019c0:	4a03      	ldr	r2, [pc, #12]	; (80019d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80019c2:	6810      	ldr	r0, [r2, #0]
} 
 80019c4:	40d8      	lsrs	r0, r3
 80019c6:	4770      	bx	lr
 80019c8:	40021000 	.word	0x40021000
 80019cc:	08005f7c 	.word	0x08005f7c
 80019d0:	20000008 	.word	0x20000008

080019d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig: The slave configuration structure
  * @retval None
  */
static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 80019d4:	b538      	push	{r3, r4, r5, lr}
 80019d6:	460c      	mov	r4, r1
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019d8:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80019da:	6862      	ldr	r2, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 80019dc:	6899      	ldr	r1, [r3, #8]
{
 80019de:	4605      	mov	r5, r0
  tmpsmcr &= ~TIM_SMCR_TS;
 80019e0:	f021 0170 	bic.w	r1, r1, #112	; 0x70

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80019e4:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80019e6:	4311      	orrs	r1, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80019e8:	f021 0107 	bic.w	r1, r1, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80019ec:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80019ee:	2a40      	cmp	r2, #64	; 0x40
  htim->Instance->SMCR = tmpsmcr;
 80019f0:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 80019f2:	f000 809f 	beq.w	8001b34 <TIM_SlaveTimer_SetConfig+0x160>
 80019f6:	d81d      	bhi.n	8001a34 <TIM_SlaveTimer_SetConfig+0x60>
 80019f8:	2a20      	cmp	r2, #32
 80019fa:	f000 8130 	beq.w	8001c5e <TIM_SlaveTimer_SetConfig+0x28a>
 80019fe:	d806      	bhi.n	8001a0e <TIM_SlaveTimer_SetConfig+0x3a>
 8001a00:	2a00      	cmp	r2, #0
 8001a02:	f000 80fe 	beq.w	8001c02 <TIM_SlaveTimer_SetConfig+0x22e>
 8001a06:	2a10      	cmp	r2, #16
 8001a08:	f000 8114 	beq.w	8001c34 <TIM_SlaveTimer_SetConfig+0x260>
    break;

  default:
    break;
  }
}
 8001a0c:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 8001a0e:	2a30      	cmp	r2, #48	; 0x30
 8001a10:	d1fc      	bne.n	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001a12:	4a9d      	ldr	r2, [pc, #628]	; (8001c88 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d0f9      	beq.n	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d0f6      	beq.n	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001a1e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d0f2      	beq.n	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001a26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d0ee      	beq.n	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001a2e:	f241 31af 	movw	r1, #5039	; 0x13af
 8001a32:	e0fa      	b.n	8001c2a <TIM_SlaveTimer_SetConfig+0x256>
  switch (sSlaveConfig->InputTrigger)
 8001a34:	2a60      	cmp	r2, #96	; 0x60
 8001a36:	f000 80a7 	beq.w	8001b88 <TIM_SlaveTimer_SetConfig+0x1b4>
 8001a3a:	2a70      	cmp	r2, #112	; 0x70
 8001a3c:	d03b      	beq.n	8001ab6 <TIM_SlaveTimer_SetConfig+0xe2>
 8001a3e:	2a50      	cmp	r2, #80	; 0x50
 8001a40:	d1e4      	bne.n	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8001a42:	4a91      	ldr	r2, [pc, #580]	; (8001c88 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d00f      	beq.n	8001a68 <TIM_SlaveTimer_SetConfig+0x94>
 8001a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4c:	d00c      	beq.n	8001a68 <TIM_SlaveTimer_SetConfig+0x94>
 8001a4e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d008      	beq.n	8001a68 <TIM_SlaveTimer_SetConfig+0x94>
 8001a56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d004      	beq.n	8001a68 <TIM_SlaveTimer_SetConfig+0x94>
 8001a5e:	f241 317e 	movw	r1, #4990	; 0x137e
 8001a62:	488a      	ldr	r0, [pc, #552]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001a64:	f001 f91a 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8001a68:	68a3      	ldr	r3, [r4, #8]
 8001a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a6e:	d009      	beq.n	8001a84 <TIM_SlaveTimer_SetConfig+0xb0>
 8001a70:	f033 0202 	bics.w	r2, r3, #2
 8001a74:	d006      	beq.n	8001a84 <TIM_SlaveTimer_SetConfig+0xb0>
 8001a76:	2b0a      	cmp	r3, #10
 8001a78:	d004      	beq.n	8001a84 <TIM_SlaveTimer_SetConfig+0xb0>
 8001a7a:	f241 317f 	movw	r1, #4991	; 0x137f
 8001a7e:	4883      	ldr	r0, [pc, #524]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001a80:	f001 f90c 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8001a84:	6923      	ldr	r3, [r4, #16]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	d904      	bls.n	8001a94 <TIM_SlaveTimer_SetConfig+0xc0>
 8001a8a:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 8001a8e:	487f      	ldr	r0, [pc, #508]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001a90:	f001 f904 	bl	8002c9c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a94:	682b      	ldr	r3, [r5, #0]
 8001a96:	68a1      	ldr	r1, [r4, #8]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a98:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a9a:	6925      	ldr	r5, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a9c:	6a1c      	ldr	r4, [r3, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a9e:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001aa2:	f024 0401 	bic.w	r4, r4, #1
 8001aa6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001aa8:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001aaa:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001aac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ab0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001ab4:	e065      	b.n	8001b82 <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8001ab6:	4a74      	ldr	r2, [pc, #464]	; (8001c88 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00f      	beq.n	8001adc <TIM_SlaveTimer_SetConfig+0x108>
 8001abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac0:	d00c      	beq.n	8001adc <TIM_SlaveTimer_SetConfig+0x108>
 8001ac2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d008      	beq.n	8001adc <TIM_SlaveTimer_SetConfig+0x108>
 8001aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d004      	beq.n	8001adc <TIM_SlaveTimer_SetConfig+0x108>
 8001ad2:	f241 3159 	movw	r1, #4953	; 0x1359
 8001ad6:	486d      	ldr	r0, [pc, #436]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001ad8:	f001 f8e0 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 8001adc:	68e3      	ldr	r3, [r4, #12]
 8001ade:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8001ae2:	d004      	beq.n	8001aee <TIM_SlaveTimer_SetConfig+0x11a>
 8001ae4:	f241 315a 	movw	r1, #4954	; 0x135a
 8001ae8:	4868      	ldr	r0, [pc, #416]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001aea:	f001 f8d7 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8001aee:	68a3      	ldr	r3, [r4, #8]
 8001af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001af4:	d009      	beq.n	8001b0a <TIM_SlaveTimer_SetConfig+0x136>
 8001af6:	f033 0202 	bics.w	r2, r3, #2
 8001afa:	d006      	beq.n	8001b0a <TIM_SlaveTimer_SetConfig+0x136>
 8001afc:	2b0a      	cmp	r3, #10
 8001afe:	d004      	beq.n	8001b0a <TIM_SlaveTimer_SetConfig+0x136>
 8001b00:	f241 315b 	movw	r1, #4955	; 0x135b
 8001b04:	4861      	ldr	r0, [pc, #388]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001b06:	f001 f8c9 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8001b0a:	6923      	ldr	r3, [r4, #16]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d904      	bls.n	8001b1a <TIM_SlaveTimer_SetConfig+0x146>
 8001b10:	f241 315c 	movw	r1, #4956	; 0x135c
 8001b14:	485d      	ldr	r0, [pc, #372]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001b16:	f001 f8c1 	bl	8002c9c <assert_failed>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b1a:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
      TIM_ETR_SetConfig(htim->Instance,
 8001b1e:	6829      	ldr	r1, [r5, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b20:	4303      	orrs	r3, r0
  tmpsmcr = TIMx->SMCR;
 8001b22:	688a      	ldr	r2, [r1, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b24:	6920      	ldr	r0, [r4, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b26:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b2a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001b2e:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b30:	608b      	str	r3, [r1, #8]
}
 8001b32:	e76b      	b.n	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8001b34:	4a54      	ldr	r2, [pc, #336]	; (8001c88 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00f      	beq.n	8001b5a <TIM_SlaveTimer_SetConfig+0x186>
 8001b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3e:	d00c      	beq.n	8001b5a <TIM_SlaveTimer_SetConfig+0x186>
 8001b40:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d008      	beq.n	8001b5a <TIM_SlaveTimer_SetConfig+0x186>
 8001b48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d004      	beq.n	8001b5a <TIM_SlaveTimer_SetConfig+0x186>
 8001b50:	f241 3168 	movw	r1, #4968	; 0x1368
 8001b54:	484d      	ldr	r0, [pc, #308]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001b56:	f001 f8a1 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8001b5a:	6923      	ldr	r3, [r4, #16]
 8001b5c:	2b0f      	cmp	r3, #15
 8001b5e:	d904      	bls.n	8001b6a <TIM_SlaveTimer_SetConfig+0x196>
 8001b60:	f241 3169 	movw	r1, #4969	; 0x1369
 8001b64:	4849      	ldr	r0, [pc, #292]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001b66:	f001 f899 	bl	8002c9c <assert_failed>
      tmpccer = htim->Instance->CCER;
 8001b6a:	682b      	ldr	r3, [r5, #0]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001b6c:	6920      	ldr	r0, [r4, #16]
      tmpccer = htim->Instance->CCER;
 8001b6e:	6a19      	ldr	r1, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001b70:	6a1a      	ldr	r2, [r3, #32]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001b78:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001b7e:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b84:	6219      	str	r1, [r3, #32]
}
 8001b86:	e741      	b.n	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001b88:	4a3f      	ldr	r2, [pc, #252]	; (8001c88 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00f      	beq.n	8001bae <TIM_SlaveTimer_SetConfig+0x1da>
 8001b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b92:	d00c      	beq.n	8001bae <TIM_SlaveTimer_SetConfig+0x1da>
 8001b94:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d008      	beq.n	8001bae <TIM_SlaveTimer_SetConfig+0x1da>
 8001b9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d004      	beq.n	8001bae <TIM_SlaveTimer_SetConfig+0x1da>
 8001ba4:	f241 318c 	movw	r1, #5004	; 0x138c
 8001ba8:	4838      	ldr	r0, [pc, #224]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001baa:	f001 f877 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8001bae:	68a3      	ldr	r3, [r4, #8]
 8001bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bb4:	d009      	beq.n	8001bca <TIM_SlaveTimer_SetConfig+0x1f6>
 8001bb6:	f033 0202 	bics.w	r2, r3, #2
 8001bba:	d006      	beq.n	8001bca <TIM_SlaveTimer_SetConfig+0x1f6>
 8001bbc:	2b0a      	cmp	r3, #10
 8001bbe:	d004      	beq.n	8001bca <TIM_SlaveTimer_SetConfig+0x1f6>
 8001bc0:	f241 318d 	movw	r1, #5005	; 0x138d
 8001bc4:	4831      	ldr	r0, [pc, #196]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001bc6:	f001 f869 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8001bca:	6923      	ldr	r3, [r4, #16]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d904      	bls.n	8001bda <TIM_SlaveTimer_SetConfig+0x206>
 8001bd0:	f241 318e 	movw	r1, #5006	; 0x138e
 8001bd4:	482d      	ldr	r0, [pc, #180]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001bd6:	f001 f861 	bl	8002c9c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bda:	682b      	ldr	r3, [r5, #0]
 8001bdc:	68a5      	ldr	r5, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bde:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001be0:	6924      	ldr	r4, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001be2:	f020 0010 	bic.w	r0, r0, #16
 8001be6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001be8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001bea:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bec:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001bf4:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001bf8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001bfc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bfe:	621a      	str	r2, [r3, #32]
}
 8001c00:	e704      	b.n	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001c02:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	f43f af01 	beq.w	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0e:	f43f aefd 	beq.w	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001c12:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c16:	4293      	cmp	r3, r2
 8001c18:	f43f aef8 	beq.w	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001c1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c20:	4293      	cmp	r3, r2
 8001c22:	f43f aef3 	beq.w	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001c26:	f241 319a 	movw	r1, #5018	; 0x139a
}
 8001c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001c2e:	4817      	ldr	r0, [pc, #92]	; (8001c8c <TIM_SlaveTimer_SetConfig+0x2b8>)
 8001c30:	f001 b834 	b.w	8002c9c <assert_failed>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	f43f aee8 	beq.w	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c40:	f43f aee4 	beq.w	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001c44:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	f43f aedf 	beq.w	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001c4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c52:	4293      	cmp	r3, r2
 8001c54:	f43f aeda 	beq.w	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001c58:	f241 31a1 	movw	r1, #5025	; 0x13a1
 8001c5c:	e7e5      	b.n	8001c2a <TIM_SlaveTimer_SetConfig+0x256>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <TIM_SlaveTimer_SetConfig+0x2b4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	f43f aed3 	beq.w	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6a:	f43f aecf 	beq.w	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001c6e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c72:	4293      	cmp	r3, r2
 8001c74:	f43f aeca 	beq.w	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001c78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	f43f aec5 	beq.w	8001a0c <TIM_SlaveTimer_SetConfig+0x38>
 8001c82:	f241 31a8 	movw	r1, #5032	; 0x13a8
 8001c86:	e7d0      	b.n	8001c2a <TIM_SlaveTimer_SetConfig+0x256>
 8001c88:	40012c00 	.word	0x40012c00
 8001c8c:	08005e8d 	.word	0x08005e8d

08001c90 <HAL_TIM_Base_Start>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001c90:	6803      	ldr	r3, [r0, #0]
 8001c92:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_TIM_Base_Start+0x48>)
{
 8001c94:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001c96:	4293      	cmp	r3, r2
{
 8001c98:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001c9a:	d00f      	beq.n	8001cbc <HAL_TIM_Base_Start+0x2c>
 8001c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca0:	d00c      	beq.n	8001cbc <HAL_TIM_Base_Start+0x2c>
 8001ca2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d008      	beq.n	8001cbc <HAL_TIM_Base_Start+0x2c>
 8001caa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_TIM_Base_Start+0x2c>
 8001cb2:	f240 1133 	movw	r1, #307	; 0x133
 8001cb6:	4809      	ldr	r0, [pc, #36]	; (8001cdc <HAL_TIM_Base_Start+0x4c>)
 8001cb8:	f000 fff0 	bl	8002c9c <assert_failed>
  htim->State= HAL_TIM_STATE_BUSY;
 8001cbc:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8001cbe:	6822      	ldr	r2, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001cc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8001cc4:	6813      	ldr	r3, [r2, #0]
}
 8001cc6:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001cd4:	bd10      	pop	{r4, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40012c00 	.word	0x40012c00
 8001cdc:	08005e8d 	.word	0x08005e8d

08001ce0 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001ce0:	6803      	ldr	r3, [r0, #0]
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <HAL_TIM_Base_Start_IT+0x44>)
{
 8001ce4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001ce6:	4293      	cmp	r3, r2
{
 8001ce8:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001cea:	d00f      	beq.n	8001d0c <HAL_TIM_Base_Start_IT+0x2c>
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf0:	d00c      	beq.n	8001d0c <HAL_TIM_Base_Start_IT+0x2c>
 8001cf2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d008      	beq.n	8001d0c <HAL_TIM_Base_Start_IT+0x2c>
 8001cfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_TIM_Base_Start_IT+0x2c>
 8001d02:	f240 1161 	movw	r1, #353	; 0x161
 8001d06:	4808      	ldr	r0, [pc, #32]	; (8001d28 <HAL_TIM_Base_Start_IT+0x48>)
 8001d08:	f000 ffc8 	bl	8002c9c <assert_failed>
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d0c:	6823      	ldr	r3, [r4, #0]
}
 8001d0e:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
}
 8001d20:	bd10      	pop	{r4, pc}
 8001d22:	bf00      	nop
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	08005e8d 	.word	0x08005e8d

08001d2c <HAL_TIM_OnePulse_MspInit>:
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_TIM_ConfigClockSource>:
{
 8001d30:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001d32:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001d36:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8001d38:	2b01      	cmp	r3, #1
{
 8001d3a:	460c      	mov	r4, r1
 8001d3c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001d40:	d031      	beq.n	8001da6 <HAL_TIM_ConfigClockSource+0x76>
 8001d42:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001d44:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001d48:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8001d4c:	680b      	ldr	r3, [r1, #0]
 8001d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d52:	d00c      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x3e>
 8001d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d58:	d009      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x3e>
 8001d5a:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8001d5e:	d006      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x3e>
 8001d60:	2b40      	cmp	r3, #64	; 0x40
 8001d62:	d004      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x3e>
 8001d64:	f640 7171 	movw	r1, #3953	; 0xf71
 8001d68:	48a9      	ldr	r0, [pc, #676]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001d6a:	f000 ff97 	bl	8002c9c <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 8001d6e:	682b      	ldr	r3, [r5, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d72:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001d76:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001d7a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d7c:	6822      	ldr	r2, [r4, #0]
 8001d7e:	2a50      	cmp	r2, #80	; 0x50
 8001d80:	f000 8103 	beq.w	8001f8a <HAL_TIM_ConfigClockSource+0x25a>
 8001d84:	d856      	bhi.n	8001e34 <HAL_TIM_ConfigClockSource+0x104>
 8001d86:	2a20      	cmp	r2, #32
 8001d88:	f000 81bc 	beq.w	8002104 <HAL_TIM_ConfigClockSource+0x3d4>
 8001d8c:	d80c      	bhi.n	8001da8 <HAL_TIM_ConfigClockSource+0x78>
 8001d8e:	2a00      	cmp	r2, #0
 8001d90:	f000 8184 	beq.w	800209c <HAL_TIM_ConfigClockSource+0x36c>
 8001d94:	2a10      	cmp	r2, #16
 8001d96:	f000 819b 	beq.w	80020d0 <HAL_TIM_ConfigClockSource+0x3a0>
  htim->State = HAL_TIM_STATE_READY;
 8001d9a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d9c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d9e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001da2:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 8001da6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001da8:	2a30      	cmp	r2, #48	; 0x30
 8001daa:	f000 81c5 	beq.w	8002138 <HAL_TIM_ConfigClockSource+0x408>
 8001dae:	2a40      	cmp	r2, #64	; 0x40
 8001db0:	d1f3      	bne.n	8001d9a <HAL_TIM_ConfigClockSource+0x6a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8001db2:	4a98      	ldr	r2, [pc, #608]	; (8002014 <HAL_TIM_ConfigClockSource+0x2e4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00f      	beq.n	8001dd8 <HAL_TIM_ConfigClockSource+0xa8>
 8001db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_TIM_ConfigClockSource+0xa8>
 8001dbe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d008      	beq.n	8001dd8 <HAL_TIM_ConfigClockSource+0xa8>
 8001dc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_TIM_ConfigClockSource+0xa8>
 8001dce:	f640 71d2 	movw	r1, #4050	; 0xfd2
 8001dd2:	488f      	ldr	r0, [pc, #572]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001dd4:	f000 ff62 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8001dd8:	6863      	ldr	r3, [r4, #4]
 8001dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dde:	d009      	beq.n	8001df4 <HAL_TIM_ConfigClockSource+0xc4>
 8001de0:	f033 0202 	bics.w	r2, r3, #2
 8001de4:	d006      	beq.n	8001df4 <HAL_TIM_ConfigClockSource+0xc4>
 8001de6:	2b0a      	cmp	r3, #10
 8001de8:	d004      	beq.n	8001df4 <HAL_TIM_ConfigClockSource+0xc4>
 8001dea:	f640 71d5 	movw	r1, #4053	; 0xfd5
 8001dee:	4888      	ldr	r0, [pc, #544]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001df0:	f000 ff54 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8001df4:	68e3      	ldr	r3, [r4, #12]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	d904      	bls.n	8001e04 <HAL_TIM_ConfigClockSource+0xd4>
 8001dfa:	f640 71d6 	movw	r1, #4054	; 0xfd6
 8001dfe:	4884      	ldr	r0, [pc, #528]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001e00:	f000 ff4c 	bl	8002c9c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e04:	682b      	ldr	r3, [r5, #0]
 8001e06:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 8001e08:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e0a:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e0c:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e0e:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e12:	f024 0401 	bic.w	r4, r4, #1
 8001e16:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e18:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001e1a:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e20:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001e24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e26:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001e28:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e2e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 8001e32:	e0ea      	b.n	800200a <HAL_TIM_ConfigClockSource+0x2da>
  switch (sClockSourceConfig->ClockSource)
 8001e34:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001e38:	f000 808e 	beq.w	8001f58 <HAL_TIM_ConfigClockSource+0x228>
 8001e3c:	d846      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x19c>
 8001e3e:	2a60      	cmp	r2, #96	; 0x60
 8001e40:	f000 80ea 	beq.w	8002018 <HAL_TIM_ConfigClockSource+0x2e8>
 8001e44:	2a70      	cmp	r2, #112	; 0x70
 8001e46:	d1a8      	bne.n	8001d9a <HAL_TIM_ConfigClockSource+0x6a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8001e48:	4a72      	ldr	r2, [pc, #456]	; (8002014 <HAL_TIM_ConfigClockSource+0x2e4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00f      	beq.n	8001e6e <HAL_TIM_ConfigClockSource+0x13e>
 8001e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e52:	d00c      	beq.n	8001e6e <HAL_TIM_ConfigClockSource+0x13e>
 8001e54:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d008      	beq.n	8001e6e <HAL_TIM_ConfigClockSource+0x13e>
 8001e5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d004      	beq.n	8001e6e <HAL_TIM_ConfigClockSource+0x13e>
 8001e64:	f640 7186 	movw	r1, #3974	; 0xf86
 8001e68:	4869      	ldr	r0, [pc, #420]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001e6a:	f000 ff17 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8001e6e:	68a3      	ldr	r3, [r4, #8]
 8001e70:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8001e74:	d004      	beq.n	8001e80 <HAL_TIM_ConfigClockSource+0x150>
 8001e76:	f640 7189 	movw	r1, #3977	; 0xf89
 8001e7a:	4865      	ldr	r0, [pc, #404]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001e7c:	f000 ff0e 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8001e80:	6863      	ldr	r3, [r4, #4]
 8001e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e86:	d009      	beq.n	8001e9c <HAL_TIM_ConfigClockSource+0x16c>
 8001e88:	f033 0202 	bics.w	r2, r3, #2
 8001e8c:	d006      	beq.n	8001e9c <HAL_TIM_ConfigClockSource+0x16c>
 8001e8e:	2b0a      	cmp	r3, #10
 8001e90:	d004      	beq.n	8001e9c <HAL_TIM_ConfigClockSource+0x16c>
 8001e92:	f640 718a 	movw	r1, #3978	; 0xf8a
 8001e96:	485e      	ldr	r0, [pc, #376]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001e98:	f000 ff00 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8001e9c:	68e3      	ldr	r3, [r4, #12]
 8001e9e:	2b0f      	cmp	r3, #15
 8001ea0:	d904      	bls.n	8001eac <HAL_TIM_ConfigClockSource+0x17c>
 8001ea2:	f640 718b 	movw	r1, #3979	; 0xf8b
 8001ea6:	485a      	ldr	r0, [pc, #360]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001ea8:	f000 fef8 	bl	8002c9c <assert_failed>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eac:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
      TIM_ETR_SetConfig(htim->Instance,
 8001eb0:	682a      	ldr	r2, [r5, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eb2:	4303      	orrs	r3, r0
  tmpsmcr = TIMx->SMCR;
 8001eb4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eb6:	68e0      	ldr	r0, [r4, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eb8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ebc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001ec0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001ec2:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001ec4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ec6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001eca:	e05c      	b.n	8001f86 <HAL_TIM_ConfigClockSource+0x256>
  switch (sClockSourceConfig->ClockSource)
 8001ecc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001ed0:	f47f af63 	bne.w	8001d9a <HAL_TIM_ConfigClockSource+0x6a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8001ed4:	4a4f      	ldr	r2, [pc, #316]	; (8002014 <HAL_TIM_ConfigClockSource+0x2e4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00f      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x1ca>
 8001eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ede:	d00c      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x1ca>
 8001ee0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d008      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x1ca>
 8001ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d004      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x1ca>
 8001ef0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001ef4:	4846      	ldr	r0, [pc, #280]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001ef6:	f000 fed1 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8001efa:	68a3      	ldr	r3, [r4, #8]
 8001efc:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8001f00:	d004      	beq.n	8001f0c <HAL_TIM_ConfigClockSource+0x1dc>
 8001f02:	f640 71a3 	movw	r1, #4003	; 0xfa3
 8001f06:	4842      	ldr	r0, [pc, #264]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001f08:	f000 fec8 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8001f0c:	6863      	ldr	r3, [r4, #4]
 8001f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f12:	d009      	beq.n	8001f28 <HAL_TIM_ConfigClockSource+0x1f8>
 8001f14:	f033 0202 	bics.w	r2, r3, #2
 8001f18:	d006      	beq.n	8001f28 <HAL_TIM_ConfigClockSource+0x1f8>
 8001f1a:	2b0a      	cmp	r3, #10
 8001f1c:	d004      	beq.n	8001f28 <HAL_TIM_ConfigClockSource+0x1f8>
 8001f1e:	f640 71a4 	movw	r1, #4004	; 0xfa4
 8001f22:	483b      	ldr	r0, [pc, #236]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001f24:	f000 feba 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8001f28:	68e3      	ldr	r3, [r4, #12]
 8001f2a:	2b0f      	cmp	r3, #15
 8001f2c:	d904      	bls.n	8001f38 <HAL_TIM_ConfigClockSource+0x208>
 8001f2e:	f640 71a5 	movw	r1, #4005	; 0xfa5
 8001f32:	4837      	ldr	r0, [pc, #220]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001f34:	f000 feb2 	bl	8002c9c <assert_failed>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f38:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
      TIM_ETR_SetConfig(htim->Instance,
 8001f3c:	682a      	ldr	r2, [r5, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f3e:	4303      	orrs	r3, r0
  tmpsmcr = TIMx->SMCR;
 8001f40:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f42:	68e0      	ldr	r0, [r4, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f44:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f48:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001f4c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001f4e:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f50:	6893      	ldr	r3, [r2, #8]
 8001f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f56:	e016      	b.n	8001f86 <HAL_TIM_ConfigClockSource+0x256>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001f58:	4a2e      	ldr	r2, [pc, #184]	; (8002014 <HAL_TIM_ConfigClockSource+0x2e4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00f      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0x24e>
 8001f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f62:	d00c      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0x24e>
 8001f64:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d008      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0x24e>
 8001f6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d004      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0x24e>
 8001f74:	f640 717d 	movw	r1, #3965	; 0xf7d
 8001f78:	4825      	ldr	r0, [pc, #148]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001f7a:	f000 fe8f 	bl	8002c9c <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001f7e:	682a      	ldr	r2, [r5, #0]
 8001f80:	6893      	ldr	r3, [r2, #8]
 8001f82:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001f86:	6093      	str	r3, [r2, #8]
}
 8001f88:	e707      	b.n	8001d9a <HAL_TIM_ConfigClockSource+0x6a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8001f8a:	4a22      	ldr	r2, [pc, #136]	; (8002014 <HAL_TIM_ConfigClockSource+0x2e4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00f      	beq.n	8001fb0 <HAL_TIM_ConfigClockSource+0x280>
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f94:	d00c      	beq.n	8001fb0 <HAL_TIM_ConfigClockSource+0x280>
 8001f96:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d008      	beq.n	8001fb0 <HAL_TIM_ConfigClockSource+0x280>
 8001f9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_TIM_ConfigClockSource+0x280>
 8001fa6:	f640 71b4 	movw	r1, #4020	; 0xfb4
 8001faa:	4819      	ldr	r0, [pc, #100]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001fac:	f000 fe76 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8001fb0:	6863      	ldr	r3, [r4, #4]
 8001fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb6:	d009      	beq.n	8001fcc <HAL_TIM_ConfigClockSource+0x29c>
 8001fb8:	f033 0202 	bics.w	r2, r3, #2
 8001fbc:	d006      	beq.n	8001fcc <HAL_TIM_ConfigClockSource+0x29c>
 8001fbe:	2b0a      	cmp	r3, #10
 8001fc0:	d004      	beq.n	8001fcc <HAL_TIM_ConfigClockSource+0x29c>
 8001fc2:	f640 71b7 	movw	r1, #4023	; 0xfb7
 8001fc6:	4812      	ldr	r0, [pc, #72]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001fc8:	f000 fe68 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8001fcc:	68e3      	ldr	r3, [r4, #12]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	d904      	bls.n	8001fdc <HAL_TIM_ConfigClockSource+0x2ac>
 8001fd2:	f640 71b8 	movw	r1, #4024	; 0xfb8
 8001fd6:	480e      	ldr	r0, [pc, #56]	; (8002010 <HAL_TIM_ConfigClockSource+0x2e0>)
 8001fd8:	f000 fe60 	bl	8002c9c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fdc:	682b      	ldr	r3, [r5, #0]
 8001fde:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 8001fe0:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fe2:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fe4:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fe6:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fea:	f024 0401 	bic.w	r4, r4, #1
 8001fee:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ff0:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001ff2:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ff4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ff8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001ffc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ffe:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002000:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002002:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002006:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 800200a:	609a      	str	r2, [r3, #8]
}
 800200c:	e6c5      	b.n	8001d9a <HAL_TIM_ConfigClockSource+0x6a>
 800200e:	bf00      	nop
 8002010:	08005e8d 	.word	0x08005e8d
 8002014:	40012c00 	.word	0x40012c00
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002018:	4a54      	ldr	r2, [pc, #336]	; (800216c <HAL_TIM_ConfigClockSource+0x43c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00f      	beq.n	800203e <HAL_TIM_ConfigClockSource+0x30e>
 800201e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002022:	d00c      	beq.n	800203e <HAL_TIM_ConfigClockSource+0x30e>
 8002024:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002028:	4293      	cmp	r3, r2
 800202a:	d008      	beq.n	800203e <HAL_TIM_ConfigClockSource+0x30e>
 800202c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002030:	4293      	cmp	r3, r2
 8002032:	d004      	beq.n	800203e <HAL_TIM_ConfigClockSource+0x30e>
 8002034:	f640 71c3 	movw	r1, #4035	; 0xfc3
 8002038:	484d      	ldr	r0, [pc, #308]	; (8002170 <HAL_TIM_ConfigClockSource+0x440>)
 800203a:	f000 fe2f 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800203e:	6863      	ldr	r3, [r4, #4]
 8002040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002044:	d009      	beq.n	800205a <HAL_TIM_ConfigClockSource+0x32a>
 8002046:	f033 0202 	bics.w	r2, r3, #2
 800204a:	d006      	beq.n	800205a <HAL_TIM_ConfigClockSource+0x32a>
 800204c:	2b0a      	cmp	r3, #10
 800204e:	d004      	beq.n	800205a <HAL_TIM_ConfigClockSource+0x32a>
 8002050:	f640 71c6 	movw	r1, #4038	; 0xfc6
 8002054:	4846      	ldr	r0, [pc, #280]	; (8002170 <HAL_TIM_ConfigClockSource+0x440>)
 8002056:	f000 fe21 	bl	8002c9c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800205a:	68e3      	ldr	r3, [r4, #12]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d904      	bls.n	800206a <HAL_TIM_ConfigClockSource+0x33a>
 8002060:	f640 71c7 	movw	r1, #4039	; 0xfc7
 8002064:	4842      	ldr	r0, [pc, #264]	; (8002170 <HAL_TIM_ConfigClockSource+0x440>)
 8002066:	f000 fe19 	bl	8002c9c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800206a:	682b      	ldr	r3, [r5, #0]
 800206c:	6866      	ldr	r6, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800206e:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002070:	68e4      	ldr	r4, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002072:	f020 0010 	bic.w	r0, r0, #16
 8002076:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002078:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800207a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800207c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002080:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002084:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002088:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800208c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800208e:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002090:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002092:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002096:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800209a:	e7b6      	b.n	800200a <HAL_TIM_ConfigClockSource+0x2da>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800209c:	4a33      	ldr	r2, [pc, #204]	; (800216c <HAL_TIM_ConfigClockSource+0x43c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00f      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x392>
 80020a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a6:	d00c      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x392>
 80020a8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d008      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x392>
 80020b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d004      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x392>
 80020b8:	f640 71e1 	movw	r1, #4065	; 0xfe1
 80020bc:	482c      	ldr	r0, [pc, #176]	; (8002170 <HAL_TIM_ConfigClockSource+0x440>)
 80020be:	f000 fded 	bl	8002c9c <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80020c2:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 80020c4:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020ca:	f043 0307 	orr.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80020ce:	e75a      	b.n	8001f86 <HAL_TIM_ConfigClockSource+0x256>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80020d0:	4a26      	ldr	r2, [pc, #152]	; (800216c <HAL_TIM_ConfigClockSource+0x43c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00f      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0x3c6>
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020da:	d00c      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0x3c6>
 80020dc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d008      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0x3c6>
 80020e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d004      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0x3c6>
 80020ec:	f640 71e9 	movw	r1, #4073	; 0xfe9
 80020f0:	481f      	ldr	r0, [pc, #124]	; (8002170 <HAL_TIM_ConfigClockSource+0x440>)
 80020f2:	f000 fdd3 	bl	8002c9c <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80020f6:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 80020f8:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020fe:	f043 0317 	orr.w	r3, r3, #23
   TIMx->SMCR = tmpsmcr;
 8002102:	e740      	b.n	8001f86 <HAL_TIM_ConfigClockSource+0x256>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002104:	4a19      	ldr	r2, [pc, #100]	; (800216c <HAL_TIM_ConfigClockSource+0x43c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00f      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x3fa>
 800210a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210e:	d00c      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x3fa>
 8002110:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002114:	4293      	cmp	r3, r2
 8002116:	d008      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x3fa>
 8002118:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800211c:	4293      	cmp	r3, r2
 800211e:	d004      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x3fa>
 8002120:	f640 71f1 	movw	r1, #4081	; 0xff1
 8002124:	4812      	ldr	r0, [pc, #72]	; (8002170 <HAL_TIM_ConfigClockSource+0x440>)
 8002126:	f000 fdb9 	bl	8002c9c <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800212a:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 800212c:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800212e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002132:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8002136:	e726      	b.n	8001f86 <HAL_TIM_ConfigClockSource+0x256>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002138:	4a0c      	ldr	r2, [pc, #48]	; (800216c <HAL_TIM_ConfigClockSource+0x43c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00f      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x42e>
 800213e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002142:	d00c      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x42e>
 8002144:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002148:	4293      	cmp	r3, r2
 800214a:	d008      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x42e>
 800214c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002150:	4293      	cmp	r3, r2
 8002152:	d004      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x42e>
 8002154:	f640 71f9 	movw	r1, #4089	; 0xff9
 8002158:	4805      	ldr	r0, [pc, #20]	; (8002170 <HAL_TIM_ConfigClockSource+0x440>)
 800215a:	f000 fd9f 	bl	8002c9c <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800215e:	682a      	ldr	r2, [r5, #0]
   tmpsmcr = TIMx->SMCR;
 8002160:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002166:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 800216a:	e70c      	b.n	8001f86 <HAL_TIM_ConfigClockSource+0x256>
 800216c:	40012c00 	.word	0x40012c00
 8002170:	08005e8d 	.word	0x08005e8d

08002174 <HAL_TIM_SlaveConfigSynchronization>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8002174:	6803      	ldr	r3, [r0, #0]
 8002176:	4a24      	ldr	r2, [pc, #144]	; (8002208 <HAL_TIM_SlaveConfigSynchronization+0x94>)
{
 8002178:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800217a:	4293      	cmp	r3, r2
{
 800217c:	4604      	mov	r4, r0
 800217e:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8002180:	d00f      	beq.n	80021a2 <HAL_TIM_SlaveConfigSynchronization+0x2e>
 8002182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002186:	d00c      	beq.n	80021a2 <HAL_TIM_SlaveConfigSynchronization+0x2e>
 8002188:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800218c:	4293      	cmp	r3, r2
 800218e:	d008      	beq.n	80021a2 <HAL_TIM_SlaveConfigSynchronization+0x2e>
 8002190:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_TIM_SlaveConfigSynchronization+0x2e>
 8002198:	f241 0138 	movw	r1, #4152	; 0x1038
 800219c:	481b      	ldr	r0, [pc, #108]	; (800220c <HAL_TIM_SlaveConfigSynchronization+0x98>)
 800219e:	f000 fd7d 	bl	8002c9c <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 80021a2:	682b      	ldr	r3, [r5, #0]
 80021a4:	b13b      	cbz	r3, 80021b6 <HAL_TIM_SlaveConfigSynchronization+0x42>
 80021a6:	3b04      	subs	r3, #4
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d904      	bls.n	80021b6 <HAL_TIM_SlaveConfigSynchronization+0x42>
 80021ac:	f241 0139 	movw	r1, #4153	; 0x1039
 80021b0:	4816      	ldr	r0, [pc, #88]	; (800220c <HAL_TIM_SlaveConfigSynchronization+0x98>)
 80021b2:	f000 fd73 	bl	8002c9c <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 80021b6:	686b      	ldr	r3, [r5, #4]
 80021b8:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 80021bc:	d006      	beq.n	80021cc <HAL_TIM_SlaveConfigSynchronization+0x58>
 80021be:	2b40      	cmp	r3, #64	; 0x40
 80021c0:	d004      	beq.n	80021cc <HAL_TIM_SlaveConfigSynchronization+0x58>
 80021c2:	f241 013a 	movw	r1, #4154	; 0x103a
 80021c6:	4811      	ldr	r0, [pc, #68]	; (800220c <HAL_TIM_SlaveConfigSynchronization+0x98>)
 80021c8:	f000 fd68 	bl	8002c9c <assert_failed>
  __HAL_LOCK(htim);
 80021cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80021d0:	2002      	movs	r0, #2
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d016      	beq.n	8002204 <HAL_TIM_SlaveConfigSynchronization+0x90>
 80021d6:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80021d8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 80021dc:	4629      	mov	r1, r5
 80021de:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 80021e0:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 80021e4:	f7ff fbf6 	bl	80019d4 <TIM_SlaveTimer_SetConfig>
  __HAL_UNLOCK(htim);
 80021e8:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021f2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021fa:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80021fc:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002200:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    }
 8002204:	bd70      	pop	{r4, r5, r6, pc}
 8002206:	bf00      	nop
 8002208:	40012c00 	.word	0x40012c00
 800220c:	08005e8d 	.word	0x08005e8d

08002210 <HAL_TIM_OC_DelayElapsedCallback>:
 8002210:	4770      	bx	lr

08002212 <HAL_TIM_IC_CaptureCallback>:
 8002212:	4770      	bx	lr

08002214 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002214:	4770      	bx	lr

08002216 <HAL_TIM_TriggerCallback>:
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002218:	6803      	ldr	r3, [r0, #0]
{
 800221a:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800221c:	691a      	ldr	r2, [r3, #16]
{
 800221e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002220:	0791      	lsls	r1, r2, #30
 8002222:	d50e      	bpl.n	8002242 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	0792      	lsls	r2, r2, #30
 8002228:	d50b      	bpl.n	8002242 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800222a:	f06f 0202 	mvn.w	r2, #2
 800222e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002230:	2201      	movs	r2, #1
 8002232:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	079b      	lsls	r3, r3, #30
 8002238:	d077      	beq.n	800232a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800223a:	f7ff ffea 	bl	8002212 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	2300      	movs	r3, #0
 8002240:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	0750      	lsls	r0, r2, #29
 8002248:	d510      	bpl.n	800226c <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	0751      	lsls	r1, r2, #29
 800224e:	d50d      	bpl.n	800226c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002250:	f06f 0204 	mvn.w	r2, #4
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002256:	2202      	movs	r2, #2
 8002258:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800225a:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800225c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800225e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002262:	d068      	beq.n	8002336 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002264:	f7ff ffd5 	bl	8002212 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002268:	2300      	movs	r3, #0
 800226a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	0712      	lsls	r2, r2, #28
 8002272:	d50f      	bpl.n	8002294 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	0710      	lsls	r0, r2, #28
 8002278:	d50c      	bpl.n	8002294 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800227a:	f06f 0208 	mvn.w	r2, #8
 800227e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002280:	2204      	movs	r2, #4
 8002282:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002284:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002286:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002288:	0799      	lsls	r1, r3, #30
 800228a:	d05a      	beq.n	8002342 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800228c:	f7ff ffc1 	bl	8002212 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002290:	2300      	movs	r3, #0
 8002292:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	06d2      	lsls	r2, r2, #27
 800229a:	d510      	bpl.n	80022be <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	06d0      	lsls	r0, r2, #27
 80022a0:	d50d      	bpl.n	80022be <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022a2:	f06f 0210 	mvn.w	r2, #16
 80022a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022a8:	2208      	movs	r2, #8
 80022aa:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022ac:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022b0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80022b4:	d04b      	beq.n	800234e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	f7ff ffac 	bl	8002212 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ba:	2300      	movs	r3, #0
 80022bc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	07d1      	lsls	r1, r2, #31
 80022c4:	d508      	bpl.n	80022d8 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	07d2      	lsls	r2, r2, #31
 80022ca:	d505      	bpl.n	80022d8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022cc:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80022d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80022d4:	f000 fb40 	bl	8002958 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	0610      	lsls	r0, r2, #24
 80022de:	d508      	bpl.n	80022f2 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	0611      	lsls	r1, r2, #24
 80022e4:	d505      	bpl.n	80022f2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80022ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022ee:	f000 f97a 	bl	80025e6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	0652      	lsls	r2, r2, #25
 80022f8:	d508      	bpl.n	800230c <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	0650      	lsls	r0, r2, #25
 80022fe:	d505      	bpl.n	800230c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002300:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002304:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002306:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002308:	f7ff ff85 	bl	8002216 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	0691      	lsls	r1, r2, #26
 8002312:	d522      	bpl.n	800235a <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	0692      	lsls	r2, r2, #26
 8002318:	d51f      	bpl.n	800235a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800231a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800231e:	4620      	mov	r0, r4
}
 8002320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002324:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002326:	f000 b95d 	b.w	80025e4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	f7ff ff71 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232e:	4620      	mov	r0, r4
 8002330:	f7ff ff70 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
 8002334:	e783      	b.n	800223e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	f7ff ff6b 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff ff6a 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
 8002340:	e792      	b.n	8002268 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002342:	f7ff ff65 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002346:	4620      	mov	r0, r4
 8002348:	f7ff ff64 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
 800234c:	e7a0      	b.n	8002290 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234e:	f7ff ff5f 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002352:	4620      	mov	r0, r4
 8002354:	f7ff ff5e 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
 8002358:	e7af      	b.n	80022ba <HAL_TIM_IRQHandler+0xa2>
}
 800235a:	bd10      	pop	{r4, pc}

0800235c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800235c:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800235e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002360:	4290      	cmp	r0, r2
 8002362:	d00a      	beq.n	800237a <TIM_Base_SetConfig+0x1e>
 8002364:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002368:	d007      	beq.n	800237a <TIM_Base_SetConfig+0x1e>
 800236a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800236e:	4290      	cmp	r0, r2
 8002370:	d003      	beq.n	800237a <TIM_Base_SetConfig+0x1e>
 8002372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002376:	4290      	cmp	r0, r2
 8002378:	d115      	bne.n	80023a6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800237a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800237c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002380:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002382:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <TIM_Base_SetConfig+0x6c>)
 8002384:	4290      	cmp	r0, r2
 8002386:	d00a      	beq.n	800239e <TIM_Base_SetConfig+0x42>
 8002388:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800238c:	d007      	beq.n	800239e <TIM_Base_SetConfig+0x42>
 800238e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002392:	4290      	cmp	r0, r2
 8002394:	d003      	beq.n	800239e <TIM_Base_SetConfig+0x42>
 8002396:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800239a:	4290      	cmp	r0, r2
 800239c:	d103      	bne.n	80023a6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800239e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80023a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a4:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80023a6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80023a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80023ac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80023ae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b0:	688b      	ldr	r3, [r1, #8]
 80023b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80023b4:	680b      	ldr	r3, [r1, #0]
 80023b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <TIM_Base_SetConfig+0x6c>)
 80023ba:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80023bc:	bf04      	itt	eq
 80023be:	690b      	ldreq	r3, [r1, #16]
 80023c0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80023c2:	2301      	movs	r3, #1
 80023c4:	6143      	str	r3, [r0, #20]
}
 80023c6:	4770      	bx	lr
 80023c8:	40012c00 	.word	0x40012c00

080023cc <HAL_TIM_Base_Init>:
{
 80023cc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80023ce:	4604      	mov	r4, r0
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d049      	beq.n	8002468 <HAL_TIM_Base_Init+0x9c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80023d4:	6803      	ldr	r3, [r0, #0]
 80023d6:	4a25      	ldr	r2, [pc, #148]	; (800246c <HAL_TIM_Base_Init+0xa0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00e      	beq.n	80023fa <HAL_TIM_Base_Init+0x2e>
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e0:	d00b      	beq.n	80023fa <HAL_TIM_Base_Init+0x2e>
 80023e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_TIM_Base_Init+0x2e>
 80023ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d003      	beq.n	80023fa <HAL_TIM_Base_Init+0x2e>
 80023f2:	21d9      	movs	r1, #217	; 0xd9
 80023f4:	481e      	ldr	r0, [pc, #120]	; (8002470 <HAL_TIM_Base_Init+0xa4>)
 80023f6:	f000 fc51 	bl	8002c9c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80023fa:	68a3      	ldr	r3, [r4, #8]
 80023fc:	f033 0210 	bics.w	r2, r3, #16
 8002400:	d009      	beq.n	8002416 <HAL_TIM_Base_Init+0x4a>
 8002402:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002406:	2a20      	cmp	r2, #32
 8002408:	d005      	beq.n	8002416 <HAL_TIM_Base_Init+0x4a>
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	d003      	beq.n	8002416 <HAL_TIM_Base_Init+0x4a>
 800240e:	21da      	movs	r1, #218	; 0xda
 8002410:	4817      	ldr	r0, [pc, #92]	; (8002470 <HAL_TIM_Base_Init+0xa4>)
 8002412:	f000 fc43 	bl	8002c9c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002416:	6923      	ldr	r3, [r4, #16]
 8002418:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800241c:	d006      	beq.n	800242c <HAL_TIM_Base_Init+0x60>
 800241e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002422:	d003      	beq.n	800242c <HAL_TIM_Base_Init+0x60>
 8002424:	21db      	movs	r1, #219	; 0xdb
 8002426:	4812      	ldr	r0, [pc, #72]	; (8002470 <HAL_TIM_Base_Init+0xa4>)
 8002428:	f000 fc38 	bl	8002c9c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800242c:	69a3      	ldr	r3, [r4, #24]
 800242e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002432:	d003      	beq.n	800243c <HAL_TIM_Base_Init+0x70>
 8002434:	21dc      	movs	r1, #220	; 0xdc
 8002436:	480e      	ldr	r0, [pc, #56]	; (8002470 <HAL_TIM_Base_Init+0xa4>)
 8002438:	f000 fc30 	bl	8002c9c <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 800243c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002440:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002444:	b923      	cbnz	r3, 8002450 <HAL_TIM_Base_Init+0x84>
    HAL_TIM_Base_MspInit(htim);
 8002446:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002448:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800244c:	f000 fc54 	bl	8002cf8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002450:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002452:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002454:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002458:	1d21      	adds	r1, r4, #4
 800245a:	f7ff ff7f 	bl	800235c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800245e:	2301      	movs	r3, #1
  return HAL_OK;
 8002460:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002462:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002466:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002468:	2001      	movs	r0, #1
 800246a:	e7fc      	b.n	8002466 <HAL_TIM_Base_Init+0x9a>
 800246c:	40012c00 	.word	0x40012c00
 8002470:	08005e8d 	.word	0x08005e8d

08002474 <HAL_TIM_OnePulse_Init>:
{
 8002474:	b538      	push	{r3, r4, r5, lr}
 8002476:	460d      	mov	r5, r1
  if(htim == NULL)
 8002478:	4604      	mov	r4, r0
 800247a:	2800      	cmp	r0, #0
 800247c:	d05d      	beq.n	800253a <HAL_TIM_OnePulse_Init+0xc6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800247e:	6803      	ldr	r3, [r0, #0]
 8002480:	4a2f      	ldr	r2, [pc, #188]	; (8002540 <HAL_TIM_OnePulse_Init+0xcc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00f      	beq.n	80024a6 <HAL_TIM_OnePulse_Init+0x32>
 8002486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248a:	d00c      	beq.n	80024a6 <HAL_TIM_OnePulse_Init+0x32>
 800248c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002490:	4293      	cmp	r3, r2
 8002492:	d008      	beq.n	80024a6 <HAL_TIM_OnePulse_Init+0x32>
 8002494:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_TIM_OnePulse_Init+0x32>
 800249c:	f240 71cc 	movw	r1, #1996	; 0x7cc
 80024a0:	4828      	ldr	r0, [pc, #160]	; (8002544 <HAL_TIM_OnePulse_Init+0xd0>)
 80024a2:	f000 fbfb 	bl	8002c9c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80024a6:	68a3      	ldr	r3, [r4, #8]
 80024a8:	f033 0210 	bics.w	r2, r3, #16
 80024ac:	d00a      	beq.n	80024c4 <HAL_TIM_OnePulse_Init+0x50>
 80024ae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80024b2:	2a20      	cmp	r2, #32
 80024b4:	d006      	beq.n	80024c4 <HAL_TIM_OnePulse_Init+0x50>
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d004      	beq.n	80024c4 <HAL_TIM_OnePulse_Init+0x50>
 80024ba:	f240 71cd 	movw	r1, #1997	; 0x7cd
 80024be:	4821      	ldr	r0, [pc, #132]	; (8002544 <HAL_TIM_OnePulse_Init+0xd0>)
 80024c0:	f000 fbec 	bl	8002c9c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80024c4:	6923      	ldr	r3, [r4, #16]
 80024c6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80024ca:	d007      	beq.n	80024dc <HAL_TIM_OnePulse_Init+0x68>
 80024cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d0:	d004      	beq.n	80024dc <HAL_TIM_OnePulse_Init+0x68>
 80024d2:	f240 71ce 	movw	r1, #1998	; 0x7ce
 80024d6:	481b      	ldr	r0, [pc, #108]	; (8002544 <HAL_TIM_OnePulse_Init+0xd0>)
 80024d8:	f000 fbe0 	bl	8002c9c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80024dc:	69a3      	ldr	r3, [r4, #24]
 80024de:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80024e2:	d004      	beq.n	80024ee <HAL_TIM_OnePulse_Init+0x7a>
 80024e4:	f240 71cf 	movw	r1, #1999	; 0x7cf
 80024e8:	4816      	ldr	r0, [pc, #88]	; (8002544 <HAL_TIM_OnePulse_Init+0xd0>)
 80024ea:	f000 fbd7 	bl	8002c9c <assert_failed>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 80024ee:	f035 0308 	bics.w	r3, r5, #8
 80024f2:	d004      	beq.n	80024fe <HAL_TIM_OnePulse_Init+0x8a>
 80024f4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80024f8:	4812      	ldr	r0, [pc, #72]	; (8002544 <HAL_TIM_OnePulse_Init+0xd0>)
 80024fa:	f000 fbcf 	bl	8002c9c <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80024fe:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002502:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002506:	b923      	cbnz	r3, 8002512 <HAL_TIM_OnePulse_Init+0x9e>
    HAL_TIM_OnePulse_MspInit(htim);
 8002508:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800250a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800250e:	f7ff fc0d 	bl	8001d2c <HAL_TIM_OnePulse_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002512:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002514:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002516:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800251a:	1d21      	adds	r1, r4, #4
 800251c:	f7ff ff1e 	bl	800235c <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002520:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8002522:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	f022 0208 	bic.w	r2, r2, #8
 800252a:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	430d      	orrs	r5, r1
 8002530:	601d      	str	r5, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8002532:	2301      	movs	r3, #1
 8002534:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002538:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800253a:	2001      	movs	r0, #1
 800253c:	e7fc      	b.n	8002538 <HAL_TIM_OnePulse_Init+0xc4>
 800253e:	bf00      	nop
 8002540:	40012c00 	.word	0x40012c00
 8002544:	08005e8d 	.word	0x08005e8d

08002548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002548:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800254a:	4a24      	ldr	r2, [pc, #144]	; (80025dc <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800254c:	6803      	ldr	r3, [r0, #0]
{
 800254e:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8002550:	4293      	cmp	r3, r2
{
 8002552:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8002554:	d00f      	beq.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255a:	d00c      	beq.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 800255c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002560:	4293      	cmp	r3, r2
 8002562:	d008      	beq.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8002564:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002568:	4293      	cmp	r3, r2
 800256a:	d004      	beq.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 800256c:	f44f 61c7 	mov.w	r1, #1592	; 0x638
 8002570:	481b      	ldr	r0, [pc, #108]	; (80025e0 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8002572:	f000 fb93 	bl	8002c9c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8002576:	682b      	ldr	r3, [r5, #0]
 8002578:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800257c:	d006      	beq.n	800258c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800257e:	2b40      	cmp	r3, #64	; 0x40
 8002580:	d004      	beq.n	800258c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002582:	f240 6139 	movw	r1, #1593	; 0x639
 8002586:	4816      	ldr	r0, [pc, #88]	; (80025e0 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8002588:	f000 fb88 	bl	8002c9c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800258c:	686b      	ldr	r3, [r5, #4]
 800258e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002592:	d004      	beq.n	800259e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002594:	f240 613a 	movw	r1, #1594	; 0x63a
 8002598:	4811      	ldr	r0, [pc, #68]	; (80025e0 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800259a:	f000 fb7f 	bl	8002c9c <assert_failed>

  __HAL_LOCK(htim);
 800259e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80025a2:	2002      	movs	r0, #2
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d018      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0x92>

  htim->State = HAL_TIM_STATE_BUSY;

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025a8:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80025aa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025ae:	685a      	ldr	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80025b0:	6829      	ldr	r1, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025b6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80025b8:	685a      	ldr	r2, [r3, #4]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80025ba:	2000      	movs	r0, #0
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80025bc:	430a      	orrs	r2, r1
 80025be:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80025c0:	689a      	ldr	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80025c2:	6869      	ldr	r1, [r5, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80025c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80025d0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80025d2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80025d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
}
 80025da:	bd38      	pop	{r3, r4, r5, pc}
 80025dc:	40012c00 	.word	0x40012c00
 80025e0:	08005ec5 	.word	0x08005ec5

080025e4 <HAL_TIMEx_CommutationCallback>:
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIMEx_BreakCallback>:
 80025e6:	4770      	bx	lr

080025e8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmpreg = 0x00U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80025ec:	6842      	ldr	r2, [r0, #4]
 80025ee:	4b60      	ldr	r3, [pc, #384]	; (8002770 <UART_SetConfig+0x188>)
{
 80025f0:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d904      	bls.n	8002600 <UART_SetConfig+0x18>
 80025f6:	f640 11a7 	movw	r1, #2471	; 0x9a7
 80025fa:	485e      	ldr	r0, [pc, #376]	; (8002774 <UART_SetConfig+0x18c>)
 80025fc:	f000 fb4e 	bl	8002c9c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002600:	68e3      	ldr	r3, [r4, #12]
 8002602:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8002606:	d004      	beq.n	8002612 <UART_SetConfig+0x2a>
 8002608:	f640 11a8 	movw	r1, #2472	; 0x9a8
 800260c:	4859      	ldr	r0, [pc, #356]	; (8002774 <UART_SetConfig+0x18c>)
 800260e:	f000 fb45 	bl	8002c9c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002612:	6923      	ldr	r3, [r4, #16]
 8002614:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8002618:	d007      	beq.n	800262a <UART_SetConfig+0x42>
 800261a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800261e:	d004      	beq.n	800262a <UART_SetConfig+0x42>
 8002620:	f640 11a9 	movw	r1, #2473	; 0x9a9
 8002624:	4853      	ldr	r0, [pc, #332]	; (8002774 <UART_SetConfig+0x18c>)
 8002626:	f000 fb39 	bl	8002c9c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800262a:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 800262e:	6963      	ldr	r3, [r4, #20]
 8002630:	4213      	tst	r3, r2
 8002632:	d100      	bne.n	8002636 <UART_SetConfig+0x4e>
 8002634:	b923      	cbnz	r3, 8002640 <UART_SetConfig+0x58>
 8002636:	f640 11aa 	movw	r1, #2474	; 0x9aa
 800263a:	484e      	ldr	r0, [pc, #312]	; (8002774 <UART_SetConfig+0x18c>)
 800263c:	f000 fb2e 	bl	8002c9c <assert_failed>

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	68e1      	ldr	r1, [r4, #12]
 8002644:	691a      	ldr	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002646:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002648:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800264c:	430a      	orrs	r2, r1
 800264e:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002650:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002652:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002654:	4302      	orrs	r2, r0
 8002656:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002658:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800265c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002660:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, 
 8002662:	430a      	orrs	r2, r1
 8002664:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	69a1      	ldr	r1, [r4, #24]
 800266a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800266e:	430a      	orrs	r2, r1
 8002670:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002672:	4a41      	ldr	r2, [pc, #260]	; (8002778 <UART_SetConfig+0x190>)
 8002674:	f04f 0819 	mov.w	r8, #25
 8002678:	4293      	cmp	r3, r2
 800267a:	d147      	bne.n	800270c <UART_SetConfig+0x124>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800267c:	f7ff f99a 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 8002680:	fb08 f300 	mul.w	r3, r8, r0
 8002684:	6867      	ldr	r7, [r4, #4]
 8002686:	f04f 0964 	mov.w	r9, #100	; 0x64
 800268a:	00bf      	lsls	r7, r7, #2
 800268c:	fbb3 f3f7 	udiv	r3, r3, r7
 8002690:	fbb3 f3f9 	udiv	r3, r3, r9
 8002694:	011f      	lsls	r7, r3, #4
 8002696:	f7ff f98d 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 800269a:	fb08 f000 	mul.w	r0, r8, r0
 800269e:	6865      	ldr	r5, [r4, #4]
 80026a0:	00ad      	lsls	r5, r5, #2
 80026a2:	fbb0 f5f5 	udiv	r5, r0, r5
 80026a6:	f7ff f985 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 80026aa:	fb08 f300 	mul.w	r3, r8, r0
 80026ae:	6862      	ldr	r2, [r4, #4]
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80026b6:	fbb3 f3f9 	udiv	r3, r3, r9
 80026ba:	fb09 5313 	mls	r3, r9, r3, r5
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	3332      	adds	r3, #50	; 0x32
 80026c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80026c6:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80026ca:	f7ff f973 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 80026ce:	fb08 f500 	mul.w	r5, r8, r0
 80026d2:	6863      	ldr	r3, [r4, #4]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	fbb5 f5f3 	udiv	r5, r5, r3
 80026da:	f7ff f96b 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026de:	fb08 f300 	mul.w	r3, r8, r0
 80026e2:	6860      	ldr	r0, [r4, #4]
 80026e4:	6822      	ldr	r2, [r4, #0]
 80026e6:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80026ea:	fbb3 f3f8 	udiv	r3, r3, r8
 80026ee:	fbb3 f3f9 	udiv	r3, r3, r9
 80026f2:	fb09 5313 	mls	r3, r9, r3, r5
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	3332      	adds	r3, #50	; 0x32
 80026fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	4333      	orrs	r3, r6
 8002704:	443b      	add	r3, r7
 8002706:	6093      	str	r3, [r2, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8002708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800270c:	f7ff f942 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 8002710:	fb08 f300 	mul.w	r3, r8, r0
 8002714:	6867      	ldr	r7, [r4, #4]
 8002716:	f04f 0964 	mov.w	r9, #100	; 0x64
 800271a:	00bf      	lsls	r7, r7, #2
 800271c:	fbb3 f3f7 	udiv	r3, r3, r7
 8002720:	fbb3 f3f9 	udiv	r3, r3, r9
 8002724:	011f      	lsls	r7, r3, #4
 8002726:	f7ff f935 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 800272a:	fb08 f000 	mul.w	r0, r8, r0
 800272e:	6865      	ldr	r5, [r4, #4]
 8002730:	00ad      	lsls	r5, r5, #2
 8002732:	fbb0 f5f5 	udiv	r5, r0, r5
 8002736:	f7ff f92d 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 800273a:	fb08 f300 	mul.w	r3, r8, r0
 800273e:	6862      	ldr	r2, [r4, #4]
 8002740:	0092      	lsls	r2, r2, #2
 8002742:	fbb3 f3f2 	udiv	r3, r3, r2
 8002746:	fbb3 f3f9 	udiv	r3, r3, r9
 800274a:	fb09 5313 	mls	r3, r9, r3, r5
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	3332      	adds	r3, #50	; 0x32
 8002752:	fbb3 f3f9 	udiv	r3, r3, r9
 8002756:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800275a:	f7ff f91b 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 800275e:	fb08 f500 	mul.w	r5, r8, r0
 8002762:	6863      	ldr	r3, [r4, #4]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	fbb5 f5f3 	udiv	r5, r5, r3
 800276a:	f7ff f913 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 800276e:	e7b6      	b.n	80026de <UART_SetConfig+0xf6>
 8002770:	0044aa20 	.word	0x0044aa20
 8002774:	08005f00 	.word	0x08005f00
 8002778:	40013800 	.word	0x40013800

0800277c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277e:	4604      	mov	r4, r0
 8002780:	460e      	mov	r6, r1
 8002782:	4617      	mov	r7, r2
 8002784:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002786:	6822      	ldr	r2, [r4, #0]
 8002788:	6813      	ldr	r3, [r2, #0]
 800278a:	ea36 0303 	bics.w	r3, r6, r3
 800278e:	d101      	bne.n	8002794 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002790:	2000      	movs	r0, #0
 8002792:	e014      	b.n	80027be <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if(Timeout != HAL_MAX_DELAY)
 8002794:	1c6b      	adds	r3, r5, #1
 8002796:	d0f7      	beq.n	8002788 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002798:	b995      	cbnz	r5, 80027c0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800279a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800279c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027a4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	f022 0201 	bic.w	r2, r2, #1
 80027ac:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80027ae:	2320      	movs	r3, #32
 80027b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027b4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80027b8:	2300      	movs	r3, #0
 80027ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80027be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80027c0:	f7fe fb66 	bl	8000e90 <HAL_GetTick>
 80027c4:	1bc0      	subs	r0, r0, r7
 80027c6:	4285      	cmp	r5, r0
 80027c8:	d2dd      	bcs.n	8002786 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80027ca:	e7e6      	b.n	800279a <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

080027cc <HAL_UART_Init>:
{
 80027cc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80027ce:	4604      	mov	r4, r0
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d05b      	beq.n	800288c <HAL_UART_Init+0xc0>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80027d4:	6981      	ldr	r1, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80027d6:	6803      	ldr	r3, [r0, #0]
 80027d8:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <HAL_UART_Init+0xc4>)
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80027da:	2900      	cmp	r1, #0
 80027dc:	d04a      	beq.n	8002874 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00c      	beq.n	80027fc <HAL_UART_Init+0x30>
 80027e2:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d008      	beq.n	80027fc <HAL_UART_Init+0x30>
 80027ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <HAL_UART_Init+0x30>
 80027f2:	f240 110f 	movw	r1, #271	; 0x10f
 80027f6:	4827      	ldr	r0, [pc, #156]	; (8002894 <HAL_UART_Init+0xc8>)
 80027f8:	f000 fa50 	bl	8002c9c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80027fc:	69a3      	ldr	r3, [r4, #24]
 80027fe:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8002802:	d004      	beq.n	800280e <HAL_UART_Init+0x42>
 8002804:	f44f 7188 	mov.w	r1, #272	; 0x110
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002808:	4822      	ldr	r0, [pc, #136]	; (8002894 <HAL_UART_Init+0xc8>)
 800280a:	f000 fa47 	bl	8002c9c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800280e:	68a3      	ldr	r3, [r4, #8]
 8002810:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8002814:	d004      	beq.n	8002820 <HAL_UART_Init+0x54>
 8002816:	f44f 718b 	mov.w	r1, #278	; 0x116
 800281a:	481e      	ldr	r0, [pc, #120]	; (8002894 <HAL_UART_Init+0xc8>)
 800281c:	f000 fa3e 	bl	8002c9c <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002820:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002824:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002828:	b923      	cbnz	r3, 8002834 <HAL_UART_Init+0x68>
    HAL_UART_MspInit(huart);
 800282a:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 800282c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002830:	f000 fab8 	bl	8002da4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002834:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002836:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002838:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800283c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800283e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002844:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002846:	f7ff fecf 	bl	80025e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800284a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800285c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002864:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002866:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002868:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800286a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800286e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002872:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002874:	4293      	cmp	r3, r2
 8002876:	d0ca      	beq.n	800280e <HAL_UART_Init+0x42>
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_UART_Init+0xcc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d0c7      	beq.n	800280e <HAL_UART_Init+0x42>
 800287e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002882:	4293      	cmp	r3, r2
 8002884:	d0c3      	beq.n	800280e <HAL_UART_Init+0x42>
 8002886:	f44f 718a 	mov.w	r1, #276	; 0x114
 800288a:	e7bd      	b.n	8002808 <HAL_UART_Init+0x3c>
    return HAL_ERROR;
 800288c:	2001      	movs	r0, #1
 800288e:	e7f0      	b.n	8002872 <HAL_UART_Init+0xa6>
 8002890:	40013800 	.word	0x40013800
 8002894:	08005f00 	.word	0x08005f00
 8002898:	40004400 	.word	0x40004400

0800289c <HAL_UART_Transmit>:
{
 800289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028a0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80028a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80028a6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80028a8:	2b20      	cmp	r3, #32
{
 80028aa:	460d      	mov	r5, r1
 80028ac:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80028ae:	d14e      	bne.n	800294e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80028b0:	2900      	cmp	r1, #0
 80028b2:	d04a      	beq.n	800294a <HAL_UART_Transmit+0xae>
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d048      	beq.n	800294a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80028b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d046      	beq.n	800294e <HAL_UART_Transmit+0xb2>
 80028c0:	2301      	movs	r3, #1
 80028c2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ca:	2321      	movs	r3, #33	; 0x21
 80028cc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80028d0:	f7fe fade 	bl	8000e90 <HAL_GetTick>
 80028d4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80028d6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80028da:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80028de:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	b963      	cbnz	r3, 80028fe <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028e4:	463b      	mov	r3, r7
 80028e6:	4632      	mov	r2, r6
 80028e8:	2140      	movs	r1, #64	; 0x40
 80028ea:	4620      	mov	r0, r4
 80028ec:	f7ff ff46 	bl	800277c <UART_WaitOnFlagUntilTimeout.constprop.0>
 80028f0:	b9a0      	cbnz	r0, 800291c <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80028f2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80028f4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80028f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80028fc:	e00f      	b.n	800291e <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80028fe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002900:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002902:	3b01      	subs	r3, #1
 8002904:	b29b      	uxth	r3, r3
 8002906:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002908:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800290a:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800290c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002910:	4620      	mov	r0, r4
 8002912:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002914:	d110      	bne.n	8002938 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002916:	f7ff ff31 	bl	800277c <UART_WaitOnFlagUntilTimeout.constprop.0>
 800291a:	b110      	cbz	r0, 8002922 <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 800291c:	2003      	movs	r0, #3
}
 800291e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002922:	882b      	ldrh	r3, [r5, #0]
 8002924:	6822      	ldr	r2, [r4, #0]
 8002926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800292c:	6923      	ldr	r3, [r4, #16]
 800292e:	b90b      	cbnz	r3, 8002934 <HAL_UART_Transmit+0x98>
          pData +=2U;
 8002930:	3502      	adds	r5, #2
 8002932:	e7d4      	b.n	80028de <HAL_UART_Transmit+0x42>
          pData +=1U;
 8002934:	3501      	adds	r5, #1
 8002936:	e7d2      	b.n	80028de <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002938:	f7ff ff20 	bl	800277c <UART_WaitOnFlagUntilTimeout.constprop.0>
 800293c:	2800      	cmp	r0, #0
 800293e:	d1ed      	bne.n	800291c <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	e7c9      	b.n	80028de <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800294a:	2001      	movs	r0, #1
 800294c:	e7e7      	b.n	800291e <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800294e:	2002      	movs	r0, #2
 8002950:	e7e5      	b.n	800291e <HAL_UART_Transmit+0x82>
 8002952:	0000      	movs	r0, r0
 8002954:	0000      	movs	r0, r0
	...

08002958 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002958:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(htim == &htim1)
 800295a:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0x80>)
{
 800295c:	4604      	mov	r4, r0
	if(htim == &htim1)
 800295e:	4298      	cmp	r0, r3
{
 8002960:	b09b      	sub	sp, #108	; 0x6c
	if(htim == &htim1)
 8002962:	d133      	bne.n	80029cc <HAL_TIM_PeriodElapsedCallback+0x74>
		/*uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim2);
		uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3);
		uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim2);
		uint32_t freq = count_main + (count_secondary * arr) + count_secondary;*/

		uint32_t freq = TIM2->CNT + (TIM3->CNT << 16); // это вариант на регистрах, предыдущие четыре строчки можно закомментить
 8002964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

		float freq_test = ((float)freq*10000000000.0);

		///////////////////////// вывод инфы ///////////////////////////////
		char str[96] = {0,};
 8002968:	2500      	movs	r5, #0
		uint32_t freq = TIM2->CNT + (TIM3->CNT << 16); // это вариант на регистрах, предыдущие четыре строчки можно закомментить
 800296a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800296c:	f8d3 7424 	ldr.w	r7, [r3, #1060]	; 0x424
		char str[96] = {0,};
 8002970:	225c      	movs	r2, #92	; 0x5c
 8002972:	4629      	mov	r1, r5
 8002974:	a803      	add	r0, sp, #12
 8002976:	9502      	str	r5, [sp, #8]
 8002978:	f000 fb28 	bl	8002fcc <memset>
		float freq_test = ((float)freq*10000000000.0);
 800297c:	eb06 4007 	add.w	r0, r6, r7, lsl #16
 8002980:	f7fe f9ec 	bl	8000d5c <__aeabi_ui2f>
 8002984:	4915      	ldr	r1, [pc, #84]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002986:	f7fd fbeb 	bl	8000160 <__aeabi_fmul>
			break;
		}*/

		//snprintf(str, 96, "FREQUENCY: %.3f MHz | %.3f KHz | %lu Hz\n-----------------\n", (float)freq / 1000000.0, (float)freq / 1000.0, freq);
		//snprintf(str, 96, "FREQUENCY: %11.3f Hz\n-----------------\n", (float)freq);
		snprintf(str, 96, "FREQUENCY: %f Hz\n-----------------\n", (float)freq_test/10000000000.0);
 800298a:	f7fd fe01 	bl	8000590 <__aeabi_f2d>
 800298e:	a310      	add	r3, pc, #64	; (adr r3, 80029d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	f7fd ff7e 	bl	8000894 <__aeabi_ddiv>
 8002998:	4a11      	ldr	r2, [pc, #68]	; (80029e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800299a:	e9cd 0100 	strd	r0, r1, [sp]
 800299e:	2160      	movs	r1, #96	; 0x60
 80029a0:	a802      	add	r0, sp, #8
 80029a2:	f000 ff7b 	bl	800389c <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80029a6:	a802      	add	r0, sp, #8
 80029a8:	f7fd fbd2 	bl	8000150 <strlen>
 80029ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b0:	b282      	uxth	r2, r0
 80029b2:	a902      	add	r1, sp, #8
 80029b4:	480b      	ldr	r0, [pc, #44]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80029b6:	f7ff ff71 	bl	800289c <HAL_UART_Transmit>

		//snprintf(str, 96, "Count_main: %d | Count_secondary: %d\n-----------------\n", count_main, count_secondary);
		//HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);

		//////////////// обнуляем счётчики и рестартуем таймер /////////////////
		__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
		HAL_TIM_Base_Start_IT(&htim1);
 80029bc:	4620      	mov	r0, r4
		__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	625d      	str	r5, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <HAL_TIM_PeriodElapsedCallback+0x94>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	625d      	str	r5, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim1);
 80029c8:	f7ff f98a 	bl	8001ce0 <HAL_TIM_Base_Start_IT>
	}
}
 80029cc:	b01b      	add	sp, #108	; 0x6c
 80029ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d0:	20000000 	.word	0x20000000
 80029d4:	4202a05f 	.word	0x4202a05f
 80029d8:	2000020c 	.word	0x2000020c
 80029dc:	501502f9 	.word	0x501502f9
 80029e0:	08005f39 	.word	0x08005f39
 80029e4:	200002cc 	.word	0x200002cc
 80029e8:	2000024c 	.word	0x2000024c
 80029ec:	2000028c 	.word	0x2000028c

080029f0 <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart1, (uint8_t*)"ERROR1\n", strlen("ERROR\n"), 1000);
 80029f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f4:	2206      	movs	r2, #6
 80029f6:	4902      	ldr	r1, [pc, #8]	; (8002a00 <Error_Handler+0x10>)
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <Error_Handler+0x14>)
 80029fa:	f7ff bf4f 	b.w	800289c <HAL_UART_Transmit>
 80029fe:	bf00      	nop
 8002a00:	08005f5d 	.word	0x08005f5d
 8002a04:	200002cc 	.word	0x200002cc

08002a08 <SystemClock_Config>:
{
 8002a08:	b510      	push	{r4, lr}
 8002a0a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a0c:	2214      	movs	r2, #20
 8002a0e:	2100      	movs	r1, #0
 8002a10:	a808      	add	r0, sp, #32
 8002a12:	f000 fadb 	bl	8002fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a16:	2214      	movs	r2, #20
 8002a18:	2100      	movs	r1, #0
 8002a1a:	a801      	add	r0, sp, #4
 8002a1c:	f000 fad6 	bl	8002fcc <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a20:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a26:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a28:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a34:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a36:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a38:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a3a:	f7fe fc19 	bl	8001270 <HAL_RCC_OscConfig>
 8002a3e:	b108      	cbz	r0, 8002a44 <SystemClock_Config+0x3c>
    Error_Handler();
 8002a40:	f7ff ffd6 	bl	80029f0 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a44:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a4e:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a50:	2102      	movs	r1, #2
 8002a52:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a54:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a58:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a5a:	f7fe fe8d 	bl	8001778 <HAL_RCC_ClockConfig>
 8002a5e:	b108      	cbz	r0, 8002a64 <SystemClock_Config+0x5c>
    Error_Handler();
 8002a60:	f7ff ffc6 	bl	80029f0 <Error_Handler>
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8002a64:	2200      	movs	r2, #0
 8002a66:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f7fe fe00 	bl	8001670 <HAL_RCC_MCOConfig>
}
 8002a70:	b010      	add	sp, #64	; 0x40
 8002a72:	bd10      	pop	{r4, pc}

08002a74 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	2400      	movs	r4, #0
{
 8002a76:	b500      	push	{lr}
 8002a78:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8002a7a:	f7fe f9eb 	bl	8000e54 <HAL_Init>
  SystemClock_Config();
 8002a7e:	f7ff ffc3 	bl	8002a08 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a82:	4b7b      	ldr	r3, [pc, #492]	; (8002c70 <main+0x1fc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a86:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	f44f 7580 	mov.w	r5, #256	; 0x100
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a8c:	f042 0220 	orr.w	r2, r2, #32
 8002a90:	619a      	str	r2, [r3, #24]
 8002a92:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	4877      	ldr	r0, [pc, #476]	; (8002c74 <main+0x200>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a96:	f002 0220 	and.w	r2, r2, #32
 8002a9a:	9200      	str	r2, [sp, #0]
 8002a9c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa0:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	f042 0204 	orr.w	r2, r2, #4
 8002aa6:	619a      	str	r2, [r3, #24]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	f002 0204 	and.w	r2, r2, #4
 8002aae:	9201      	str	r2, [sp, #4]
 8002ab0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	f042 0208 	orr.w	r2, r2, #8
 8002ab8:	619a      	str	r2, [r3, #24]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	9302      	str	r3, [sp, #8]
 8002ac2:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f7fe fa6f 	bl	8000fb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = sw_div_Pin;
 8002ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(sw_div_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	4868      	ldr	r0, [pc, #416]	; (8002c78 <main+0x204>)
 8002ad8:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ada:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(sw_div_GPIO_Port, &GPIO_InitStruct);
 8002ae0:	f7fe fa66 	bl	8000fb0 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8002ae4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8002ae8:	4864      	ldr	r0, [pc, #400]	; (8002c7c <main+0x208>)
  huart1.Init.BaudRate = 115200;
 8002aea:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002c80 <main+0x20c>
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002aee:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8002af2:	e9c0 c300 	strd	ip, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002af6:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8002af8:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afa:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002afe:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b00:	f7ff fe64 	bl	80027cc <HAL_UART_Init>
 8002b04:	b108      	cbz	r0, 8002b0a <main+0x96>
    Error_Handler();
 8002b06:	f7ff ff73 	bl	80029f0 <Error_Handler>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002b0a:	2214      	movs	r2, #20
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	a809      	add	r0, sp, #36	; 0x24
 8002b10:	f000 fa5c 	bl	8002fcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b14:	2300      	movs	r3, #0
  htim3.Instance = TIM3;
 8002b16:	485b      	ldr	r0, [pc, #364]	; (8002c84 <main+0x210>)
 8002b18:	4a5b      	ldr	r2, [pc, #364]	; (8002c88 <main+0x214>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b1a:	ac05      	add	r4, sp, #20
  htim3.Init.Prescaler = 0;
 8002b1c:	e9c0 2300 	strd	r2, r3, [r0]
  htim3.Init.Period = 65535;
 8002b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b24:	9305      	str	r3, [sp, #20]
 8002b26:	6063      	str	r3, [r4, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b28:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2c:	6083      	str	r3, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b2e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b30:	f7ff fc4c 	bl	80023cc <HAL_TIM_Base_Init>
 8002b34:	b108      	cbz	r0, 8002b3a <main+0xc6>
    Error_Handler();
 8002b36:	f7ff ff5b 	bl	80029f0 <Error_Handler>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002b3a:	2007      	movs	r0, #7
 8002b3c:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8002b3e:	a909      	add	r1, sp, #36	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002b40:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8002b44:	484f      	ldr	r0, [pc, #316]	; (8002c84 <main+0x210>)
 8002b46:	f7ff fb15 	bl	8002174 <HAL_TIM_SlaveConfigSynchronization>
 8002b4a:	b108      	cbz	r0, 8002b50 <main+0xdc>
    Error_Handler();
 8002b4c:	f7ff ff50 	bl	80029f0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b50:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b52:	4621      	mov	r1, r4
 8002b54:	484b      	ldr	r0, [pc, #300]	; (8002c84 <main+0x210>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b56:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b5a:	f7ff fcf5 	bl	8002548 <HAL_TIMEx_MasterConfigSynchronization>
 8002b5e:	b108      	cbz	r0, 8002b64 <main+0xf0>
    Error_Handler();
 8002b60:	f7ff ff46 	bl	80029f0 <Error_Handler>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b64:	2510      	movs	r5, #16
 8002b66:	2100      	movs	r1, #0
 8002b68:	462a      	mov	r2, r5
 8002b6a:	a809      	add	r0, sp, #36	; 0x24
 8002b6c:	f000 fa2e 	bl	8002fcc <memset>
  htim1.Init.Prescaler = 7199;
 8002b70:	f641 421f 	movw	r2, #7199	; 0x1c1f
  htim1.Instance = TIM1;
 8002b74:	4845      	ldr	r0, [pc, #276]	; (8002c8c <main+0x218>)
  htim1.Init.Prescaler = 7199;
 8002b76:	4946      	ldr	r1, [pc, #280]	; (8002c90 <main+0x21c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b78:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 7199;
 8002b7a:	e9c0 1200 	strd	r1, r2, [r0]
  htim1.Init.Period = 9999;
 8002b7e:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b82:	9305      	str	r3, [sp, #20]
 8002b84:	6063      	str	r3, [r4, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b86:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002b8e:	6085      	str	r5, [r0, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b90:	f7ff fc1c 	bl	80023cc <HAL_TIM_Base_Init>
 8002b94:	b108      	cbz	r0, 8002b9a <main+0x126>
    Error_Handler();
 8002b96:	f7ff ff2b 	bl	80029f0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b9e:	483b      	ldr	r0, [pc, #236]	; (8002c8c <main+0x218>)
 8002ba0:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ba4:	f7ff f8c4 	bl	8001d30 <HAL_TIM_ConfigClockSource>
 8002ba8:	b108      	cbz	r0, 8002bae <main+0x13a>
    Error_Handler();
 8002baa:	f7ff ff21 	bl	80029f0 <Error_Handler>
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8002bae:	2108      	movs	r1, #8
 8002bb0:	4836      	ldr	r0, [pc, #216]	; (8002c8c <main+0x218>)
 8002bb2:	f7ff fc5f 	bl	8002474 <HAL_TIM_OnePulse_Init>
 8002bb6:	b108      	cbz	r0, 8002bbc <main+0x148>
    Error_Handler();
 8002bb8:	f7ff ff1a 	bl	80029f0 <Error_Handler>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	4832      	ldr	r0, [pc, #200]	; (8002c8c <main+0x218>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bc8:	f7ff fcbe 	bl	8002548 <HAL_TIMEx_MasterConfigSynchronization>
 8002bcc:	b108      	cbz	r0, 8002bd2 <main+0x15e>
    Error_Handler();
 8002bce:	f7ff ff0f 	bl	80029f0 <Error_Handler>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f000 f9f8 	bl	8002fcc <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002bdc:	2214      	movs	r2, #20
 8002bde:	2100      	movs	r1, #0
 8002be0:	a809      	add	r0, sp, #36	; 0x24
 8002be2:	f000 f9f3 	bl	8002fcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be6:	2500      	movs	r5, #0
  htim2.Instance = TIM2;
 8002be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bec:	4829      	ldr	r0, [pc, #164]	; (8002c94 <main+0x220>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bee:	e9cd 5503 	strd	r5, r5, [sp, #12]
  htim2.Init.Prescaler = 0;
 8002bf2:	e9c0 3500 	strd	r3, r5, [r0]
  htim2.Init.Period = 65535;
 8002bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfa:	6085      	str	r5, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfc:	e9c0 3503 	strd	r3, r5, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c00:	6185      	str	r5, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c02:	f7ff fbe3 	bl	80023cc <HAL_TIM_Base_Init>
 8002c06:	b108      	cbz	r0, 8002c0c <main+0x198>
    Error_Handler();
 8002c08:	f7ff fef2 	bl	80029f0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c10:	4621      	mov	r1, r4
 8002c12:	4820      	ldr	r0, [pc, #128]	; (8002c94 <main+0x220>)
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002c14:	e9cd 3505 	strd	r3, r5, [sp, #20]
  sClockSourceConfig.ClockFilter = 0;
 8002c18:	e9cd 5507 	strd	r5, r5, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c1c:	f7ff f888 	bl	8001d30 <HAL_TIM_ConfigClockSource>
 8002c20:	b108      	cbz	r0, 8002c26 <main+0x1b2>
    Error_Handler();
 8002c22:	f7ff fee5 	bl	80029f0 <Error_Handler>
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002c26:	2305      	movs	r3, #5
 8002c28:	2500      	movs	r5, #0
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8002c2a:	481a      	ldr	r0, [pc, #104]	; (8002c94 <main+0x220>)
 8002c2c:	a909      	add	r1, sp, #36	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002c2e:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8002c32:	f7ff fa9f 	bl	8002174 <HAL_TIM_SlaveConfigSynchronization>
 8002c36:	b108      	cbz	r0, 8002c3c <main+0x1c8>
    Error_Handler();
 8002c38:	f7ff feda 	bl	80029f0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c3c:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c3e:	4815      	ldr	r0, [pc, #84]	; (8002c94 <main+0x220>)
 8002c40:	a903      	add	r1, sp, #12
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c42:	e9cd 3503 	strd	r3, r5, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c46:	f7ff fc7f 	bl	8002548 <HAL_TIMEx_MasterConfigSynchronization>
 8002c4a:	b108      	cbz	r0, 8002c50 <main+0x1dc>
    Error_Handler();
 8002c4c:	f7ff fed0 	bl	80029f0 <Error_Handler>
  MY_sClockSourceConfig = sClockSourceConfig;
 8002c50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c54:	4d10      	ldr	r5, [pc, #64]	; (8002c98 <main+0x224>)
 8002c56:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  HAL_TIM_Base_Start_IT(&htim1);
 8002c5a:	480c      	ldr	r0, [pc, #48]	; (8002c8c <main+0x218>)
 8002c5c:	f7ff f840 	bl	8001ce0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8002c60:	480c      	ldr	r0, [pc, #48]	; (8002c94 <main+0x220>)
 8002c62:	f7ff f815 	bl	8001c90 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8002c66:	4807      	ldr	r0, [pc, #28]	; (8002c84 <main+0x210>)
 8002c68:	f7ff f812 	bl	8001c90 <HAL_TIM_Base_Start>
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <main+0x1f8>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40010800 	.word	0x40010800
 8002c78:	40010c00 	.word	0x40010c00
 8002c7c:	200002cc 	.word	0x200002cc
 8002c80:	40013800 	.word	0x40013800
 8002c84:	2000028c 	.word	0x2000028c
 8002c88:	40000400 	.word	0x40000400
 8002c8c:	2000020c 	.word	0x2000020c
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	2000024c 	.word	0x2000024c
 8002c98:	200001fc 	.word	0x200001fc

08002c9c <assert_failed>:
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	HAL_UART_Transmit(&huart1, (uint8_t*)"ERROR\n", strlen("ERROR\n"), 1000);
 8002c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca0:	2206      	movs	r2, #6
 8002ca2:	4902      	ldr	r1, [pc, #8]	; (8002cac <assert_failed+0x10>)
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <assert_failed+0x14>)
 8002ca6:	f7ff bdf9 	b.w	800289c <HAL_UART_Transmit>
 8002caa:	bf00      	nop
 8002cac:	08005f65 	.word	0x08005f65
 8002cb0:	200002cc 	.word	0x200002cc

08002cb4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_MspInit+0x3c>)
{
 8002cb6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	619a      	str	r2, [r3, #24]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	f002 0201 	and.w	r2, r2, #1
 8002cc6:	9200      	str	r2, [sp, #0]
 8002cc8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cd0:	61da      	str	r2, [r3, #28]
 8002cd2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cd4:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cde:	6853      	ldr	r3, [r2, #4]
 8002ce0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ce4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cea:	b002      	add	sp, #8
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010000 	.word	0x40010000

08002cf8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	2210      	movs	r2, #16
{
 8002cfa:	b510      	push	{r4, lr}
 8002cfc:	4604      	mov	r4, r0
 8002cfe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	eb0d 0002 	add.w	r0, sp, r2
 8002d04:	2100      	movs	r1, #0
 8002d06:	f000 f961 	bl	8002fcc <memset>
  if(htim_base->Instance==TIM1)
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <HAL_TIM_Base_MspInit+0x9c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d113      	bne.n	8002d3a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d12:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <HAL_TIM_Base_MspInit+0xa0>)
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002d14:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d1c:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002d1e:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d20:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002d22:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002d2c:	f7fe f8d2 	bl	8000ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002d30:	2019      	movs	r0, #25
 8002d32:	f7fe f913 	bl	8000f5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d36:	b008      	add	sp, #32
 8002d38:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM2)
 8002d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3e:	d11a      	bne.n	8002d76 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d40:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002d44:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	4815      	ldr	r0, [pc, #84]	; (8002d9c <HAL_TIM_Base_MspInit+0xa4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d48:	f042 0201 	orr.w	r2, r2, #1
 8002d4c:	61da      	str	r2, [r3, #28]
 8002d4e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d50:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d52:	f002 0201 	and.w	r2, r2, #1
 8002d56:	9201      	str	r2, [sp, #4]
 8002d58:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	f042 0204 	orr.w	r2, r2, #4
 8002d60:	619a      	str	r2, [r3, #24]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	9302      	str	r3, [sp, #8]
 8002d6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d70:	f7fe f91e 	bl	8000fb0 <HAL_GPIO_Init>
 8002d74:	e7df      	b.n	8002d36 <HAL_TIM_Base_MspInit+0x3e>
  else if(htim_base->Instance==TIM3)
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <HAL_TIM_Base_MspInit+0xa8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d1dc      	bne.n	8002d36 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_TIM_Base_MspInit+0xa0>)
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	f042 0202 	orr.w	r2, r2, #2
 8002d84:	61da      	str	r2, [r3, #28]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	9303      	str	r3, [sp, #12]
 8002d8e:	9b03      	ldr	r3, [sp, #12]
}
 8002d90:	e7d1      	b.n	8002d36 <HAL_TIM_Base_MspInit+0x3e>
 8002d92:	bf00      	nop
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40010800 	.word	0x40010800
 8002da0:	40000400 	.word	0x40000400

08002da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002da4:	b510      	push	{r4, lr}
 8002da6:	4604      	mov	r4, r0
 8002da8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002daa:	2210      	movs	r2, #16
 8002dac:	2100      	movs	r1, #0
 8002dae:	a802      	add	r0, sp, #8
 8002db0:	f000 f90c 	bl	8002fcc <memset>
  if(huart->Instance==USART1)
 8002db4:	6822      	ldr	r2, [r4, #0]
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <HAL_UART_MspInit+0x70>)
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d128      	bne.n	8002e0e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dbc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002dc0:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc2:	4815      	ldr	r0, [pc, #84]	; (8002e18 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dc8:	619a      	str	r2, [r3, #24]
 8002dca:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dcc:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002dd2:	9200      	str	r2, [sp, #0]
 8002dd4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	699a      	ldr	r2, [r3, #24]
 8002dd8:	f042 0204 	orr.w	r2, r2, #4
 8002ddc:	619a      	str	r2, [r3, #24]
 8002dde:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df2:	2303      	movs	r3, #3
 8002df4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df6:	f7fe f8db 	bl	8000fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dfe:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e00:	4805      	ldr	r0, [pc, #20]	; (8002e18 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e02:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e06:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0a:	f7fe f8d1 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e0e:	b006      	add	sp, #24
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	bf00      	nop
 8002e14:	40013800 	.word	0x40013800
 8002e18:	40010800 	.word	0x40010800

08002e1c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e1c:	4770      	bx	lr

08002e1e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <HardFault_Handler>

08002e20 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e20:	e7fe      	b.n	8002e20 <MemManage_Handler>

08002e22 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e22:	e7fe      	b.n	8002e22 <BusFault_Handler>

08002e24 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <UsageFault_Handler>

08002e26 <SVC_Handler>:
 8002e26:	4770      	bx	lr

08002e28 <DebugMon_Handler>:
 8002e28:	4770      	bx	lr

08002e2a <PendSV_Handler>:
 8002e2a:	4770      	bx	lr

08002e2c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e2c:	f7fe b824 	b.w	8000e78 <HAL_IncTick>

08002e30 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e30:	4801      	ldr	r0, [pc, #4]	; (8002e38 <TIM1_UP_IRQHandler+0x8>)
 8002e32:	f7ff b9f1 	b.w	8002218 <HAL_TIM_IRQHandler>
 8002e36:	bf00      	nop
 8002e38:	2000020c 	.word	0x2000020c

08002e3c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	4770      	bx	lr

08002e40 <_kill>:

int _kill(int pid, int sig)
{
 8002e40:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002e42:	f000 f899 	bl	8002f78 <__errno>
 8002e46:	2316      	movs	r3, #22
 8002e48:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4e:	bd08      	pop	{r3, pc}

08002e50 <_exit>:

void _exit (int status)
{
 8002e50:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002e52:	f000 f891 	bl	8002f78 <__errno>
 8002e56:	2316      	movs	r3, #22
 8002e58:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002e5a:	e7fe      	b.n	8002e5a <_exit+0xa>

08002e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	460d      	mov	r5, r1
 8002e60:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e62:	460e      	mov	r6, r1
 8002e64:	1b73      	subs	r3, r6, r5
 8002e66:	429c      	cmp	r4, r3
 8002e68:	dc01      	bgt.n	8002e6e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002e6e:	f3af 8000 	nop.w
 8002e72:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e76:	e7f5      	b.n	8002e64 <_read+0x8>

08002e78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	460d      	mov	r5, r1
 8002e7c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7e:	460e      	mov	r6, r1
 8002e80:	1b73      	subs	r3, r6, r5
 8002e82:	429c      	cmp	r4, r3
 8002e84:	dc01      	bgt.n	8002e8a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002e86:	4620      	mov	r0, r4
 8002e88:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002e8a:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002e8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e92:	e7f5      	b.n	8002e80 <_write+0x8>

08002e94 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <_sbrk+0x2c>)
{
 8002e96:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8002e98:	6811      	ldr	r1, [r2, #0]
{
 8002e9a:	4603      	mov	r3, r0
	if (heap_end == 0)
 8002e9c:	b909      	cbnz	r1, 8002ea2 <_sbrk+0xe>
		heap_end = &end;
 8002e9e:	4909      	ldr	r1, [pc, #36]	; (8002ec4 <_sbrk+0x30>)
 8002ea0:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002ea2:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002ea4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002ea6:	4403      	add	r3, r0
 8002ea8:	428b      	cmp	r3, r1
 8002eaa:	d906      	bls.n	8002eba <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002eac:	f000 f864 	bl	8002f78 <__errno>
 8002eb0:	230c      	movs	r3, #12
 8002eb2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002eb4:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002eb8:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002eba:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8002ebc:	e7fc      	b.n	8002eb8 <_sbrk+0x24>
 8002ebe:	bf00      	nop
 8002ec0:	2000030c 	.word	0x2000030c
 8002ec4:	20000320 	.word	0x20000320

08002ec8 <_close>:

int _close(int file)
{
	return -1;
}
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	4770      	bx	lr

08002ece <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002ed2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002ed4:	604b      	str	r3, [r1, #4]
}
 8002ed6:	4770      	bx	lr

08002ed8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002ed8:	2001      	movs	r0, #1
 8002eda:	4770      	bx	lr

08002edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002edc:	2000      	movs	r0, #0
 8002ede:	4770      	bx	lr

08002ee0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <SystemInit+0x40>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <SystemInit+0x44>)
 8002eee:	400a      	ands	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002ef8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002efc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f04:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002f0c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002f0e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f12:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <SystemInit+0x48>)
 8002f1a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	f8ff0000 	.word	0xf8ff0000
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f2c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f2e:	e003      	b.n	8002f38 <LoopCopyDataInit>

08002f30 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f32:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f34:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f36:	3104      	adds	r1, #4

08002f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f38:	480a      	ldr	r0, [pc, #40]	; (8002f64 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002f3c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f3e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f40:	d3f6      	bcc.n	8002f30 <CopyDataInit>
  ldr r2, =_sbss
 8002f42:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002f44:	e002      	b.n	8002f4c <LoopFillZerobss>

08002f46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002f48:	f842 3b04 	str.w	r3, [r2], #4

08002f4c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002f4e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002f50:	d3f9      	bcc.n	8002f46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f52:	f7ff ffc5 	bl	8002ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f56:	f000 f815 	bl	8002f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f5a:	f7ff fd8b 	bl	8002a74 <main>
  bx lr
 8002f5e:	4770      	bx	lr
  ldr r3, =_sidata
 8002f60:	08006364 	.word	0x08006364
  ldr r0, =_sdata
 8002f64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f68:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002f6c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002f70:	20000320 	.word	0x20000320

08002f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f74:	e7fe      	b.n	8002f74 <ADC1_2_IRQHandler>
	...

08002f78 <__errno>:
 8002f78:	4b01      	ldr	r3, [pc, #4]	; (8002f80 <__errno+0x8>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	2000000c 	.word	0x2000000c

08002f84 <__libc_init_array>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	2600      	movs	r6, #0
 8002f88:	4d0c      	ldr	r5, [pc, #48]	; (8002fbc <__libc_init_array+0x38>)
 8002f8a:	4c0d      	ldr	r4, [pc, #52]	; (8002fc0 <__libc_init_array+0x3c>)
 8002f8c:	1b64      	subs	r4, r4, r5
 8002f8e:	10a4      	asrs	r4, r4, #2
 8002f90:	42a6      	cmp	r6, r4
 8002f92:	d109      	bne.n	8002fa8 <__libc_init_array+0x24>
 8002f94:	f002 ff10 	bl	8005db8 <_init>
 8002f98:	2600      	movs	r6, #0
 8002f9a:	4d0a      	ldr	r5, [pc, #40]	; (8002fc4 <__libc_init_array+0x40>)
 8002f9c:	4c0a      	ldr	r4, [pc, #40]	; (8002fc8 <__libc_init_array+0x44>)
 8002f9e:	1b64      	subs	r4, r4, r5
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	42a6      	cmp	r6, r4
 8002fa4:	d105      	bne.n	8002fb2 <__libc_init_array+0x2e>
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fac:	4798      	blx	r3
 8002fae:	3601      	adds	r6, #1
 8002fb0:	e7ee      	b.n	8002f90 <__libc_init_array+0xc>
 8002fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb6:	4798      	blx	r3
 8002fb8:	3601      	adds	r6, #1
 8002fba:	e7f2      	b.n	8002fa2 <__libc_init_array+0x1e>
 8002fbc:	0800635c 	.word	0x0800635c
 8002fc0:	0800635c 	.word	0x0800635c
 8002fc4:	0800635c 	.word	0x0800635c
 8002fc8:	08006360 	.word	0x08006360

08002fcc <memset>:
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4402      	add	r2, r0
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <memset+0xa>
 8002fd4:	4770      	bx	lr
 8002fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fda:	e7f9      	b.n	8002fd0 <memset+0x4>

08002fdc <__cvt>:
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe2:	461f      	mov	r7, r3
 8002fe4:	bfbb      	ittet	lt
 8002fe6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002fea:	461f      	movlt	r7, r3
 8002fec:	2300      	movge	r3, #0
 8002fee:	232d      	movlt	r3, #45	; 0x2d
 8002ff0:	b088      	sub	sp, #32
 8002ff2:	4614      	mov	r4, r2
 8002ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002ff6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002ff8:	7013      	strb	r3, [r2, #0]
 8002ffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ffc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003000:	f023 0820 	bic.w	r8, r3, #32
 8003004:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003008:	d005      	beq.n	8003016 <__cvt+0x3a>
 800300a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800300e:	d100      	bne.n	8003012 <__cvt+0x36>
 8003010:	3501      	adds	r5, #1
 8003012:	2302      	movs	r3, #2
 8003014:	e000      	b.n	8003018 <__cvt+0x3c>
 8003016:	2303      	movs	r3, #3
 8003018:	aa07      	add	r2, sp, #28
 800301a:	9204      	str	r2, [sp, #16]
 800301c:	aa06      	add	r2, sp, #24
 800301e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003022:	e9cd 3500 	strd	r3, r5, [sp]
 8003026:	4622      	mov	r2, r4
 8003028:	463b      	mov	r3, r7
 800302a:	f000 fcf9 	bl	8003a20 <_dtoa_r>
 800302e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003032:	4606      	mov	r6, r0
 8003034:	d102      	bne.n	800303c <__cvt+0x60>
 8003036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003038:	07db      	lsls	r3, r3, #31
 800303a:	d522      	bpl.n	8003082 <__cvt+0xa6>
 800303c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003040:	eb06 0905 	add.w	r9, r6, r5
 8003044:	d110      	bne.n	8003068 <__cvt+0x8c>
 8003046:	7833      	ldrb	r3, [r6, #0]
 8003048:	2b30      	cmp	r3, #48	; 0x30
 800304a:	d10a      	bne.n	8003062 <__cvt+0x86>
 800304c:	2200      	movs	r2, #0
 800304e:	2300      	movs	r3, #0
 8003050:	4620      	mov	r0, r4
 8003052:	4639      	mov	r1, r7
 8003054:	f7fd fd5c 	bl	8000b10 <__aeabi_dcmpeq>
 8003058:	b918      	cbnz	r0, 8003062 <__cvt+0x86>
 800305a:	f1c5 0501 	rsb	r5, r5, #1
 800305e:	f8ca 5000 	str.w	r5, [sl]
 8003062:	f8da 3000 	ldr.w	r3, [sl]
 8003066:	4499      	add	r9, r3
 8003068:	2200      	movs	r2, #0
 800306a:	2300      	movs	r3, #0
 800306c:	4620      	mov	r0, r4
 800306e:	4639      	mov	r1, r7
 8003070:	f7fd fd4e 	bl	8000b10 <__aeabi_dcmpeq>
 8003074:	b108      	cbz	r0, 800307a <__cvt+0x9e>
 8003076:	f8cd 901c 	str.w	r9, [sp, #28]
 800307a:	2230      	movs	r2, #48	; 0x30
 800307c:	9b07      	ldr	r3, [sp, #28]
 800307e:	454b      	cmp	r3, r9
 8003080:	d307      	bcc.n	8003092 <__cvt+0xb6>
 8003082:	4630      	mov	r0, r6
 8003084:	9b07      	ldr	r3, [sp, #28]
 8003086:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003088:	1b9b      	subs	r3, r3, r6
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	b008      	add	sp, #32
 800308e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003092:	1c59      	adds	r1, r3, #1
 8003094:	9107      	str	r1, [sp, #28]
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e7f0      	b.n	800307c <__cvt+0xa0>

0800309a <__exponent>:
 800309a:	4603      	mov	r3, r0
 800309c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800309e:	2900      	cmp	r1, #0
 80030a0:	f803 2b02 	strb.w	r2, [r3], #2
 80030a4:	bfb6      	itet	lt
 80030a6:	222d      	movlt	r2, #45	; 0x2d
 80030a8:	222b      	movge	r2, #43	; 0x2b
 80030aa:	4249      	neglt	r1, r1
 80030ac:	2909      	cmp	r1, #9
 80030ae:	7042      	strb	r2, [r0, #1]
 80030b0:	dd2b      	ble.n	800310a <__exponent+0x70>
 80030b2:	f10d 0407 	add.w	r4, sp, #7
 80030b6:	46a4      	mov	ip, r4
 80030b8:	270a      	movs	r7, #10
 80030ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80030be:	460a      	mov	r2, r1
 80030c0:	46a6      	mov	lr, r4
 80030c2:	fb07 1516 	mls	r5, r7, r6, r1
 80030c6:	2a63      	cmp	r2, #99	; 0x63
 80030c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80030cc:	4631      	mov	r1, r6
 80030ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80030d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80030d6:	dcf0      	bgt.n	80030ba <__exponent+0x20>
 80030d8:	3130      	adds	r1, #48	; 0x30
 80030da:	f1ae 0502 	sub.w	r5, lr, #2
 80030de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80030e2:	4629      	mov	r1, r5
 80030e4:	1c44      	adds	r4, r0, #1
 80030e6:	4561      	cmp	r1, ip
 80030e8:	d30a      	bcc.n	8003100 <__exponent+0x66>
 80030ea:	f10d 0209 	add.w	r2, sp, #9
 80030ee:	eba2 020e 	sub.w	r2, r2, lr
 80030f2:	4565      	cmp	r5, ip
 80030f4:	bf88      	it	hi
 80030f6:	2200      	movhi	r2, #0
 80030f8:	4413      	add	r3, r2
 80030fa:	1a18      	subs	r0, r3, r0
 80030fc:	b003      	add	sp, #12
 80030fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003100:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003104:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003108:	e7ed      	b.n	80030e6 <__exponent+0x4c>
 800310a:	2330      	movs	r3, #48	; 0x30
 800310c:	3130      	adds	r1, #48	; 0x30
 800310e:	7083      	strb	r3, [r0, #2]
 8003110:	70c1      	strb	r1, [r0, #3]
 8003112:	1d03      	adds	r3, r0, #4
 8003114:	e7f1      	b.n	80030fa <__exponent+0x60>
	...

08003118 <_printf_float>:
 8003118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311c:	b091      	sub	sp, #68	; 0x44
 800311e:	460c      	mov	r4, r1
 8003120:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003124:	4616      	mov	r6, r2
 8003126:	461f      	mov	r7, r3
 8003128:	4605      	mov	r5, r0
 800312a:	f001 fa67 	bl	80045fc <_localeconv_r>
 800312e:	6803      	ldr	r3, [r0, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	9309      	str	r3, [sp, #36]	; 0x24
 8003134:	f7fd f80c 	bl	8000150 <strlen>
 8003138:	2300      	movs	r3, #0
 800313a:	930e      	str	r3, [sp, #56]	; 0x38
 800313c:	f8d8 3000 	ldr.w	r3, [r8]
 8003140:	900a      	str	r0, [sp, #40]	; 0x28
 8003142:	3307      	adds	r3, #7
 8003144:	f023 0307 	bic.w	r3, r3, #7
 8003148:	f103 0208 	add.w	r2, r3, #8
 800314c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003150:	f8d4 b000 	ldr.w	fp, [r4]
 8003154:	f8c8 2000 	str.w	r2, [r8]
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003160:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003164:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003168:	930b      	str	r3, [sp, #44]	; 0x2c
 800316a:	f04f 32ff 	mov.w	r2, #4294967295
 800316e:	4640      	mov	r0, r8
 8003170:	4b9c      	ldr	r3, [pc, #624]	; (80033e4 <_printf_float+0x2cc>)
 8003172:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003174:	f7fd fcfe 	bl	8000b74 <__aeabi_dcmpun>
 8003178:	bb70      	cbnz	r0, 80031d8 <_printf_float+0xc0>
 800317a:	f04f 32ff 	mov.w	r2, #4294967295
 800317e:	4640      	mov	r0, r8
 8003180:	4b98      	ldr	r3, [pc, #608]	; (80033e4 <_printf_float+0x2cc>)
 8003182:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003184:	f7fd fcd8 	bl	8000b38 <__aeabi_dcmple>
 8003188:	bb30      	cbnz	r0, 80031d8 <_printf_float+0xc0>
 800318a:	2200      	movs	r2, #0
 800318c:	2300      	movs	r3, #0
 800318e:	4640      	mov	r0, r8
 8003190:	4651      	mov	r1, sl
 8003192:	f7fd fcc7 	bl	8000b24 <__aeabi_dcmplt>
 8003196:	b110      	cbz	r0, 800319e <_printf_float+0x86>
 8003198:	232d      	movs	r3, #45	; 0x2d
 800319a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800319e:	4b92      	ldr	r3, [pc, #584]	; (80033e8 <_printf_float+0x2d0>)
 80031a0:	4892      	ldr	r0, [pc, #584]	; (80033ec <_printf_float+0x2d4>)
 80031a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80031a6:	bf94      	ite	ls
 80031a8:	4698      	movls	r8, r3
 80031aa:	4680      	movhi	r8, r0
 80031ac:	2303      	movs	r3, #3
 80031ae:	f04f 0a00 	mov.w	sl, #0
 80031b2:	6123      	str	r3, [r4, #16]
 80031b4:	f02b 0304 	bic.w	r3, fp, #4
 80031b8:	6023      	str	r3, [r4, #0]
 80031ba:	4633      	mov	r3, r6
 80031bc:	4621      	mov	r1, r4
 80031be:	4628      	mov	r0, r5
 80031c0:	9700      	str	r7, [sp, #0]
 80031c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80031c4:	f000 f9d4 	bl	8003570 <_printf_common>
 80031c8:	3001      	adds	r0, #1
 80031ca:	f040 8090 	bne.w	80032ee <_printf_float+0x1d6>
 80031ce:	f04f 30ff 	mov.w	r0, #4294967295
 80031d2:	b011      	add	sp, #68	; 0x44
 80031d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031d8:	4642      	mov	r2, r8
 80031da:	4653      	mov	r3, sl
 80031dc:	4640      	mov	r0, r8
 80031de:	4651      	mov	r1, sl
 80031e0:	f7fd fcc8 	bl	8000b74 <__aeabi_dcmpun>
 80031e4:	b148      	cbz	r0, 80031fa <_printf_float+0xe2>
 80031e6:	f1ba 0f00 	cmp.w	sl, #0
 80031ea:	bfb8      	it	lt
 80031ec:	232d      	movlt	r3, #45	; 0x2d
 80031ee:	4880      	ldr	r0, [pc, #512]	; (80033f0 <_printf_float+0x2d8>)
 80031f0:	bfb8      	it	lt
 80031f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80031f6:	4b7f      	ldr	r3, [pc, #508]	; (80033f4 <_printf_float+0x2dc>)
 80031f8:	e7d3      	b.n	80031a2 <_printf_float+0x8a>
 80031fa:	6863      	ldr	r3, [r4, #4]
 80031fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	d142      	bne.n	800328a <_printf_float+0x172>
 8003204:	2306      	movs	r3, #6
 8003206:	6063      	str	r3, [r4, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	9206      	str	r2, [sp, #24]
 800320c:	aa0e      	add	r2, sp, #56	; 0x38
 800320e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003212:	aa0d      	add	r2, sp, #52	; 0x34
 8003214:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003218:	9203      	str	r2, [sp, #12]
 800321a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800321e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003222:	6023      	str	r3, [r4, #0]
 8003224:	6863      	ldr	r3, [r4, #4]
 8003226:	4642      	mov	r2, r8
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	4628      	mov	r0, r5
 800322c:	4653      	mov	r3, sl
 800322e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003230:	f7ff fed4 	bl	8002fdc <__cvt>
 8003234:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003236:	4680      	mov	r8, r0
 8003238:	2947      	cmp	r1, #71	; 0x47
 800323a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800323c:	d108      	bne.n	8003250 <_printf_float+0x138>
 800323e:	1cc8      	adds	r0, r1, #3
 8003240:	db02      	blt.n	8003248 <_printf_float+0x130>
 8003242:	6863      	ldr	r3, [r4, #4]
 8003244:	4299      	cmp	r1, r3
 8003246:	dd40      	ble.n	80032ca <_printf_float+0x1b2>
 8003248:	f1a9 0902 	sub.w	r9, r9, #2
 800324c:	fa5f f989 	uxtb.w	r9, r9
 8003250:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003254:	d81f      	bhi.n	8003296 <_printf_float+0x17e>
 8003256:	464a      	mov	r2, r9
 8003258:	3901      	subs	r1, #1
 800325a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800325e:	910d      	str	r1, [sp, #52]	; 0x34
 8003260:	f7ff ff1b 	bl	800309a <__exponent>
 8003264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003266:	4682      	mov	sl, r0
 8003268:	1813      	adds	r3, r2, r0
 800326a:	2a01      	cmp	r2, #1
 800326c:	6123      	str	r3, [r4, #16]
 800326e:	dc02      	bgt.n	8003276 <_printf_float+0x15e>
 8003270:	6822      	ldr	r2, [r4, #0]
 8003272:	07d2      	lsls	r2, r2, #31
 8003274:	d501      	bpl.n	800327a <_printf_float+0x162>
 8003276:	3301      	adds	r3, #1
 8003278:	6123      	str	r3, [r4, #16]
 800327a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800327e:	2b00      	cmp	r3, #0
 8003280:	d09b      	beq.n	80031ba <_printf_float+0xa2>
 8003282:	232d      	movs	r3, #45	; 0x2d
 8003284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003288:	e797      	b.n	80031ba <_printf_float+0xa2>
 800328a:	2947      	cmp	r1, #71	; 0x47
 800328c:	d1bc      	bne.n	8003208 <_printf_float+0xf0>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ba      	bne.n	8003208 <_printf_float+0xf0>
 8003292:	2301      	movs	r3, #1
 8003294:	e7b7      	b.n	8003206 <_printf_float+0xee>
 8003296:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800329a:	d118      	bne.n	80032ce <_printf_float+0x1b6>
 800329c:	2900      	cmp	r1, #0
 800329e:	6863      	ldr	r3, [r4, #4]
 80032a0:	dd0b      	ble.n	80032ba <_printf_float+0x1a2>
 80032a2:	6121      	str	r1, [r4, #16]
 80032a4:	b913      	cbnz	r3, 80032ac <_printf_float+0x194>
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	07d0      	lsls	r0, r2, #31
 80032aa:	d502      	bpl.n	80032b2 <_printf_float+0x19a>
 80032ac:	3301      	adds	r3, #1
 80032ae:	440b      	add	r3, r1
 80032b0:	6123      	str	r3, [r4, #16]
 80032b2:	f04f 0a00 	mov.w	sl, #0
 80032b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80032b8:	e7df      	b.n	800327a <_printf_float+0x162>
 80032ba:	b913      	cbnz	r3, 80032c2 <_printf_float+0x1aa>
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	07d2      	lsls	r2, r2, #31
 80032c0:	d501      	bpl.n	80032c6 <_printf_float+0x1ae>
 80032c2:	3302      	adds	r3, #2
 80032c4:	e7f4      	b.n	80032b0 <_printf_float+0x198>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e7f2      	b.n	80032b0 <_printf_float+0x198>
 80032ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80032ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032d0:	4299      	cmp	r1, r3
 80032d2:	db05      	blt.n	80032e0 <_printf_float+0x1c8>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	6121      	str	r1, [r4, #16]
 80032d8:	07d8      	lsls	r0, r3, #31
 80032da:	d5ea      	bpl.n	80032b2 <_printf_float+0x19a>
 80032dc:	1c4b      	adds	r3, r1, #1
 80032de:	e7e7      	b.n	80032b0 <_printf_float+0x198>
 80032e0:	2900      	cmp	r1, #0
 80032e2:	bfcc      	ite	gt
 80032e4:	2201      	movgt	r2, #1
 80032e6:	f1c1 0202 	rsble	r2, r1, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	e7e0      	b.n	80032b0 <_printf_float+0x198>
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	055a      	lsls	r2, r3, #21
 80032f2:	d407      	bmi.n	8003304 <_printf_float+0x1ec>
 80032f4:	6923      	ldr	r3, [r4, #16]
 80032f6:	4642      	mov	r2, r8
 80032f8:	4631      	mov	r1, r6
 80032fa:	4628      	mov	r0, r5
 80032fc:	47b8      	blx	r7
 80032fe:	3001      	adds	r0, #1
 8003300:	d12b      	bne.n	800335a <_printf_float+0x242>
 8003302:	e764      	b.n	80031ce <_printf_float+0xb6>
 8003304:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003308:	f240 80dd 	bls.w	80034c6 <_printf_float+0x3ae>
 800330c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003310:	2200      	movs	r2, #0
 8003312:	2300      	movs	r3, #0
 8003314:	f7fd fbfc 	bl	8000b10 <__aeabi_dcmpeq>
 8003318:	2800      	cmp	r0, #0
 800331a:	d033      	beq.n	8003384 <_printf_float+0x26c>
 800331c:	2301      	movs	r3, #1
 800331e:	4631      	mov	r1, r6
 8003320:	4628      	mov	r0, r5
 8003322:	4a35      	ldr	r2, [pc, #212]	; (80033f8 <_printf_float+0x2e0>)
 8003324:	47b8      	blx	r7
 8003326:	3001      	adds	r0, #1
 8003328:	f43f af51 	beq.w	80031ce <_printf_float+0xb6>
 800332c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003330:	429a      	cmp	r2, r3
 8003332:	db02      	blt.n	800333a <_printf_float+0x222>
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	07d8      	lsls	r0, r3, #31
 8003338:	d50f      	bpl.n	800335a <_printf_float+0x242>
 800333a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800333e:	4631      	mov	r1, r6
 8003340:	4628      	mov	r0, r5
 8003342:	47b8      	blx	r7
 8003344:	3001      	adds	r0, #1
 8003346:	f43f af42 	beq.w	80031ce <_printf_float+0xb6>
 800334a:	f04f 0800 	mov.w	r8, #0
 800334e:	f104 091a 	add.w	r9, r4, #26
 8003352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003354:	3b01      	subs	r3, #1
 8003356:	4543      	cmp	r3, r8
 8003358:	dc09      	bgt.n	800336e <_printf_float+0x256>
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	079b      	lsls	r3, r3, #30
 800335e:	f100 8102 	bmi.w	8003566 <_printf_float+0x44e>
 8003362:	68e0      	ldr	r0, [r4, #12]
 8003364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003366:	4298      	cmp	r0, r3
 8003368:	bfb8      	it	lt
 800336a:	4618      	movlt	r0, r3
 800336c:	e731      	b.n	80031d2 <_printf_float+0xba>
 800336e:	2301      	movs	r3, #1
 8003370:	464a      	mov	r2, r9
 8003372:	4631      	mov	r1, r6
 8003374:	4628      	mov	r0, r5
 8003376:	47b8      	blx	r7
 8003378:	3001      	adds	r0, #1
 800337a:	f43f af28 	beq.w	80031ce <_printf_float+0xb6>
 800337e:	f108 0801 	add.w	r8, r8, #1
 8003382:	e7e6      	b.n	8003352 <_printf_float+0x23a>
 8003384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003386:	2b00      	cmp	r3, #0
 8003388:	dc38      	bgt.n	80033fc <_printf_float+0x2e4>
 800338a:	2301      	movs	r3, #1
 800338c:	4631      	mov	r1, r6
 800338e:	4628      	mov	r0, r5
 8003390:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <_printf_float+0x2e0>)
 8003392:	47b8      	blx	r7
 8003394:	3001      	adds	r0, #1
 8003396:	f43f af1a 	beq.w	80031ce <_printf_float+0xb6>
 800339a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800339e:	4313      	orrs	r3, r2
 80033a0:	d102      	bne.n	80033a8 <_printf_float+0x290>
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	07d9      	lsls	r1, r3, #31
 80033a6:	d5d8      	bpl.n	800335a <_printf_float+0x242>
 80033a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033ac:	4631      	mov	r1, r6
 80033ae:	4628      	mov	r0, r5
 80033b0:	47b8      	blx	r7
 80033b2:	3001      	adds	r0, #1
 80033b4:	f43f af0b 	beq.w	80031ce <_printf_float+0xb6>
 80033b8:	f04f 0900 	mov.w	r9, #0
 80033bc:	f104 0a1a 	add.w	sl, r4, #26
 80033c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033c2:	425b      	negs	r3, r3
 80033c4:	454b      	cmp	r3, r9
 80033c6:	dc01      	bgt.n	80033cc <_printf_float+0x2b4>
 80033c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033ca:	e794      	b.n	80032f6 <_printf_float+0x1de>
 80033cc:	2301      	movs	r3, #1
 80033ce:	4652      	mov	r2, sl
 80033d0:	4631      	mov	r1, r6
 80033d2:	4628      	mov	r0, r5
 80033d4:	47b8      	blx	r7
 80033d6:	3001      	adds	r0, #1
 80033d8:	f43f aef9 	beq.w	80031ce <_printf_float+0xb6>
 80033dc:	f109 0901 	add.w	r9, r9, #1
 80033e0:	e7ee      	b.n	80033c0 <_printf_float+0x2a8>
 80033e2:	bf00      	nop
 80033e4:	7fefffff 	.word	0x7fefffff
 80033e8:	08005f88 	.word	0x08005f88
 80033ec:	08005f8c 	.word	0x08005f8c
 80033f0:	08005f94 	.word	0x08005f94
 80033f4:	08005f90 	.word	0x08005f90
 80033f8:	08005f98 	.word	0x08005f98
 80033fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003400:	429a      	cmp	r2, r3
 8003402:	bfa8      	it	ge
 8003404:	461a      	movge	r2, r3
 8003406:	2a00      	cmp	r2, #0
 8003408:	4691      	mov	r9, r2
 800340a:	dc37      	bgt.n	800347c <_printf_float+0x364>
 800340c:	f04f 0b00 	mov.w	fp, #0
 8003410:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003414:	f104 021a 	add.w	r2, r4, #26
 8003418:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800341c:	ebaa 0309 	sub.w	r3, sl, r9
 8003420:	455b      	cmp	r3, fp
 8003422:	dc33      	bgt.n	800348c <_printf_float+0x374>
 8003424:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003428:	429a      	cmp	r2, r3
 800342a:	db3b      	blt.n	80034a4 <_printf_float+0x38c>
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	07da      	lsls	r2, r3, #31
 8003430:	d438      	bmi.n	80034a4 <_printf_float+0x38c>
 8003432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003434:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003436:	eba3 020a 	sub.w	r2, r3, sl
 800343a:	eba3 0901 	sub.w	r9, r3, r1
 800343e:	4591      	cmp	r9, r2
 8003440:	bfa8      	it	ge
 8003442:	4691      	movge	r9, r2
 8003444:	f1b9 0f00 	cmp.w	r9, #0
 8003448:	dc34      	bgt.n	80034b4 <_printf_float+0x39c>
 800344a:	f04f 0800 	mov.w	r8, #0
 800344e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003452:	f104 0a1a 	add.w	sl, r4, #26
 8003456:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	eba3 0309 	sub.w	r3, r3, r9
 8003460:	4543      	cmp	r3, r8
 8003462:	f77f af7a 	ble.w	800335a <_printf_float+0x242>
 8003466:	2301      	movs	r3, #1
 8003468:	4652      	mov	r2, sl
 800346a:	4631      	mov	r1, r6
 800346c:	4628      	mov	r0, r5
 800346e:	47b8      	blx	r7
 8003470:	3001      	adds	r0, #1
 8003472:	f43f aeac 	beq.w	80031ce <_printf_float+0xb6>
 8003476:	f108 0801 	add.w	r8, r8, #1
 800347a:	e7ec      	b.n	8003456 <_printf_float+0x33e>
 800347c:	4613      	mov	r3, r2
 800347e:	4631      	mov	r1, r6
 8003480:	4642      	mov	r2, r8
 8003482:	4628      	mov	r0, r5
 8003484:	47b8      	blx	r7
 8003486:	3001      	adds	r0, #1
 8003488:	d1c0      	bne.n	800340c <_printf_float+0x2f4>
 800348a:	e6a0      	b.n	80031ce <_printf_float+0xb6>
 800348c:	2301      	movs	r3, #1
 800348e:	4631      	mov	r1, r6
 8003490:	4628      	mov	r0, r5
 8003492:	920b      	str	r2, [sp, #44]	; 0x2c
 8003494:	47b8      	blx	r7
 8003496:	3001      	adds	r0, #1
 8003498:	f43f ae99 	beq.w	80031ce <_printf_float+0xb6>
 800349c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800349e:	f10b 0b01 	add.w	fp, fp, #1
 80034a2:	e7b9      	b.n	8003418 <_printf_float+0x300>
 80034a4:	4631      	mov	r1, r6
 80034a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034aa:	4628      	mov	r0, r5
 80034ac:	47b8      	blx	r7
 80034ae:	3001      	adds	r0, #1
 80034b0:	d1bf      	bne.n	8003432 <_printf_float+0x31a>
 80034b2:	e68c      	b.n	80031ce <_printf_float+0xb6>
 80034b4:	464b      	mov	r3, r9
 80034b6:	4631      	mov	r1, r6
 80034b8:	4628      	mov	r0, r5
 80034ba:	eb08 020a 	add.w	r2, r8, sl
 80034be:	47b8      	blx	r7
 80034c0:	3001      	adds	r0, #1
 80034c2:	d1c2      	bne.n	800344a <_printf_float+0x332>
 80034c4:	e683      	b.n	80031ce <_printf_float+0xb6>
 80034c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034c8:	2a01      	cmp	r2, #1
 80034ca:	dc01      	bgt.n	80034d0 <_printf_float+0x3b8>
 80034cc:	07db      	lsls	r3, r3, #31
 80034ce:	d537      	bpl.n	8003540 <_printf_float+0x428>
 80034d0:	2301      	movs	r3, #1
 80034d2:	4642      	mov	r2, r8
 80034d4:	4631      	mov	r1, r6
 80034d6:	4628      	mov	r0, r5
 80034d8:	47b8      	blx	r7
 80034da:	3001      	adds	r0, #1
 80034dc:	f43f ae77 	beq.w	80031ce <_printf_float+0xb6>
 80034e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034e4:	4631      	mov	r1, r6
 80034e6:	4628      	mov	r0, r5
 80034e8:	47b8      	blx	r7
 80034ea:	3001      	adds	r0, #1
 80034ec:	f43f ae6f 	beq.w	80031ce <_printf_float+0xb6>
 80034f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034f4:	2200      	movs	r2, #0
 80034f6:	2300      	movs	r3, #0
 80034f8:	f7fd fb0a 	bl	8000b10 <__aeabi_dcmpeq>
 80034fc:	b9d8      	cbnz	r0, 8003536 <_printf_float+0x41e>
 80034fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003500:	f108 0201 	add.w	r2, r8, #1
 8003504:	3b01      	subs	r3, #1
 8003506:	4631      	mov	r1, r6
 8003508:	4628      	mov	r0, r5
 800350a:	47b8      	blx	r7
 800350c:	3001      	adds	r0, #1
 800350e:	d10e      	bne.n	800352e <_printf_float+0x416>
 8003510:	e65d      	b.n	80031ce <_printf_float+0xb6>
 8003512:	2301      	movs	r3, #1
 8003514:	464a      	mov	r2, r9
 8003516:	4631      	mov	r1, r6
 8003518:	4628      	mov	r0, r5
 800351a:	47b8      	blx	r7
 800351c:	3001      	adds	r0, #1
 800351e:	f43f ae56 	beq.w	80031ce <_printf_float+0xb6>
 8003522:	f108 0801 	add.w	r8, r8, #1
 8003526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003528:	3b01      	subs	r3, #1
 800352a:	4543      	cmp	r3, r8
 800352c:	dcf1      	bgt.n	8003512 <_printf_float+0x3fa>
 800352e:	4653      	mov	r3, sl
 8003530:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003534:	e6e0      	b.n	80032f8 <_printf_float+0x1e0>
 8003536:	f04f 0800 	mov.w	r8, #0
 800353a:	f104 091a 	add.w	r9, r4, #26
 800353e:	e7f2      	b.n	8003526 <_printf_float+0x40e>
 8003540:	2301      	movs	r3, #1
 8003542:	4642      	mov	r2, r8
 8003544:	e7df      	b.n	8003506 <_printf_float+0x3ee>
 8003546:	2301      	movs	r3, #1
 8003548:	464a      	mov	r2, r9
 800354a:	4631      	mov	r1, r6
 800354c:	4628      	mov	r0, r5
 800354e:	47b8      	blx	r7
 8003550:	3001      	adds	r0, #1
 8003552:	f43f ae3c 	beq.w	80031ce <_printf_float+0xb6>
 8003556:	f108 0801 	add.w	r8, r8, #1
 800355a:	68e3      	ldr	r3, [r4, #12]
 800355c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800355e:	1a5b      	subs	r3, r3, r1
 8003560:	4543      	cmp	r3, r8
 8003562:	dcf0      	bgt.n	8003546 <_printf_float+0x42e>
 8003564:	e6fd      	b.n	8003362 <_printf_float+0x24a>
 8003566:	f04f 0800 	mov.w	r8, #0
 800356a:	f104 0919 	add.w	r9, r4, #25
 800356e:	e7f4      	b.n	800355a <_printf_float+0x442>

08003570 <_printf_common>:
 8003570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003574:	4616      	mov	r6, r2
 8003576:	4699      	mov	r9, r3
 8003578:	688a      	ldr	r2, [r1, #8]
 800357a:	690b      	ldr	r3, [r1, #16]
 800357c:	4607      	mov	r7, r0
 800357e:	4293      	cmp	r3, r2
 8003580:	bfb8      	it	lt
 8003582:	4613      	movlt	r3, r2
 8003584:	6033      	str	r3, [r6, #0]
 8003586:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800358a:	460c      	mov	r4, r1
 800358c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003590:	b10a      	cbz	r2, 8003596 <_printf_common+0x26>
 8003592:	3301      	adds	r3, #1
 8003594:	6033      	str	r3, [r6, #0]
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	0699      	lsls	r1, r3, #26
 800359a:	bf42      	ittt	mi
 800359c:	6833      	ldrmi	r3, [r6, #0]
 800359e:	3302      	addmi	r3, #2
 80035a0:	6033      	strmi	r3, [r6, #0]
 80035a2:	6825      	ldr	r5, [r4, #0]
 80035a4:	f015 0506 	ands.w	r5, r5, #6
 80035a8:	d106      	bne.n	80035b8 <_printf_common+0x48>
 80035aa:	f104 0a19 	add.w	sl, r4, #25
 80035ae:	68e3      	ldr	r3, [r4, #12]
 80035b0:	6832      	ldr	r2, [r6, #0]
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	42ab      	cmp	r3, r5
 80035b6:	dc28      	bgt.n	800360a <_printf_common+0x9a>
 80035b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035bc:	1e13      	subs	r3, r2, #0
 80035be:	6822      	ldr	r2, [r4, #0]
 80035c0:	bf18      	it	ne
 80035c2:	2301      	movne	r3, #1
 80035c4:	0692      	lsls	r2, r2, #26
 80035c6:	d42d      	bmi.n	8003624 <_printf_common+0xb4>
 80035c8:	4649      	mov	r1, r9
 80035ca:	4638      	mov	r0, r7
 80035cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035d0:	47c0      	blx	r8
 80035d2:	3001      	adds	r0, #1
 80035d4:	d020      	beq.n	8003618 <_printf_common+0xa8>
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	68e5      	ldr	r5, [r4, #12]
 80035da:	f003 0306 	and.w	r3, r3, #6
 80035de:	2b04      	cmp	r3, #4
 80035e0:	bf18      	it	ne
 80035e2:	2500      	movne	r5, #0
 80035e4:	6832      	ldr	r2, [r6, #0]
 80035e6:	f04f 0600 	mov.w	r6, #0
 80035ea:	68a3      	ldr	r3, [r4, #8]
 80035ec:	bf08      	it	eq
 80035ee:	1aad      	subeq	r5, r5, r2
 80035f0:	6922      	ldr	r2, [r4, #16]
 80035f2:	bf08      	it	eq
 80035f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035f8:	4293      	cmp	r3, r2
 80035fa:	bfc4      	itt	gt
 80035fc:	1a9b      	subgt	r3, r3, r2
 80035fe:	18ed      	addgt	r5, r5, r3
 8003600:	341a      	adds	r4, #26
 8003602:	42b5      	cmp	r5, r6
 8003604:	d11a      	bne.n	800363c <_printf_common+0xcc>
 8003606:	2000      	movs	r0, #0
 8003608:	e008      	b.n	800361c <_printf_common+0xac>
 800360a:	2301      	movs	r3, #1
 800360c:	4652      	mov	r2, sl
 800360e:	4649      	mov	r1, r9
 8003610:	4638      	mov	r0, r7
 8003612:	47c0      	blx	r8
 8003614:	3001      	adds	r0, #1
 8003616:	d103      	bne.n	8003620 <_printf_common+0xb0>
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003620:	3501      	adds	r5, #1
 8003622:	e7c4      	b.n	80035ae <_printf_common+0x3e>
 8003624:	2030      	movs	r0, #48	; 0x30
 8003626:	18e1      	adds	r1, r4, r3
 8003628:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003632:	4422      	add	r2, r4
 8003634:	3302      	adds	r3, #2
 8003636:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800363a:	e7c5      	b.n	80035c8 <_printf_common+0x58>
 800363c:	2301      	movs	r3, #1
 800363e:	4622      	mov	r2, r4
 8003640:	4649      	mov	r1, r9
 8003642:	4638      	mov	r0, r7
 8003644:	47c0      	blx	r8
 8003646:	3001      	adds	r0, #1
 8003648:	d0e6      	beq.n	8003618 <_printf_common+0xa8>
 800364a:	3601      	adds	r6, #1
 800364c:	e7d9      	b.n	8003602 <_printf_common+0x92>
	...

08003650 <_printf_i>:
 8003650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003654:	7e0f      	ldrb	r7, [r1, #24]
 8003656:	4691      	mov	r9, r2
 8003658:	2f78      	cmp	r7, #120	; 0x78
 800365a:	4680      	mov	r8, r0
 800365c:	460c      	mov	r4, r1
 800365e:	469a      	mov	sl, r3
 8003660:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003662:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003666:	d807      	bhi.n	8003678 <_printf_i+0x28>
 8003668:	2f62      	cmp	r7, #98	; 0x62
 800366a:	d80a      	bhi.n	8003682 <_printf_i+0x32>
 800366c:	2f00      	cmp	r7, #0
 800366e:	f000 80d9 	beq.w	8003824 <_printf_i+0x1d4>
 8003672:	2f58      	cmp	r7, #88	; 0x58
 8003674:	f000 80a4 	beq.w	80037c0 <_printf_i+0x170>
 8003678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800367c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003680:	e03a      	b.n	80036f8 <_printf_i+0xa8>
 8003682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003686:	2b15      	cmp	r3, #21
 8003688:	d8f6      	bhi.n	8003678 <_printf_i+0x28>
 800368a:	a101      	add	r1, pc, #4	; (adr r1, 8003690 <_printf_i+0x40>)
 800368c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003690:	080036e9 	.word	0x080036e9
 8003694:	080036fd 	.word	0x080036fd
 8003698:	08003679 	.word	0x08003679
 800369c:	08003679 	.word	0x08003679
 80036a0:	08003679 	.word	0x08003679
 80036a4:	08003679 	.word	0x08003679
 80036a8:	080036fd 	.word	0x080036fd
 80036ac:	08003679 	.word	0x08003679
 80036b0:	08003679 	.word	0x08003679
 80036b4:	08003679 	.word	0x08003679
 80036b8:	08003679 	.word	0x08003679
 80036bc:	0800380b 	.word	0x0800380b
 80036c0:	0800372d 	.word	0x0800372d
 80036c4:	080037ed 	.word	0x080037ed
 80036c8:	08003679 	.word	0x08003679
 80036cc:	08003679 	.word	0x08003679
 80036d0:	0800382d 	.word	0x0800382d
 80036d4:	08003679 	.word	0x08003679
 80036d8:	0800372d 	.word	0x0800372d
 80036dc:	08003679 	.word	0x08003679
 80036e0:	08003679 	.word	0x08003679
 80036e4:	080037f5 	.word	0x080037f5
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	1d1a      	adds	r2, r3, #4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	602a      	str	r2, [r5, #0]
 80036f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0a4      	b.n	8003846 <_printf_i+0x1f6>
 80036fc:	6820      	ldr	r0, [r4, #0]
 80036fe:	6829      	ldr	r1, [r5, #0]
 8003700:	0606      	lsls	r6, r0, #24
 8003702:	f101 0304 	add.w	r3, r1, #4
 8003706:	d50a      	bpl.n	800371e <_printf_i+0xce>
 8003708:	680e      	ldr	r6, [r1, #0]
 800370a:	602b      	str	r3, [r5, #0]
 800370c:	2e00      	cmp	r6, #0
 800370e:	da03      	bge.n	8003718 <_printf_i+0xc8>
 8003710:	232d      	movs	r3, #45	; 0x2d
 8003712:	4276      	negs	r6, r6
 8003714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003718:	230a      	movs	r3, #10
 800371a:	485e      	ldr	r0, [pc, #376]	; (8003894 <_printf_i+0x244>)
 800371c:	e019      	b.n	8003752 <_printf_i+0x102>
 800371e:	680e      	ldr	r6, [r1, #0]
 8003720:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003724:	602b      	str	r3, [r5, #0]
 8003726:	bf18      	it	ne
 8003728:	b236      	sxthne	r6, r6
 800372a:	e7ef      	b.n	800370c <_printf_i+0xbc>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	1d19      	adds	r1, r3, #4
 8003732:	6029      	str	r1, [r5, #0]
 8003734:	0601      	lsls	r1, r0, #24
 8003736:	d501      	bpl.n	800373c <_printf_i+0xec>
 8003738:	681e      	ldr	r6, [r3, #0]
 800373a:	e002      	b.n	8003742 <_printf_i+0xf2>
 800373c:	0646      	lsls	r6, r0, #25
 800373e:	d5fb      	bpl.n	8003738 <_printf_i+0xe8>
 8003740:	881e      	ldrh	r6, [r3, #0]
 8003742:	2f6f      	cmp	r7, #111	; 0x6f
 8003744:	bf0c      	ite	eq
 8003746:	2308      	moveq	r3, #8
 8003748:	230a      	movne	r3, #10
 800374a:	4852      	ldr	r0, [pc, #328]	; (8003894 <_printf_i+0x244>)
 800374c:	2100      	movs	r1, #0
 800374e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003752:	6865      	ldr	r5, [r4, #4]
 8003754:	2d00      	cmp	r5, #0
 8003756:	bfa8      	it	ge
 8003758:	6821      	ldrge	r1, [r4, #0]
 800375a:	60a5      	str	r5, [r4, #8]
 800375c:	bfa4      	itt	ge
 800375e:	f021 0104 	bicge.w	r1, r1, #4
 8003762:	6021      	strge	r1, [r4, #0]
 8003764:	b90e      	cbnz	r6, 800376a <_printf_i+0x11a>
 8003766:	2d00      	cmp	r5, #0
 8003768:	d04d      	beq.n	8003806 <_printf_i+0x1b6>
 800376a:	4615      	mov	r5, r2
 800376c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003770:	fb03 6711 	mls	r7, r3, r1, r6
 8003774:	5dc7      	ldrb	r7, [r0, r7]
 8003776:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800377a:	4637      	mov	r7, r6
 800377c:	42bb      	cmp	r3, r7
 800377e:	460e      	mov	r6, r1
 8003780:	d9f4      	bls.n	800376c <_printf_i+0x11c>
 8003782:	2b08      	cmp	r3, #8
 8003784:	d10b      	bne.n	800379e <_printf_i+0x14e>
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	07de      	lsls	r6, r3, #31
 800378a:	d508      	bpl.n	800379e <_printf_i+0x14e>
 800378c:	6923      	ldr	r3, [r4, #16]
 800378e:	6861      	ldr	r1, [r4, #4]
 8003790:	4299      	cmp	r1, r3
 8003792:	bfde      	ittt	le
 8003794:	2330      	movle	r3, #48	; 0x30
 8003796:	f805 3c01 	strble.w	r3, [r5, #-1]
 800379a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800379e:	1b52      	subs	r2, r2, r5
 80037a0:	6122      	str	r2, [r4, #16]
 80037a2:	464b      	mov	r3, r9
 80037a4:	4621      	mov	r1, r4
 80037a6:	4640      	mov	r0, r8
 80037a8:	f8cd a000 	str.w	sl, [sp]
 80037ac:	aa03      	add	r2, sp, #12
 80037ae:	f7ff fedf 	bl	8003570 <_printf_common>
 80037b2:	3001      	adds	r0, #1
 80037b4:	d14c      	bne.n	8003850 <_printf_i+0x200>
 80037b6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ba:	b004      	add	sp, #16
 80037bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c0:	4834      	ldr	r0, [pc, #208]	; (8003894 <_printf_i+0x244>)
 80037c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037c6:	6829      	ldr	r1, [r5, #0]
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80037ce:	6029      	str	r1, [r5, #0]
 80037d0:	061d      	lsls	r5, r3, #24
 80037d2:	d514      	bpl.n	80037fe <_printf_i+0x1ae>
 80037d4:	07df      	lsls	r7, r3, #31
 80037d6:	bf44      	itt	mi
 80037d8:	f043 0320 	orrmi.w	r3, r3, #32
 80037dc:	6023      	strmi	r3, [r4, #0]
 80037de:	b91e      	cbnz	r6, 80037e8 <_printf_i+0x198>
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	f023 0320 	bic.w	r3, r3, #32
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	2310      	movs	r3, #16
 80037ea:	e7af      	b.n	800374c <_printf_i+0xfc>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	f043 0320 	orr.w	r3, r3, #32
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	2378      	movs	r3, #120	; 0x78
 80037f6:	4828      	ldr	r0, [pc, #160]	; (8003898 <_printf_i+0x248>)
 80037f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037fc:	e7e3      	b.n	80037c6 <_printf_i+0x176>
 80037fe:	0659      	lsls	r1, r3, #25
 8003800:	bf48      	it	mi
 8003802:	b2b6      	uxthmi	r6, r6
 8003804:	e7e6      	b.n	80037d4 <_printf_i+0x184>
 8003806:	4615      	mov	r5, r2
 8003808:	e7bb      	b.n	8003782 <_printf_i+0x132>
 800380a:	682b      	ldr	r3, [r5, #0]
 800380c:	6826      	ldr	r6, [r4, #0]
 800380e:	1d18      	adds	r0, r3, #4
 8003810:	6961      	ldr	r1, [r4, #20]
 8003812:	6028      	str	r0, [r5, #0]
 8003814:	0635      	lsls	r5, r6, #24
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	d501      	bpl.n	800381e <_printf_i+0x1ce>
 800381a:	6019      	str	r1, [r3, #0]
 800381c:	e002      	b.n	8003824 <_printf_i+0x1d4>
 800381e:	0670      	lsls	r0, r6, #25
 8003820:	d5fb      	bpl.n	800381a <_printf_i+0x1ca>
 8003822:	8019      	strh	r1, [r3, #0]
 8003824:	2300      	movs	r3, #0
 8003826:	4615      	mov	r5, r2
 8003828:	6123      	str	r3, [r4, #16]
 800382a:	e7ba      	b.n	80037a2 <_printf_i+0x152>
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	2100      	movs	r1, #0
 8003830:	1d1a      	adds	r2, r3, #4
 8003832:	602a      	str	r2, [r5, #0]
 8003834:	681d      	ldr	r5, [r3, #0]
 8003836:	6862      	ldr	r2, [r4, #4]
 8003838:	4628      	mov	r0, r5
 800383a:	f000 feeb 	bl	8004614 <memchr>
 800383e:	b108      	cbz	r0, 8003844 <_printf_i+0x1f4>
 8003840:	1b40      	subs	r0, r0, r5
 8003842:	6060      	str	r0, [r4, #4]
 8003844:	6863      	ldr	r3, [r4, #4]
 8003846:	6123      	str	r3, [r4, #16]
 8003848:	2300      	movs	r3, #0
 800384a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800384e:	e7a8      	b.n	80037a2 <_printf_i+0x152>
 8003850:	462a      	mov	r2, r5
 8003852:	4649      	mov	r1, r9
 8003854:	4640      	mov	r0, r8
 8003856:	6923      	ldr	r3, [r4, #16]
 8003858:	47d0      	blx	sl
 800385a:	3001      	adds	r0, #1
 800385c:	d0ab      	beq.n	80037b6 <_printf_i+0x166>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	079b      	lsls	r3, r3, #30
 8003862:	d413      	bmi.n	800388c <_printf_i+0x23c>
 8003864:	68e0      	ldr	r0, [r4, #12]
 8003866:	9b03      	ldr	r3, [sp, #12]
 8003868:	4298      	cmp	r0, r3
 800386a:	bfb8      	it	lt
 800386c:	4618      	movlt	r0, r3
 800386e:	e7a4      	b.n	80037ba <_printf_i+0x16a>
 8003870:	2301      	movs	r3, #1
 8003872:	4632      	mov	r2, r6
 8003874:	4649      	mov	r1, r9
 8003876:	4640      	mov	r0, r8
 8003878:	47d0      	blx	sl
 800387a:	3001      	adds	r0, #1
 800387c:	d09b      	beq.n	80037b6 <_printf_i+0x166>
 800387e:	3501      	adds	r5, #1
 8003880:	68e3      	ldr	r3, [r4, #12]
 8003882:	9903      	ldr	r1, [sp, #12]
 8003884:	1a5b      	subs	r3, r3, r1
 8003886:	42ab      	cmp	r3, r5
 8003888:	dcf2      	bgt.n	8003870 <_printf_i+0x220>
 800388a:	e7eb      	b.n	8003864 <_printf_i+0x214>
 800388c:	2500      	movs	r5, #0
 800388e:	f104 0619 	add.w	r6, r4, #25
 8003892:	e7f5      	b.n	8003880 <_printf_i+0x230>
 8003894:	08005f9a 	.word	0x08005f9a
 8003898:	08005fab 	.word	0x08005fab

0800389c <sniprintf>:
 800389c:	b40c      	push	{r2, r3}
 800389e:	b530      	push	{r4, r5, lr}
 80038a0:	4b17      	ldr	r3, [pc, #92]	; (8003900 <sniprintf+0x64>)
 80038a2:	1e0c      	subs	r4, r1, #0
 80038a4:	681d      	ldr	r5, [r3, #0]
 80038a6:	b09d      	sub	sp, #116	; 0x74
 80038a8:	da08      	bge.n	80038bc <sniprintf+0x20>
 80038aa:	238b      	movs	r3, #139	; 0x8b
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	602b      	str	r3, [r5, #0]
 80038b2:	b01d      	add	sp, #116	; 0x74
 80038b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038b8:	b002      	add	sp, #8
 80038ba:	4770      	bx	lr
 80038bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80038c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038c4:	bf0c      	ite	eq
 80038c6:	4623      	moveq	r3, r4
 80038c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038cc:	9304      	str	r3, [sp, #16]
 80038ce:	9307      	str	r3, [sp, #28]
 80038d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038d4:	9002      	str	r0, [sp, #8]
 80038d6:	9006      	str	r0, [sp, #24]
 80038d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80038dc:	4628      	mov	r0, r5
 80038de:	ab21      	add	r3, sp, #132	; 0x84
 80038e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80038e2:	a902      	add	r1, sp, #8
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	f001 fb7f 	bl	8004fe8 <_svfiprintf_r>
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	bfbc      	itt	lt
 80038ee:	238b      	movlt	r3, #139	; 0x8b
 80038f0:	602b      	strlt	r3, [r5, #0]
 80038f2:	2c00      	cmp	r4, #0
 80038f4:	d0dd      	beq.n	80038b2 <sniprintf+0x16>
 80038f6:	2200      	movs	r2, #0
 80038f8:	9b02      	ldr	r3, [sp, #8]
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e7d9      	b.n	80038b2 <sniprintf+0x16>
 80038fe:	bf00      	nop
 8003900:	2000000c 	.word	0x2000000c

08003904 <quorem>:
 8003904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003908:	6903      	ldr	r3, [r0, #16]
 800390a:	690c      	ldr	r4, [r1, #16]
 800390c:	4607      	mov	r7, r0
 800390e:	42a3      	cmp	r3, r4
 8003910:	f2c0 8082 	blt.w	8003a18 <quorem+0x114>
 8003914:	3c01      	subs	r4, #1
 8003916:	f100 0514 	add.w	r5, r0, #20
 800391a:	f101 0814 	add.w	r8, r1, #20
 800391e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003928:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800392c:	3301      	adds	r3, #1
 800392e:	429a      	cmp	r2, r3
 8003930:	fbb2 f6f3 	udiv	r6, r2, r3
 8003934:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003938:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800393c:	d331      	bcc.n	80039a2 <quorem+0x9e>
 800393e:	f04f 0e00 	mov.w	lr, #0
 8003942:	4640      	mov	r0, r8
 8003944:	46ac      	mov	ip, r5
 8003946:	46f2      	mov	sl, lr
 8003948:	f850 2b04 	ldr.w	r2, [r0], #4
 800394c:	b293      	uxth	r3, r2
 800394e:	fb06 e303 	mla	r3, r6, r3, lr
 8003952:	0c12      	lsrs	r2, r2, #16
 8003954:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003958:	b29b      	uxth	r3, r3
 800395a:	fb06 e202 	mla	r2, r6, r2, lr
 800395e:	ebaa 0303 	sub.w	r3, sl, r3
 8003962:	f8dc a000 	ldr.w	sl, [ip]
 8003966:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800396a:	fa1f fa8a 	uxth.w	sl, sl
 800396e:	4453      	add	r3, sl
 8003970:	f8dc a000 	ldr.w	sl, [ip]
 8003974:	b292      	uxth	r2, r2
 8003976:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800397a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800397e:	b29b      	uxth	r3, r3
 8003980:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003984:	4581      	cmp	r9, r0
 8003986:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800398a:	f84c 3b04 	str.w	r3, [ip], #4
 800398e:	d2db      	bcs.n	8003948 <quorem+0x44>
 8003990:	f855 300b 	ldr.w	r3, [r5, fp]
 8003994:	b92b      	cbnz	r3, 80039a2 <quorem+0x9e>
 8003996:	9b01      	ldr	r3, [sp, #4]
 8003998:	3b04      	subs	r3, #4
 800399a:	429d      	cmp	r5, r3
 800399c:	461a      	mov	r2, r3
 800399e:	d32f      	bcc.n	8003a00 <quorem+0xfc>
 80039a0:	613c      	str	r4, [r7, #16]
 80039a2:	4638      	mov	r0, r7
 80039a4:	f001 f8d0 	bl	8004b48 <__mcmp>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	db25      	blt.n	80039f8 <quorem+0xf4>
 80039ac:	4628      	mov	r0, r5
 80039ae:	f04f 0c00 	mov.w	ip, #0
 80039b2:	3601      	adds	r6, #1
 80039b4:	f858 1b04 	ldr.w	r1, [r8], #4
 80039b8:	f8d0 e000 	ldr.w	lr, [r0]
 80039bc:	b28b      	uxth	r3, r1
 80039be:	ebac 0303 	sub.w	r3, ip, r3
 80039c2:	fa1f f28e 	uxth.w	r2, lr
 80039c6:	4413      	add	r3, r2
 80039c8:	0c0a      	lsrs	r2, r1, #16
 80039ca:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80039ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039d8:	45c1      	cmp	r9, r8
 80039da:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80039de:	f840 3b04 	str.w	r3, [r0], #4
 80039e2:	d2e7      	bcs.n	80039b4 <quorem+0xb0>
 80039e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80039e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80039ec:	b922      	cbnz	r2, 80039f8 <quorem+0xf4>
 80039ee:	3b04      	subs	r3, #4
 80039f0:	429d      	cmp	r5, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	d30a      	bcc.n	8003a0c <quorem+0x108>
 80039f6:	613c      	str	r4, [r7, #16]
 80039f8:	4630      	mov	r0, r6
 80039fa:	b003      	add	sp, #12
 80039fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	3b04      	subs	r3, #4
 8003a04:	2a00      	cmp	r2, #0
 8003a06:	d1cb      	bne.n	80039a0 <quorem+0x9c>
 8003a08:	3c01      	subs	r4, #1
 8003a0a:	e7c6      	b.n	800399a <quorem+0x96>
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	3b04      	subs	r3, #4
 8003a10:	2a00      	cmp	r2, #0
 8003a12:	d1f0      	bne.n	80039f6 <quorem+0xf2>
 8003a14:	3c01      	subs	r4, #1
 8003a16:	e7eb      	b.n	80039f0 <quorem+0xec>
 8003a18:	2000      	movs	r0, #0
 8003a1a:	e7ee      	b.n	80039fa <quorem+0xf6>
 8003a1c:	0000      	movs	r0, r0
	...

08003a20 <_dtoa_r>:
 8003a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a24:	4616      	mov	r6, r2
 8003a26:	461f      	mov	r7, r3
 8003a28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003a2a:	b099      	sub	sp, #100	; 0x64
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003a32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003a36:	b974      	cbnz	r4, 8003a56 <_dtoa_r+0x36>
 8003a38:	2010      	movs	r0, #16
 8003a3a:	f000 fde3 	bl	8004604 <malloc>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	6268      	str	r0, [r5, #36]	; 0x24
 8003a42:	b920      	cbnz	r0, 8003a4e <_dtoa_r+0x2e>
 8003a44:	21ea      	movs	r1, #234	; 0xea
 8003a46:	4ba8      	ldr	r3, [pc, #672]	; (8003ce8 <_dtoa_r+0x2c8>)
 8003a48:	48a8      	ldr	r0, [pc, #672]	; (8003cec <_dtoa_r+0x2cc>)
 8003a4a:	f001 fbdd 	bl	8005208 <__assert_func>
 8003a4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003a52:	6004      	str	r4, [r0, #0]
 8003a54:	60c4      	str	r4, [r0, #12]
 8003a56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	b151      	cbz	r1, 8003a72 <_dtoa_r+0x52>
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	2301      	movs	r3, #1
 8003a60:	4093      	lsls	r3, r2
 8003a62:	604a      	str	r2, [r1, #4]
 8003a64:	608b      	str	r3, [r1, #8]
 8003a66:	4628      	mov	r0, r5
 8003a68:	f000 fe30 	bl	80046cc <_Bfree>
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	1e3b      	subs	r3, r7, #0
 8003a74:	bfaf      	iteee	ge
 8003a76:	2300      	movge	r3, #0
 8003a78:	2201      	movlt	r2, #1
 8003a7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003a7e:	9305      	strlt	r3, [sp, #20]
 8003a80:	bfa8      	it	ge
 8003a82:	f8c8 3000 	strge.w	r3, [r8]
 8003a86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003a8a:	4b99      	ldr	r3, [pc, #612]	; (8003cf0 <_dtoa_r+0x2d0>)
 8003a8c:	bfb8      	it	lt
 8003a8e:	f8c8 2000 	strlt.w	r2, [r8]
 8003a92:	ea33 0309 	bics.w	r3, r3, r9
 8003a96:	d119      	bne.n	8003acc <_dtoa_r+0xac>
 8003a98:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003aa4:	4333      	orrs	r3, r6
 8003aa6:	f000 857f 	beq.w	80045a8 <_dtoa_r+0xb88>
 8003aaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003aac:	b953      	cbnz	r3, 8003ac4 <_dtoa_r+0xa4>
 8003aae:	4b91      	ldr	r3, [pc, #580]	; (8003cf4 <_dtoa_r+0x2d4>)
 8003ab0:	e022      	b.n	8003af8 <_dtoa_r+0xd8>
 8003ab2:	4b91      	ldr	r3, [pc, #580]	; (8003cf8 <_dtoa_r+0x2d8>)
 8003ab4:	9303      	str	r3, [sp, #12]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	9803      	ldr	r0, [sp, #12]
 8003abe:	b019      	add	sp, #100	; 0x64
 8003ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac4:	4b8b      	ldr	r3, [pc, #556]	; (8003cf4 <_dtoa_r+0x2d4>)
 8003ac6:	9303      	str	r3, [sp, #12]
 8003ac8:	3303      	adds	r3, #3
 8003aca:	e7f5      	b.n	8003ab8 <_dtoa_r+0x98>
 8003acc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003ad0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2300      	movs	r3, #0
 8003adc:	f7fd f818 	bl	8000b10 <__aeabi_dcmpeq>
 8003ae0:	4680      	mov	r8, r0
 8003ae2:	b158      	cbz	r0, 8003afc <_dtoa_r+0xdc>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8558 	beq.w	80045a2 <_dtoa_r+0xb82>
 8003af2:	4882      	ldr	r0, [pc, #520]	; (8003cfc <_dtoa_r+0x2dc>)
 8003af4:	6018      	str	r0, [r3, #0]
 8003af6:	1e43      	subs	r3, r0, #1
 8003af8:	9303      	str	r3, [sp, #12]
 8003afa:	e7df      	b.n	8003abc <_dtoa_r+0x9c>
 8003afc:	ab16      	add	r3, sp, #88	; 0x58
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	ab17      	add	r3, sp, #92	; 0x5c
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	4628      	mov	r0, r5
 8003b06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003b0a:	f001 f8c5 	bl	8004c98 <__d2b>
 8003b0e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003b12:	4683      	mov	fp, r0
 8003b14:	2c00      	cmp	r4, #0
 8003b16:	d07f      	beq.n	8003c18 <_dtoa_r+0x1f8>
 8003b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b1e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b26:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003b2a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003b2e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003b32:	2200      	movs	r2, #0
 8003b34:	4b72      	ldr	r3, [pc, #456]	; (8003d00 <_dtoa_r+0x2e0>)
 8003b36:	f7fc fbcb 	bl	80002d0 <__aeabi_dsub>
 8003b3a:	a365      	add	r3, pc, #404	; (adr r3, 8003cd0 <_dtoa_r+0x2b0>)
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f7fc fd7e 	bl	8000640 <__aeabi_dmul>
 8003b44:	a364      	add	r3, pc, #400	; (adr r3, 8003cd8 <_dtoa_r+0x2b8>)
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	f7fc fbc3 	bl	80002d4 <__adddf3>
 8003b4e:	4606      	mov	r6, r0
 8003b50:	4620      	mov	r0, r4
 8003b52:	460f      	mov	r7, r1
 8003b54:	f7fc fd0a 	bl	800056c <__aeabi_i2d>
 8003b58:	a361      	add	r3, pc, #388	; (adr r3, 8003ce0 <_dtoa_r+0x2c0>)
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	f7fc fd6f 	bl	8000640 <__aeabi_dmul>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4630      	mov	r0, r6
 8003b68:	4639      	mov	r1, r7
 8003b6a:	f7fc fbb3 	bl	80002d4 <__adddf3>
 8003b6e:	4606      	mov	r6, r0
 8003b70:	460f      	mov	r7, r1
 8003b72:	f7fd f815 	bl	8000ba0 <__aeabi_d2iz>
 8003b76:	2200      	movs	r2, #0
 8003b78:	4682      	mov	sl, r0
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	4639      	mov	r1, r7
 8003b80:	f7fc ffd0 	bl	8000b24 <__aeabi_dcmplt>
 8003b84:	b148      	cbz	r0, 8003b9a <_dtoa_r+0x17a>
 8003b86:	4650      	mov	r0, sl
 8003b88:	f7fc fcf0 	bl	800056c <__aeabi_i2d>
 8003b8c:	4632      	mov	r2, r6
 8003b8e:	463b      	mov	r3, r7
 8003b90:	f7fc ffbe 	bl	8000b10 <__aeabi_dcmpeq>
 8003b94:	b908      	cbnz	r0, 8003b9a <_dtoa_r+0x17a>
 8003b96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b9a:	f1ba 0f16 	cmp.w	sl, #22
 8003b9e:	d858      	bhi.n	8003c52 <_dtoa_r+0x232>
 8003ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ba4:	4b57      	ldr	r3, [pc, #348]	; (8003d04 <_dtoa_r+0x2e4>)
 8003ba6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f7fc ffb9 	bl	8000b24 <__aeabi_dcmplt>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d04f      	beq.n	8003c56 <_dtoa_r+0x236>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003bbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8003bbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003bc0:	1b1c      	subs	r4, r3, r4
 8003bc2:	1e63      	subs	r3, r4, #1
 8003bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc6:	bf49      	itett	mi
 8003bc8:	f1c4 0301 	rsbmi	r3, r4, #1
 8003bcc:	2300      	movpl	r3, #0
 8003bce:	9306      	strmi	r3, [sp, #24]
 8003bd0:	2300      	movmi	r3, #0
 8003bd2:	bf54      	ite	pl
 8003bd4:	9306      	strpl	r3, [sp, #24]
 8003bd6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003bd8:	f1ba 0f00 	cmp.w	sl, #0
 8003bdc:	db3d      	blt.n	8003c5a <_dtoa_r+0x23a>
 8003bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003be4:	4453      	add	r3, sl
 8003be6:	9309      	str	r3, [sp, #36]	; 0x24
 8003be8:	2300      	movs	r3, #0
 8003bea:	930a      	str	r3, [sp, #40]	; 0x28
 8003bec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bee:	2b09      	cmp	r3, #9
 8003bf0:	f200 808c 	bhi.w	8003d0c <_dtoa_r+0x2ec>
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	bfc4      	itt	gt
 8003bf8:	3b04      	subgt	r3, #4
 8003bfa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bfe:	bfc8      	it	gt
 8003c00:	2400      	movgt	r4, #0
 8003c02:	f1a3 0302 	sub.w	r3, r3, #2
 8003c06:	bfd8      	it	le
 8003c08:	2401      	movle	r4, #1
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	f200 808a 	bhi.w	8003d24 <_dtoa_r+0x304>
 8003c10:	e8df f003 	tbb	[pc, r3]
 8003c14:	5b4d4f2d 	.word	0x5b4d4f2d
 8003c18:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003c1c:	441c      	add	r4, r3
 8003c1e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	bfc3      	ittte	gt
 8003c26:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003c2a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003c2e:	fa09 f303 	lslgt.w	r3, r9, r3
 8003c32:	f1c3 0320 	rsble	r3, r3, #32
 8003c36:	bfc6      	itte	gt
 8003c38:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003c3c:	4318      	orrgt	r0, r3
 8003c3e:	fa06 f003 	lslle.w	r0, r6, r3
 8003c42:	f7fc fc83 	bl	800054c <__aeabi_ui2d>
 8003c46:	2301      	movs	r3, #1
 8003c48:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003c4c:	3c01      	subs	r4, #1
 8003c4e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003c50:	e76f      	b.n	8003b32 <_dtoa_r+0x112>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e7b2      	b.n	8003bbc <_dtoa_r+0x19c>
 8003c56:	900f      	str	r0, [sp, #60]	; 0x3c
 8003c58:	e7b1      	b.n	8003bbe <_dtoa_r+0x19e>
 8003c5a:	9b06      	ldr	r3, [sp, #24]
 8003c5c:	eba3 030a 	sub.w	r3, r3, sl
 8003c60:	9306      	str	r3, [sp, #24]
 8003c62:	f1ca 0300 	rsb	r3, sl, #0
 8003c66:	930a      	str	r3, [sp, #40]	; 0x28
 8003c68:	2300      	movs	r3, #0
 8003c6a:	930e      	str	r3, [sp, #56]	; 0x38
 8003c6c:	e7be      	b.n	8003bec <_dtoa_r+0x1cc>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	dc58      	bgt.n	8003d2a <_dtoa_r+0x30a>
 8003c78:	f04f 0901 	mov.w	r9, #1
 8003c7c:	464b      	mov	r3, r9
 8003c7e:	f8cd 9020 	str.w	r9, [sp, #32]
 8003c82:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003c86:	2200      	movs	r2, #0
 8003c88:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003c8a:	6042      	str	r2, [r0, #4]
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	f102 0614 	add.w	r6, r2, #20
 8003c92:	429e      	cmp	r6, r3
 8003c94:	6841      	ldr	r1, [r0, #4]
 8003c96:	d94e      	bls.n	8003d36 <_dtoa_r+0x316>
 8003c98:	4628      	mov	r0, r5
 8003c9a:	f000 fcd7 	bl	800464c <_Balloc>
 8003c9e:	9003      	str	r0, [sp, #12]
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d14c      	bne.n	8003d3e <_dtoa_r+0x31e>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <_dtoa_r+0x2e8>)
 8003cac:	e6cc      	b.n	8003a48 <_dtoa_r+0x28>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e7de      	b.n	8003c70 <_dtoa_r+0x250>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003cb8:	eb0a 0903 	add.w	r9, sl, r3
 8003cbc:	f109 0301 	add.w	r3, r9, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	9308      	str	r3, [sp, #32]
 8003cc4:	bfb8      	it	lt
 8003cc6:	2301      	movlt	r3, #1
 8003cc8:	e7dd      	b.n	8003c86 <_dtoa_r+0x266>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e7f2      	b.n	8003cb4 <_dtoa_r+0x294>
 8003cce:	bf00      	nop
 8003cd0:	636f4361 	.word	0x636f4361
 8003cd4:	3fd287a7 	.word	0x3fd287a7
 8003cd8:	8b60c8b3 	.word	0x8b60c8b3
 8003cdc:	3fc68a28 	.word	0x3fc68a28
 8003ce0:	509f79fb 	.word	0x509f79fb
 8003ce4:	3fd34413 	.word	0x3fd34413
 8003ce8:	08005fc9 	.word	0x08005fc9
 8003cec:	08005fe0 	.word	0x08005fe0
 8003cf0:	7ff00000 	.word	0x7ff00000
 8003cf4:	08005fc5 	.word	0x08005fc5
 8003cf8:	08005fbc 	.word	0x08005fbc
 8003cfc:	08005f99 	.word	0x08005f99
 8003d00:	3ff80000 	.word	0x3ff80000
 8003d04:	080060d0 	.word	0x080060d0
 8003d08:	0800603b 	.word	0x0800603b
 8003d0c:	2401      	movs	r4, #1
 8003d0e:	2300      	movs	r3, #0
 8003d10:	940b      	str	r4, [sp, #44]	; 0x2c
 8003d12:	9322      	str	r3, [sp, #136]	; 0x88
 8003d14:	f04f 39ff 	mov.w	r9, #4294967295
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2312      	movs	r3, #18
 8003d1c:	f8cd 9020 	str.w	r9, [sp, #32]
 8003d20:	9223      	str	r2, [sp, #140]	; 0x8c
 8003d22:	e7b0      	b.n	8003c86 <_dtoa_r+0x266>
 8003d24:	2301      	movs	r3, #1
 8003d26:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d28:	e7f4      	b.n	8003d14 <_dtoa_r+0x2f4>
 8003d2a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003d2e:	464b      	mov	r3, r9
 8003d30:	f8cd 9020 	str.w	r9, [sp, #32]
 8003d34:	e7a7      	b.n	8003c86 <_dtoa_r+0x266>
 8003d36:	3101      	adds	r1, #1
 8003d38:	6041      	str	r1, [r0, #4]
 8003d3a:	0052      	lsls	r2, r2, #1
 8003d3c:	e7a7      	b.n	8003c8e <_dtoa_r+0x26e>
 8003d3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d40:	9a03      	ldr	r2, [sp, #12]
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	9b08      	ldr	r3, [sp, #32]
 8003d46:	2b0e      	cmp	r3, #14
 8003d48:	f200 80a8 	bhi.w	8003e9c <_dtoa_r+0x47c>
 8003d4c:	2c00      	cmp	r4, #0
 8003d4e:	f000 80a5 	beq.w	8003e9c <_dtoa_r+0x47c>
 8003d52:	f1ba 0f00 	cmp.w	sl, #0
 8003d56:	dd34      	ble.n	8003dc2 <_dtoa_r+0x3a2>
 8003d58:	4a9a      	ldr	r2, [pc, #616]	; (8003fc4 <_dtoa_r+0x5a4>)
 8003d5a:	f00a 030f 	and.w	r3, sl, #15
 8003d5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003d62:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003d66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003d6e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003d72:	d016      	beq.n	8003da2 <_dtoa_r+0x382>
 8003d74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d78:	4b93      	ldr	r3, [pc, #588]	; (8003fc8 <_dtoa_r+0x5a8>)
 8003d7a:	2703      	movs	r7, #3
 8003d7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d80:	f7fc fd88 	bl	8000894 <__aeabi_ddiv>
 8003d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d88:	f004 040f 	and.w	r4, r4, #15
 8003d8c:	4e8e      	ldr	r6, [pc, #568]	; (8003fc8 <_dtoa_r+0x5a8>)
 8003d8e:	b954      	cbnz	r4, 8003da6 <_dtoa_r+0x386>
 8003d90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d98:	f7fc fd7c 	bl	8000894 <__aeabi_ddiv>
 8003d9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003da0:	e029      	b.n	8003df6 <_dtoa_r+0x3d6>
 8003da2:	2702      	movs	r7, #2
 8003da4:	e7f2      	b.n	8003d8c <_dtoa_r+0x36c>
 8003da6:	07e1      	lsls	r1, r4, #31
 8003da8:	d508      	bpl.n	8003dbc <_dtoa_r+0x39c>
 8003daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003dae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003db2:	f7fc fc45 	bl	8000640 <__aeabi_dmul>
 8003db6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003dba:	3701      	adds	r7, #1
 8003dbc:	1064      	asrs	r4, r4, #1
 8003dbe:	3608      	adds	r6, #8
 8003dc0:	e7e5      	b.n	8003d8e <_dtoa_r+0x36e>
 8003dc2:	f000 80a5 	beq.w	8003f10 <_dtoa_r+0x4f0>
 8003dc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003dca:	f1ca 0400 	rsb	r4, sl, #0
 8003dce:	4b7d      	ldr	r3, [pc, #500]	; (8003fc4 <_dtoa_r+0x5a4>)
 8003dd0:	f004 020f 	and.w	r2, r4, #15
 8003dd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f7fc fc30 	bl	8000640 <__aeabi_dmul>
 8003de0:	2702      	movs	r7, #2
 8003de2:	2300      	movs	r3, #0
 8003de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003de8:	4e77      	ldr	r6, [pc, #476]	; (8003fc8 <_dtoa_r+0x5a8>)
 8003dea:	1124      	asrs	r4, r4, #4
 8003dec:	2c00      	cmp	r4, #0
 8003dee:	f040 8084 	bne.w	8003efa <_dtoa_r+0x4da>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1d2      	bne.n	8003d9c <_dtoa_r+0x37c>
 8003df6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 808b 	beq.w	8003f14 <_dtoa_r+0x4f4>
 8003dfe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003e02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003e06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	4b6f      	ldr	r3, [pc, #444]	; (8003fcc <_dtoa_r+0x5ac>)
 8003e0e:	f7fc fe89 	bl	8000b24 <__aeabi_dcmplt>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d07e      	beq.n	8003f14 <_dtoa_r+0x4f4>
 8003e16:	9b08      	ldr	r3, [sp, #32]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d07b      	beq.n	8003f14 <_dtoa_r+0x4f4>
 8003e1c:	f1b9 0f00 	cmp.w	r9, #0
 8003e20:	dd38      	ble.n	8003e94 <_dtoa_r+0x474>
 8003e22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e26:	2200      	movs	r2, #0
 8003e28:	4b69      	ldr	r3, [pc, #420]	; (8003fd0 <_dtoa_r+0x5b0>)
 8003e2a:	f7fc fc09 	bl	8000640 <__aeabi_dmul>
 8003e2e:	464c      	mov	r4, r9
 8003e30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e34:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003e38:	3701      	adds	r7, #1
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	f7fc fb96 	bl	800056c <__aeabi_i2d>
 8003e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e44:	f7fc fbfc 	bl	8000640 <__aeabi_dmul>
 8003e48:	2200      	movs	r2, #0
 8003e4a:	4b62      	ldr	r3, [pc, #392]	; (8003fd4 <_dtoa_r+0x5b4>)
 8003e4c:	f7fc fa42 	bl	80002d4 <__adddf3>
 8003e50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003e54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e58:	9611      	str	r6, [sp, #68]	; 0x44
 8003e5a:	2c00      	cmp	r4, #0
 8003e5c:	d15d      	bne.n	8003f1a <_dtoa_r+0x4fa>
 8003e5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e62:	2200      	movs	r2, #0
 8003e64:	4b5c      	ldr	r3, [pc, #368]	; (8003fd8 <_dtoa_r+0x5b8>)
 8003e66:	f7fc fa33 	bl	80002d0 <__aeabi_dsub>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e72:	4633      	mov	r3, r6
 8003e74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e76:	f7fc fe73 	bl	8000b60 <__aeabi_dcmpgt>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	f040 829c 	bne.w	80043b8 <_dtoa_r+0x998>
 8003e80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e86:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003e8a:	f7fc fe4b 	bl	8000b24 <__aeabi_dcmplt>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	f040 8290 	bne.w	80043b4 <_dtoa_r+0x994>
 8003e94:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003e98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003e9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f2c0 8152 	blt.w	8004148 <_dtoa_r+0x728>
 8003ea4:	f1ba 0f0e 	cmp.w	sl, #14
 8003ea8:	f300 814e 	bgt.w	8004148 <_dtoa_r+0x728>
 8003eac:	4b45      	ldr	r3, [pc, #276]	; (8003fc4 <_dtoa_r+0x5a4>)
 8003eae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003eb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003eb6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003eba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f280 80db 	bge.w	8004078 <_dtoa_r+0x658>
 8003ec2:	9b08      	ldr	r3, [sp, #32]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f300 80d7 	bgt.w	8004078 <_dtoa_r+0x658>
 8003eca:	f040 8272 	bne.w	80043b2 <_dtoa_r+0x992>
 8003ece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4b40      	ldr	r3, [pc, #256]	; (8003fd8 <_dtoa_r+0x5b8>)
 8003ed6:	f7fc fbb3 	bl	8000640 <__aeabi_dmul>
 8003eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ede:	f7fc fe35 	bl	8000b4c <__aeabi_dcmpge>
 8003ee2:	9c08      	ldr	r4, [sp, #32]
 8003ee4:	4626      	mov	r6, r4
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	f040 8248 	bne.w	800437c <_dtoa_r+0x95c>
 8003eec:	2331      	movs	r3, #49	; 0x31
 8003eee:	9f03      	ldr	r7, [sp, #12]
 8003ef0:	f10a 0a01 	add.w	sl, sl, #1
 8003ef4:	f807 3b01 	strb.w	r3, [r7], #1
 8003ef8:	e244      	b.n	8004384 <_dtoa_r+0x964>
 8003efa:	07e2      	lsls	r2, r4, #31
 8003efc:	d505      	bpl.n	8003f0a <_dtoa_r+0x4ea>
 8003efe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003f02:	f7fc fb9d 	bl	8000640 <__aeabi_dmul>
 8003f06:	2301      	movs	r3, #1
 8003f08:	3701      	adds	r7, #1
 8003f0a:	1064      	asrs	r4, r4, #1
 8003f0c:	3608      	adds	r6, #8
 8003f0e:	e76d      	b.n	8003dec <_dtoa_r+0x3cc>
 8003f10:	2702      	movs	r7, #2
 8003f12:	e770      	b.n	8003df6 <_dtoa_r+0x3d6>
 8003f14:	46d0      	mov	r8, sl
 8003f16:	9c08      	ldr	r4, [sp, #32]
 8003f18:	e78f      	b.n	8003e3a <_dtoa_r+0x41a>
 8003f1a:	9903      	ldr	r1, [sp, #12]
 8003f1c:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <_dtoa_r+0x5a4>)
 8003f1e:	4421      	add	r1, r4
 8003f20:	9112      	str	r1, [sp, #72]	; 0x48
 8003f22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003f28:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003f2c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f30:	2900      	cmp	r1, #0
 8003f32:	d055      	beq.n	8003fe0 <_dtoa_r+0x5c0>
 8003f34:	2000      	movs	r0, #0
 8003f36:	4929      	ldr	r1, [pc, #164]	; (8003fdc <_dtoa_r+0x5bc>)
 8003f38:	f7fc fcac 	bl	8000894 <__aeabi_ddiv>
 8003f3c:	463b      	mov	r3, r7
 8003f3e:	4632      	mov	r2, r6
 8003f40:	f7fc f9c6 	bl	80002d0 <__aeabi_dsub>
 8003f44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f48:	9f03      	ldr	r7, [sp, #12]
 8003f4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f4e:	f7fc fe27 	bl	8000ba0 <__aeabi_d2iz>
 8003f52:	4604      	mov	r4, r0
 8003f54:	f7fc fb0a 	bl	800056c <__aeabi_i2d>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f60:	f7fc f9b6 	bl	80002d0 <__aeabi_dsub>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	3430      	adds	r4, #48	; 0x30
 8003f6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f72:	f807 4b01 	strb.w	r4, [r7], #1
 8003f76:	f7fc fdd5 	bl	8000b24 <__aeabi_dcmplt>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d174      	bne.n	8004068 <_dtoa_r+0x648>
 8003f7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f82:	2000      	movs	r0, #0
 8003f84:	4911      	ldr	r1, [pc, #68]	; (8003fcc <_dtoa_r+0x5ac>)
 8003f86:	f7fc f9a3 	bl	80002d0 <__aeabi_dsub>
 8003f8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f8e:	f7fc fdc9 	bl	8000b24 <__aeabi_dcmplt>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	f040 80b7 	bne.w	8004106 <_dtoa_r+0x6e6>
 8003f98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f9a:	429f      	cmp	r7, r3
 8003f9c:	f43f af7a 	beq.w	8003e94 <_dtoa_r+0x474>
 8003fa0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <_dtoa_r+0x5b0>)
 8003fa8:	f7fc fb4a 	bl	8000640 <__aeabi_dmul>
 8003fac:	2200      	movs	r2, #0
 8003fae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003fb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <_dtoa_r+0x5b0>)
 8003fb8:	f7fc fb42 	bl	8000640 <__aeabi_dmul>
 8003fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fc0:	e7c3      	b.n	8003f4a <_dtoa_r+0x52a>
 8003fc2:	bf00      	nop
 8003fc4:	080060d0 	.word	0x080060d0
 8003fc8:	080060a8 	.word	0x080060a8
 8003fcc:	3ff00000 	.word	0x3ff00000
 8003fd0:	40240000 	.word	0x40240000
 8003fd4:	401c0000 	.word	0x401c0000
 8003fd8:	40140000 	.word	0x40140000
 8003fdc:	3fe00000 	.word	0x3fe00000
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	4639      	mov	r1, r7
 8003fe4:	f7fc fb2c 	bl	8000640 <__aeabi_dmul>
 8003fe8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003fea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003fee:	9c03      	ldr	r4, [sp, #12]
 8003ff0:	9314      	str	r3, [sp, #80]	; 0x50
 8003ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ff6:	f7fc fdd3 	bl	8000ba0 <__aeabi_d2iz>
 8003ffa:	9015      	str	r0, [sp, #84]	; 0x54
 8003ffc:	f7fc fab6 	bl	800056c <__aeabi_i2d>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004008:	f7fc f962 	bl	80002d0 <__aeabi_dsub>
 800400c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800400e:	4606      	mov	r6, r0
 8004010:	3330      	adds	r3, #48	; 0x30
 8004012:	f804 3b01 	strb.w	r3, [r4], #1
 8004016:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004018:	460f      	mov	r7, r1
 800401a:	429c      	cmp	r4, r3
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	d124      	bne.n	800406c <_dtoa_r+0x64c>
 8004022:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004026:	4bb0      	ldr	r3, [pc, #704]	; (80042e8 <_dtoa_r+0x8c8>)
 8004028:	f7fc f954 	bl	80002d4 <__adddf3>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4630      	mov	r0, r6
 8004032:	4639      	mov	r1, r7
 8004034:	f7fc fd94 	bl	8000b60 <__aeabi_dcmpgt>
 8004038:	2800      	cmp	r0, #0
 800403a:	d163      	bne.n	8004104 <_dtoa_r+0x6e4>
 800403c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004040:	2000      	movs	r0, #0
 8004042:	49a9      	ldr	r1, [pc, #676]	; (80042e8 <_dtoa_r+0x8c8>)
 8004044:	f7fc f944 	bl	80002d0 <__aeabi_dsub>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4630      	mov	r0, r6
 800404e:	4639      	mov	r1, r7
 8004050:	f7fc fd68 	bl	8000b24 <__aeabi_dcmplt>
 8004054:	2800      	cmp	r0, #0
 8004056:	f43f af1d 	beq.w	8003e94 <_dtoa_r+0x474>
 800405a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800405c:	1e7b      	subs	r3, r7, #1
 800405e:	9314      	str	r3, [sp, #80]	; 0x50
 8004060:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004064:	2b30      	cmp	r3, #48	; 0x30
 8004066:	d0f8      	beq.n	800405a <_dtoa_r+0x63a>
 8004068:	46c2      	mov	sl, r8
 800406a:	e03b      	b.n	80040e4 <_dtoa_r+0x6c4>
 800406c:	4b9f      	ldr	r3, [pc, #636]	; (80042ec <_dtoa_r+0x8cc>)
 800406e:	f7fc fae7 	bl	8000640 <__aeabi_dmul>
 8004072:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004076:	e7bc      	b.n	8003ff2 <_dtoa_r+0x5d2>
 8004078:	9f03      	ldr	r7, [sp, #12]
 800407a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800407e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004082:	4640      	mov	r0, r8
 8004084:	4649      	mov	r1, r9
 8004086:	f7fc fc05 	bl	8000894 <__aeabi_ddiv>
 800408a:	f7fc fd89 	bl	8000ba0 <__aeabi_d2iz>
 800408e:	4604      	mov	r4, r0
 8004090:	f7fc fa6c 	bl	800056c <__aeabi_i2d>
 8004094:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004098:	f7fc fad2 	bl	8000640 <__aeabi_dmul>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4640      	mov	r0, r8
 80040a2:	4649      	mov	r1, r9
 80040a4:	f7fc f914 	bl	80002d0 <__aeabi_dsub>
 80040a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80040ac:	f807 6b01 	strb.w	r6, [r7], #1
 80040b0:	9e03      	ldr	r6, [sp, #12]
 80040b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80040b6:	1bbe      	subs	r6, r7, r6
 80040b8:	45b4      	cmp	ip, r6
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	d136      	bne.n	800412e <_dtoa_r+0x70e>
 80040c0:	f7fc f908 	bl	80002d4 <__adddf3>
 80040c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040c8:	4680      	mov	r8, r0
 80040ca:	4689      	mov	r9, r1
 80040cc:	f7fc fd48 	bl	8000b60 <__aeabi_dcmpgt>
 80040d0:	bb58      	cbnz	r0, 800412a <_dtoa_r+0x70a>
 80040d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040d6:	4640      	mov	r0, r8
 80040d8:	4649      	mov	r1, r9
 80040da:	f7fc fd19 	bl	8000b10 <__aeabi_dcmpeq>
 80040de:	b108      	cbz	r0, 80040e4 <_dtoa_r+0x6c4>
 80040e0:	07e1      	lsls	r1, r4, #31
 80040e2:	d422      	bmi.n	800412a <_dtoa_r+0x70a>
 80040e4:	4628      	mov	r0, r5
 80040e6:	4659      	mov	r1, fp
 80040e8:	f000 faf0 	bl	80046cc <_Bfree>
 80040ec:	2300      	movs	r3, #0
 80040ee:	703b      	strb	r3, [r7, #0]
 80040f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80040f2:	f10a 0001 	add.w	r0, sl, #1
 80040f6:	6018      	str	r0, [r3, #0]
 80040f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f43f acde 	beq.w	8003abc <_dtoa_r+0x9c>
 8004100:	601f      	str	r7, [r3, #0]
 8004102:	e4db      	b.n	8003abc <_dtoa_r+0x9c>
 8004104:	4627      	mov	r7, r4
 8004106:	463b      	mov	r3, r7
 8004108:	461f      	mov	r7, r3
 800410a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800410e:	2a39      	cmp	r2, #57	; 0x39
 8004110:	d107      	bne.n	8004122 <_dtoa_r+0x702>
 8004112:	9a03      	ldr	r2, [sp, #12]
 8004114:	429a      	cmp	r2, r3
 8004116:	d1f7      	bne.n	8004108 <_dtoa_r+0x6e8>
 8004118:	2230      	movs	r2, #48	; 0x30
 800411a:	9903      	ldr	r1, [sp, #12]
 800411c:	f108 0801 	add.w	r8, r8, #1
 8004120:	700a      	strb	r2, [r1, #0]
 8004122:	781a      	ldrb	r2, [r3, #0]
 8004124:	3201      	adds	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
 8004128:	e79e      	b.n	8004068 <_dtoa_r+0x648>
 800412a:	46d0      	mov	r8, sl
 800412c:	e7eb      	b.n	8004106 <_dtoa_r+0x6e6>
 800412e:	2200      	movs	r2, #0
 8004130:	4b6e      	ldr	r3, [pc, #440]	; (80042ec <_dtoa_r+0x8cc>)
 8004132:	f7fc fa85 	bl	8000640 <__aeabi_dmul>
 8004136:	2200      	movs	r2, #0
 8004138:	2300      	movs	r3, #0
 800413a:	4680      	mov	r8, r0
 800413c:	4689      	mov	r9, r1
 800413e:	f7fc fce7 	bl	8000b10 <__aeabi_dcmpeq>
 8004142:	2800      	cmp	r0, #0
 8004144:	d09b      	beq.n	800407e <_dtoa_r+0x65e>
 8004146:	e7cd      	b.n	80040e4 <_dtoa_r+0x6c4>
 8004148:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800414a:	2a00      	cmp	r2, #0
 800414c:	f000 80d0 	beq.w	80042f0 <_dtoa_r+0x8d0>
 8004150:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004152:	2a01      	cmp	r2, #1
 8004154:	f300 80ae 	bgt.w	80042b4 <_dtoa_r+0x894>
 8004158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800415a:	2a00      	cmp	r2, #0
 800415c:	f000 80a6 	beq.w	80042ac <_dtoa_r+0x88c>
 8004160:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004164:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004166:	9f06      	ldr	r7, [sp, #24]
 8004168:	9a06      	ldr	r2, [sp, #24]
 800416a:	2101      	movs	r1, #1
 800416c:	441a      	add	r2, r3
 800416e:	9206      	str	r2, [sp, #24]
 8004170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004172:	4628      	mov	r0, r5
 8004174:	441a      	add	r2, r3
 8004176:	9209      	str	r2, [sp, #36]	; 0x24
 8004178:	f000 fb5e 	bl	8004838 <__i2b>
 800417c:	4606      	mov	r6, r0
 800417e:	2f00      	cmp	r7, #0
 8004180:	dd0c      	ble.n	800419c <_dtoa_r+0x77c>
 8004182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	dd09      	ble.n	800419c <_dtoa_r+0x77c>
 8004188:	42bb      	cmp	r3, r7
 800418a:	bfa8      	it	ge
 800418c:	463b      	movge	r3, r7
 800418e:	9a06      	ldr	r2, [sp, #24]
 8004190:	1aff      	subs	r7, r7, r3
 8004192:	1ad2      	subs	r2, r2, r3
 8004194:	9206      	str	r2, [sp, #24]
 8004196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	9309      	str	r3, [sp, #36]	; 0x24
 800419c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800419e:	b1f3      	cbz	r3, 80041de <_dtoa_r+0x7be>
 80041a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80a8 	beq.w	80042f8 <_dtoa_r+0x8d8>
 80041a8:	2c00      	cmp	r4, #0
 80041aa:	dd10      	ble.n	80041ce <_dtoa_r+0x7ae>
 80041ac:	4631      	mov	r1, r6
 80041ae:	4622      	mov	r2, r4
 80041b0:	4628      	mov	r0, r5
 80041b2:	f000 fbff 	bl	80049b4 <__pow5mult>
 80041b6:	465a      	mov	r2, fp
 80041b8:	4601      	mov	r1, r0
 80041ba:	4606      	mov	r6, r0
 80041bc:	4628      	mov	r0, r5
 80041be:	f000 fb51 	bl	8004864 <__multiply>
 80041c2:	4680      	mov	r8, r0
 80041c4:	4659      	mov	r1, fp
 80041c6:	4628      	mov	r0, r5
 80041c8:	f000 fa80 	bl	80046cc <_Bfree>
 80041cc:	46c3      	mov	fp, r8
 80041ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041d0:	1b1a      	subs	r2, r3, r4
 80041d2:	d004      	beq.n	80041de <_dtoa_r+0x7be>
 80041d4:	4659      	mov	r1, fp
 80041d6:	4628      	mov	r0, r5
 80041d8:	f000 fbec 	bl	80049b4 <__pow5mult>
 80041dc:	4683      	mov	fp, r0
 80041de:	2101      	movs	r1, #1
 80041e0:	4628      	mov	r0, r5
 80041e2:	f000 fb29 	bl	8004838 <__i2b>
 80041e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041e8:	4604      	mov	r4, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f340 8086 	ble.w	80042fc <_dtoa_r+0x8dc>
 80041f0:	461a      	mov	r2, r3
 80041f2:	4601      	mov	r1, r0
 80041f4:	4628      	mov	r0, r5
 80041f6:	f000 fbdd 	bl	80049b4 <__pow5mult>
 80041fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041fc:	4604      	mov	r4, r0
 80041fe:	2b01      	cmp	r3, #1
 8004200:	dd7f      	ble.n	8004302 <_dtoa_r+0x8e2>
 8004202:	f04f 0800 	mov.w	r8, #0
 8004206:	6923      	ldr	r3, [r4, #16]
 8004208:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800420c:	6918      	ldr	r0, [r3, #16]
 800420e:	f000 fac5 	bl	800479c <__hi0bits>
 8004212:	f1c0 0020 	rsb	r0, r0, #32
 8004216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004218:	4418      	add	r0, r3
 800421a:	f010 001f 	ands.w	r0, r0, #31
 800421e:	f000 8092 	beq.w	8004346 <_dtoa_r+0x926>
 8004222:	f1c0 0320 	rsb	r3, r0, #32
 8004226:	2b04      	cmp	r3, #4
 8004228:	f340 808a 	ble.w	8004340 <_dtoa_r+0x920>
 800422c:	f1c0 001c 	rsb	r0, r0, #28
 8004230:	9b06      	ldr	r3, [sp, #24]
 8004232:	4407      	add	r7, r0
 8004234:	4403      	add	r3, r0
 8004236:	9306      	str	r3, [sp, #24]
 8004238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800423a:	4403      	add	r3, r0
 800423c:	9309      	str	r3, [sp, #36]	; 0x24
 800423e:	9b06      	ldr	r3, [sp, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	dd05      	ble.n	8004250 <_dtoa_r+0x830>
 8004244:	4659      	mov	r1, fp
 8004246:	461a      	mov	r2, r3
 8004248:	4628      	mov	r0, r5
 800424a:	f000 fc0d 	bl	8004a68 <__lshift>
 800424e:	4683      	mov	fp, r0
 8004250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004252:	2b00      	cmp	r3, #0
 8004254:	dd05      	ble.n	8004262 <_dtoa_r+0x842>
 8004256:	4621      	mov	r1, r4
 8004258:	461a      	mov	r2, r3
 800425a:	4628      	mov	r0, r5
 800425c:	f000 fc04 	bl	8004a68 <__lshift>
 8004260:	4604      	mov	r4, r0
 8004262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d070      	beq.n	800434a <_dtoa_r+0x92a>
 8004268:	4621      	mov	r1, r4
 800426a:	4658      	mov	r0, fp
 800426c:	f000 fc6c 	bl	8004b48 <__mcmp>
 8004270:	2800      	cmp	r0, #0
 8004272:	da6a      	bge.n	800434a <_dtoa_r+0x92a>
 8004274:	2300      	movs	r3, #0
 8004276:	4659      	mov	r1, fp
 8004278:	220a      	movs	r2, #10
 800427a:	4628      	mov	r0, r5
 800427c:	f000 fa48 	bl	8004710 <__multadd>
 8004280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004282:	4683      	mov	fp, r0
 8004284:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8194 	beq.w	80045b6 <_dtoa_r+0xb96>
 800428e:	4631      	mov	r1, r6
 8004290:	2300      	movs	r3, #0
 8004292:	220a      	movs	r2, #10
 8004294:	4628      	mov	r0, r5
 8004296:	f000 fa3b 	bl	8004710 <__multadd>
 800429a:	f1b9 0f00 	cmp.w	r9, #0
 800429e:	4606      	mov	r6, r0
 80042a0:	f300 8093 	bgt.w	80043ca <_dtoa_r+0x9aa>
 80042a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	dc57      	bgt.n	800435a <_dtoa_r+0x93a>
 80042aa:	e08e      	b.n	80043ca <_dtoa_r+0x9aa>
 80042ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80042ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80042b2:	e757      	b.n	8004164 <_dtoa_r+0x744>
 80042b4:	9b08      	ldr	r3, [sp, #32]
 80042b6:	1e5c      	subs	r4, r3, #1
 80042b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042ba:	42a3      	cmp	r3, r4
 80042bc:	bfb7      	itett	lt
 80042be:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80042c0:	1b1c      	subge	r4, r3, r4
 80042c2:	1ae2      	sublt	r2, r4, r3
 80042c4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80042c6:	bfbe      	ittt	lt
 80042c8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80042ca:	189b      	addlt	r3, r3, r2
 80042cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80042ce:	9b08      	ldr	r3, [sp, #32]
 80042d0:	bfb8      	it	lt
 80042d2:	2400      	movlt	r4, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bfbb      	ittet	lt
 80042d8:	9b06      	ldrlt	r3, [sp, #24]
 80042da:	9a08      	ldrlt	r2, [sp, #32]
 80042dc:	9f06      	ldrge	r7, [sp, #24]
 80042de:	1a9f      	sublt	r7, r3, r2
 80042e0:	bfac      	ite	ge
 80042e2:	9b08      	ldrge	r3, [sp, #32]
 80042e4:	2300      	movlt	r3, #0
 80042e6:	e73f      	b.n	8004168 <_dtoa_r+0x748>
 80042e8:	3fe00000 	.word	0x3fe00000
 80042ec:	40240000 	.word	0x40240000
 80042f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80042f2:	9f06      	ldr	r7, [sp, #24]
 80042f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80042f6:	e742      	b.n	800417e <_dtoa_r+0x75e>
 80042f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042fa:	e76b      	b.n	80041d4 <_dtoa_r+0x7b4>
 80042fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042fe:	2b01      	cmp	r3, #1
 8004300:	dc19      	bgt.n	8004336 <_dtoa_r+0x916>
 8004302:	9b04      	ldr	r3, [sp, #16]
 8004304:	b9bb      	cbnz	r3, 8004336 <_dtoa_r+0x916>
 8004306:	9b05      	ldr	r3, [sp, #20]
 8004308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800430c:	b99b      	cbnz	r3, 8004336 <_dtoa_r+0x916>
 800430e:	9b05      	ldr	r3, [sp, #20]
 8004310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004314:	0d1b      	lsrs	r3, r3, #20
 8004316:	051b      	lsls	r3, r3, #20
 8004318:	b183      	cbz	r3, 800433c <_dtoa_r+0x91c>
 800431a:	f04f 0801 	mov.w	r8, #1
 800431e:	9b06      	ldr	r3, [sp, #24]
 8004320:	3301      	adds	r3, #1
 8004322:	9306      	str	r3, [sp, #24]
 8004324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004326:	3301      	adds	r3, #1
 8004328:	9309      	str	r3, [sp, #36]	; 0x24
 800432a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800432c:	2b00      	cmp	r3, #0
 800432e:	f47f af6a 	bne.w	8004206 <_dtoa_r+0x7e6>
 8004332:	2001      	movs	r0, #1
 8004334:	e76f      	b.n	8004216 <_dtoa_r+0x7f6>
 8004336:	f04f 0800 	mov.w	r8, #0
 800433a:	e7f6      	b.n	800432a <_dtoa_r+0x90a>
 800433c:	4698      	mov	r8, r3
 800433e:	e7f4      	b.n	800432a <_dtoa_r+0x90a>
 8004340:	f43f af7d 	beq.w	800423e <_dtoa_r+0x81e>
 8004344:	4618      	mov	r0, r3
 8004346:	301c      	adds	r0, #28
 8004348:	e772      	b.n	8004230 <_dtoa_r+0x810>
 800434a:	9b08      	ldr	r3, [sp, #32]
 800434c:	2b00      	cmp	r3, #0
 800434e:	dc36      	bgt.n	80043be <_dtoa_r+0x99e>
 8004350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004352:	2b02      	cmp	r3, #2
 8004354:	dd33      	ble.n	80043be <_dtoa_r+0x99e>
 8004356:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800435a:	f1b9 0f00 	cmp.w	r9, #0
 800435e:	d10d      	bne.n	800437c <_dtoa_r+0x95c>
 8004360:	4621      	mov	r1, r4
 8004362:	464b      	mov	r3, r9
 8004364:	2205      	movs	r2, #5
 8004366:	4628      	mov	r0, r5
 8004368:	f000 f9d2 	bl	8004710 <__multadd>
 800436c:	4601      	mov	r1, r0
 800436e:	4604      	mov	r4, r0
 8004370:	4658      	mov	r0, fp
 8004372:	f000 fbe9 	bl	8004b48 <__mcmp>
 8004376:	2800      	cmp	r0, #0
 8004378:	f73f adb8 	bgt.w	8003eec <_dtoa_r+0x4cc>
 800437c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800437e:	9f03      	ldr	r7, [sp, #12]
 8004380:	ea6f 0a03 	mvn.w	sl, r3
 8004384:	f04f 0800 	mov.w	r8, #0
 8004388:	4621      	mov	r1, r4
 800438a:	4628      	mov	r0, r5
 800438c:	f000 f99e 	bl	80046cc <_Bfree>
 8004390:	2e00      	cmp	r6, #0
 8004392:	f43f aea7 	beq.w	80040e4 <_dtoa_r+0x6c4>
 8004396:	f1b8 0f00 	cmp.w	r8, #0
 800439a:	d005      	beq.n	80043a8 <_dtoa_r+0x988>
 800439c:	45b0      	cmp	r8, r6
 800439e:	d003      	beq.n	80043a8 <_dtoa_r+0x988>
 80043a0:	4641      	mov	r1, r8
 80043a2:	4628      	mov	r0, r5
 80043a4:	f000 f992 	bl	80046cc <_Bfree>
 80043a8:	4631      	mov	r1, r6
 80043aa:	4628      	mov	r0, r5
 80043ac:	f000 f98e 	bl	80046cc <_Bfree>
 80043b0:	e698      	b.n	80040e4 <_dtoa_r+0x6c4>
 80043b2:	2400      	movs	r4, #0
 80043b4:	4626      	mov	r6, r4
 80043b6:	e7e1      	b.n	800437c <_dtoa_r+0x95c>
 80043b8:	46c2      	mov	sl, r8
 80043ba:	4626      	mov	r6, r4
 80043bc:	e596      	b.n	8003eec <_dtoa_r+0x4cc>
 80043be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80fd 	beq.w	80045c4 <_dtoa_r+0xba4>
 80043ca:	2f00      	cmp	r7, #0
 80043cc:	dd05      	ble.n	80043da <_dtoa_r+0x9ba>
 80043ce:	4631      	mov	r1, r6
 80043d0:	463a      	mov	r2, r7
 80043d2:	4628      	mov	r0, r5
 80043d4:	f000 fb48 	bl	8004a68 <__lshift>
 80043d8:	4606      	mov	r6, r0
 80043da:	f1b8 0f00 	cmp.w	r8, #0
 80043de:	d05c      	beq.n	800449a <_dtoa_r+0xa7a>
 80043e0:	4628      	mov	r0, r5
 80043e2:	6871      	ldr	r1, [r6, #4]
 80043e4:	f000 f932 	bl	800464c <_Balloc>
 80043e8:	4607      	mov	r7, r0
 80043ea:	b928      	cbnz	r0, 80043f8 <_dtoa_r+0x9d8>
 80043ec:	4602      	mov	r2, r0
 80043ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80043f2:	4b7f      	ldr	r3, [pc, #508]	; (80045f0 <_dtoa_r+0xbd0>)
 80043f4:	f7ff bb28 	b.w	8003a48 <_dtoa_r+0x28>
 80043f8:	6932      	ldr	r2, [r6, #16]
 80043fa:	f106 010c 	add.w	r1, r6, #12
 80043fe:	3202      	adds	r2, #2
 8004400:	0092      	lsls	r2, r2, #2
 8004402:	300c      	adds	r0, #12
 8004404:	f000 f914 	bl	8004630 <memcpy>
 8004408:	2201      	movs	r2, #1
 800440a:	4639      	mov	r1, r7
 800440c:	4628      	mov	r0, r5
 800440e:	f000 fb2b 	bl	8004a68 <__lshift>
 8004412:	46b0      	mov	r8, r6
 8004414:	4606      	mov	r6, r0
 8004416:	9b03      	ldr	r3, [sp, #12]
 8004418:	3301      	adds	r3, #1
 800441a:	9308      	str	r3, [sp, #32]
 800441c:	9b03      	ldr	r3, [sp, #12]
 800441e:	444b      	add	r3, r9
 8004420:	930a      	str	r3, [sp, #40]	; 0x28
 8004422:	9b04      	ldr	r3, [sp, #16]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	9309      	str	r3, [sp, #36]	; 0x24
 800442a:	9b08      	ldr	r3, [sp, #32]
 800442c:	4621      	mov	r1, r4
 800442e:	3b01      	subs	r3, #1
 8004430:	4658      	mov	r0, fp
 8004432:	9304      	str	r3, [sp, #16]
 8004434:	f7ff fa66 	bl	8003904 <quorem>
 8004438:	4603      	mov	r3, r0
 800443a:	4641      	mov	r1, r8
 800443c:	3330      	adds	r3, #48	; 0x30
 800443e:	9006      	str	r0, [sp, #24]
 8004440:	4658      	mov	r0, fp
 8004442:	930b      	str	r3, [sp, #44]	; 0x2c
 8004444:	f000 fb80 	bl	8004b48 <__mcmp>
 8004448:	4632      	mov	r2, r6
 800444a:	4681      	mov	r9, r0
 800444c:	4621      	mov	r1, r4
 800444e:	4628      	mov	r0, r5
 8004450:	f000 fb96 	bl	8004b80 <__mdiff>
 8004454:	68c2      	ldr	r2, [r0, #12]
 8004456:	4607      	mov	r7, r0
 8004458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800445a:	bb02      	cbnz	r2, 800449e <_dtoa_r+0xa7e>
 800445c:	4601      	mov	r1, r0
 800445e:	4658      	mov	r0, fp
 8004460:	f000 fb72 	bl	8004b48 <__mcmp>
 8004464:	4602      	mov	r2, r0
 8004466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004468:	4639      	mov	r1, r7
 800446a:	4628      	mov	r0, r5
 800446c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004470:	f000 f92c 	bl	80046cc <_Bfree>
 8004474:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004478:	9f08      	ldr	r7, [sp, #32]
 800447a:	ea43 0102 	orr.w	r1, r3, r2
 800447e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004480:	430b      	orrs	r3, r1
 8004482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004484:	d10d      	bne.n	80044a2 <_dtoa_r+0xa82>
 8004486:	2b39      	cmp	r3, #57	; 0x39
 8004488:	d029      	beq.n	80044de <_dtoa_r+0xabe>
 800448a:	f1b9 0f00 	cmp.w	r9, #0
 800448e:	dd01      	ble.n	8004494 <_dtoa_r+0xa74>
 8004490:	9b06      	ldr	r3, [sp, #24]
 8004492:	3331      	adds	r3, #49	; 0x31
 8004494:	9a04      	ldr	r2, [sp, #16]
 8004496:	7013      	strb	r3, [r2, #0]
 8004498:	e776      	b.n	8004388 <_dtoa_r+0x968>
 800449a:	4630      	mov	r0, r6
 800449c:	e7b9      	b.n	8004412 <_dtoa_r+0x9f2>
 800449e:	2201      	movs	r2, #1
 80044a0:	e7e2      	b.n	8004468 <_dtoa_r+0xa48>
 80044a2:	f1b9 0f00 	cmp.w	r9, #0
 80044a6:	db06      	blt.n	80044b6 <_dtoa_r+0xa96>
 80044a8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80044aa:	ea41 0909 	orr.w	r9, r1, r9
 80044ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044b0:	ea59 0101 	orrs.w	r1, r9, r1
 80044b4:	d120      	bne.n	80044f8 <_dtoa_r+0xad8>
 80044b6:	2a00      	cmp	r2, #0
 80044b8:	ddec      	ble.n	8004494 <_dtoa_r+0xa74>
 80044ba:	4659      	mov	r1, fp
 80044bc:	2201      	movs	r2, #1
 80044be:	4628      	mov	r0, r5
 80044c0:	9308      	str	r3, [sp, #32]
 80044c2:	f000 fad1 	bl	8004a68 <__lshift>
 80044c6:	4621      	mov	r1, r4
 80044c8:	4683      	mov	fp, r0
 80044ca:	f000 fb3d 	bl	8004b48 <__mcmp>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	9b08      	ldr	r3, [sp, #32]
 80044d2:	dc02      	bgt.n	80044da <_dtoa_r+0xaba>
 80044d4:	d1de      	bne.n	8004494 <_dtoa_r+0xa74>
 80044d6:	07da      	lsls	r2, r3, #31
 80044d8:	d5dc      	bpl.n	8004494 <_dtoa_r+0xa74>
 80044da:	2b39      	cmp	r3, #57	; 0x39
 80044dc:	d1d8      	bne.n	8004490 <_dtoa_r+0xa70>
 80044de:	2339      	movs	r3, #57	; 0x39
 80044e0:	9a04      	ldr	r2, [sp, #16]
 80044e2:	7013      	strb	r3, [r2, #0]
 80044e4:	463b      	mov	r3, r7
 80044e6:	461f      	mov	r7, r3
 80044e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	2a39      	cmp	r2, #57	; 0x39
 80044f0:	d050      	beq.n	8004594 <_dtoa_r+0xb74>
 80044f2:	3201      	adds	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	e747      	b.n	8004388 <_dtoa_r+0x968>
 80044f8:	2a00      	cmp	r2, #0
 80044fa:	dd03      	ble.n	8004504 <_dtoa_r+0xae4>
 80044fc:	2b39      	cmp	r3, #57	; 0x39
 80044fe:	d0ee      	beq.n	80044de <_dtoa_r+0xabe>
 8004500:	3301      	adds	r3, #1
 8004502:	e7c7      	b.n	8004494 <_dtoa_r+0xa74>
 8004504:	9a08      	ldr	r2, [sp, #32]
 8004506:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004508:	f802 3c01 	strb.w	r3, [r2, #-1]
 800450c:	428a      	cmp	r2, r1
 800450e:	d02a      	beq.n	8004566 <_dtoa_r+0xb46>
 8004510:	4659      	mov	r1, fp
 8004512:	2300      	movs	r3, #0
 8004514:	220a      	movs	r2, #10
 8004516:	4628      	mov	r0, r5
 8004518:	f000 f8fa 	bl	8004710 <__multadd>
 800451c:	45b0      	cmp	r8, r6
 800451e:	4683      	mov	fp, r0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	f04f 020a 	mov.w	r2, #10
 8004528:	4641      	mov	r1, r8
 800452a:	4628      	mov	r0, r5
 800452c:	d107      	bne.n	800453e <_dtoa_r+0xb1e>
 800452e:	f000 f8ef 	bl	8004710 <__multadd>
 8004532:	4680      	mov	r8, r0
 8004534:	4606      	mov	r6, r0
 8004536:	9b08      	ldr	r3, [sp, #32]
 8004538:	3301      	adds	r3, #1
 800453a:	9308      	str	r3, [sp, #32]
 800453c:	e775      	b.n	800442a <_dtoa_r+0xa0a>
 800453e:	f000 f8e7 	bl	8004710 <__multadd>
 8004542:	4631      	mov	r1, r6
 8004544:	4680      	mov	r8, r0
 8004546:	2300      	movs	r3, #0
 8004548:	220a      	movs	r2, #10
 800454a:	4628      	mov	r0, r5
 800454c:	f000 f8e0 	bl	8004710 <__multadd>
 8004550:	4606      	mov	r6, r0
 8004552:	e7f0      	b.n	8004536 <_dtoa_r+0xb16>
 8004554:	f1b9 0f00 	cmp.w	r9, #0
 8004558:	bfcc      	ite	gt
 800455a:	464f      	movgt	r7, r9
 800455c:	2701      	movle	r7, #1
 800455e:	f04f 0800 	mov.w	r8, #0
 8004562:	9a03      	ldr	r2, [sp, #12]
 8004564:	4417      	add	r7, r2
 8004566:	4659      	mov	r1, fp
 8004568:	2201      	movs	r2, #1
 800456a:	4628      	mov	r0, r5
 800456c:	9308      	str	r3, [sp, #32]
 800456e:	f000 fa7b 	bl	8004a68 <__lshift>
 8004572:	4621      	mov	r1, r4
 8004574:	4683      	mov	fp, r0
 8004576:	f000 fae7 	bl	8004b48 <__mcmp>
 800457a:	2800      	cmp	r0, #0
 800457c:	dcb2      	bgt.n	80044e4 <_dtoa_r+0xac4>
 800457e:	d102      	bne.n	8004586 <_dtoa_r+0xb66>
 8004580:	9b08      	ldr	r3, [sp, #32]
 8004582:	07db      	lsls	r3, r3, #31
 8004584:	d4ae      	bmi.n	80044e4 <_dtoa_r+0xac4>
 8004586:	463b      	mov	r3, r7
 8004588:	461f      	mov	r7, r3
 800458a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800458e:	2a30      	cmp	r2, #48	; 0x30
 8004590:	d0fa      	beq.n	8004588 <_dtoa_r+0xb68>
 8004592:	e6f9      	b.n	8004388 <_dtoa_r+0x968>
 8004594:	9a03      	ldr	r2, [sp, #12]
 8004596:	429a      	cmp	r2, r3
 8004598:	d1a5      	bne.n	80044e6 <_dtoa_r+0xac6>
 800459a:	2331      	movs	r3, #49	; 0x31
 800459c:	f10a 0a01 	add.w	sl, sl, #1
 80045a0:	e779      	b.n	8004496 <_dtoa_r+0xa76>
 80045a2:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <_dtoa_r+0xbd4>)
 80045a4:	f7ff baa8 	b.w	8003af8 <_dtoa_r+0xd8>
 80045a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f47f aa81 	bne.w	8003ab2 <_dtoa_r+0x92>
 80045b0:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <_dtoa_r+0xbd8>)
 80045b2:	f7ff baa1 	b.w	8003af8 <_dtoa_r+0xd8>
 80045b6:	f1b9 0f00 	cmp.w	r9, #0
 80045ba:	dc03      	bgt.n	80045c4 <_dtoa_r+0xba4>
 80045bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045be:	2b02      	cmp	r3, #2
 80045c0:	f73f aecb 	bgt.w	800435a <_dtoa_r+0x93a>
 80045c4:	9f03      	ldr	r7, [sp, #12]
 80045c6:	4621      	mov	r1, r4
 80045c8:	4658      	mov	r0, fp
 80045ca:	f7ff f99b 	bl	8003904 <quorem>
 80045ce:	9a03      	ldr	r2, [sp, #12]
 80045d0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80045d4:	f807 3b01 	strb.w	r3, [r7], #1
 80045d8:	1aba      	subs	r2, r7, r2
 80045da:	4591      	cmp	r9, r2
 80045dc:	ddba      	ble.n	8004554 <_dtoa_r+0xb34>
 80045de:	4659      	mov	r1, fp
 80045e0:	2300      	movs	r3, #0
 80045e2:	220a      	movs	r2, #10
 80045e4:	4628      	mov	r0, r5
 80045e6:	f000 f893 	bl	8004710 <__multadd>
 80045ea:	4683      	mov	fp, r0
 80045ec:	e7eb      	b.n	80045c6 <_dtoa_r+0xba6>
 80045ee:	bf00      	nop
 80045f0:	0800603b 	.word	0x0800603b
 80045f4:	08005f98 	.word	0x08005f98
 80045f8:	08005fbc 	.word	0x08005fbc

080045fc <_localeconv_r>:
 80045fc:	4800      	ldr	r0, [pc, #0]	; (8004600 <_localeconv_r+0x4>)
 80045fe:	4770      	bx	lr
 8004600:	20000160 	.word	0x20000160

08004604 <malloc>:
 8004604:	4b02      	ldr	r3, [pc, #8]	; (8004610 <malloc+0xc>)
 8004606:	4601      	mov	r1, r0
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	f000 bc1d 	b.w	8004e48 <_malloc_r>
 800460e:	bf00      	nop
 8004610:	2000000c 	.word	0x2000000c

08004614 <memchr>:
 8004614:	4603      	mov	r3, r0
 8004616:	b510      	push	{r4, lr}
 8004618:	b2c9      	uxtb	r1, r1
 800461a:	4402      	add	r2, r0
 800461c:	4293      	cmp	r3, r2
 800461e:	4618      	mov	r0, r3
 8004620:	d101      	bne.n	8004626 <memchr+0x12>
 8004622:	2000      	movs	r0, #0
 8004624:	e003      	b.n	800462e <memchr+0x1a>
 8004626:	7804      	ldrb	r4, [r0, #0]
 8004628:	3301      	adds	r3, #1
 800462a:	428c      	cmp	r4, r1
 800462c:	d1f6      	bne.n	800461c <memchr+0x8>
 800462e:	bd10      	pop	{r4, pc}

08004630 <memcpy>:
 8004630:	440a      	add	r2, r1
 8004632:	4291      	cmp	r1, r2
 8004634:	f100 33ff 	add.w	r3, r0, #4294967295
 8004638:	d100      	bne.n	800463c <memcpy+0xc>
 800463a:	4770      	bx	lr
 800463c:	b510      	push	{r4, lr}
 800463e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004642:	4291      	cmp	r1, r2
 8004644:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004648:	d1f9      	bne.n	800463e <memcpy+0xe>
 800464a:	bd10      	pop	{r4, pc}

0800464c <_Balloc>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004650:	4604      	mov	r4, r0
 8004652:	460d      	mov	r5, r1
 8004654:	b976      	cbnz	r6, 8004674 <_Balloc+0x28>
 8004656:	2010      	movs	r0, #16
 8004658:	f7ff ffd4 	bl	8004604 <malloc>
 800465c:	4602      	mov	r2, r0
 800465e:	6260      	str	r0, [r4, #36]	; 0x24
 8004660:	b920      	cbnz	r0, 800466c <_Balloc+0x20>
 8004662:	2166      	movs	r1, #102	; 0x66
 8004664:	4b17      	ldr	r3, [pc, #92]	; (80046c4 <_Balloc+0x78>)
 8004666:	4818      	ldr	r0, [pc, #96]	; (80046c8 <_Balloc+0x7c>)
 8004668:	f000 fdce 	bl	8005208 <__assert_func>
 800466c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004670:	6006      	str	r6, [r0, #0]
 8004672:	60c6      	str	r6, [r0, #12]
 8004674:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004676:	68f3      	ldr	r3, [r6, #12]
 8004678:	b183      	cbz	r3, 800469c <_Balloc+0x50>
 800467a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004682:	b9b8      	cbnz	r0, 80046b4 <_Balloc+0x68>
 8004684:	2101      	movs	r1, #1
 8004686:	fa01 f605 	lsl.w	r6, r1, r5
 800468a:	1d72      	adds	r2, r6, #5
 800468c:	4620      	mov	r0, r4
 800468e:	0092      	lsls	r2, r2, #2
 8004690:	f000 fb5e 	bl	8004d50 <_calloc_r>
 8004694:	b160      	cbz	r0, 80046b0 <_Balloc+0x64>
 8004696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800469a:	e00e      	b.n	80046ba <_Balloc+0x6e>
 800469c:	2221      	movs	r2, #33	; 0x21
 800469e:	2104      	movs	r1, #4
 80046a0:	4620      	mov	r0, r4
 80046a2:	f000 fb55 	bl	8004d50 <_calloc_r>
 80046a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046a8:	60f0      	str	r0, [r6, #12]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e4      	bne.n	800467a <_Balloc+0x2e>
 80046b0:	2000      	movs	r0, #0
 80046b2:	bd70      	pop	{r4, r5, r6, pc}
 80046b4:	6802      	ldr	r2, [r0, #0]
 80046b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80046ba:	2300      	movs	r3, #0
 80046bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80046c0:	e7f7      	b.n	80046b2 <_Balloc+0x66>
 80046c2:	bf00      	nop
 80046c4:	08005fc9 	.word	0x08005fc9
 80046c8:	0800604c 	.word	0x0800604c

080046cc <_Bfree>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80046d0:	4605      	mov	r5, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	b976      	cbnz	r6, 80046f4 <_Bfree+0x28>
 80046d6:	2010      	movs	r0, #16
 80046d8:	f7ff ff94 	bl	8004604 <malloc>
 80046dc:	4602      	mov	r2, r0
 80046de:	6268      	str	r0, [r5, #36]	; 0x24
 80046e0:	b920      	cbnz	r0, 80046ec <_Bfree+0x20>
 80046e2:	218a      	movs	r1, #138	; 0x8a
 80046e4:	4b08      	ldr	r3, [pc, #32]	; (8004708 <_Bfree+0x3c>)
 80046e6:	4809      	ldr	r0, [pc, #36]	; (800470c <_Bfree+0x40>)
 80046e8:	f000 fd8e 	bl	8005208 <__assert_func>
 80046ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046f0:	6006      	str	r6, [r0, #0]
 80046f2:	60c6      	str	r6, [r0, #12]
 80046f4:	b13c      	cbz	r4, 8004706 <_Bfree+0x3a>
 80046f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046f8:	6862      	ldr	r2, [r4, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004700:	6021      	str	r1, [r4, #0]
 8004702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	08005fc9 	.word	0x08005fc9
 800470c:	0800604c 	.word	0x0800604c

08004710 <__multadd>:
 8004710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004714:	4607      	mov	r7, r0
 8004716:	460c      	mov	r4, r1
 8004718:	461e      	mov	r6, r3
 800471a:	2000      	movs	r0, #0
 800471c:	690d      	ldr	r5, [r1, #16]
 800471e:	f101 0c14 	add.w	ip, r1, #20
 8004722:	f8dc 3000 	ldr.w	r3, [ip]
 8004726:	3001      	adds	r0, #1
 8004728:	b299      	uxth	r1, r3
 800472a:	fb02 6101 	mla	r1, r2, r1, r6
 800472e:	0c1e      	lsrs	r6, r3, #16
 8004730:	0c0b      	lsrs	r3, r1, #16
 8004732:	fb02 3306 	mla	r3, r2, r6, r3
 8004736:	b289      	uxth	r1, r1
 8004738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800473c:	4285      	cmp	r5, r0
 800473e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004742:	f84c 1b04 	str.w	r1, [ip], #4
 8004746:	dcec      	bgt.n	8004722 <__multadd+0x12>
 8004748:	b30e      	cbz	r6, 800478e <__multadd+0x7e>
 800474a:	68a3      	ldr	r3, [r4, #8]
 800474c:	42ab      	cmp	r3, r5
 800474e:	dc19      	bgt.n	8004784 <__multadd+0x74>
 8004750:	6861      	ldr	r1, [r4, #4]
 8004752:	4638      	mov	r0, r7
 8004754:	3101      	adds	r1, #1
 8004756:	f7ff ff79 	bl	800464c <_Balloc>
 800475a:	4680      	mov	r8, r0
 800475c:	b928      	cbnz	r0, 800476a <__multadd+0x5a>
 800475e:	4602      	mov	r2, r0
 8004760:	21b5      	movs	r1, #181	; 0xb5
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <__multadd+0x84>)
 8004764:	480c      	ldr	r0, [pc, #48]	; (8004798 <__multadd+0x88>)
 8004766:	f000 fd4f 	bl	8005208 <__assert_func>
 800476a:	6922      	ldr	r2, [r4, #16]
 800476c:	f104 010c 	add.w	r1, r4, #12
 8004770:	3202      	adds	r2, #2
 8004772:	0092      	lsls	r2, r2, #2
 8004774:	300c      	adds	r0, #12
 8004776:	f7ff ff5b 	bl	8004630 <memcpy>
 800477a:	4621      	mov	r1, r4
 800477c:	4638      	mov	r0, r7
 800477e:	f7ff ffa5 	bl	80046cc <_Bfree>
 8004782:	4644      	mov	r4, r8
 8004784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004788:	3501      	adds	r5, #1
 800478a:	615e      	str	r6, [r3, #20]
 800478c:	6125      	str	r5, [r4, #16]
 800478e:	4620      	mov	r0, r4
 8004790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004794:	0800603b 	.word	0x0800603b
 8004798:	0800604c 	.word	0x0800604c

0800479c <__hi0bits>:
 800479c:	0c02      	lsrs	r2, r0, #16
 800479e:	0412      	lsls	r2, r2, #16
 80047a0:	4603      	mov	r3, r0
 80047a2:	b9ca      	cbnz	r2, 80047d8 <__hi0bits+0x3c>
 80047a4:	0403      	lsls	r3, r0, #16
 80047a6:	2010      	movs	r0, #16
 80047a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80047ac:	bf04      	itt	eq
 80047ae:	021b      	lsleq	r3, r3, #8
 80047b0:	3008      	addeq	r0, #8
 80047b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80047b6:	bf04      	itt	eq
 80047b8:	011b      	lsleq	r3, r3, #4
 80047ba:	3004      	addeq	r0, #4
 80047bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80047c0:	bf04      	itt	eq
 80047c2:	009b      	lsleq	r3, r3, #2
 80047c4:	3002      	addeq	r0, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	db05      	blt.n	80047d6 <__hi0bits+0x3a>
 80047ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80047ce:	f100 0001 	add.w	r0, r0, #1
 80047d2:	bf08      	it	eq
 80047d4:	2020      	moveq	r0, #32
 80047d6:	4770      	bx	lr
 80047d8:	2000      	movs	r0, #0
 80047da:	e7e5      	b.n	80047a8 <__hi0bits+0xc>

080047dc <__lo0bits>:
 80047dc:	6803      	ldr	r3, [r0, #0]
 80047de:	4602      	mov	r2, r0
 80047e0:	f013 0007 	ands.w	r0, r3, #7
 80047e4:	d00b      	beq.n	80047fe <__lo0bits+0x22>
 80047e6:	07d9      	lsls	r1, r3, #31
 80047e8:	d421      	bmi.n	800482e <__lo0bits+0x52>
 80047ea:	0798      	lsls	r0, r3, #30
 80047ec:	bf49      	itett	mi
 80047ee:	085b      	lsrmi	r3, r3, #1
 80047f0:	089b      	lsrpl	r3, r3, #2
 80047f2:	2001      	movmi	r0, #1
 80047f4:	6013      	strmi	r3, [r2, #0]
 80047f6:	bf5c      	itt	pl
 80047f8:	2002      	movpl	r0, #2
 80047fa:	6013      	strpl	r3, [r2, #0]
 80047fc:	4770      	bx	lr
 80047fe:	b299      	uxth	r1, r3
 8004800:	b909      	cbnz	r1, 8004806 <__lo0bits+0x2a>
 8004802:	2010      	movs	r0, #16
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	b2d9      	uxtb	r1, r3
 8004808:	b909      	cbnz	r1, 800480e <__lo0bits+0x32>
 800480a:	3008      	adds	r0, #8
 800480c:	0a1b      	lsrs	r3, r3, #8
 800480e:	0719      	lsls	r1, r3, #28
 8004810:	bf04      	itt	eq
 8004812:	091b      	lsreq	r3, r3, #4
 8004814:	3004      	addeq	r0, #4
 8004816:	0799      	lsls	r1, r3, #30
 8004818:	bf04      	itt	eq
 800481a:	089b      	lsreq	r3, r3, #2
 800481c:	3002      	addeq	r0, #2
 800481e:	07d9      	lsls	r1, r3, #31
 8004820:	d403      	bmi.n	800482a <__lo0bits+0x4e>
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	f100 0001 	add.w	r0, r0, #1
 8004828:	d003      	beq.n	8004832 <__lo0bits+0x56>
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4770      	bx	lr
 800482e:	2000      	movs	r0, #0
 8004830:	4770      	bx	lr
 8004832:	2020      	movs	r0, #32
 8004834:	4770      	bx	lr
	...

08004838 <__i2b>:
 8004838:	b510      	push	{r4, lr}
 800483a:	460c      	mov	r4, r1
 800483c:	2101      	movs	r1, #1
 800483e:	f7ff ff05 	bl	800464c <_Balloc>
 8004842:	4602      	mov	r2, r0
 8004844:	b928      	cbnz	r0, 8004852 <__i2b+0x1a>
 8004846:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800484a:	4b04      	ldr	r3, [pc, #16]	; (800485c <__i2b+0x24>)
 800484c:	4804      	ldr	r0, [pc, #16]	; (8004860 <__i2b+0x28>)
 800484e:	f000 fcdb 	bl	8005208 <__assert_func>
 8004852:	2301      	movs	r3, #1
 8004854:	6144      	str	r4, [r0, #20]
 8004856:	6103      	str	r3, [r0, #16]
 8004858:	bd10      	pop	{r4, pc}
 800485a:	bf00      	nop
 800485c:	0800603b 	.word	0x0800603b
 8004860:	0800604c 	.word	0x0800604c

08004864 <__multiply>:
 8004864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004868:	4691      	mov	r9, r2
 800486a:	690a      	ldr	r2, [r1, #16]
 800486c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004870:	460c      	mov	r4, r1
 8004872:	429a      	cmp	r2, r3
 8004874:	bfbe      	ittt	lt
 8004876:	460b      	movlt	r3, r1
 8004878:	464c      	movlt	r4, r9
 800487a:	4699      	movlt	r9, r3
 800487c:	6927      	ldr	r7, [r4, #16]
 800487e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004882:	68a3      	ldr	r3, [r4, #8]
 8004884:	6861      	ldr	r1, [r4, #4]
 8004886:	eb07 060a 	add.w	r6, r7, sl
 800488a:	42b3      	cmp	r3, r6
 800488c:	b085      	sub	sp, #20
 800488e:	bfb8      	it	lt
 8004890:	3101      	addlt	r1, #1
 8004892:	f7ff fedb 	bl	800464c <_Balloc>
 8004896:	b930      	cbnz	r0, 80048a6 <__multiply+0x42>
 8004898:	4602      	mov	r2, r0
 800489a:	f240 115d 	movw	r1, #349	; 0x15d
 800489e:	4b43      	ldr	r3, [pc, #268]	; (80049ac <__multiply+0x148>)
 80048a0:	4843      	ldr	r0, [pc, #268]	; (80049b0 <__multiply+0x14c>)
 80048a2:	f000 fcb1 	bl	8005208 <__assert_func>
 80048a6:	f100 0514 	add.w	r5, r0, #20
 80048aa:	462b      	mov	r3, r5
 80048ac:	2200      	movs	r2, #0
 80048ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80048b2:	4543      	cmp	r3, r8
 80048b4:	d321      	bcc.n	80048fa <__multiply+0x96>
 80048b6:	f104 0314 	add.w	r3, r4, #20
 80048ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80048be:	f109 0314 	add.w	r3, r9, #20
 80048c2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80048c6:	9202      	str	r2, [sp, #8]
 80048c8:	1b3a      	subs	r2, r7, r4
 80048ca:	3a15      	subs	r2, #21
 80048cc:	f022 0203 	bic.w	r2, r2, #3
 80048d0:	3204      	adds	r2, #4
 80048d2:	f104 0115 	add.w	r1, r4, #21
 80048d6:	428f      	cmp	r7, r1
 80048d8:	bf38      	it	cc
 80048da:	2204      	movcc	r2, #4
 80048dc:	9201      	str	r2, [sp, #4]
 80048de:	9a02      	ldr	r2, [sp, #8]
 80048e0:	9303      	str	r3, [sp, #12]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d80c      	bhi.n	8004900 <__multiply+0x9c>
 80048e6:	2e00      	cmp	r6, #0
 80048e8:	dd03      	ble.n	80048f2 <__multiply+0x8e>
 80048ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d059      	beq.n	80049a6 <__multiply+0x142>
 80048f2:	6106      	str	r6, [r0, #16]
 80048f4:	b005      	add	sp, #20
 80048f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048fa:	f843 2b04 	str.w	r2, [r3], #4
 80048fe:	e7d8      	b.n	80048b2 <__multiply+0x4e>
 8004900:	f8b3 a000 	ldrh.w	sl, [r3]
 8004904:	f1ba 0f00 	cmp.w	sl, #0
 8004908:	d023      	beq.n	8004952 <__multiply+0xee>
 800490a:	46a9      	mov	r9, r5
 800490c:	f04f 0c00 	mov.w	ip, #0
 8004910:	f104 0e14 	add.w	lr, r4, #20
 8004914:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004918:	f8d9 1000 	ldr.w	r1, [r9]
 800491c:	fa1f fb82 	uxth.w	fp, r2
 8004920:	b289      	uxth	r1, r1
 8004922:	fb0a 110b 	mla	r1, sl, fp, r1
 8004926:	4461      	add	r1, ip
 8004928:	f8d9 c000 	ldr.w	ip, [r9]
 800492c:	0c12      	lsrs	r2, r2, #16
 800492e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004932:	fb0a c202 	mla	r2, sl, r2, ip
 8004936:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800493a:	b289      	uxth	r1, r1
 800493c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004940:	4577      	cmp	r7, lr
 8004942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004946:	f849 1b04 	str.w	r1, [r9], #4
 800494a:	d8e3      	bhi.n	8004914 <__multiply+0xb0>
 800494c:	9a01      	ldr	r2, [sp, #4]
 800494e:	f845 c002 	str.w	ip, [r5, r2]
 8004952:	9a03      	ldr	r2, [sp, #12]
 8004954:	3304      	adds	r3, #4
 8004956:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800495a:	f1b9 0f00 	cmp.w	r9, #0
 800495e:	d020      	beq.n	80049a2 <__multiply+0x13e>
 8004960:	46ae      	mov	lr, r5
 8004962:	f04f 0a00 	mov.w	sl, #0
 8004966:	6829      	ldr	r1, [r5, #0]
 8004968:	f104 0c14 	add.w	ip, r4, #20
 800496c:	f8bc b000 	ldrh.w	fp, [ip]
 8004970:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004974:	b289      	uxth	r1, r1
 8004976:	fb09 220b 	mla	r2, r9, fp, r2
 800497a:	4492      	add	sl, r2
 800497c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004980:	f84e 1b04 	str.w	r1, [lr], #4
 8004984:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004988:	f8be 1000 	ldrh.w	r1, [lr]
 800498c:	0c12      	lsrs	r2, r2, #16
 800498e:	fb09 1102 	mla	r1, r9, r2, r1
 8004992:	4567      	cmp	r7, ip
 8004994:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004998:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800499c:	d8e6      	bhi.n	800496c <__multiply+0x108>
 800499e:	9a01      	ldr	r2, [sp, #4]
 80049a0:	50a9      	str	r1, [r5, r2]
 80049a2:	3504      	adds	r5, #4
 80049a4:	e79b      	b.n	80048de <__multiply+0x7a>
 80049a6:	3e01      	subs	r6, #1
 80049a8:	e79d      	b.n	80048e6 <__multiply+0x82>
 80049aa:	bf00      	nop
 80049ac:	0800603b 	.word	0x0800603b
 80049b0:	0800604c 	.word	0x0800604c

080049b4 <__pow5mult>:
 80049b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b8:	4615      	mov	r5, r2
 80049ba:	f012 0203 	ands.w	r2, r2, #3
 80049be:	4606      	mov	r6, r0
 80049c0:	460f      	mov	r7, r1
 80049c2:	d007      	beq.n	80049d4 <__pow5mult+0x20>
 80049c4:	4c25      	ldr	r4, [pc, #148]	; (8004a5c <__pow5mult+0xa8>)
 80049c6:	3a01      	subs	r2, #1
 80049c8:	2300      	movs	r3, #0
 80049ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80049ce:	f7ff fe9f 	bl	8004710 <__multadd>
 80049d2:	4607      	mov	r7, r0
 80049d4:	10ad      	asrs	r5, r5, #2
 80049d6:	d03d      	beq.n	8004a54 <__pow5mult+0xa0>
 80049d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80049da:	b97c      	cbnz	r4, 80049fc <__pow5mult+0x48>
 80049dc:	2010      	movs	r0, #16
 80049de:	f7ff fe11 	bl	8004604 <malloc>
 80049e2:	4602      	mov	r2, r0
 80049e4:	6270      	str	r0, [r6, #36]	; 0x24
 80049e6:	b928      	cbnz	r0, 80049f4 <__pow5mult+0x40>
 80049e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80049ec:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <__pow5mult+0xac>)
 80049ee:	481d      	ldr	r0, [pc, #116]	; (8004a64 <__pow5mult+0xb0>)
 80049f0:	f000 fc0a 	bl	8005208 <__assert_func>
 80049f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80049f8:	6004      	str	r4, [r0, #0]
 80049fa:	60c4      	str	r4, [r0, #12]
 80049fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a04:	b94c      	cbnz	r4, 8004a1a <__pow5mult+0x66>
 8004a06:	f240 2171 	movw	r1, #625	; 0x271
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f7ff ff14 	bl	8004838 <__i2b>
 8004a10:	2300      	movs	r3, #0
 8004a12:	4604      	mov	r4, r0
 8004a14:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a18:	6003      	str	r3, [r0, #0]
 8004a1a:	f04f 0900 	mov.w	r9, #0
 8004a1e:	07eb      	lsls	r3, r5, #31
 8004a20:	d50a      	bpl.n	8004a38 <__pow5mult+0x84>
 8004a22:	4639      	mov	r1, r7
 8004a24:	4622      	mov	r2, r4
 8004a26:	4630      	mov	r0, r6
 8004a28:	f7ff ff1c 	bl	8004864 <__multiply>
 8004a2c:	4680      	mov	r8, r0
 8004a2e:	4639      	mov	r1, r7
 8004a30:	4630      	mov	r0, r6
 8004a32:	f7ff fe4b 	bl	80046cc <_Bfree>
 8004a36:	4647      	mov	r7, r8
 8004a38:	106d      	asrs	r5, r5, #1
 8004a3a:	d00b      	beq.n	8004a54 <__pow5mult+0xa0>
 8004a3c:	6820      	ldr	r0, [r4, #0]
 8004a3e:	b938      	cbnz	r0, 8004a50 <__pow5mult+0x9c>
 8004a40:	4622      	mov	r2, r4
 8004a42:	4621      	mov	r1, r4
 8004a44:	4630      	mov	r0, r6
 8004a46:	f7ff ff0d 	bl	8004864 <__multiply>
 8004a4a:	6020      	str	r0, [r4, #0]
 8004a4c:	f8c0 9000 	str.w	r9, [r0]
 8004a50:	4604      	mov	r4, r0
 8004a52:	e7e4      	b.n	8004a1e <__pow5mult+0x6a>
 8004a54:	4638      	mov	r0, r7
 8004a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a5a:	bf00      	nop
 8004a5c:	08006198 	.word	0x08006198
 8004a60:	08005fc9 	.word	0x08005fc9
 8004a64:	0800604c 	.word	0x0800604c

08004a68 <__lshift>:
 8004a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	4607      	mov	r7, r0
 8004a70:	4691      	mov	r9, r2
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	6849      	ldr	r1, [r1, #4]
 8004a76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004a7a:	68a3      	ldr	r3, [r4, #8]
 8004a7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004a80:	f108 0601 	add.w	r6, r8, #1
 8004a84:	42b3      	cmp	r3, r6
 8004a86:	db0b      	blt.n	8004aa0 <__lshift+0x38>
 8004a88:	4638      	mov	r0, r7
 8004a8a:	f7ff fddf 	bl	800464c <_Balloc>
 8004a8e:	4605      	mov	r5, r0
 8004a90:	b948      	cbnz	r0, 8004aa6 <__lshift+0x3e>
 8004a92:	4602      	mov	r2, r0
 8004a94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004a98:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <__lshift+0xd8>)
 8004a9a:	482a      	ldr	r0, [pc, #168]	; (8004b44 <__lshift+0xdc>)
 8004a9c:	f000 fbb4 	bl	8005208 <__assert_func>
 8004aa0:	3101      	adds	r1, #1
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	e7ee      	b.n	8004a84 <__lshift+0x1c>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f100 0114 	add.w	r1, r0, #20
 8004aac:	f100 0210 	add.w	r2, r0, #16
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	4553      	cmp	r3, sl
 8004ab4:	db37      	blt.n	8004b26 <__lshift+0xbe>
 8004ab6:	6920      	ldr	r0, [r4, #16]
 8004ab8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004abc:	f104 0314 	add.w	r3, r4, #20
 8004ac0:	f019 091f 	ands.w	r9, r9, #31
 8004ac4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ac8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004acc:	d02f      	beq.n	8004b2e <__lshift+0xc6>
 8004ace:	468a      	mov	sl, r1
 8004ad0:	f04f 0c00 	mov.w	ip, #0
 8004ad4:	f1c9 0e20 	rsb	lr, r9, #32
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	fa02 f209 	lsl.w	r2, r2, r9
 8004ade:	ea42 020c 	orr.w	r2, r2, ip
 8004ae2:	f84a 2b04 	str.w	r2, [sl], #4
 8004ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aea:	4298      	cmp	r0, r3
 8004aec:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004af0:	d8f2      	bhi.n	8004ad8 <__lshift+0x70>
 8004af2:	1b03      	subs	r3, r0, r4
 8004af4:	3b15      	subs	r3, #21
 8004af6:	f023 0303 	bic.w	r3, r3, #3
 8004afa:	3304      	adds	r3, #4
 8004afc:	f104 0215 	add.w	r2, r4, #21
 8004b00:	4290      	cmp	r0, r2
 8004b02:	bf38      	it	cc
 8004b04:	2304      	movcc	r3, #4
 8004b06:	f841 c003 	str.w	ip, [r1, r3]
 8004b0a:	f1bc 0f00 	cmp.w	ip, #0
 8004b0e:	d001      	beq.n	8004b14 <__lshift+0xac>
 8004b10:	f108 0602 	add.w	r6, r8, #2
 8004b14:	3e01      	subs	r6, #1
 8004b16:	4638      	mov	r0, r7
 8004b18:	4621      	mov	r1, r4
 8004b1a:	612e      	str	r6, [r5, #16]
 8004b1c:	f7ff fdd6 	bl	80046cc <_Bfree>
 8004b20:	4628      	mov	r0, r5
 8004b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b26:	f842 0f04 	str.w	r0, [r2, #4]!
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	e7c1      	b.n	8004ab2 <__lshift+0x4a>
 8004b2e:	3904      	subs	r1, #4
 8004b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b34:	4298      	cmp	r0, r3
 8004b36:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b3a:	d8f9      	bhi.n	8004b30 <__lshift+0xc8>
 8004b3c:	e7ea      	b.n	8004b14 <__lshift+0xac>
 8004b3e:	bf00      	nop
 8004b40:	0800603b 	.word	0x0800603b
 8004b44:	0800604c 	.word	0x0800604c

08004b48 <__mcmp>:
 8004b48:	4603      	mov	r3, r0
 8004b4a:	690a      	ldr	r2, [r1, #16]
 8004b4c:	6900      	ldr	r0, [r0, #16]
 8004b4e:	b530      	push	{r4, r5, lr}
 8004b50:	1a80      	subs	r0, r0, r2
 8004b52:	d10d      	bne.n	8004b70 <__mcmp+0x28>
 8004b54:	3314      	adds	r3, #20
 8004b56:	3114      	adds	r1, #20
 8004b58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004b5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004b60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004b64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004b68:	4295      	cmp	r5, r2
 8004b6a:	d002      	beq.n	8004b72 <__mcmp+0x2a>
 8004b6c:	d304      	bcc.n	8004b78 <__mcmp+0x30>
 8004b6e:	2001      	movs	r0, #1
 8004b70:	bd30      	pop	{r4, r5, pc}
 8004b72:	42a3      	cmp	r3, r4
 8004b74:	d3f4      	bcc.n	8004b60 <__mcmp+0x18>
 8004b76:	e7fb      	b.n	8004b70 <__mcmp+0x28>
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7c:	e7f8      	b.n	8004b70 <__mcmp+0x28>
	...

08004b80 <__mdiff>:
 8004b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b84:	460d      	mov	r5, r1
 8004b86:	4607      	mov	r7, r0
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	4614      	mov	r4, r2
 8004b8e:	f7ff ffdb 	bl	8004b48 <__mcmp>
 8004b92:	1e06      	subs	r6, r0, #0
 8004b94:	d111      	bne.n	8004bba <__mdiff+0x3a>
 8004b96:	4631      	mov	r1, r6
 8004b98:	4638      	mov	r0, r7
 8004b9a:	f7ff fd57 	bl	800464c <_Balloc>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	b928      	cbnz	r0, 8004bae <__mdiff+0x2e>
 8004ba2:	f240 2132 	movw	r1, #562	; 0x232
 8004ba6:	4b3a      	ldr	r3, [pc, #232]	; (8004c90 <__mdiff+0x110>)
 8004ba8:	483a      	ldr	r0, [pc, #232]	; (8004c94 <__mdiff+0x114>)
 8004baa:	f000 fb2d 	bl	8005208 <__assert_func>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bba:	bfa4      	itt	ge
 8004bbc:	4623      	movge	r3, r4
 8004bbe:	462c      	movge	r4, r5
 8004bc0:	4638      	mov	r0, r7
 8004bc2:	6861      	ldr	r1, [r4, #4]
 8004bc4:	bfa6      	itte	ge
 8004bc6:	461d      	movge	r5, r3
 8004bc8:	2600      	movge	r6, #0
 8004bca:	2601      	movlt	r6, #1
 8004bcc:	f7ff fd3e 	bl	800464c <_Balloc>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	b918      	cbnz	r0, 8004bdc <__mdiff+0x5c>
 8004bd4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004bd8:	4b2d      	ldr	r3, [pc, #180]	; (8004c90 <__mdiff+0x110>)
 8004bda:	e7e5      	b.n	8004ba8 <__mdiff+0x28>
 8004bdc:	f102 0814 	add.w	r8, r2, #20
 8004be0:	46c2      	mov	sl, r8
 8004be2:	f04f 0c00 	mov.w	ip, #0
 8004be6:	6927      	ldr	r7, [r4, #16]
 8004be8:	60c6      	str	r6, [r0, #12]
 8004bea:	692e      	ldr	r6, [r5, #16]
 8004bec:	f104 0014 	add.w	r0, r4, #20
 8004bf0:	f105 0914 	add.w	r9, r5, #20
 8004bf4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004bf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004bfc:	3410      	adds	r4, #16
 8004bfe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004c02:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c06:	fa1f f18b 	uxth.w	r1, fp
 8004c0a:	448c      	add	ip, r1
 8004c0c:	b299      	uxth	r1, r3
 8004c0e:	0c1b      	lsrs	r3, r3, #16
 8004c10:	ebac 0101 	sub.w	r1, ip, r1
 8004c14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c18:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004c1c:	b289      	uxth	r1, r1
 8004c1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004c22:	454e      	cmp	r6, r9
 8004c24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004c28:	f84a 3b04 	str.w	r3, [sl], #4
 8004c2c:	d8e7      	bhi.n	8004bfe <__mdiff+0x7e>
 8004c2e:	1b73      	subs	r3, r6, r5
 8004c30:	3b15      	subs	r3, #21
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	3515      	adds	r5, #21
 8004c38:	3304      	adds	r3, #4
 8004c3a:	42ae      	cmp	r6, r5
 8004c3c:	bf38      	it	cc
 8004c3e:	2304      	movcc	r3, #4
 8004c40:	4418      	add	r0, r3
 8004c42:	4443      	add	r3, r8
 8004c44:	461e      	mov	r6, r3
 8004c46:	4605      	mov	r5, r0
 8004c48:	4575      	cmp	r5, lr
 8004c4a:	d30e      	bcc.n	8004c6a <__mdiff+0xea>
 8004c4c:	f10e 0103 	add.w	r1, lr, #3
 8004c50:	1a09      	subs	r1, r1, r0
 8004c52:	f021 0103 	bic.w	r1, r1, #3
 8004c56:	3803      	subs	r0, #3
 8004c58:	4586      	cmp	lr, r0
 8004c5a:	bf38      	it	cc
 8004c5c:	2100      	movcc	r1, #0
 8004c5e:	4419      	add	r1, r3
 8004c60:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004c64:	b18b      	cbz	r3, 8004c8a <__mdiff+0x10a>
 8004c66:	6117      	str	r7, [r2, #16]
 8004c68:	e7a4      	b.n	8004bb4 <__mdiff+0x34>
 8004c6a:	f855 8b04 	ldr.w	r8, [r5], #4
 8004c6e:	fa1f f188 	uxth.w	r1, r8
 8004c72:	4461      	add	r1, ip
 8004c74:	140c      	asrs	r4, r1, #16
 8004c76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004c7a:	b289      	uxth	r1, r1
 8004c7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004c80:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004c84:	f846 1b04 	str.w	r1, [r6], #4
 8004c88:	e7de      	b.n	8004c48 <__mdiff+0xc8>
 8004c8a:	3f01      	subs	r7, #1
 8004c8c:	e7e8      	b.n	8004c60 <__mdiff+0xe0>
 8004c8e:	bf00      	nop
 8004c90:	0800603b 	.word	0x0800603b
 8004c94:	0800604c 	.word	0x0800604c

08004c98 <__d2b>:
 8004c98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004ca2:	4690      	mov	r8, r2
 8004ca4:	461d      	mov	r5, r3
 8004ca6:	f7ff fcd1 	bl	800464c <_Balloc>
 8004caa:	4604      	mov	r4, r0
 8004cac:	b930      	cbnz	r0, 8004cbc <__d2b+0x24>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	f240 310a 	movw	r1, #778	; 0x30a
 8004cb4:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <__d2b+0xb0>)
 8004cb6:	4825      	ldr	r0, [pc, #148]	; (8004d4c <__d2b+0xb4>)
 8004cb8:	f000 faa6 	bl	8005208 <__assert_func>
 8004cbc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004cc0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004cc4:	bb2d      	cbnz	r5, 8004d12 <__d2b+0x7a>
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	f1b8 0300 	subs.w	r3, r8, #0
 8004ccc:	d026      	beq.n	8004d1c <__d2b+0x84>
 8004cce:	4668      	mov	r0, sp
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	f7ff fd83 	bl	80047dc <__lo0bits>
 8004cd6:	9900      	ldr	r1, [sp, #0]
 8004cd8:	b1f0      	cbz	r0, 8004d18 <__d2b+0x80>
 8004cda:	9a01      	ldr	r2, [sp, #4]
 8004cdc:	f1c0 0320 	rsb	r3, r0, #32
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	40c2      	lsrs	r2, r0
 8004ce8:	6163      	str	r3, [r4, #20]
 8004cea:	9201      	str	r2, [sp, #4]
 8004cec:	9b01      	ldr	r3, [sp, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bf14      	ite	ne
 8004cf2:	2102      	movne	r1, #2
 8004cf4:	2101      	moveq	r1, #1
 8004cf6:	61a3      	str	r3, [r4, #24]
 8004cf8:	6121      	str	r1, [r4, #16]
 8004cfa:	b1c5      	cbz	r5, 8004d2e <__d2b+0x96>
 8004cfc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004d00:	4405      	add	r5, r0
 8004d02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d06:	603d      	str	r5, [r7, #0]
 8004d08:	6030      	str	r0, [r6, #0]
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	b002      	add	sp, #8
 8004d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d16:	e7d6      	b.n	8004cc6 <__d2b+0x2e>
 8004d18:	6161      	str	r1, [r4, #20]
 8004d1a:	e7e7      	b.n	8004cec <__d2b+0x54>
 8004d1c:	a801      	add	r0, sp, #4
 8004d1e:	f7ff fd5d 	bl	80047dc <__lo0bits>
 8004d22:	2101      	movs	r1, #1
 8004d24:	9b01      	ldr	r3, [sp, #4]
 8004d26:	6121      	str	r1, [r4, #16]
 8004d28:	6163      	str	r3, [r4, #20]
 8004d2a:	3020      	adds	r0, #32
 8004d2c:	e7e5      	b.n	8004cfa <__d2b+0x62>
 8004d2e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004d32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d36:	6038      	str	r0, [r7, #0]
 8004d38:	6918      	ldr	r0, [r3, #16]
 8004d3a:	f7ff fd2f 	bl	800479c <__hi0bits>
 8004d3e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004d42:	6031      	str	r1, [r6, #0]
 8004d44:	e7e1      	b.n	8004d0a <__d2b+0x72>
 8004d46:	bf00      	nop
 8004d48:	0800603b 	.word	0x0800603b
 8004d4c:	0800604c 	.word	0x0800604c

08004d50 <_calloc_r>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	fba1 5402 	umull	r5, r4, r1, r2
 8004d56:	b934      	cbnz	r4, 8004d66 <_calloc_r+0x16>
 8004d58:	4629      	mov	r1, r5
 8004d5a:	f000 f875 	bl	8004e48 <_malloc_r>
 8004d5e:	4606      	mov	r6, r0
 8004d60:	b928      	cbnz	r0, 8004d6e <_calloc_r+0x1e>
 8004d62:	4630      	mov	r0, r6
 8004d64:	bd70      	pop	{r4, r5, r6, pc}
 8004d66:	220c      	movs	r2, #12
 8004d68:	2600      	movs	r6, #0
 8004d6a:	6002      	str	r2, [r0, #0]
 8004d6c:	e7f9      	b.n	8004d62 <_calloc_r+0x12>
 8004d6e:	462a      	mov	r2, r5
 8004d70:	4621      	mov	r1, r4
 8004d72:	f7fe f92b 	bl	8002fcc <memset>
 8004d76:	e7f4      	b.n	8004d62 <_calloc_r+0x12>

08004d78 <_free_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	2900      	cmp	r1, #0
 8004d7e:	d040      	beq.n	8004e02 <_free_r+0x8a>
 8004d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d84:	1f0c      	subs	r4, r1, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bfb8      	it	lt
 8004d8a:	18e4      	addlt	r4, r4, r3
 8004d8c:	f000 fa98 	bl	80052c0 <__malloc_lock>
 8004d90:	4a1c      	ldr	r2, [pc, #112]	; (8004e04 <_free_r+0x8c>)
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	b933      	cbnz	r3, 8004da4 <_free_r+0x2c>
 8004d96:	6063      	str	r3, [r4, #4]
 8004d98:	6014      	str	r4, [r2, #0]
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004da0:	f000 ba94 	b.w	80052cc <__malloc_unlock>
 8004da4:	42a3      	cmp	r3, r4
 8004da6:	d908      	bls.n	8004dba <_free_r+0x42>
 8004da8:	6820      	ldr	r0, [r4, #0]
 8004daa:	1821      	adds	r1, r4, r0
 8004dac:	428b      	cmp	r3, r1
 8004dae:	bf01      	itttt	eq
 8004db0:	6819      	ldreq	r1, [r3, #0]
 8004db2:	685b      	ldreq	r3, [r3, #4]
 8004db4:	1809      	addeq	r1, r1, r0
 8004db6:	6021      	streq	r1, [r4, #0]
 8004db8:	e7ed      	b.n	8004d96 <_free_r+0x1e>
 8004dba:	461a      	mov	r2, r3
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	b10b      	cbz	r3, 8004dc4 <_free_r+0x4c>
 8004dc0:	42a3      	cmp	r3, r4
 8004dc2:	d9fa      	bls.n	8004dba <_free_r+0x42>
 8004dc4:	6811      	ldr	r1, [r2, #0]
 8004dc6:	1850      	adds	r0, r2, r1
 8004dc8:	42a0      	cmp	r0, r4
 8004dca:	d10b      	bne.n	8004de4 <_free_r+0x6c>
 8004dcc:	6820      	ldr	r0, [r4, #0]
 8004dce:	4401      	add	r1, r0
 8004dd0:	1850      	adds	r0, r2, r1
 8004dd2:	4283      	cmp	r3, r0
 8004dd4:	6011      	str	r1, [r2, #0]
 8004dd6:	d1e0      	bne.n	8004d9a <_free_r+0x22>
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4401      	add	r1, r0
 8004dde:	6011      	str	r1, [r2, #0]
 8004de0:	6053      	str	r3, [r2, #4]
 8004de2:	e7da      	b.n	8004d9a <_free_r+0x22>
 8004de4:	d902      	bls.n	8004dec <_free_r+0x74>
 8004de6:	230c      	movs	r3, #12
 8004de8:	602b      	str	r3, [r5, #0]
 8004dea:	e7d6      	b.n	8004d9a <_free_r+0x22>
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	1821      	adds	r1, r4, r0
 8004df0:	428b      	cmp	r3, r1
 8004df2:	bf01      	itttt	eq
 8004df4:	6819      	ldreq	r1, [r3, #0]
 8004df6:	685b      	ldreq	r3, [r3, #4]
 8004df8:	1809      	addeq	r1, r1, r0
 8004dfa:	6021      	streq	r1, [r4, #0]
 8004dfc:	6063      	str	r3, [r4, #4]
 8004dfe:	6054      	str	r4, [r2, #4]
 8004e00:	e7cb      	b.n	8004d9a <_free_r+0x22>
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	20000310 	.word	0x20000310

08004e08 <sbrk_aligned>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	4e0e      	ldr	r6, [pc, #56]	; (8004e44 <sbrk_aligned+0x3c>)
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	6831      	ldr	r1, [r6, #0]
 8004e10:	4605      	mov	r5, r0
 8004e12:	b911      	cbnz	r1, 8004e1a <sbrk_aligned+0x12>
 8004e14:	f000 f9e8 	bl	80051e8 <_sbrk_r>
 8004e18:	6030      	str	r0, [r6, #0]
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f000 f9e3 	bl	80051e8 <_sbrk_r>
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	d00a      	beq.n	8004e3c <sbrk_aligned+0x34>
 8004e26:	1cc4      	adds	r4, r0, #3
 8004e28:	f024 0403 	bic.w	r4, r4, #3
 8004e2c:	42a0      	cmp	r0, r4
 8004e2e:	d007      	beq.n	8004e40 <sbrk_aligned+0x38>
 8004e30:	1a21      	subs	r1, r4, r0
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 f9d8 	bl	80051e8 <_sbrk_r>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d101      	bne.n	8004e40 <sbrk_aligned+0x38>
 8004e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8004e40:	4620      	mov	r0, r4
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	20000314 	.word	0x20000314

08004e48 <_malloc_r>:
 8004e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4c:	1ccd      	adds	r5, r1, #3
 8004e4e:	f025 0503 	bic.w	r5, r5, #3
 8004e52:	3508      	adds	r5, #8
 8004e54:	2d0c      	cmp	r5, #12
 8004e56:	bf38      	it	cc
 8004e58:	250c      	movcc	r5, #12
 8004e5a:	2d00      	cmp	r5, #0
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	db01      	blt.n	8004e64 <_malloc_r+0x1c>
 8004e60:	42a9      	cmp	r1, r5
 8004e62:	d905      	bls.n	8004e70 <_malloc_r+0x28>
 8004e64:	230c      	movs	r3, #12
 8004e66:	2600      	movs	r6, #0
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e70:	4e2e      	ldr	r6, [pc, #184]	; (8004f2c <_malloc_r+0xe4>)
 8004e72:	f000 fa25 	bl	80052c0 <__malloc_lock>
 8004e76:	6833      	ldr	r3, [r6, #0]
 8004e78:	461c      	mov	r4, r3
 8004e7a:	bb34      	cbnz	r4, 8004eca <_malloc_r+0x82>
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	4638      	mov	r0, r7
 8004e80:	f7ff ffc2 	bl	8004e08 <sbrk_aligned>
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	4604      	mov	r4, r0
 8004e88:	d14d      	bne.n	8004f26 <_malloc_r+0xde>
 8004e8a:	6834      	ldr	r4, [r6, #0]
 8004e8c:	4626      	mov	r6, r4
 8004e8e:	2e00      	cmp	r6, #0
 8004e90:	d140      	bne.n	8004f14 <_malloc_r+0xcc>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	4631      	mov	r1, r6
 8004e96:	4638      	mov	r0, r7
 8004e98:	eb04 0803 	add.w	r8, r4, r3
 8004e9c:	f000 f9a4 	bl	80051e8 <_sbrk_r>
 8004ea0:	4580      	cmp	r8, r0
 8004ea2:	d13a      	bne.n	8004f1a <_malloc_r+0xd2>
 8004ea4:	6821      	ldr	r1, [r4, #0]
 8004ea6:	3503      	adds	r5, #3
 8004ea8:	1a6d      	subs	r5, r5, r1
 8004eaa:	f025 0503 	bic.w	r5, r5, #3
 8004eae:	3508      	adds	r5, #8
 8004eb0:	2d0c      	cmp	r5, #12
 8004eb2:	bf38      	it	cc
 8004eb4:	250c      	movcc	r5, #12
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	4629      	mov	r1, r5
 8004eba:	f7ff ffa5 	bl	8004e08 <sbrk_aligned>
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d02b      	beq.n	8004f1a <_malloc_r+0xd2>
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	442b      	add	r3, r5
 8004ec6:	6023      	str	r3, [r4, #0]
 8004ec8:	e00e      	b.n	8004ee8 <_malloc_r+0xa0>
 8004eca:	6822      	ldr	r2, [r4, #0]
 8004ecc:	1b52      	subs	r2, r2, r5
 8004ece:	d41e      	bmi.n	8004f0e <_malloc_r+0xc6>
 8004ed0:	2a0b      	cmp	r2, #11
 8004ed2:	d916      	bls.n	8004f02 <_malloc_r+0xba>
 8004ed4:	1961      	adds	r1, r4, r5
 8004ed6:	42a3      	cmp	r3, r4
 8004ed8:	6025      	str	r5, [r4, #0]
 8004eda:	bf18      	it	ne
 8004edc:	6059      	strne	r1, [r3, #4]
 8004ede:	6863      	ldr	r3, [r4, #4]
 8004ee0:	bf08      	it	eq
 8004ee2:	6031      	streq	r1, [r6, #0]
 8004ee4:	5162      	str	r2, [r4, r5]
 8004ee6:	604b      	str	r3, [r1, #4]
 8004ee8:	4638      	mov	r0, r7
 8004eea:	f104 060b 	add.w	r6, r4, #11
 8004eee:	f000 f9ed 	bl	80052cc <__malloc_unlock>
 8004ef2:	f026 0607 	bic.w	r6, r6, #7
 8004ef6:	1d23      	adds	r3, r4, #4
 8004ef8:	1af2      	subs	r2, r6, r3
 8004efa:	d0b6      	beq.n	8004e6a <_malloc_r+0x22>
 8004efc:	1b9b      	subs	r3, r3, r6
 8004efe:	50a3      	str	r3, [r4, r2]
 8004f00:	e7b3      	b.n	8004e6a <_malloc_r+0x22>
 8004f02:	6862      	ldr	r2, [r4, #4]
 8004f04:	42a3      	cmp	r3, r4
 8004f06:	bf0c      	ite	eq
 8004f08:	6032      	streq	r2, [r6, #0]
 8004f0a:	605a      	strne	r2, [r3, #4]
 8004f0c:	e7ec      	b.n	8004ee8 <_malloc_r+0xa0>
 8004f0e:	4623      	mov	r3, r4
 8004f10:	6864      	ldr	r4, [r4, #4]
 8004f12:	e7b2      	b.n	8004e7a <_malloc_r+0x32>
 8004f14:	4634      	mov	r4, r6
 8004f16:	6876      	ldr	r6, [r6, #4]
 8004f18:	e7b9      	b.n	8004e8e <_malloc_r+0x46>
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	f000 f9d4 	bl	80052cc <__malloc_unlock>
 8004f24:	e7a1      	b.n	8004e6a <_malloc_r+0x22>
 8004f26:	6025      	str	r5, [r4, #0]
 8004f28:	e7de      	b.n	8004ee8 <_malloc_r+0xa0>
 8004f2a:	bf00      	nop
 8004f2c:	20000310 	.word	0x20000310

08004f30 <__ssputs_r>:
 8004f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	688e      	ldr	r6, [r1, #8]
 8004f36:	4682      	mov	sl, r0
 8004f38:	429e      	cmp	r6, r3
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	4690      	mov	r8, r2
 8004f3e:	461f      	mov	r7, r3
 8004f40:	d838      	bhi.n	8004fb4 <__ssputs_r+0x84>
 8004f42:	898a      	ldrh	r2, [r1, #12]
 8004f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f48:	d032      	beq.n	8004fb0 <__ssputs_r+0x80>
 8004f4a:	6825      	ldr	r5, [r4, #0]
 8004f4c:	6909      	ldr	r1, [r1, #16]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	eba5 0901 	sub.w	r9, r5, r1
 8004f54:	6965      	ldr	r5, [r4, #20]
 8004f56:	444b      	add	r3, r9
 8004f58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f60:	106d      	asrs	r5, r5, #1
 8004f62:	429d      	cmp	r5, r3
 8004f64:	bf38      	it	cc
 8004f66:	461d      	movcc	r5, r3
 8004f68:	0553      	lsls	r3, r2, #21
 8004f6a:	d531      	bpl.n	8004fd0 <__ssputs_r+0xa0>
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	f7ff ff6b 	bl	8004e48 <_malloc_r>
 8004f72:	4606      	mov	r6, r0
 8004f74:	b950      	cbnz	r0, 8004f8c <__ssputs_r+0x5c>
 8004f76:	230c      	movs	r3, #12
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	f8ca 3000 	str.w	r3, [sl]
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f86:	81a3      	strh	r3, [r4, #12]
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	464a      	mov	r2, r9
 8004f8e:	6921      	ldr	r1, [r4, #16]
 8004f90:	f7ff fb4e 	bl	8004630 <memcpy>
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9e:	81a3      	strh	r3, [r4, #12]
 8004fa0:	6126      	str	r6, [r4, #16]
 8004fa2:	444e      	add	r6, r9
 8004fa4:	6026      	str	r6, [r4, #0]
 8004fa6:	463e      	mov	r6, r7
 8004fa8:	6165      	str	r5, [r4, #20]
 8004faa:	eba5 0509 	sub.w	r5, r5, r9
 8004fae:	60a5      	str	r5, [r4, #8]
 8004fb0:	42be      	cmp	r6, r7
 8004fb2:	d900      	bls.n	8004fb6 <__ssputs_r+0x86>
 8004fb4:	463e      	mov	r6, r7
 8004fb6:	4632      	mov	r2, r6
 8004fb8:	4641      	mov	r1, r8
 8004fba:	6820      	ldr	r0, [r4, #0]
 8004fbc:	f000 f966 	bl	800528c <memmove>
 8004fc0:	68a3      	ldr	r3, [r4, #8]
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	1b9b      	subs	r3, r3, r6
 8004fc6:	60a3      	str	r3, [r4, #8]
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	4433      	add	r3, r6
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	e7db      	b.n	8004f88 <__ssputs_r+0x58>
 8004fd0:	462a      	mov	r2, r5
 8004fd2:	f000 f981 	bl	80052d8 <_realloc_r>
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d1e1      	bne.n	8004fa0 <__ssputs_r+0x70>
 8004fdc:	4650      	mov	r0, sl
 8004fde:	6921      	ldr	r1, [r4, #16]
 8004fe0:	f7ff feca 	bl	8004d78 <_free_r>
 8004fe4:	e7c7      	b.n	8004f76 <__ssputs_r+0x46>
	...

08004fe8 <_svfiprintf_r>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	4698      	mov	r8, r3
 8004fee:	898b      	ldrh	r3, [r1, #12]
 8004ff0:	4607      	mov	r7, r0
 8004ff2:	061b      	lsls	r3, r3, #24
 8004ff4:	460d      	mov	r5, r1
 8004ff6:	4614      	mov	r4, r2
 8004ff8:	b09d      	sub	sp, #116	; 0x74
 8004ffa:	d50e      	bpl.n	800501a <_svfiprintf_r+0x32>
 8004ffc:	690b      	ldr	r3, [r1, #16]
 8004ffe:	b963      	cbnz	r3, 800501a <_svfiprintf_r+0x32>
 8005000:	2140      	movs	r1, #64	; 0x40
 8005002:	f7ff ff21 	bl	8004e48 <_malloc_r>
 8005006:	6028      	str	r0, [r5, #0]
 8005008:	6128      	str	r0, [r5, #16]
 800500a:	b920      	cbnz	r0, 8005016 <_svfiprintf_r+0x2e>
 800500c:	230c      	movs	r3, #12
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	e0d1      	b.n	80051ba <_svfiprintf_r+0x1d2>
 8005016:	2340      	movs	r3, #64	; 0x40
 8005018:	616b      	str	r3, [r5, #20]
 800501a:	2300      	movs	r3, #0
 800501c:	9309      	str	r3, [sp, #36]	; 0x24
 800501e:	2320      	movs	r3, #32
 8005020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005024:	2330      	movs	r3, #48	; 0x30
 8005026:	f04f 0901 	mov.w	r9, #1
 800502a:	f8cd 800c 	str.w	r8, [sp, #12]
 800502e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051d4 <_svfiprintf_r+0x1ec>
 8005032:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005036:	4623      	mov	r3, r4
 8005038:	469a      	mov	sl, r3
 800503a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800503e:	b10a      	cbz	r2, 8005044 <_svfiprintf_r+0x5c>
 8005040:	2a25      	cmp	r2, #37	; 0x25
 8005042:	d1f9      	bne.n	8005038 <_svfiprintf_r+0x50>
 8005044:	ebba 0b04 	subs.w	fp, sl, r4
 8005048:	d00b      	beq.n	8005062 <_svfiprintf_r+0x7a>
 800504a:	465b      	mov	r3, fp
 800504c:	4622      	mov	r2, r4
 800504e:	4629      	mov	r1, r5
 8005050:	4638      	mov	r0, r7
 8005052:	f7ff ff6d 	bl	8004f30 <__ssputs_r>
 8005056:	3001      	adds	r0, #1
 8005058:	f000 80aa 	beq.w	80051b0 <_svfiprintf_r+0x1c8>
 800505c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800505e:	445a      	add	r2, fp
 8005060:	9209      	str	r2, [sp, #36]	; 0x24
 8005062:	f89a 3000 	ldrb.w	r3, [sl]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80a2 	beq.w	80051b0 <_svfiprintf_r+0x1c8>
 800506c:	2300      	movs	r3, #0
 800506e:	f04f 32ff 	mov.w	r2, #4294967295
 8005072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005076:	f10a 0a01 	add.w	sl, sl, #1
 800507a:	9304      	str	r3, [sp, #16]
 800507c:	9307      	str	r3, [sp, #28]
 800507e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005082:	931a      	str	r3, [sp, #104]	; 0x68
 8005084:	4654      	mov	r4, sl
 8005086:	2205      	movs	r2, #5
 8005088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800508c:	4851      	ldr	r0, [pc, #324]	; (80051d4 <_svfiprintf_r+0x1ec>)
 800508e:	f7ff fac1 	bl	8004614 <memchr>
 8005092:	9a04      	ldr	r2, [sp, #16]
 8005094:	b9d8      	cbnz	r0, 80050ce <_svfiprintf_r+0xe6>
 8005096:	06d0      	lsls	r0, r2, #27
 8005098:	bf44      	itt	mi
 800509a:	2320      	movmi	r3, #32
 800509c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050a0:	0711      	lsls	r1, r2, #28
 80050a2:	bf44      	itt	mi
 80050a4:	232b      	movmi	r3, #43	; 0x2b
 80050a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050aa:	f89a 3000 	ldrb.w	r3, [sl]
 80050ae:	2b2a      	cmp	r3, #42	; 0x2a
 80050b0:	d015      	beq.n	80050de <_svfiprintf_r+0xf6>
 80050b2:	4654      	mov	r4, sl
 80050b4:	2000      	movs	r0, #0
 80050b6:	f04f 0c0a 	mov.w	ip, #10
 80050ba:	9a07      	ldr	r2, [sp, #28]
 80050bc:	4621      	mov	r1, r4
 80050be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050c2:	3b30      	subs	r3, #48	; 0x30
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	d94e      	bls.n	8005166 <_svfiprintf_r+0x17e>
 80050c8:	b1b0      	cbz	r0, 80050f8 <_svfiprintf_r+0x110>
 80050ca:	9207      	str	r2, [sp, #28]
 80050cc:	e014      	b.n	80050f8 <_svfiprintf_r+0x110>
 80050ce:	eba0 0308 	sub.w	r3, r0, r8
 80050d2:	fa09 f303 	lsl.w	r3, r9, r3
 80050d6:	4313      	orrs	r3, r2
 80050d8:	46a2      	mov	sl, r4
 80050da:	9304      	str	r3, [sp, #16]
 80050dc:	e7d2      	b.n	8005084 <_svfiprintf_r+0x9c>
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	1d19      	adds	r1, r3, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	9103      	str	r1, [sp, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bfbb      	ittet	lt
 80050ea:	425b      	neglt	r3, r3
 80050ec:	f042 0202 	orrlt.w	r2, r2, #2
 80050f0:	9307      	strge	r3, [sp, #28]
 80050f2:	9307      	strlt	r3, [sp, #28]
 80050f4:	bfb8      	it	lt
 80050f6:	9204      	strlt	r2, [sp, #16]
 80050f8:	7823      	ldrb	r3, [r4, #0]
 80050fa:	2b2e      	cmp	r3, #46	; 0x2e
 80050fc:	d10c      	bne.n	8005118 <_svfiprintf_r+0x130>
 80050fe:	7863      	ldrb	r3, [r4, #1]
 8005100:	2b2a      	cmp	r3, #42	; 0x2a
 8005102:	d135      	bne.n	8005170 <_svfiprintf_r+0x188>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	3402      	adds	r4, #2
 8005108:	1d1a      	adds	r2, r3, #4
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	9203      	str	r2, [sp, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	bfb8      	it	lt
 8005112:	f04f 33ff 	movlt.w	r3, #4294967295
 8005116:	9305      	str	r3, [sp, #20]
 8005118:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80051d8 <_svfiprintf_r+0x1f0>
 800511c:	2203      	movs	r2, #3
 800511e:	4650      	mov	r0, sl
 8005120:	7821      	ldrb	r1, [r4, #0]
 8005122:	f7ff fa77 	bl	8004614 <memchr>
 8005126:	b140      	cbz	r0, 800513a <_svfiprintf_r+0x152>
 8005128:	2340      	movs	r3, #64	; 0x40
 800512a:	eba0 000a 	sub.w	r0, r0, sl
 800512e:	fa03 f000 	lsl.w	r0, r3, r0
 8005132:	9b04      	ldr	r3, [sp, #16]
 8005134:	3401      	adds	r4, #1
 8005136:	4303      	orrs	r3, r0
 8005138:	9304      	str	r3, [sp, #16]
 800513a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513e:	2206      	movs	r2, #6
 8005140:	4826      	ldr	r0, [pc, #152]	; (80051dc <_svfiprintf_r+0x1f4>)
 8005142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005146:	f7ff fa65 	bl	8004614 <memchr>
 800514a:	2800      	cmp	r0, #0
 800514c:	d038      	beq.n	80051c0 <_svfiprintf_r+0x1d8>
 800514e:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <_svfiprintf_r+0x1f8>)
 8005150:	bb1b      	cbnz	r3, 800519a <_svfiprintf_r+0x1b2>
 8005152:	9b03      	ldr	r3, [sp, #12]
 8005154:	3307      	adds	r3, #7
 8005156:	f023 0307 	bic.w	r3, r3, #7
 800515a:	3308      	adds	r3, #8
 800515c:	9303      	str	r3, [sp, #12]
 800515e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005160:	4433      	add	r3, r6
 8005162:	9309      	str	r3, [sp, #36]	; 0x24
 8005164:	e767      	b.n	8005036 <_svfiprintf_r+0x4e>
 8005166:	460c      	mov	r4, r1
 8005168:	2001      	movs	r0, #1
 800516a:	fb0c 3202 	mla	r2, ip, r2, r3
 800516e:	e7a5      	b.n	80050bc <_svfiprintf_r+0xd4>
 8005170:	2300      	movs	r3, #0
 8005172:	f04f 0c0a 	mov.w	ip, #10
 8005176:	4619      	mov	r1, r3
 8005178:	3401      	adds	r4, #1
 800517a:	9305      	str	r3, [sp, #20]
 800517c:	4620      	mov	r0, r4
 800517e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005182:	3a30      	subs	r2, #48	; 0x30
 8005184:	2a09      	cmp	r2, #9
 8005186:	d903      	bls.n	8005190 <_svfiprintf_r+0x1a8>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0c5      	beq.n	8005118 <_svfiprintf_r+0x130>
 800518c:	9105      	str	r1, [sp, #20]
 800518e:	e7c3      	b.n	8005118 <_svfiprintf_r+0x130>
 8005190:	4604      	mov	r4, r0
 8005192:	2301      	movs	r3, #1
 8005194:	fb0c 2101 	mla	r1, ip, r1, r2
 8005198:	e7f0      	b.n	800517c <_svfiprintf_r+0x194>
 800519a:	ab03      	add	r3, sp, #12
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	462a      	mov	r2, r5
 80051a0:	4638      	mov	r0, r7
 80051a2:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <_svfiprintf_r+0x1fc>)
 80051a4:	a904      	add	r1, sp, #16
 80051a6:	f7fd ffb7 	bl	8003118 <_printf_float>
 80051aa:	1c42      	adds	r2, r0, #1
 80051ac:	4606      	mov	r6, r0
 80051ae:	d1d6      	bne.n	800515e <_svfiprintf_r+0x176>
 80051b0:	89ab      	ldrh	r3, [r5, #12]
 80051b2:	065b      	lsls	r3, r3, #25
 80051b4:	f53f af2c 	bmi.w	8005010 <_svfiprintf_r+0x28>
 80051b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ba:	b01d      	add	sp, #116	; 0x74
 80051bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c0:	ab03      	add	r3, sp, #12
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	462a      	mov	r2, r5
 80051c6:	4638      	mov	r0, r7
 80051c8:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <_svfiprintf_r+0x1fc>)
 80051ca:	a904      	add	r1, sp, #16
 80051cc:	f7fe fa40 	bl	8003650 <_printf_i>
 80051d0:	e7eb      	b.n	80051aa <_svfiprintf_r+0x1c2>
 80051d2:	bf00      	nop
 80051d4:	080061a4 	.word	0x080061a4
 80051d8:	080061aa 	.word	0x080061aa
 80051dc:	080061ae 	.word	0x080061ae
 80051e0:	08003119 	.word	0x08003119
 80051e4:	08004f31 	.word	0x08004f31

080051e8 <_sbrk_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	2300      	movs	r3, #0
 80051ec:	4d05      	ldr	r5, [pc, #20]	; (8005204 <_sbrk_r+0x1c>)
 80051ee:	4604      	mov	r4, r0
 80051f0:	4608      	mov	r0, r1
 80051f2:	602b      	str	r3, [r5, #0]
 80051f4:	f7fd fe4e 	bl	8002e94 <_sbrk>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	d102      	bne.n	8005202 <_sbrk_r+0x1a>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	b103      	cbz	r3, 8005202 <_sbrk_r+0x1a>
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	20000318 	.word	0x20000318

08005208 <__assert_func>:
 8005208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800520a:	4614      	mov	r4, r2
 800520c:	461a      	mov	r2, r3
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <__assert_func+0x2c>)
 8005210:	4605      	mov	r5, r0
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68d8      	ldr	r0, [r3, #12]
 8005216:	b14c      	cbz	r4, 800522c <__assert_func+0x24>
 8005218:	4b07      	ldr	r3, [pc, #28]	; (8005238 <__assert_func+0x30>)
 800521a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800521e:	9100      	str	r1, [sp, #0]
 8005220:	462b      	mov	r3, r5
 8005222:	4906      	ldr	r1, [pc, #24]	; (800523c <__assert_func+0x34>)
 8005224:	f000 f80e 	bl	8005244 <fiprintf>
 8005228:	f000 faaa 	bl	8005780 <abort>
 800522c:	4b04      	ldr	r3, [pc, #16]	; (8005240 <__assert_func+0x38>)
 800522e:	461c      	mov	r4, r3
 8005230:	e7f3      	b.n	800521a <__assert_func+0x12>
 8005232:	bf00      	nop
 8005234:	2000000c 	.word	0x2000000c
 8005238:	080061b5 	.word	0x080061b5
 800523c:	080061c2 	.word	0x080061c2
 8005240:	08005f5c 	.word	0x08005f5c

08005244 <fiprintf>:
 8005244:	b40e      	push	{r1, r2, r3}
 8005246:	b503      	push	{r0, r1, lr}
 8005248:	4601      	mov	r1, r0
 800524a:	ab03      	add	r3, sp, #12
 800524c:	4805      	ldr	r0, [pc, #20]	; (8005264 <fiprintf+0x20>)
 800524e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005252:	6800      	ldr	r0, [r0, #0]
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	f000 f895 	bl	8005384 <_vfiprintf_r>
 800525a:	b002      	add	sp, #8
 800525c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005260:	b003      	add	sp, #12
 8005262:	4770      	bx	lr
 8005264:	2000000c 	.word	0x2000000c

08005268 <__ascii_mbtowc>:
 8005268:	b082      	sub	sp, #8
 800526a:	b901      	cbnz	r1, 800526e <__ascii_mbtowc+0x6>
 800526c:	a901      	add	r1, sp, #4
 800526e:	b142      	cbz	r2, 8005282 <__ascii_mbtowc+0x1a>
 8005270:	b14b      	cbz	r3, 8005286 <__ascii_mbtowc+0x1e>
 8005272:	7813      	ldrb	r3, [r2, #0]
 8005274:	600b      	str	r3, [r1, #0]
 8005276:	7812      	ldrb	r2, [r2, #0]
 8005278:	1e10      	subs	r0, r2, #0
 800527a:	bf18      	it	ne
 800527c:	2001      	movne	r0, #1
 800527e:	b002      	add	sp, #8
 8005280:	4770      	bx	lr
 8005282:	4610      	mov	r0, r2
 8005284:	e7fb      	b.n	800527e <__ascii_mbtowc+0x16>
 8005286:	f06f 0001 	mvn.w	r0, #1
 800528a:	e7f8      	b.n	800527e <__ascii_mbtowc+0x16>

0800528c <memmove>:
 800528c:	4288      	cmp	r0, r1
 800528e:	b510      	push	{r4, lr}
 8005290:	eb01 0402 	add.w	r4, r1, r2
 8005294:	d902      	bls.n	800529c <memmove+0x10>
 8005296:	4284      	cmp	r4, r0
 8005298:	4623      	mov	r3, r4
 800529a:	d807      	bhi.n	80052ac <memmove+0x20>
 800529c:	1e43      	subs	r3, r0, #1
 800529e:	42a1      	cmp	r1, r4
 80052a0:	d008      	beq.n	80052b4 <memmove+0x28>
 80052a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052aa:	e7f8      	b.n	800529e <memmove+0x12>
 80052ac:	4601      	mov	r1, r0
 80052ae:	4402      	add	r2, r0
 80052b0:	428a      	cmp	r2, r1
 80052b2:	d100      	bne.n	80052b6 <memmove+0x2a>
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052be:	e7f7      	b.n	80052b0 <memmove+0x24>

080052c0 <__malloc_lock>:
 80052c0:	4801      	ldr	r0, [pc, #4]	; (80052c8 <__malloc_lock+0x8>)
 80052c2:	f000 bc19 	b.w	8005af8 <__retarget_lock_acquire_recursive>
 80052c6:	bf00      	nop
 80052c8:	2000031c 	.word	0x2000031c

080052cc <__malloc_unlock>:
 80052cc:	4801      	ldr	r0, [pc, #4]	; (80052d4 <__malloc_unlock+0x8>)
 80052ce:	f000 bc14 	b.w	8005afa <__retarget_lock_release_recursive>
 80052d2:	bf00      	nop
 80052d4:	2000031c 	.word	0x2000031c

080052d8 <_realloc_r>:
 80052d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052dc:	4680      	mov	r8, r0
 80052de:	4614      	mov	r4, r2
 80052e0:	460e      	mov	r6, r1
 80052e2:	b921      	cbnz	r1, 80052ee <_realloc_r+0x16>
 80052e4:	4611      	mov	r1, r2
 80052e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ea:	f7ff bdad 	b.w	8004e48 <_malloc_r>
 80052ee:	b92a      	cbnz	r2, 80052fc <_realloc_r+0x24>
 80052f0:	f7ff fd42 	bl	8004d78 <_free_r>
 80052f4:	4625      	mov	r5, r4
 80052f6:	4628      	mov	r0, r5
 80052f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052fc:	f000 fc64 	bl	8005bc8 <_malloc_usable_size_r>
 8005300:	4284      	cmp	r4, r0
 8005302:	4607      	mov	r7, r0
 8005304:	d802      	bhi.n	800530c <_realloc_r+0x34>
 8005306:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800530a:	d812      	bhi.n	8005332 <_realloc_r+0x5a>
 800530c:	4621      	mov	r1, r4
 800530e:	4640      	mov	r0, r8
 8005310:	f7ff fd9a 	bl	8004e48 <_malloc_r>
 8005314:	4605      	mov	r5, r0
 8005316:	2800      	cmp	r0, #0
 8005318:	d0ed      	beq.n	80052f6 <_realloc_r+0x1e>
 800531a:	42bc      	cmp	r4, r7
 800531c:	4622      	mov	r2, r4
 800531e:	4631      	mov	r1, r6
 8005320:	bf28      	it	cs
 8005322:	463a      	movcs	r2, r7
 8005324:	f7ff f984 	bl	8004630 <memcpy>
 8005328:	4631      	mov	r1, r6
 800532a:	4640      	mov	r0, r8
 800532c:	f7ff fd24 	bl	8004d78 <_free_r>
 8005330:	e7e1      	b.n	80052f6 <_realloc_r+0x1e>
 8005332:	4635      	mov	r5, r6
 8005334:	e7df      	b.n	80052f6 <_realloc_r+0x1e>

08005336 <__sfputc_r>:
 8005336:	6893      	ldr	r3, [r2, #8]
 8005338:	b410      	push	{r4}
 800533a:	3b01      	subs	r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	6093      	str	r3, [r2, #8]
 8005340:	da07      	bge.n	8005352 <__sfputc_r+0x1c>
 8005342:	6994      	ldr	r4, [r2, #24]
 8005344:	42a3      	cmp	r3, r4
 8005346:	db01      	blt.n	800534c <__sfputc_r+0x16>
 8005348:	290a      	cmp	r1, #10
 800534a:	d102      	bne.n	8005352 <__sfputc_r+0x1c>
 800534c:	bc10      	pop	{r4}
 800534e:	f000 b949 	b.w	80055e4 <__swbuf_r>
 8005352:	6813      	ldr	r3, [r2, #0]
 8005354:	1c58      	adds	r0, r3, #1
 8005356:	6010      	str	r0, [r2, #0]
 8005358:	7019      	strb	r1, [r3, #0]
 800535a:	4608      	mov	r0, r1
 800535c:	bc10      	pop	{r4}
 800535e:	4770      	bx	lr

08005360 <__sfputs_r>:
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	4606      	mov	r6, r0
 8005364:	460f      	mov	r7, r1
 8005366:	4614      	mov	r4, r2
 8005368:	18d5      	adds	r5, r2, r3
 800536a:	42ac      	cmp	r4, r5
 800536c:	d101      	bne.n	8005372 <__sfputs_r+0x12>
 800536e:	2000      	movs	r0, #0
 8005370:	e007      	b.n	8005382 <__sfputs_r+0x22>
 8005372:	463a      	mov	r2, r7
 8005374:	4630      	mov	r0, r6
 8005376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800537a:	f7ff ffdc 	bl	8005336 <__sfputc_r>
 800537e:	1c43      	adds	r3, r0, #1
 8005380:	d1f3      	bne.n	800536a <__sfputs_r+0xa>
 8005382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005384 <_vfiprintf_r>:
 8005384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005388:	460d      	mov	r5, r1
 800538a:	4614      	mov	r4, r2
 800538c:	4698      	mov	r8, r3
 800538e:	4606      	mov	r6, r0
 8005390:	b09d      	sub	sp, #116	; 0x74
 8005392:	b118      	cbz	r0, 800539c <_vfiprintf_r+0x18>
 8005394:	6983      	ldr	r3, [r0, #24]
 8005396:	b90b      	cbnz	r3, 800539c <_vfiprintf_r+0x18>
 8005398:	f000 fb10 	bl	80059bc <__sinit>
 800539c:	4b89      	ldr	r3, [pc, #548]	; (80055c4 <_vfiprintf_r+0x240>)
 800539e:	429d      	cmp	r5, r3
 80053a0:	d11b      	bne.n	80053da <_vfiprintf_r+0x56>
 80053a2:	6875      	ldr	r5, [r6, #4]
 80053a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053a6:	07d9      	lsls	r1, r3, #31
 80053a8:	d405      	bmi.n	80053b6 <_vfiprintf_r+0x32>
 80053aa:	89ab      	ldrh	r3, [r5, #12]
 80053ac:	059a      	lsls	r2, r3, #22
 80053ae:	d402      	bmi.n	80053b6 <_vfiprintf_r+0x32>
 80053b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053b2:	f000 fba1 	bl	8005af8 <__retarget_lock_acquire_recursive>
 80053b6:	89ab      	ldrh	r3, [r5, #12]
 80053b8:	071b      	lsls	r3, r3, #28
 80053ba:	d501      	bpl.n	80053c0 <_vfiprintf_r+0x3c>
 80053bc:	692b      	ldr	r3, [r5, #16]
 80053be:	b9eb      	cbnz	r3, 80053fc <_vfiprintf_r+0x78>
 80053c0:	4629      	mov	r1, r5
 80053c2:	4630      	mov	r0, r6
 80053c4:	f000 f96e 	bl	80056a4 <__swsetup_r>
 80053c8:	b1c0      	cbz	r0, 80053fc <_vfiprintf_r+0x78>
 80053ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053cc:	07dc      	lsls	r4, r3, #31
 80053ce:	d50e      	bpl.n	80053ee <_vfiprintf_r+0x6a>
 80053d0:	f04f 30ff 	mov.w	r0, #4294967295
 80053d4:	b01d      	add	sp, #116	; 0x74
 80053d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053da:	4b7b      	ldr	r3, [pc, #492]	; (80055c8 <_vfiprintf_r+0x244>)
 80053dc:	429d      	cmp	r5, r3
 80053de:	d101      	bne.n	80053e4 <_vfiprintf_r+0x60>
 80053e0:	68b5      	ldr	r5, [r6, #8]
 80053e2:	e7df      	b.n	80053a4 <_vfiprintf_r+0x20>
 80053e4:	4b79      	ldr	r3, [pc, #484]	; (80055cc <_vfiprintf_r+0x248>)
 80053e6:	429d      	cmp	r5, r3
 80053e8:	bf08      	it	eq
 80053ea:	68f5      	ldreq	r5, [r6, #12]
 80053ec:	e7da      	b.n	80053a4 <_vfiprintf_r+0x20>
 80053ee:	89ab      	ldrh	r3, [r5, #12]
 80053f0:	0598      	lsls	r0, r3, #22
 80053f2:	d4ed      	bmi.n	80053d0 <_vfiprintf_r+0x4c>
 80053f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053f6:	f000 fb80 	bl	8005afa <__retarget_lock_release_recursive>
 80053fa:	e7e9      	b.n	80053d0 <_vfiprintf_r+0x4c>
 80053fc:	2300      	movs	r3, #0
 80053fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005400:	2320      	movs	r3, #32
 8005402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005406:	2330      	movs	r3, #48	; 0x30
 8005408:	f04f 0901 	mov.w	r9, #1
 800540c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005410:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80055d0 <_vfiprintf_r+0x24c>
 8005414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005418:	4623      	mov	r3, r4
 800541a:	469a      	mov	sl, r3
 800541c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005420:	b10a      	cbz	r2, 8005426 <_vfiprintf_r+0xa2>
 8005422:	2a25      	cmp	r2, #37	; 0x25
 8005424:	d1f9      	bne.n	800541a <_vfiprintf_r+0x96>
 8005426:	ebba 0b04 	subs.w	fp, sl, r4
 800542a:	d00b      	beq.n	8005444 <_vfiprintf_r+0xc0>
 800542c:	465b      	mov	r3, fp
 800542e:	4622      	mov	r2, r4
 8005430:	4629      	mov	r1, r5
 8005432:	4630      	mov	r0, r6
 8005434:	f7ff ff94 	bl	8005360 <__sfputs_r>
 8005438:	3001      	adds	r0, #1
 800543a:	f000 80aa 	beq.w	8005592 <_vfiprintf_r+0x20e>
 800543e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005440:	445a      	add	r2, fp
 8005442:	9209      	str	r2, [sp, #36]	; 0x24
 8005444:	f89a 3000 	ldrb.w	r3, [sl]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80a2 	beq.w	8005592 <_vfiprintf_r+0x20e>
 800544e:	2300      	movs	r3, #0
 8005450:	f04f 32ff 	mov.w	r2, #4294967295
 8005454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005458:	f10a 0a01 	add.w	sl, sl, #1
 800545c:	9304      	str	r3, [sp, #16]
 800545e:	9307      	str	r3, [sp, #28]
 8005460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005464:	931a      	str	r3, [sp, #104]	; 0x68
 8005466:	4654      	mov	r4, sl
 8005468:	2205      	movs	r2, #5
 800546a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800546e:	4858      	ldr	r0, [pc, #352]	; (80055d0 <_vfiprintf_r+0x24c>)
 8005470:	f7ff f8d0 	bl	8004614 <memchr>
 8005474:	9a04      	ldr	r2, [sp, #16]
 8005476:	b9d8      	cbnz	r0, 80054b0 <_vfiprintf_r+0x12c>
 8005478:	06d1      	lsls	r1, r2, #27
 800547a:	bf44      	itt	mi
 800547c:	2320      	movmi	r3, #32
 800547e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005482:	0713      	lsls	r3, r2, #28
 8005484:	bf44      	itt	mi
 8005486:	232b      	movmi	r3, #43	; 0x2b
 8005488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800548c:	f89a 3000 	ldrb.w	r3, [sl]
 8005490:	2b2a      	cmp	r3, #42	; 0x2a
 8005492:	d015      	beq.n	80054c0 <_vfiprintf_r+0x13c>
 8005494:	4654      	mov	r4, sl
 8005496:	2000      	movs	r0, #0
 8005498:	f04f 0c0a 	mov.w	ip, #10
 800549c:	9a07      	ldr	r2, [sp, #28]
 800549e:	4621      	mov	r1, r4
 80054a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054a4:	3b30      	subs	r3, #48	; 0x30
 80054a6:	2b09      	cmp	r3, #9
 80054a8:	d94e      	bls.n	8005548 <_vfiprintf_r+0x1c4>
 80054aa:	b1b0      	cbz	r0, 80054da <_vfiprintf_r+0x156>
 80054ac:	9207      	str	r2, [sp, #28]
 80054ae:	e014      	b.n	80054da <_vfiprintf_r+0x156>
 80054b0:	eba0 0308 	sub.w	r3, r0, r8
 80054b4:	fa09 f303 	lsl.w	r3, r9, r3
 80054b8:	4313      	orrs	r3, r2
 80054ba:	46a2      	mov	sl, r4
 80054bc:	9304      	str	r3, [sp, #16]
 80054be:	e7d2      	b.n	8005466 <_vfiprintf_r+0xe2>
 80054c0:	9b03      	ldr	r3, [sp, #12]
 80054c2:	1d19      	adds	r1, r3, #4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	9103      	str	r1, [sp, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bfbb      	ittet	lt
 80054cc:	425b      	neglt	r3, r3
 80054ce:	f042 0202 	orrlt.w	r2, r2, #2
 80054d2:	9307      	strge	r3, [sp, #28]
 80054d4:	9307      	strlt	r3, [sp, #28]
 80054d6:	bfb8      	it	lt
 80054d8:	9204      	strlt	r2, [sp, #16]
 80054da:	7823      	ldrb	r3, [r4, #0]
 80054dc:	2b2e      	cmp	r3, #46	; 0x2e
 80054de:	d10c      	bne.n	80054fa <_vfiprintf_r+0x176>
 80054e0:	7863      	ldrb	r3, [r4, #1]
 80054e2:	2b2a      	cmp	r3, #42	; 0x2a
 80054e4:	d135      	bne.n	8005552 <_vfiprintf_r+0x1ce>
 80054e6:	9b03      	ldr	r3, [sp, #12]
 80054e8:	3402      	adds	r4, #2
 80054ea:	1d1a      	adds	r2, r3, #4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	9203      	str	r2, [sp, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	bfb8      	it	lt
 80054f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80054f8:	9305      	str	r3, [sp, #20]
 80054fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80055d4 <_vfiprintf_r+0x250>
 80054fe:	2203      	movs	r2, #3
 8005500:	4650      	mov	r0, sl
 8005502:	7821      	ldrb	r1, [r4, #0]
 8005504:	f7ff f886 	bl	8004614 <memchr>
 8005508:	b140      	cbz	r0, 800551c <_vfiprintf_r+0x198>
 800550a:	2340      	movs	r3, #64	; 0x40
 800550c:	eba0 000a 	sub.w	r0, r0, sl
 8005510:	fa03 f000 	lsl.w	r0, r3, r0
 8005514:	9b04      	ldr	r3, [sp, #16]
 8005516:	3401      	adds	r4, #1
 8005518:	4303      	orrs	r3, r0
 800551a:	9304      	str	r3, [sp, #16]
 800551c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005520:	2206      	movs	r2, #6
 8005522:	482d      	ldr	r0, [pc, #180]	; (80055d8 <_vfiprintf_r+0x254>)
 8005524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005528:	f7ff f874 	bl	8004614 <memchr>
 800552c:	2800      	cmp	r0, #0
 800552e:	d03f      	beq.n	80055b0 <_vfiprintf_r+0x22c>
 8005530:	4b2a      	ldr	r3, [pc, #168]	; (80055dc <_vfiprintf_r+0x258>)
 8005532:	bb1b      	cbnz	r3, 800557c <_vfiprintf_r+0x1f8>
 8005534:	9b03      	ldr	r3, [sp, #12]
 8005536:	3307      	adds	r3, #7
 8005538:	f023 0307 	bic.w	r3, r3, #7
 800553c:	3308      	adds	r3, #8
 800553e:	9303      	str	r3, [sp, #12]
 8005540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005542:	443b      	add	r3, r7
 8005544:	9309      	str	r3, [sp, #36]	; 0x24
 8005546:	e767      	b.n	8005418 <_vfiprintf_r+0x94>
 8005548:	460c      	mov	r4, r1
 800554a:	2001      	movs	r0, #1
 800554c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005550:	e7a5      	b.n	800549e <_vfiprintf_r+0x11a>
 8005552:	2300      	movs	r3, #0
 8005554:	f04f 0c0a 	mov.w	ip, #10
 8005558:	4619      	mov	r1, r3
 800555a:	3401      	adds	r4, #1
 800555c:	9305      	str	r3, [sp, #20]
 800555e:	4620      	mov	r0, r4
 8005560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005564:	3a30      	subs	r2, #48	; 0x30
 8005566:	2a09      	cmp	r2, #9
 8005568:	d903      	bls.n	8005572 <_vfiprintf_r+0x1ee>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0c5      	beq.n	80054fa <_vfiprintf_r+0x176>
 800556e:	9105      	str	r1, [sp, #20]
 8005570:	e7c3      	b.n	80054fa <_vfiprintf_r+0x176>
 8005572:	4604      	mov	r4, r0
 8005574:	2301      	movs	r3, #1
 8005576:	fb0c 2101 	mla	r1, ip, r1, r2
 800557a:	e7f0      	b.n	800555e <_vfiprintf_r+0x1da>
 800557c:	ab03      	add	r3, sp, #12
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	462a      	mov	r2, r5
 8005582:	4630      	mov	r0, r6
 8005584:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <_vfiprintf_r+0x25c>)
 8005586:	a904      	add	r1, sp, #16
 8005588:	f7fd fdc6 	bl	8003118 <_printf_float>
 800558c:	4607      	mov	r7, r0
 800558e:	1c78      	adds	r0, r7, #1
 8005590:	d1d6      	bne.n	8005540 <_vfiprintf_r+0x1bc>
 8005592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005594:	07d9      	lsls	r1, r3, #31
 8005596:	d405      	bmi.n	80055a4 <_vfiprintf_r+0x220>
 8005598:	89ab      	ldrh	r3, [r5, #12]
 800559a:	059a      	lsls	r2, r3, #22
 800559c:	d402      	bmi.n	80055a4 <_vfiprintf_r+0x220>
 800559e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055a0:	f000 faab 	bl	8005afa <__retarget_lock_release_recursive>
 80055a4:	89ab      	ldrh	r3, [r5, #12]
 80055a6:	065b      	lsls	r3, r3, #25
 80055a8:	f53f af12 	bmi.w	80053d0 <_vfiprintf_r+0x4c>
 80055ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ae:	e711      	b.n	80053d4 <_vfiprintf_r+0x50>
 80055b0:	ab03      	add	r3, sp, #12
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	462a      	mov	r2, r5
 80055b6:	4630      	mov	r0, r6
 80055b8:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <_vfiprintf_r+0x25c>)
 80055ba:	a904      	add	r1, sp, #16
 80055bc:	f7fe f848 	bl	8003650 <_printf_i>
 80055c0:	e7e4      	b.n	800558c <_vfiprintf_r+0x208>
 80055c2:	bf00      	nop
 80055c4:	0800631c 	.word	0x0800631c
 80055c8:	0800633c 	.word	0x0800633c
 80055cc:	080062fc 	.word	0x080062fc
 80055d0:	080061a4 	.word	0x080061a4
 80055d4:	080061aa 	.word	0x080061aa
 80055d8:	080061ae 	.word	0x080061ae
 80055dc:	08003119 	.word	0x08003119
 80055e0:	08005361 	.word	0x08005361

080055e4 <__swbuf_r>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	460e      	mov	r6, r1
 80055e8:	4614      	mov	r4, r2
 80055ea:	4605      	mov	r5, r0
 80055ec:	b118      	cbz	r0, 80055f6 <__swbuf_r+0x12>
 80055ee:	6983      	ldr	r3, [r0, #24]
 80055f0:	b90b      	cbnz	r3, 80055f6 <__swbuf_r+0x12>
 80055f2:	f000 f9e3 	bl	80059bc <__sinit>
 80055f6:	4b21      	ldr	r3, [pc, #132]	; (800567c <__swbuf_r+0x98>)
 80055f8:	429c      	cmp	r4, r3
 80055fa:	d12b      	bne.n	8005654 <__swbuf_r+0x70>
 80055fc:	686c      	ldr	r4, [r5, #4]
 80055fe:	69a3      	ldr	r3, [r4, #24]
 8005600:	60a3      	str	r3, [r4, #8]
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	071a      	lsls	r2, r3, #28
 8005606:	d52f      	bpl.n	8005668 <__swbuf_r+0x84>
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	b36b      	cbz	r3, 8005668 <__swbuf_r+0x84>
 800560c:	6923      	ldr	r3, [r4, #16]
 800560e:	6820      	ldr	r0, [r4, #0]
 8005610:	b2f6      	uxtb	r6, r6
 8005612:	1ac0      	subs	r0, r0, r3
 8005614:	6963      	ldr	r3, [r4, #20]
 8005616:	4637      	mov	r7, r6
 8005618:	4283      	cmp	r3, r0
 800561a:	dc04      	bgt.n	8005626 <__swbuf_r+0x42>
 800561c:	4621      	mov	r1, r4
 800561e:	4628      	mov	r0, r5
 8005620:	f000 f938 	bl	8005894 <_fflush_r>
 8005624:	bb30      	cbnz	r0, 8005674 <__swbuf_r+0x90>
 8005626:	68a3      	ldr	r3, [r4, #8]
 8005628:	3001      	adds	r0, #1
 800562a:	3b01      	subs	r3, #1
 800562c:	60a3      	str	r3, [r4, #8]
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	6022      	str	r2, [r4, #0]
 8005634:	701e      	strb	r6, [r3, #0]
 8005636:	6963      	ldr	r3, [r4, #20]
 8005638:	4283      	cmp	r3, r0
 800563a:	d004      	beq.n	8005646 <__swbuf_r+0x62>
 800563c:	89a3      	ldrh	r3, [r4, #12]
 800563e:	07db      	lsls	r3, r3, #31
 8005640:	d506      	bpl.n	8005650 <__swbuf_r+0x6c>
 8005642:	2e0a      	cmp	r6, #10
 8005644:	d104      	bne.n	8005650 <__swbuf_r+0x6c>
 8005646:	4621      	mov	r1, r4
 8005648:	4628      	mov	r0, r5
 800564a:	f000 f923 	bl	8005894 <_fflush_r>
 800564e:	b988      	cbnz	r0, 8005674 <__swbuf_r+0x90>
 8005650:	4638      	mov	r0, r7
 8005652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <__swbuf_r+0x9c>)
 8005656:	429c      	cmp	r4, r3
 8005658:	d101      	bne.n	800565e <__swbuf_r+0x7a>
 800565a:	68ac      	ldr	r4, [r5, #8]
 800565c:	e7cf      	b.n	80055fe <__swbuf_r+0x1a>
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <__swbuf_r+0xa0>)
 8005660:	429c      	cmp	r4, r3
 8005662:	bf08      	it	eq
 8005664:	68ec      	ldreq	r4, [r5, #12]
 8005666:	e7ca      	b.n	80055fe <__swbuf_r+0x1a>
 8005668:	4621      	mov	r1, r4
 800566a:	4628      	mov	r0, r5
 800566c:	f000 f81a 	bl	80056a4 <__swsetup_r>
 8005670:	2800      	cmp	r0, #0
 8005672:	d0cb      	beq.n	800560c <__swbuf_r+0x28>
 8005674:	f04f 37ff 	mov.w	r7, #4294967295
 8005678:	e7ea      	b.n	8005650 <__swbuf_r+0x6c>
 800567a:	bf00      	nop
 800567c:	0800631c 	.word	0x0800631c
 8005680:	0800633c 	.word	0x0800633c
 8005684:	080062fc 	.word	0x080062fc

08005688 <__ascii_wctomb>:
 8005688:	4603      	mov	r3, r0
 800568a:	4608      	mov	r0, r1
 800568c:	b141      	cbz	r1, 80056a0 <__ascii_wctomb+0x18>
 800568e:	2aff      	cmp	r2, #255	; 0xff
 8005690:	d904      	bls.n	800569c <__ascii_wctomb+0x14>
 8005692:	228a      	movs	r2, #138	; 0x8a
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	4770      	bx	lr
 800569c:	2001      	movs	r0, #1
 800569e:	700a      	strb	r2, [r1, #0]
 80056a0:	4770      	bx	lr
	...

080056a4 <__swsetup_r>:
 80056a4:	4b32      	ldr	r3, [pc, #200]	; (8005770 <__swsetup_r+0xcc>)
 80056a6:	b570      	push	{r4, r5, r6, lr}
 80056a8:	681d      	ldr	r5, [r3, #0]
 80056aa:	4606      	mov	r6, r0
 80056ac:	460c      	mov	r4, r1
 80056ae:	b125      	cbz	r5, 80056ba <__swsetup_r+0x16>
 80056b0:	69ab      	ldr	r3, [r5, #24]
 80056b2:	b913      	cbnz	r3, 80056ba <__swsetup_r+0x16>
 80056b4:	4628      	mov	r0, r5
 80056b6:	f000 f981 	bl	80059bc <__sinit>
 80056ba:	4b2e      	ldr	r3, [pc, #184]	; (8005774 <__swsetup_r+0xd0>)
 80056bc:	429c      	cmp	r4, r3
 80056be:	d10f      	bne.n	80056e0 <__swsetup_r+0x3c>
 80056c0:	686c      	ldr	r4, [r5, #4]
 80056c2:	89a3      	ldrh	r3, [r4, #12]
 80056c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056c8:	0719      	lsls	r1, r3, #28
 80056ca:	d42c      	bmi.n	8005726 <__swsetup_r+0x82>
 80056cc:	06dd      	lsls	r5, r3, #27
 80056ce:	d411      	bmi.n	80056f4 <__swsetup_r+0x50>
 80056d0:	2309      	movs	r3, #9
 80056d2:	6033      	str	r3, [r6, #0]
 80056d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056d8:	f04f 30ff 	mov.w	r0, #4294967295
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	e03e      	b.n	800575e <__swsetup_r+0xba>
 80056e0:	4b25      	ldr	r3, [pc, #148]	; (8005778 <__swsetup_r+0xd4>)
 80056e2:	429c      	cmp	r4, r3
 80056e4:	d101      	bne.n	80056ea <__swsetup_r+0x46>
 80056e6:	68ac      	ldr	r4, [r5, #8]
 80056e8:	e7eb      	b.n	80056c2 <__swsetup_r+0x1e>
 80056ea:	4b24      	ldr	r3, [pc, #144]	; (800577c <__swsetup_r+0xd8>)
 80056ec:	429c      	cmp	r4, r3
 80056ee:	bf08      	it	eq
 80056f0:	68ec      	ldreq	r4, [r5, #12]
 80056f2:	e7e6      	b.n	80056c2 <__swsetup_r+0x1e>
 80056f4:	0758      	lsls	r0, r3, #29
 80056f6:	d512      	bpl.n	800571e <__swsetup_r+0x7a>
 80056f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056fa:	b141      	cbz	r1, 800570e <__swsetup_r+0x6a>
 80056fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005700:	4299      	cmp	r1, r3
 8005702:	d002      	beq.n	800570a <__swsetup_r+0x66>
 8005704:	4630      	mov	r0, r6
 8005706:	f7ff fb37 	bl	8004d78 <_free_r>
 800570a:	2300      	movs	r3, #0
 800570c:	6363      	str	r3, [r4, #52]	; 0x34
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005714:	81a3      	strh	r3, [r4, #12]
 8005716:	2300      	movs	r3, #0
 8005718:	6063      	str	r3, [r4, #4]
 800571a:	6923      	ldr	r3, [r4, #16]
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	89a3      	ldrh	r3, [r4, #12]
 8005720:	f043 0308 	orr.w	r3, r3, #8
 8005724:	81a3      	strh	r3, [r4, #12]
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	b94b      	cbnz	r3, 800573e <__swsetup_r+0x9a>
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005734:	d003      	beq.n	800573e <__swsetup_r+0x9a>
 8005736:	4621      	mov	r1, r4
 8005738:	4630      	mov	r0, r6
 800573a:	f000 fa05 	bl	8005b48 <__smakebuf_r>
 800573e:	89a0      	ldrh	r0, [r4, #12]
 8005740:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005744:	f010 0301 	ands.w	r3, r0, #1
 8005748:	d00a      	beq.n	8005760 <__swsetup_r+0xbc>
 800574a:	2300      	movs	r3, #0
 800574c:	60a3      	str	r3, [r4, #8]
 800574e:	6963      	ldr	r3, [r4, #20]
 8005750:	425b      	negs	r3, r3
 8005752:	61a3      	str	r3, [r4, #24]
 8005754:	6923      	ldr	r3, [r4, #16]
 8005756:	b943      	cbnz	r3, 800576a <__swsetup_r+0xc6>
 8005758:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800575c:	d1ba      	bne.n	80056d4 <__swsetup_r+0x30>
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	0781      	lsls	r1, r0, #30
 8005762:	bf58      	it	pl
 8005764:	6963      	ldrpl	r3, [r4, #20]
 8005766:	60a3      	str	r3, [r4, #8]
 8005768:	e7f4      	b.n	8005754 <__swsetup_r+0xb0>
 800576a:	2000      	movs	r0, #0
 800576c:	e7f7      	b.n	800575e <__swsetup_r+0xba>
 800576e:	bf00      	nop
 8005770:	2000000c 	.word	0x2000000c
 8005774:	0800631c 	.word	0x0800631c
 8005778:	0800633c 	.word	0x0800633c
 800577c:	080062fc 	.word	0x080062fc

08005780 <abort>:
 8005780:	2006      	movs	r0, #6
 8005782:	b508      	push	{r3, lr}
 8005784:	f000 fa50 	bl	8005c28 <raise>
 8005788:	2001      	movs	r0, #1
 800578a:	f7fd fb61 	bl	8002e50 <_exit>
	...

08005790 <__sflush_r>:
 8005790:	898a      	ldrh	r2, [r1, #12]
 8005792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005794:	4605      	mov	r5, r0
 8005796:	0710      	lsls	r0, r2, #28
 8005798:	460c      	mov	r4, r1
 800579a:	d457      	bmi.n	800584c <__sflush_r+0xbc>
 800579c:	684b      	ldr	r3, [r1, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	dc04      	bgt.n	80057ac <__sflush_r+0x1c>
 80057a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	dc01      	bgt.n	80057ac <__sflush_r+0x1c>
 80057a8:	2000      	movs	r0, #0
 80057aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ae:	2e00      	cmp	r6, #0
 80057b0:	d0fa      	beq.n	80057a8 <__sflush_r+0x18>
 80057b2:	2300      	movs	r3, #0
 80057b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057b8:	682f      	ldr	r7, [r5, #0]
 80057ba:	602b      	str	r3, [r5, #0]
 80057bc:	d032      	beq.n	8005824 <__sflush_r+0x94>
 80057be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	075a      	lsls	r2, r3, #29
 80057c4:	d505      	bpl.n	80057d2 <__sflush_r+0x42>
 80057c6:	6863      	ldr	r3, [r4, #4]
 80057c8:	1ac0      	subs	r0, r0, r3
 80057ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057cc:	b10b      	cbz	r3, 80057d2 <__sflush_r+0x42>
 80057ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057d0:	1ac0      	subs	r0, r0, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	4602      	mov	r2, r0
 80057d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057d8:	4628      	mov	r0, r5
 80057da:	6a21      	ldr	r1, [r4, #32]
 80057dc:	47b0      	blx	r6
 80057de:	1c43      	adds	r3, r0, #1
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	d106      	bne.n	80057f2 <__sflush_r+0x62>
 80057e4:	6829      	ldr	r1, [r5, #0]
 80057e6:	291d      	cmp	r1, #29
 80057e8:	d82c      	bhi.n	8005844 <__sflush_r+0xb4>
 80057ea:	4a29      	ldr	r2, [pc, #164]	; (8005890 <__sflush_r+0x100>)
 80057ec:	40ca      	lsrs	r2, r1
 80057ee:	07d6      	lsls	r6, r2, #31
 80057f0:	d528      	bpl.n	8005844 <__sflush_r+0xb4>
 80057f2:	2200      	movs	r2, #0
 80057f4:	6062      	str	r2, [r4, #4]
 80057f6:	6922      	ldr	r2, [r4, #16]
 80057f8:	04d9      	lsls	r1, r3, #19
 80057fa:	6022      	str	r2, [r4, #0]
 80057fc:	d504      	bpl.n	8005808 <__sflush_r+0x78>
 80057fe:	1c42      	adds	r2, r0, #1
 8005800:	d101      	bne.n	8005806 <__sflush_r+0x76>
 8005802:	682b      	ldr	r3, [r5, #0]
 8005804:	b903      	cbnz	r3, 8005808 <__sflush_r+0x78>
 8005806:	6560      	str	r0, [r4, #84]	; 0x54
 8005808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800580a:	602f      	str	r7, [r5, #0]
 800580c:	2900      	cmp	r1, #0
 800580e:	d0cb      	beq.n	80057a8 <__sflush_r+0x18>
 8005810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005814:	4299      	cmp	r1, r3
 8005816:	d002      	beq.n	800581e <__sflush_r+0x8e>
 8005818:	4628      	mov	r0, r5
 800581a:	f7ff faad 	bl	8004d78 <_free_r>
 800581e:	2000      	movs	r0, #0
 8005820:	6360      	str	r0, [r4, #52]	; 0x34
 8005822:	e7c2      	b.n	80057aa <__sflush_r+0x1a>
 8005824:	6a21      	ldr	r1, [r4, #32]
 8005826:	2301      	movs	r3, #1
 8005828:	4628      	mov	r0, r5
 800582a:	47b0      	blx	r6
 800582c:	1c41      	adds	r1, r0, #1
 800582e:	d1c7      	bne.n	80057c0 <__sflush_r+0x30>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0c4      	beq.n	80057c0 <__sflush_r+0x30>
 8005836:	2b1d      	cmp	r3, #29
 8005838:	d001      	beq.n	800583e <__sflush_r+0xae>
 800583a:	2b16      	cmp	r3, #22
 800583c:	d101      	bne.n	8005842 <__sflush_r+0xb2>
 800583e:	602f      	str	r7, [r5, #0]
 8005840:	e7b2      	b.n	80057a8 <__sflush_r+0x18>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005848:	81a3      	strh	r3, [r4, #12]
 800584a:	e7ae      	b.n	80057aa <__sflush_r+0x1a>
 800584c:	690f      	ldr	r7, [r1, #16]
 800584e:	2f00      	cmp	r7, #0
 8005850:	d0aa      	beq.n	80057a8 <__sflush_r+0x18>
 8005852:	0793      	lsls	r3, r2, #30
 8005854:	bf18      	it	ne
 8005856:	2300      	movne	r3, #0
 8005858:	680e      	ldr	r6, [r1, #0]
 800585a:	bf08      	it	eq
 800585c:	694b      	ldreq	r3, [r1, #20]
 800585e:	1bf6      	subs	r6, r6, r7
 8005860:	600f      	str	r7, [r1, #0]
 8005862:	608b      	str	r3, [r1, #8]
 8005864:	2e00      	cmp	r6, #0
 8005866:	dd9f      	ble.n	80057a8 <__sflush_r+0x18>
 8005868:	4633      	mov	r3, r6
 800586a:	463a      	mov	r2, r7
 800586c:	4628      	mov	r0, r5
 800586e:	6a21      	ldr	r1, [r4, #32]
 8005870:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005874:	47e0      	blx	ip
 8005876:	2800      	cmp	r0, #0
 8005878:	dc06      	bgt.n	8005888 <__sflush_r+0xf8>
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f04f 30ff 	mov.w	r0, #4294967295
 8005880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005884:	81a3      	strh	r3, [r4, #12]
 8005886:	e790      	b.n	80057aa <__sflush_r+0x1a>
 8005888:	4407      	add	r7, r0
 800588a:	1a36      	subs	r6, r6, r0
 800588c:	e7ea      	b.n	8005864 <__sflush_r+0xd4>
 800588e:	bf00      	nop
 8005890:	20400001 	.word	0x20400001

08005894 <_fflush_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	690b      	ldr	r3, [r1, #16]
 8005898:	4605      	mov	r5, r0
 800589a:	460c      	mov	r4, r1
 800589c:	b913      	cbnz	r3, 80058a4 <_fflush_r+0x10>
 800589e:	2500      	movs	r5, #0
 80058a0:	4628      	mov	r0, r5
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	b118      	cbz	r0, 80058ae <_fflush_r+0x1a>
 80058a6:	6983      	ldr	r3, [r0, #24]
 80058a8:	b90b      	cbnz	r3, 80058ae <_fflush_r+0x1a>
 80058aa:	f000 f887 	bl	80059bc <__sinit>
 80058ae:	4b14      	ldr	r3, [pc, #80]	; (8005900 <_fflush_r+0x6c>)
 80058b0:	429c      	cmp	r4, r3
 80058b2:	d11b      	bne.n	80058ec <_fflush_r+0x58>
 80058b4:	686c      	ldr	r4, [r5, #4]
 80058b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0ef      	beq.n	800589e <_fflush_r+0xa>
 80058be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058c0:	07d0      	lsls	r0, r2, #31
 80058c2:	d404      	bmi.n	80058ce <_fflush_r+0x3a>
 80058c4:	0599      	lsls	r1, r3, #22
 80058c6:	d402      	bmi.n	80058ce <_fflush_r+0x3a>
 80058c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ca:	f000 f915 	bl	8005af8 <__retarget_lock_acquire_recursive>
 80058ce:	4628      	mov	r0, r5
 80058d0:	4621      	mov	r1, r4
 80058d2:	f7ff ff5d 	bl	8005790 <__sflush_r>
 80058d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058d8:	4605      	mov	r5, r0
 80058da:	07da      	lsls	r2, r3, #31
 80058dc:	d4e0      	bmi.n	80058a0 <_fflush_r+0xc>
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	059b      	lsls	r3, r3, #22
 80058e2:	d4dd      	bmi.n	80058a0 <_fflush_r+0xc>
 80058e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058e6:	f000 f908 	bl	8005afa <__retarget_lock_release_recursive>
 80058ea:	e7d9      	b.n	80058a0 <_fflush_r+0xc>
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <_fflush_r+0x70>)
 80058ee:	429c      	cmp	r4, r3
 80058f0:	d101      	bne.n	80058f6 <_fflush_r+0x62>
 80058f2:	68ac      	ldr	r4, [r5, #8]
 80058f4:	e7df      	b.n	80058b6 <_fflush_r+0x22>
 80058f6:	4b04      	ldr	r3, [pc, #16]	; (8005908 <_fflush_r+0x74>)
 80058f8:	429c      	cmp	r4, r3
 80058fa:	bf08      	it	eq
 80058fc:	68ec      	ldreq	r4, [r5, #12]
 80058fe:	e7da      	b.n	80058b6 <_fflush_r+0x22>
 8005900:	0800631c 	.word	0x0800631c
 8005904:	0800633c 	.word	0x0800633c
 8005908:	080062fc 	.word	0x080062fc

0800590c <std>:
 800590c:	2300      	movs	r3, #0
 800590e:	b510      	push	{r4, lr}
 8005910:	4604      	mov	r4, r0
 8005912:	e9c0 3300 	strd	r3, r3, [r0]
 8005916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800591a:	6083      	str	r3, [r0, #8]
 800591c:	8181      	strh	r1, [r0, #12]
 800591e:	6643      	str	r3, [r0, #100]	; 0x64
 8005920:	81c2      	strh	r2, [r0, #14]
 8005922:	6183      	str	r3, [r0, #24]
 8005924:	4619      	mov	r1, r3
 8005926:	2208      	movs	r2, #8
 8005928:	305c      	adds	r0, #92	; 0x5c
 800592a:	f7fd fb4f 	bl	8002fcc <memset>
 800592e:	4b05      	ldr	r3, [pc, #20]	; (8005944 <std+0x38>)
 8005930:	6224      	str	r4, [r4, #32]
 8005932:	6263      	str	r3, [r4, #36]	; 0x24
 8005934:	4b04      	ldr	r3, [pc, #16]	; (8005948 <std+0x3c>)
 8005936:	62a3      	str	r3, [r4, #40]	; 0x28
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <std+0x40>)
 800593a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <std+0x44>)
 800593e:	6323      	str	r3, [r4, #48]	; 0x30
 8005940:	bd10      	pop	{r4, pc}
 8005942:	bf00      	nop
 8005944:	08005c61 	.word	0x08005c61
 8005948:	08005c83 	.word	0x08005c83
 800594c:	08005cbb 	.word	0x08005cbb
 8005950:	08005cdf 	.word	0x08005cdf

08005954 <_cleanup_r>:
 8005954:	4901      	ldr	r1, [pc, #4]	; (800595c <_cleanup_r+0x8>)
 8005956:	f000 b8af 	b.w	8005ab8 <_fwalk_reent>
 800595a:	bf00      	nop
 800595c:	08005895 	.word	0x08005895

08005960 <__sfmoreglue>:
 8005960:	2268      	movs	r2, #104	; 0x68
 8005962:	b570      	push	{r4, r5, r6, lr}
 8005964:	1e4d      	subs	r5, r1, #1
 8005966:	4355      	muls	r5, r2
 8005968:	460e      	mov	r6, r1
 800596a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800596e:	f7ff fa6b 	bl	8004e48 <_malloc_r>
 8005972:	4604      	mov	r4, r0
 8005974:	b140      	cbz	r0, 8005988 <__sfmoreglue+0x28>
 8005976:	2100      	movs	r1, #0
 8005978:	e9c0 1600 	strd	r1, r6, [r0]
 800597c:	300c      	adds	r0, #12
 800597e:	60a0      	str	r0, [r4, #8]
 8005980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005984:	f7fd fb22 	bl	8002fcc <memset>
 8005988:	4620      	mov	r0, r4
 800598a:	bd70      	pop	{r4, r5, r6, pc}

0800598c <__sfp_lock_acquire>:
 800598c:	4801      	ldr	r0, [pc, #4]	; (8005994 <__sfp_lock_acquire+0x8>)
 800598e:	f000 b8b3 	b.w	8005af8 <__retarget_lock_acquire_recursive>
 8005992:	bf00      	nop
 8005994:	2000031d 	.word	0x2000031d

08005998 <__sfp_lock_release>:
 8005998:	4801      	ldr	r0, [pc, #4]	; (80059a0 <__sfp_lock_release+0x8>)
 800599a:	f000 b8ae 	b.w	8005afa <__retarget_lock_release_recursive>
 800599e:	bf00      	nop
 80059a0:	2000031d 	.word	0x2000031d

080059a4 <__sinit_lock_acquire>:
 80059a4:	4801      	ldr	r0, [pc, #4]	; (80059ac <__sinit_lock_acquire+0x8>)
 80059a6:	f000 b8a7 	b.w	8005af8 <__retarget_lock_acquire_recursive>
 80059aa:	bf00      	nop
 80059ac:	2000031e 	.word	0x2000031e

080059b0 <__sinit_lock_release>:
 80059b0:	4801      	ldr	r0, [pc, #4]	; (80059b8 <__sinit_lock_release+0x8>)
 80059b2:	f000 b8a2 	b.w	8005afa <__retarget_lock_release_recursive>
 80059b6:	bf00      	nop
 80059b8:	2000031e 	.word	0x2000031e

080059bc <__sinit>:
 80059bc:	b510      	push	{r4, lr}
 80059be:	4604      	mov	r4, r0
 80059c0:	f7ff fff0 	bl	80059a4 <__sinit_lock_acquire>
 80059c4:	69a3      	ldr	r3, [r4, #24]
 80059c6:	b11b      	cbz	r3, 80059d0 <__sinit+0x14>
 80059c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059cc:	f7ff bff0 	b.w	80059b0 <__sinit_lock_release>
 80059d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80059d4:	6523      	str	r3, [r4, #80]	; 0x50
 80059d6:	4b13      	ldr	r3, [pc, #76]	; (8005a24 <__sinit+0x68>)
 80059d8:	4a13      	ldr	r2, [pc, #76]	; (8005a28 <__sinit+0x6c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80059de:	42a3      	cmp	r3, r4
 80059e0:	bf08      	it	eq
 80059e2:	2301      	moveq	r3, #1
 80059e4:	4620      	mov	r0, r4
 80059e6:	bf08      	it	eq
 80059e8:	61a3      	streq	r3, [r4, #24]
 80059ea:	f000 f81f 	bl	8005a2c <__sfp>
 80059ee:	6060      	str	r0, [r4, #4]
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 f81b 	bl	8005a2c <__sfp>
 80059f6:	60a0      	str	r0, [r4, #8]
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 f817 	bl	8005a2c <__sfp>
 80059fe:	2200      	movs	r2, #0
 8005a00:	2104      	movs	r1, #4
 8005a02:	60e0      	str	r0, [r4, #12]
 8005a04:	6860      	ldr	r0, [r4, #4]
 8005a06:	f7ff ff81 	bl	800590c <std>
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	2109      	movs	r1, #9
 8005a0e:	68a0      	ldr	r0, [r4, #8]
 8005a10:	f7ff ff7c 	bl	800590c <std>
 8005a14:	2202      	movs	r2, #2
 8005a16:	2112      	movs	r1, #18
 8005a18:	68e0      	ldr	r0, [r4, #12]
 8005a1a:	f7ff ff77 	bl	800590c <std>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	61a3      	str	r3, [r4, #24]
 8005a22:	e7d1      	b.n	80059c8 <__sinit+0xc>
 8005a24:	08005f84 	.word	0x08005f84
 8005a28:	08005955 	.word	0x08005955

08005a2c <__sfp>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	4607      	mov	r7, r0
 8005a30:	f7ff ffac 	bl	800598c <__sfp_lock_acquire>
 8005a34:	4b1e      	ldr	r3, [pc, #120]	; (8005ab0 <__sfp+0x84>)
 8005a36:	681e      	ldr	r6, [r3, #0]
 8005a38:	69b3      	ldr	r3, [r6, #24]
 8005a3a:	b913      	cbnz	r3, 8005a42 <__sfp+0x16>
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f7ff ffbd 	bl	80059bc <__sinit>
 8005a42:	3648      	adds	r6, #72	; 0x48
 8005a44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	d503      	bpl.n	8005a54 <__sfp+0x28>
 8005a4c:	6833      	ldr	r3, [r6, #0]
 8005a4e:	b30b      	cbz	r3, 8005a94 <__sfp+0x68>
 8005a50:	6836      	ldr	r6, [r6, #0]
 8005a52:	e7f7      	b.n	8005a44 <__sfp+0x18>
 8005a54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a58:	b9d5      	cbnz	r5, 8005a90 <__sfp+0x64>
 8005a5a:	4b16      	ldr	r3, [pc, #88]	; (8005ab4 <__sfp+0x88>)
 8005a5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a60:	60e3      	str	r3, [r4, #12]
 8005a62:	6665      	str	r5, [r4, #100]	; 0x64
 8005a64:	f000 f847 	bl	8005af6 <__retarget_lock_init_recursive>
 8005a68:	f7ff ff96 	bl	8005998 <__sfp_lock_release>
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	4629      	mov	r1, r5
 8005a70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a78:	6025      	str	r5, [r4, #0]
 8005a7a:	61a5      	str	r5, [r4, #24]
 8005a7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a80:	f7fd faa4 	bl	8002fcc <memset>
 8005a84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a90:	3468      	adds	r4, #104	; 0x68
 8005a92:	e7d9      	b.n	8005a48 <__sfp+0x1c>
 8005a94:	2104      	movs	r1, #4
 8005a96:	4638      	mov	r0, r7
 8005a98:	f7ff ff62 	bl	8005960 <__sfmoreglue>
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	6030      	str	r0, [r6, #0]
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d1d5      	bne.n	8005a50 <__sfp+0x24>
 8005aa4:	f7ff ff78 	bl	8005998 <__sfp_lock_release>
 8005aa8:	230c      	movs	r3, #12
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	e7ee      	b.n	8005a8c <__sfp+0x60>
 8005aae:	bf00      	nop
 8005ab0:	08005f84 	.word	0x08005f84
 8005ab4:	ffff0001 	.word	0xffff0001

08005ab8 <_fwalk_reent>:
 8005ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005abc:	4606      	mov	r6, r0
 8005abe:	4688      	mov	r8, r1
 8005ac0:	2700      	movs	r7, #0
 8005ac2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ac6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aca:	f1b9 0901 	subs.w	r9, r9, #1
 8005ace:	d505      	bpl.n	8005adc <_fwalk_reent+0x24>
 8005ad0:	6824      	ldr	r4, [r4, #0]
 8005ad2:	2c00      	cmp	r4, #0
 8005ad4:	d1f7      	bne.n	8005ac6 <_fwalk_reent+0xe>
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005adc:	89ab      	ldrh	r3, [r5, #12]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d907      	bls.n	8005af2 <_fwalk_reent+0x3a>
 8005ae2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	d003      	beq.n	8005af2 <_fwalk_reent+0x3a>
 8005aea:	4629      	mov	r1, r5
 8005aec:	4630      	mov	r0, r6
 8005aee:	47c0      	blx	r8
 8005af0:	4307      	orrs	r7, r0
 8005af2:	3568      	adds	r5, #104	; 0x68
 8005af4:	e7e9      	b.n	8005aca <_fwalk_reent+0x12>

08005af6 <__retarget_lock_init_recursive>:
 8005af6:	4770      	bx	lr

08005af8 <__retarget_lock_acquire_recursive>:
 8005af8:	4770      	bx	lr

08005afa <__retarget_lock_release_recursive>:
 8005afa:	4770      	bx	lr

08005afc <__swhatbuf_r>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	460e      	mov	r6, r1
 8005b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b04:	4614      	mov	r4, r2
 8005b06:	2900      	cmp	r1, #0
 8005b08:	461d      	mov	r5, r3
 8005b0a:	b096      	sub	sp, #88	; 0x58
 8005b0c:	da08      	bge.n	8005b20 <__swhatbuf_r+0x24>
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b14:	602a      	str	r2, [r5, #0]
 8005b16:	061a      	lsls	r2, r3, #24
 8005b18:	d410      	bmi.n	8005b3c <__swhatbuf_r+0x40>
 8005b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b1e:	e00e      	b.n	8005b3e <__swhatbuf_r+0x42>
 8005b20:	466a      	mov	r2, sp
 8005b22:	f000 f903 	bl	8005d2c <_fstat_r>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	dbf1      	blt.n	8005b0e <__swhatbuf_r+0x12>
 8005b2a:	9a01      	ldr	r2, [sp, #4]
 8005b2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b34:	425a      	negs	r2, r3
 8005b36:	415a      	adcs	r2, r3
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	e7ee      	b.n	8005b1a <__swhatbuf_r+0x1e>
 8005b3c:	2340      	movs	r3, #64	; 0x40
 8005b3e:	2000      	movs	r0, #0
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	b016      	add	sp, #88	; 0x58
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b48 <__smakebuf_r>:
 8005b48:	898b      	ldrh	r3, [r1, #12]
 8005b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b4c:	079d      	lsls	r5, r3, #30
 8005b4e:	4606      	mov	r6, r0
 8005b50:	460c      	mov	r4, r1
 8005b52:	d507      	bpl.n	8005b64 <__smakebuf_r+0x1c>
 8005b54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	6123      	str	r3, [r4, #16]
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	6163      	str	r3, [r4, #20]
 8005b60:	b002      	add	sp, #8
 8005b62:	bd70      	pop	{r4, r5, r6, pc}
 8005b64:	466a      	mov	r2, sp
 8005b66:	ab01      	add	r3, sp, #4
 8005b68:	f7ff ffc8 	bl	8005afc <__swhatbuf_r>
 8005b6c:	9900      	ldr	r1, [sp, #0]
 8005b6e:	4605      	mov	r5, r0
 8005b70:	4630      	mov	r0, r6
 8005b72:	f7ff f969 	bl	8004e48 <_malloc_r>
 8005b76:	b948      	cbnz	r0, 8005b8c <__smakebuf_r+0x44>
 8005b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b7c:	059a      	lsls	r2, r3, #22
 8005b7e:	d4ef      	bmi.n	8005b60 <__smakebuf_r+0x18>
 8005b80:	f023 0303 	bic.w	r3, r3, #3
 8005b84:	f043 0302 	orr.w	r3, r3, #2
 8005b88:	81a3      	strh	r3, [r4, #12]
 8005b8a:	e7e3      	b.n	8005b54 <__smakebuf_r+0xc>
 8005b8c:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <__smakebuf_r+0x7c>)
 8005b8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	6020      	str	r0, [r4, #0]
 8005b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b98:	81a3      	strh	r3, [r4, #12]
 8005b9a:	9b00      	ldr	r3, [sp, #0]
 8005b9c:	6120      	str	r0, [r4, #16]
 8005b9e:	6163      	str	r3, [r4, #20]
 8005ba0:	9b01      	ldr	r3, [sp, #4]
 8005ba2:	b15b      	cbz	r3, 8005bbc <__smakebuf_r+0x74>
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005baa:	f000 f8d1 	bl	8005d50 <_isatty_r>
 8005bae:	b128      	cbz	r0, 8005bbc <__smakebuf_r+0x74>
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	f023 0303 	bic.w	r3, r3, #3
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	89a0      	ldrh	r0, [r4, #12]
 8005bbe:	4305      	orrs	r5, r0
 8005bc0:	81a5      	strh	r5, [r4, #12]
 8005bc2:	e7cd      	b.n	8005b60 <__smakebuf_r+0x18>
 8005bc4:	08005955 	.word	0x08005955

08005bc8 <_malloc_usable_size_r>:
 8005bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bcc:	1f18      	subs	r0, r3, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bfbc      	itt	lt
 8005bd2:	580b      	ldrlt	r3, [r1, r0]
 8005bd4:	18c0      	addlt	r0, r0, r3
 8005bd6:	4770      	bx	lr

08005bd8 <_raise_r>:
 8005bd8:	291f      	cmp	r1, #31
 8005bda:	b538      	push	{r3, r4, r5, lr}
 8005bdc:	4604      	mov	r4, r0
 8005bde:	460d      	mov	r5, r1
 8005be0:	d904      	bls.n	8005bec <_raise_r+0x14>
 8005be2:	2316      	movs	r3, #22
 8005be4:	6003      	str	r3, [r0, #0]
 8005be6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005bee:	b112      	cbz	r2, 8005bf6 <_raise_r+0x1e>
 8005bf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bf4:	b94b      	cbnz	r3, 8005c0a <_raise_r+0x32>
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f000 f830 	bl	8005c5c <_getpid_r>
 8005bfc:	462a      	mov	r2, r5
 8005bfe:	4601      	mov	r1, r0
 8005c00:	4620      	mov	r0, r4
 8005c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c06:	f000 b817 	b.w	8005c38 <_kill_r>
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d00a      	beq.n	8005c24 <_raise_r+0x4c>
 8005c0e:	1c59      	adds	r1, r3, #1
 8005c10:	d103      	bne.n	8005c1a <_raise_r+0x42>
 8005c12:	2316      	movs	r3, #22
 8005c14:	6003      	str	r3, [r0, #0]
 8005c16:	2001      	movs	r0, #1
 8005c18:	e7e7      	b.n	8005bea <_raise_r+0x12>
 8005c1a:	2400      	movs	r4, #0
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c22:	4798      	blx	r3
 8005c24:	2000      	movs	r0, #0
 8005c26:	e7e0      	b.n	8005bea <_raise_r+0x12>

08005c28 <raise>:
 8005c28:	4b02      	ldr	r3, [pc, #8]	; (8005c34 <raise+0xc>)
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	f7ff bfd3 	b.w	8005bd8 <_raise_r>
 8005c32:	bf00      	nop
 8005c34:	2000000c 	.word	0x2000000c

08005c38 <_kill_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	4d06      	ldr	r5, [pc, #24]	; (8005c58 <_kill_r+0x20>)
 8005c3e:	4604      	mov	r4, r0
 8005c40:	4608      	mov	r0, r1
 8005c42:	4611      	mov	r1, r2
 8005c44:	602b      	str	r3, [r5, #0]
 8005c46:	f7fd f8fb 	bl	8002e40 <_kill>
 8005c4a:	1c43      	adds	r3, r0, #1
 8005c4c:	d102      	bne.n	8005c54 <_kill_r+0x1c>
 8005c4e:	682b      	ldr	r3, [r5, #0]
 8005c50:	b103      	cbz	r3, 8005c54 <_kill_r+0x1c>
 8005c52:	6023      	str	r3, [r4, #0]
 8005c54:	bd38      	pop	{r3, r4, r5, pc}
 8005c56:	bf00      	nop
 8005c58:	20000318 	.word	0x20000318

08005c5c <_getpid_r>:
 8005c5c:	f7fd b8ee 	b.w	8002e3c <_getpid>

08005c60 <__sread>:
 8005c60:	b510      	push	{r4, lr}
 8005c62:	460c      	mov	r4, r1
 8005c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c68:	f000 f894 	bl	8005d94 <_read_r>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	bfab      	itete	ge
 8005c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c72:	89a3      	ldrhlt	r3, [r4, #12]
 8005c74:	181b      	addge	r3, r3, r0
 8005c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c7a:	bfac      	ite	ge
 8005c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c7e:	81a3      	strhlt	r3, [r4, #12]
 8005c80:	bd10      	pop	{r4, pc}

08005c82 <__swrite>:
 8005c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c86:	461f      	mov	r7, r3
 8005c88:	898b      	ldrh	r3, [r1, #12]
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	05db      	lsls	r3, r3, #23
 8005c8e:	460c      	mov	r4, r1
 8005c90:	4616      	mov	r6, r2
 8005c92:	d505      	bpl.n	8005ca0 <__swrite+0x1e>
 8005c94:	2302      	movs	r3, #2
 8005c96:	2200      	movs	r2, #0
 8005c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9c:	f000 f868 	bl	8005d70 <_lseek_r>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	4632      	mov	r2, r6
 8005ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ca8:	81a3      	strh	r3, [r4, #12]
 8005caa:	4628      	mov	r0, r5
 8005cac:	463b      	mov	r3, r7
 8005cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb6:	f000 b817 	b.w	8005ce8 <_write_r>

08005cba <__sseek>:
 8005cba:	b510      	push	{r4, lr}
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc2:	f000 f855 	bl	8005d70 <_lseek_r>
 8005cc6:	1c43      	adds	r3, r0, #1
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	bf15      	itete	ne
 8005ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cd6:	81a3      	strheq	r3, [r4, #12]
 8005cd8:	bf18      	it	ne
 8005cda:	81a3      	strhne	r3, [r4, #12]
 8005cdc:	bd10      	pop	{r4, pc}

08005cde <__sclose>:
 8005cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce2:	f000 b813 	b.w	8005d0c <_close_r>
	...

08005ce8 <_write_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4604      	mov	r4, r0
 8005cec:	4608      	mov	r0, r1
 8005cee:	4611      	mov	r1, r2
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	4d05      	ldr	r5, [pc, #20]	; (8005d08 <_write_r+0x20>)
 8005cf4:	602a      	str	r2, [r5, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f7fd f8be 	bl	8002e78 <_write>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_write_r+0x1e>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_write_r+0x1e>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	20000318 	.word	0x20000318

08005d0c <_close_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4d05      	ldr	r5, [pc, #20]	; (8005d28 <_close_r+0x1c>)
 8005d12:	4604      	mov	r4, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	f7fd f8d6 	bl	8002ec8 <_close>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_close_r+0x1a>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_close_r+0x1a>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	20000318 	.word	0x20000318

08005d2c <_fstat_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	2300      	movs	r3, #0
 8005d30:	4d06      	ldr	r5, [pc, #24]	; (8005d4c <_fstat_r+0x20>)
 8005d32:	4604      	mov	r4, r0
 8005d34:	4608      	mov	r0, r1
 8005d36:	4611      	mov	r1, r2
 8005d38:	602b      	str	r3, [r5, #0]
 8005d3a:	f7fd f8c8 	bl	8002ece <_fstat>
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d102      	bne.n	8005d48 <_fstat_r+0x1c>
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	b103      	cbz	r3, 8005d48 <_fstat_r+0x1c>
 8005d46:	6023      	str	r3, [r4, #0]
 8005d48:	bd38      	pop	{r3, r4, r5, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000318 	.word	0x20000318

08005d50 <_isatty_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	2300      	movs	r3, #0
 8005d54:	4d05      	ldr	r5, [pc, #20]	; (8005d6c <_isatty_r+0x1c>)
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	602b      	str	r3, [r5, #0]
 8005d5c:	f7fd f8bc 	bl	8002ed8 <_isatty>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_isatty_r+0x1a>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_isatty_r+0x1a>
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	20000318 	.word	0x20000318

08005d70 <_lseek_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4604      	mov	r4, r0
 8005d74:	4608      	mov	r0, r1
 8005d76:	4611      	mov	r1, r2
 8005d78:	2200      	movs	r2, #0
 8005d7a:	4d05      	ldr	r5, [pc, #20]	; (8005d90 <_lseek_r+0x20>)
 8005d7c:	602a      	str	r2, [r5, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f7fd f8ac 	bl	8002edc <_lseek>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_lseek_r+0x1e>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_lseek_r+0x1e>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	20000318 	.word	0x20000318

08005d94 <_read_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4d05      	ldr	r5, [pc, #20]	; (8005db4 <_read_r+0x20>)
 8005da0:	602a      	str	r2, [r5, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f7fd f85a 	bl	8002e5c <_read>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_read_r+0x1e>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_read_r+0x1e>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	20000318 	.word	0x20000318

08005db8 <_init>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	bf00      	nop
 8005dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dbe:	bc08      	pop	{r3}
 8005dc0:	469e      	mov	lr, r3
 8005dc2:	4770      	bx	lr

08005dc4 <_fini>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	bf00      	nop
 8005dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dca:	bc08      	pop	{r3}
 8005dcc:	469e      	mov	lr, r3
 8005dce:	4770      	bx	lr
