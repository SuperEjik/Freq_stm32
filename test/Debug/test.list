
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c8  080030c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080030c8  080030c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c8  080030c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08003140  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003140  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cf6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001872  00000000  00000000  00029d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002b608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001799e  00000000  00000000  0002cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b543  00000000  00000000  000445ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a44f  00000000  00000000  0004fb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9f80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f0  00000000  00000000  000d9fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003044 	.word	0x08003044

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003044 	.word	0x08003044

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    gu16_TIM2_OVC++;
 8000164:	4b04      	ldr	r3, [pc, #16]	; (8000178 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	3301      	adds	r3, #1
 800016a:	4a03      	ldr	r2, [pc, #12]	; (8000178 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800016c:	6013      	str	r3, [r2, #0]
}
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000098 	.word	0x20000098

0800017c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // колбек по захвату
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
    gu16_TIM2_OVC = 0;
 8000184:	4b1e      	ldr	r3, [pc, #120]	; (8000200 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]

	gu32_T1 = TIM2->CCR1;
 800018a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800018e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000190:	461a      	mov	r2, r3
 8000192:	4b1c      	ldr	r3, [pc, #112]	; (8000204 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000194:	601a      	str	r2, [r3, #0]
    gu32_T2 = TIM2->CCR1;
 8000196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800019a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800019c:	461a      	mov	r2, r3
 800019e:	4b1a      	ldr	r3, [pc, #104]	; (8000208 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80001a0:	601a      	str	r2, [r3, #0]

    gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
 80001a2:	4b17      	ldr	r3, [pc, #92]	; (8000200 <HAL_TIM_IC_CaptureCallback+0x84>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	041a      	lsls	r2, r3, #16
 80001a8:	4b17      	ldr	r3, [pc, #92]	; (8000208 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	441a      	add	r2, r3
 80001ae:	4b15      	ldr	r3, [pc, #84]	; (8000204 <HAL_TIM_IC_CaptureCallback+0x88>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	1ad3      	subs	r3, r2, r3
 80001b4:	4a15      	ldr	r2, [pc, #84]	; (800020c <HAL_TIM_IC_CaptureCallback+0x90>)
 80001b6:	6013      	str	r3, [r2, #0]
    gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 80001b8:	4b14      	ldr	r3, [pc, #80]	; (800020c <HAL_TIM_IC_CaptureCallback+0x90>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	461a      	mov	r2, r3
 80001be:	4b14      	ldr	r3, [pc, #80]	; (8000210 <HAL_TIM_IC_CaptureCallback+0x94>)
 80001c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b13      	ldr	r3, [pc, #76]	; (8000214 <HAL_TIM_IC_CaptureCallback+0x98>)
 80001c8:	601a      	str	r2, [r3, #0]

    if(gu32_Freq != 0)
 80001ca:	4b12      	ldr	r3, [pc, #72]	; (8000214 <HAL_TIM_IC_CaptureCallback+0x98>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d011      	beq.n	80001f6 <HAL_TIM_IC_CaptureCallback+0x7a>
    {
        snprintf(trans_str, 96, "Freq %lu Hz\n", gu32_Freq);
 80001d2:	4b10      	ldr	r3, [pc, #64]	; (8000214 <HAL_TIM_IC_CaptureCallback+0x98>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a10      	ldr	r2, [pc, #64]	; (8000218 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80001d8:	2160      	movs	r1, #96	; 0x60
 80001da:	4810      	ldr	r0, [pc, #64]	; (800021c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80001dc:	f002 faa4 	bl	8002728 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80001e0:	480e      	ldr	r0, [pc, #56]	; (800021c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80001e2:	f7ff ffb3 	bl	800014c <strlen>
 80001e6:	4603      	mov	r3, r0
 80001e8:	b29a      	uxth	r2, r3
 80001ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ee:	490b      	ldr	r1, [pc, #44]	; (800021c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80001f0:	480b      	ldr	r0, [pc, #44]	; (8000220 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80001f2:	f002 f8fc 	bl	80023ee <HAL_UART_Transmit>
    }
}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000098 	.word	0x20000098
 8000204:	2000008c 	.word	0x2000008c
 8000208:	20000090 	.word	0x20000090
 800020c:	20000094 	.word	0x20000094
 8000210:	044aa200 	.word	0x044aa200
 8000214:	2000009c 	.word	0x2000009c
 8000218:	0800305c 	.word	0x0800305c
 800021c:	2000012c 	.word	0x2000012c
 8000220:	200000e8 	.word	0x200000e8

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fa70 	bl	800070c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f810 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f8ee 	bl	8000410 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000234:	f000 f852 	bl	80002dc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000238:	f000 f8c0 	bl	80003bc <MX_USART1_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <main+0x28>)
 800023e:	f001 f9c3 	bl	80015c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000242:	2100      	movs	r1, #0
 8000244:	4801      	ldr	r0, [pc, #4]	; (800024c <main+0x28>)
 8000246:	f001 fa69 	bl	800171c <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024a:	e7fe      	b.n	800024a <main+0x26>
 800024c:	200000a0 	.word	0x200000a0

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b090      	sub	sp, #64	; 0x40
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2228      	movs	r2, #40	; 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fa5a 	bl	8002718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000272:	2301      	movs	r3, #1
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	2302      	movs	r3, #2
 8000286:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fd2b 	bl	8000cf4 <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a4:	f000 f8d6 	bl	8000454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 ff98 	bl	80011f8 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ce:	f000 f8c1 	bl	8000454 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	; 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	; 0x28
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e2:	f107 0318 	add.w	r3, r7, #24
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f0:	f107 0310 	add.w	r3, r7, #16
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80002fa:	463b      	mov	r3, r7
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000306:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <MX_TIM2_Init+0xdc>)
 8000308:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800030c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800030e:	4b2a      	ldr	r3, [pc, #168]	; (80003b8 <MX_TIM2_Init+0xdc>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000314:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <MX_TIM2_Init+0xdc>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800031a:	4b27      	ldr	r3, [pc, #156]	; (80003b8 <MX_TIM2_Init+0xdc>)
 800031c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000320:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000322:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <MX_TIM2_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000328:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <MX_TIM2_Init+0xdc>)
 800032a:	2280      	movs	r2, #128	; 0x80
 800032c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800032e:	4822      	ldr	r0, [pc, #136]	; (80003b8 <MX_TIM2_Init+0xdc>)
 8000330:	f001 f8fa 	bl	8001528 <HAL_TIM_Base_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800033a:	f000 f88b 	bl	8000454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800033e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000342:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000344:	f107 0318 	add.w	r3, r7, #24
 8000348:	4619      	mov	r1, r3
 800034a:	481b      	ldr	r0, [pc, #108]	; (80003b8 <MX_TIM2_Init+0xdc>)
 800034c:	f001 fc88 	bl	8001c60 <HAL_TIM_ConfigClockSource>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000356:	f000 f87d 	bl	8000454 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800035a:	4817      	ldr	r0, [pc, #92]	; (80003b8 <MX_TIM2_Init+0xdc>)
 800035c:	f001 f986 	bl	800166c <HAL_TIM_IC_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000366:	f000 f875 	bl	8000454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	4619      	mov	r1, r3
 8000378:	480f      	ldr	r0, [pc, #60]	; (80003b8 <MX_TIM2_Init+0xdc>)
 800037a:	f001 ff7b 	bl	8002274 <HAL_TIMEx_MasterConfigSynchronization>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000384:	f000 f866 	bl	8000454 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000388:	2300      	movs	r3, #0
 800038a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800038c:	2301      	movs	r3, #1
 800038e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000398:	463b      	mov	r3, r7
 800039a:	2200      	movs	r2, #0
 800039c:	4619      	mov	r1, r3
 800039e:	4806      	ldr	r0, [pc, #24]	; (80003b8 <MX_TIM2_Init+0xdc>)
 80003a0:	f001 fbca 	bl	8001b38 <HAL_TIM_IC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80003aa:	f000 f853 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	3728      	adds	r7, #40	; 0x28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200000a0 	.word	0x200000a0

080003bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003c2:	4a12      	ldr	r2, [pc, #72]	; (800040c <MX_USART1_UART_Init+0x50>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003f4:	f001 ffae 	bl	8002354 <HAL_UART_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fe:	f000 f829 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200000e8 	.word	0x200000e8
 800040c:	40013800 	.word	0x40013800

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_GPIO_Init+0x40>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <MX_GPIO_Init+0x40>)
 800041c:	f043 0320 	orr.w	r3, r3, #32
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_GPIO_Init+0x40>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0320 	and.w	r3, r3, #32
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_GPIO_Init+0x40>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a07      	ldr	r2, [pc, #28]	; (8000450 <MX_GPIO_Init+0x40>)
 8000434:	f043 0304 	orr.w	r3, r3, #4
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <MX_GPIO_Init+0x40>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0304 	and.w	r3, r3, #4
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]

}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>
	...

08000460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000466:	4b15      	ldr	r3, [pc, #84]	; (80004bc <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a14      	ldr	r2, [pc, #80]	; (80004bc <HAL_MspInit+0x5c>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_MspInit+0x5c>)
 8000484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <HAL_MspInit+0x60>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <HAL_MspInit+0x60>)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010000 	.word	0x40010000

080004c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004e2:	d12b      	bne.n	800053c <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <HAL_TIM_Base_MspInit+0x80>)
 80004e6:	69db      	ldr	r3, [r3, #28]
 80004e8:	4a16      	ldr	r2, [pc, #88]	; (8000544 <HAL_TIM_Base_MspInit+0x80>)
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	61d3      	str	r3, [r2, #28]
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <HAL_TIM_Base_MspInit+0x80>)
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <HAL_TIM_Base_MspInit+0x80>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a10      	ldr	r2, [pc, #64]	; (8000544 <HAL_TIM_Base_MspInit+0x80>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_TIM_Base_MspInit+0x80>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000514:	2301      	movs	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	4808      	ldr	r0, [pc, #32]	; (8000548 <HAL_TIM_Base_MspInit+0x84>)
 8000528:	f000 fa60 	bl	80009ec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	201c      	movs	r0, #28
 8000532:	f000 fa24 	bl	800097e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000536:	201c      	movs	r0, #28
 8000538:	f000 fa3d 	bl	80009b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40021000 	.word	0x40021000
 8000548:	40010800 	.word	0x40010800

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <HAL_UART_MspInit+0x8c>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d131      	bne.n	80005d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <HAL_UART_MspInit+0x90>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a1a      	ldr	r2, [pc, #104]	; (80005dc <HAL_UART_MspInit+0x90>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <HAL_UART_MspInit+0x90>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <HAL_UART_MspInit+0x90>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a14      	ldr	r2, [pc, #80]	; (80005dc <HAL_UART_MspInit+0x90>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_UART_MspInit+0x90>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800059c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a2:	2302      	movs	r3, #2
 80005a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a6:	2303      	movs	r3, #3
 80005a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <HAL_UART_MspInit+0x94>)
 80005b2:	f000 fa1b 	bl	80009ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	4619      	mov	r1, r3
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <HAL_UART_MspInit+0x94>)
 80005cc:	f000 fa0e 	bl	80009ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005d0:	bf00      	nop
 80005d2:	3720      	adds	r7, #32
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40013800 	.word	0x40013800
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010800 	.word	0x40010800

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler+0x4>

080005ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <MemManage_Handler+0x4>

080005f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <UsageFault_Handler+0x4>

08000602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062a:	f000 f8b5 	bl	8000798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <TIM2_IRQHandler+0x10>)
 800063a:	f001 f975 	bl	8001928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200000a0 	.word	0x200000a0

08000648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <_sbrk+0x5c>)
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <_sbrk+0x60>)
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <_sbrk+0x64>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <_sbrk+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <_sbrk+0x64>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	429a      	cmp	r2, r3
 8000676:	d207      	bcs.n	8000688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000678:	f002 f824 	bl	80026c4 <__errno>
 800067c:	4603      	mov	r3, r0
 800067e:	220c      	movs	r2, #12
 8000680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	e009      	b.n	800069c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	4a05      	ldr	r2, [pc, #20]	; (80006ac <_sbrk+0x64>)
 8000698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20005000 	.word	0x20005000
 80006a8:	00000400 	.word	0x00000400
 80006ac:	2000018c 	.word	0x2000018c
 80006b0:	200001a8 	.word	0x200001a8

080006b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006c2:	490d      	ldr	r1, [pc, #52]	; (80006f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c8:	e002      	b.n	80006d0 <LoopCopyDataInit>

080006ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ce:	3304      	adds	r3, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d4:	d3f9      	bcc.n	80006ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006d8:	4c0a      	ldr	r4, [pc, #40]	; (8000704 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006dc:	e001      	b.n	80006e2 <LoopFillZerobss>

080006de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e0:	3204      	adds	r2, #4

080006e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e4:	d3fb      	bcc.n	80006de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006e6:	f7ff ffe5 	bl	80006b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ea:	f001 fff1 	bl	80026d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ee:	f7ff fd99 	bl	8000224 <main>
  bx lr
 80006f2:	4770      	bx	lr
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006fc:	080030d0 	.word	0x080030d0
  ldr r2, =_sbss
 8000700:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000704:	200001a4 	.word	0x200001a4

08000708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000708:	e7fe      	b.n	8000708 <ADC1_2_IRQHandler>
	...

0800070c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_Init+0x28>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <HAL_Init+0x28>)
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 f923 	bl	8000968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000722:	200f      	movs	r0, #15
 8000724:	f000 f808 	bl	8000738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000728:	f7ff fe9a 	bl	8000460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40022000 	.word	0x40022000

08000738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_InitTick+0x54>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_InitTick+0x58>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f93b 	bl	80009d2 <HAL_SYSTICK_Config>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e00e      	b.n	8000784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b0f      	cmp	r3, #15
 800076a:	d80a      	bhi.n	8000782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076c:	2200      	movs	r2, #0
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f000 f903 	bl	800097e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <HAL_InitTick+0x5c>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077e:	2300      	movs	r3, #0
 8000780:	e000      	b.n	8000784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000000 	.word	0x20000000
 8000790:	20000008 	.word	0x20000008
 8000794:	20000004 	.word	0x20000004

08000798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_IncTick+0x1c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_IncTick+0x20>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <HAL_IncTick+0x20>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000190 	.word	0x20000190

080007bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return uwTick;
 80007c0:	4b02      	ldr	r3, [pc, #8]	; (80007cc <HAL_GetTick+0x10>)
 80007c2:	681b      	ldr	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	20000190 	.word	0x20000190

080007d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000802:	4a04      	ldr	r2, [pc, #16]	; (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	60d3      	str	r3, [r2, #12]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <__NVIC_GetPriorityGrouping+0x18>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 0307 	and.w	r3, r3, #7
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	db0b      	blt.n	800085e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 021f 	and.w	r2, r3, #31
 800084c:	4906      	ldr	r1, [pc, #24]	; (8000868 <__NVIC_EnableIRQ+0x34>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	2001      	movs	r0, #1
 8000856:	fa00 f202 	lsl.w	r2, r0, r2
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	e000e100 	.word	0xe000e100

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	; (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	0112      	lsls	r2, r2, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	; (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b04      	cmp	r3, #4
 80008dc:	bf28      	it	cs
 80008de:	2304      	movcs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b03      	subs	r3, #3
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
         );
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	; 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000934:	d301      	bcc.n	800093a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000936:	2301      	movs	r3, #1
 8000938:	e00f      	b.n	800095a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <SysTick_Config+0x40>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000942:	210f      	movs	r1, #15
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f7ff ff90 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <SysTick_Config+0x40>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000952:	4b04      	ldr	r3, [pc, #16]	; (8000964 <SysTick_Config+0x40>)
 8000954:	2207      	movs	r2, #7
 8000956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	e000e010 	.word	0xe000e010

08000968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff2d 	bl	80007d0 <__NVIC_SetPriorityGrouping>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000990:	f7ff ff42 	bl	8000818 <__NVIC_GetPriorityGrouping>
 8000994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff ff90 	bl	80008c0 <NVIC_EncodePriority>
 80009a0:	4602      	mov	r2, r0
 80009a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff5f 	bl	800086c <__NVIC_SetPriority>
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff35 	bl	8000834 <__NVIC_EnableIRQ>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ffa2 	bl	8000924 <SysTick_Config>
 80009e0:	4603      	mov	r3, r0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b08b      	sub	sp, #44	; 0x2c
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fe:	e169      	b.n	8000cd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a00:	2201      	movs	r2, #1
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	f040 8158 	bne.w	8000cce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4a9a      	ldr	r2, [pc, #616]	; (8000c8c <HAL_GPIO_Init+0x2a0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d05e      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a28:	4a98      	ldr	r2, [pc, #608]	; (8000c8c <HAL_GPIO_Init+0x2a0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d875      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a2e:	4a98      	ldr	r2, [pc, #608]	; (8000c90 <HAL_GPIO_Init+0x2a4>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d058      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a34:	4a96      	ldr	r2, [pc, #600]	; (8000c90 <HAL_GPIO_Init+0x2a4>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d86f      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a3a:	4a96      	ldr	r2, [pc, #600]	; (8000c94 <HAL_GPIO_Init+0x2a8>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d052      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a40:	4a94      	ldr	r2, [pc, #592]	; (8000c94 <HAL_GPIO_Init+0x2a8>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d869      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a46:	4a94      	ldr	r2, [pc, #592]	; (8000c98 <HAL_GPIO_Init+0x2ac>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d04c      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a4c:	4a92      	ldr	r2, [pc, #584]	; (8000c98 <HAL_GPIO_Init+0x2ac>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d863      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a52:	4a92      	ldr	r2, [pc, #584]	; (8000c9c <HAL_GPIO_Init+0x2b0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d046      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a58:	4a90      	ldr	r2, [pc, #576]	; (8000c9c <HAL_GPIO_Init+0x2b0>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d85d      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a5e:	2b12      	cmp	r3, #18
 8000a60:	d82a      	bhi.n	8000ab8 <HAL_GPIO_Init+0xcc>
 8000a62:	2b12      	cmp	r3, #18
 8000a64:	d859      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a66:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <HAL_GPIO_Init+0x80>)
 8000a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6c:	08000ae7 	.word	0x08000ae7
 8000a70:	08000ac1 	.word	0x08000ac1
 8000a74:	08000ad3 	.word	0x08000ad3
 8000a78:	08000b15 	.word	0x08000b15
 8000a7c:	08000b1b 	.word	0x08000b1b
 8000a80:	08000b1b 	.word	0x08000b1b
 8000a84:	08000b1b 	.word	0x08000b1b
 8000a88:	08000b1b 	.word	0x08000b1b
 8000a8c:	08000b1b 	.word	0x08000b1b
 8000a90:	08000b1b 	.word	0x08000b1b
 8000a94:	08000b1b 	.word	0x08000b1b
 8000a98:	08000b1b 	.word	0x08000b1b
 8000a9c:	08000b1b 	.word	0x08000b1b
 8000aa0:	08000b1b 	.word	0x08000b1b
 8000aa4:	08000b1b 	.word	0x08000b1b
 8000aa8:	08000b1b 	.word	0x08000b1b
 8000aac:	08000b1b 	.word	0x08000b1b
 8000ab0:	08000ac9 	.word	0x08000ac9
 8000ab4:	08000add 	.word	0x08000add
 8000ab8:	4a79      	ldr	r2, [pc, #484]	; (8000ca0 <HAL_GPIO_Init+0x2b4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d013      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000abe:	e02c      	b.n	8000b1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	623b      	str	r3, [r7, #32]
          break;
 8000ac6:	e029      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	3304      	adds	r3, #4
 8000ace:	623b      	str	r3, [r7, #32]
          break;
 8000ad0:	e024      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	3308      	adds	r3, #8
 8000ad8:	623b      	str	r3, [r7, #32]
          break;
 8000ada:	e01f      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	330c      	adds	r3, #12
 8000ae2:	623b      	str	r3, [r7, #32]
          break;
 8000ae4:	e01a      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aee:	2304      	movs	r3, #4
 8000af0:	623b      	str	r3, [r7, #32]
          break;
 8000af2:	e013      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d105      	bne.n	8000b08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000afc:	2308      	movs	r3, #8
 8000afe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	611a      	str	r2, [r3, #16]
          break;
 8000b06:	e009      	b.n	8000b1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	615a      	str	r2, [r3, #20]
          break;
 8000b12:	e003      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
          break;
 8000b18:	e000      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          break;
 8000b1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	2bff      	cmp	r3, #255	; 0xff
 8000b20:	d801      	bhi.n	8000b26 <HAL_GPIO_Init+0x13a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	e001      	b.n	8000b2a <HAL_GPIO_Init+0x13e>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	2bff      	cmp	r3, #255	; 0xff
 8000b30:	d802      	bhi.n	8000b38 <HAL_GPIO_Init+0x14c>
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	e002      	b.n	8000b3e <HAL_GPIO_Init+0x152>
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	3b08      	subs	r3, #8
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	210f      	movs	r1, #15
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	401a      	ands	r2, r3
 8000b50:	6a39      	ldr	r1, [r7, #32]
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	fa01 f303 	lsl.w	r3, r1, r3
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 80b1 	beq.w	8000cce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6c:	4b4d      	ldr	r3, [pc, #308]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a4c      	ldr	r2, [pc, #304]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b4a      	ldr	r3, [pc, #296]	; (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b84:	4a48      	ldr	r2, [pc, #288]	; (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a40      	ldr	r2, [pc, #256]	; (8000cac <HAL_GPIO_Init+0x2c0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d013      	beq.n	8000bd8 <HAL_GPIO_Init+0x1ec>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a3f      	ldr	r2, [pc, #252]	; (8000cb0 <HAL_GPIO_Init+0x2c4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d00d      	beq.n	8000bd4 <HAL_GPIO_Init+0x1e8>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a3e      	ldr	r2, [pc, #248]	; (8000cb4 <HAL_GPIO_Init+0x2c8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d007      	beq.n	8000bd0 <HAL_GPIO_Init+0x1e4>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a3d      	ldr	r2, [pc, #244]	; (8000cb8 <HAL_GPIO_Init+0x2cc>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d101      	bne.n	8000bcc <HAL_GPIO_Init+0x1e0>
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e006      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bcc:	2304      	movs	r3, #4
 8000bce:	e004      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e000      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bdc:	f002 0203 	and.w	r2, r2, #3
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	4093      	lsls	r3, r2
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bea:	492f      	ldr	r1, [pc, #188]	; (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	492c      	ldr	r1, [pc, #176]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	600b      	str	r3, [r1, #0]
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	4928      	ldr	r1, [pc, #160]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c2c:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4922      	ldr	r1, [pc, #136]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	604b      	str	r3, [r1, #4]
 8000c38:	e006      	b.n	8000c48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	491e      	ldr	r1, [pc, #120]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	4918      	ldr	r1, [pc, #96]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	608b      	str	r3, [r1, #8]
 8000c60:	e006      	b.n	8000c70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	4914      	ldr	r1, [pc, #80]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d021      	beq.n	8000cc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	490e      	ldr	r1, [pc, #56]	; (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	60cb      	str	r3, [r1, #12]
 8000c88:	e021      	b.n	8000cce <HAL_GPIO_Init+0x2e2>
 8000c8a:	bf00      	nop
 8000c8c:	10320000 	.word	0x10320000
 8000c90:	10310000 	.word	0x10310000
 8000c94:	10220000 	.word	0x10220000
 8000c98:	10210000 	.word	0x10210000
 8000c9c:	10120000 	.word	0x10120000
 8000ca0:	10110000 	.word	0x10110000
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	40010c00 	.word	0x40010c00
 8000cb4:	40011000 	.word	0x40011000
 8000cb8:	40011400 	.word	0x40011400
 8000cbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_GPIO_Init+0x304>)
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	4909      	ldr	r1, [pc, #36]	; (8000cf0 <HAL_GPIO_Init+0x304>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	fa22 f303 	lsr.w	r3, r2, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f47f ae8e 	bne.w	8000a00 <HAL_GPIO_Init+0x14>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	372c      	adds	r7, #44	; 0x2c
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40010400 	.word	0x40010400

08000cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e272      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 8087 	beq.w	8000e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d14:	4b92      	ldr	r3, [pc, #584]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d00c      	beq.n	8000d3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d20:	4b8f      	ldr	r3, [pc, #572]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 030c 	and.w	r3, r3, #12
 8000d28:	2b08      	cmp	r3, #8
 8000d2a:	d112      	bne.n	8000d52 <HAL_RCC_OscConfig+0x5e>
 8000d2c:	4b8c      	ldr	r3, [pc, #560]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d38:	d10b      	bne.n	8000d52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d3a:	4b89      	ldr	r3, [pc, #548]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d06c      	beq.n	8000e20 <HAL_RCC_OscConfig+0x12c>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d168      	bne.n	8000e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e24c      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d5a:	d106      	bne.n	8000d6a <HAL_RCC_OscConfig+0x76>
 8000d5c:	4b80      	ldr	r3, [pc, #512]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a7f      	ldr	r2, [pc, #508]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e02e      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd4>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10c      	bne.n	8000d8c <HAL_RCC_OscConfig+0x98>
 8000d72:	4b7b      	ldr	r3, [pc, #492]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a7a      	ldr	r2, [pc, #488]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	4b78      	ldr	r3, [pc, #480]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a77      	ldr	r2, [pc, #476]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e01d      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd4>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d94:	d10c      	bne.n	8000db0 <HAL_RCC_OscConfig+0xbc>
 8000d96:	4b72      	ldr	r3, [pc, #456]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a71      	ldr	r2, [pc, #452]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b6f      	ldr	r3, [pc, #444]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a6e      	ldr	r2, [pc, #440]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e00b      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd4>
 8000db0:	4b6b      	ldr	r3, [pc, #428]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a6a      	ldr	r2, [pc, #424]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b68      	ldr	r3, [pc, #416]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a67      	ldr	r2, [pc, #412]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d013      	beq.n	8000df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fcf4 	bl	80007bc <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd8:	f7ff fcf0 	bl	80007bc <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b64      	cmp	r3, #100	; 0x64
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e200      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dea:	4b5d      	ldr	r3, [pc, #372]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0f0      	beq.n	8000dd8 <HAL_RCC_OscConfig+0xe4>
 8000df6:	e014      	b.n	8000e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df8:	f7ff fce0 	bl	80007bc <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e00:	f7ff fcdc 	bl	80007bc <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b64      	cmp	r3, #100	; 0x64
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e1ec      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e12:	4b53      	ldr	r3, [pc, #332]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f0      	bne.n	8000e00 <HAL_RCC_OscConfig+0x10c>
 8000e1e:	e000      	b.n	8000e22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d063      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e2e:	4b4c      	ldr	r3, [pc, #304]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00b      	beq.n	8000e52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e3a:	4b49      	ldr	r3, [pc, #292]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d11c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x18c>
 8000e46:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d116      	bne.n	8000e80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e52:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d005      	beq.n	8000e6a <HAL_RCC_OscConfig+0x176>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d001      	beq.n	8000e6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e1c0      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4939      	ldr	r1, [pc, #228]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7e:	e03a      	b.n	8000ef6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d020      	beq.n	8000eca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e88:	4b36      	ldr	r3, [pc, #216]	; (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fc95 	bl	80007bc <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e96:	f7ff fc91 	bl	80007bc <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e1a1      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f0      	beq.n	8000e96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4927      	ldr	r1, [pc, #156]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	600b      	str	r3, [r1, #0]
 8000ec8:	e015      	b.n	8000ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fc74 	bl	80007bc <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fc70 	bl	80007bc <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e180      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f0      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d03a      	beq.n	8000f78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d019      	beq.n	8000f3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_RCC_OscConfig+0x274>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f10:	f7ff fc54 	bl	80007bc <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f18:	f7ff fc50 	bl	80007bc <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e160      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 fad8 	bl	80014ec <RCC_Delay>
 8000f3c:	e01c      	b.n	8000f78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_RCC_OscConfig+0x274>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f44:	f7ff fc3a 	bl	80007bc <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4a:	e00f      	b.n	8000f6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fc36 	bl	80007bc <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d908      	bls.n	8000f6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e146      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000
 8000f64:	42420000 	.word	0x42420000
 8000f68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6c:	4b92      	ldr	r3, [pc, #584]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1e9      	bne.n	8000f4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 80a6 	beq.w	80010d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f8a:	4b8b      	ldr	r3, [pc, #556]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10d      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b88      	ldr	r3, [pc, #544]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a87      	ldr	r2, [pc, #540]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b85      	ldr	r3, [pc, #532]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb2:	4b82      	ldr	r3, [pc, #520]	; (80011bc <HAL_RCC_OscConfig+0x4c8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d118      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fbe:	4b7f      	ldr	r3, [pc, #508]	; (80011bc <HAL_RCC_OscConfig+0x4c8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a7e      	ldr	r2, [pc, #504]	; (80011bc <HAL_RCC_OscConfig+0x4c8>)
 8000fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fca:	f7ff fbf7 	bl	80007bc <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd2:	f7ff fbf3 	bl	80007bc <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b64      	cmp	r3, #100	; 0x64
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e103      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe4:	4b75      	ldr	r3, [pc, #468]	; (80011bc <HAL_RCC_OscConfig+0x4c8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f0      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d106      	bne.n	8001006 <HAL_RCC_OscConfig+0x312>
 8000ff8:	4b6f      	ldr	r3, [pc, #444]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	4a6e      	ldr	r2, [pc, #440]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6213      	str	r3, [r2, #32]
 8001004:	e02d      	b.n	8001062 <HAL_RCC_OscConfig+0x36e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x334>
 800100e:	4b6a      	ldr	r3, [pc, #424]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a69      	ldr	r2, [pc, #420]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	4b67      	ldr	r3, [pc, #412]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a66      	ldr	r2, [pc, #408]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001020:	f023 0304 	bic.w	r3, r3, #4
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	e01c      	b.n	8001062 <HAL_RCC_OscConfig+0x36e>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	2b05      	cmp	r3, #5
 800102e:	d10c      	bne.n	800104a <HAL_RCC_OscConfig+0x356>
 8001030:	4b61      	ldr	r3, [pc, #388]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a60      	ldr	r2, [pc, #384]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	6213      	str	r3, [r2, #32]
 800103c:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4a5d      	ldr	r2, [pc, #372]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6213      	str	r3, [r2, #32]
 8001048:	e00b      	b.n	8001062 <HAL_RCC_OscConfig+0x36e>
 800104a:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a5a      	ldr	r2, [pc, #360]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	6213      	str	r3, [r2, #32]
 8001056:	4b58      	ldr	r3, [pc, #352]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4a57      	ldr	r2, [pc, #348]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800105c:	f023 0304 	bic.w	r3, r3, #4
 8001060:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d015      	beq.n	8001096 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106a:	f7ff fba7 	bl	80007bc <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001070:	e00a      	b.n	8001088 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001072:	f7ff fba3 	bl	80007bc <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001080:	4293      	cmp	r3, r2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e0b1      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001088:	4b4b      	ldr	r3, [pc, #300]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0ee      	beq.n	8001072 <HAL_RCC_OscConfig+0x37e>
 8001094:	e014      	b.n	80010c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001096:	f7ff fb91 	bl	80007bc <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109c:	e00a      	b.n	80010b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800109e:	f7ff fb8d 	bl	80007bc <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e09b      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b4:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1ee      	bne.n	800109e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d105      	bne.n	80010d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010c6:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a3b      	ldr	r2, [pc, #236]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8087 	beq.w	80011ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010dc:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d061      	beq.n	80011ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d146      	bne.n	800117e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <HAL_RCC_OscConfig+0x4cc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fb61 	bl	80007bc <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fe:	f7ff fb5d 	bl	80007bc <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e06d      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f0      	bne.n	80010fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001124:	d108      	bne.n	8001138 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001126:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	4921      	ldr	r1, [pc, #132]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a19      	ldr	r1, [r3, #32]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	430b      	orrs	r3, r1
 800114a:	491b      	ldr	r1, [pc, #108]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_RCC_OscConfig+0x4cc>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff fb31 	bl	80007bc <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115e:	f7ff fb2d 	bl	80007bc <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e03d      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f0      	beq.n	800115e <HAL_RCC_OscConfig+0x46a>
 800117c:	e035      	b.n	80011ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_RCC_OscConfig+0x4cc>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fb1a 	bl	80007bc <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800118c:	f7ff fb16 	bl	80007bc <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e026      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x498>
 80011aa:	e01e      	b.n	80011ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d107      	bne.n	80011c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e019      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40007000 	.word	0x40007000
 80011c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_RCC_OscConfig+0x500>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d106      	bne.n	80011e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000

080011f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0d0      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800120c:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d910      	bls.n	800123c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121a:	4b67      	ldr	r3, [pc, #412]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 0207 	bic.w	r2, r3, #7
 8001222:	4965      	ldr	r1, [pc, #404]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800122a:	4b63      	ldr	r3, [pc, #396]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d001      	beq.n	800123c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e0b8      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d020      	beq.n	800128a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001254:	4b59      	ldr	r3, [pc, #356]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4a58      	ldr	r2, [pc, #352]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800125e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4a52      	ldr	r2, [pc, #328]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001276:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001278:	4b50      	ldr	r3, [pc, #320]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	494d      	ldr	r1, [pc, #308]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	4313      	orrs	r3, r2
 8001288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d040      	beq.n	8001318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d107      	bne.n	80012ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	4b47      	ldr	r3, [pc, #284]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d115      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e07f      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d107      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b6:	4b41      	ldr	r3, [pc, #260]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e073      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c6:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e06b      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d6:	4b39      	ldr	r3, [pc, #228]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f023 0203 	bic.w	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4936      	ldr	r1, [pc, #216]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e8:	f7ff fa68 	bl	80007bc <HAL_GetTick>
 80012ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ee:	e00a      	b.n	8001306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f0:	f7ff fa64 	bl	80007bc <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e053      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 020c 	and.w	r2, r3, #12
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	429a      	cmp	r2, r3
 8001316:	d1eb      	bne.n	80012f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d210      	bcs.n	8001348 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 0207 	bic.w	r2, r3, #7
 800132e:	4922      	ldr	r1, [pc, #136]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d001      	beq.n	8001348 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e032      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d008      	beq.n	8001366 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4916      	ldr	r1, [pc, #88]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	490e      	ldr	r1, [pc, #56]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001386:	f000 f821 	bl	80013cc <HAL_RCC_GetSysClockFreq>
 800138a:	4602      	mov	r2, r0
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	490a      	ldr	r1, [pc, #40]	; (80013c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001398:	5ccb      	ldrb	r3, [r1, r3]
 800139a:	fa22 f303 	lsr.w	r3, r2, r3
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <HAL_RCC_ClockConfig+0x1cc>)
 80013a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_RCC_ClockConfig+0x1d0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f9c6 	bl	8000738 <HAL_InitTick>

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40022000 	.word	0x40022000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	0800307c 	.word	0x0800307c
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000004 	.word	0x20000004

080013cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013cc:	b490      	push	{r4, r7}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <HAL_RCC_GetSysClockFreq+0xac>)
 80013d4:	1d3c      	adds	r4, r7, #4
 80013d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013dc:	f240 2301 	movw	r3, #513	; 0x201
 80013e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_RCC_GetSysClockFreq+0xb0>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b04      	cmp	r3, #4
 8001404:	d002      	beq.n	800140c <HAL_RCC_GetSysClockFreq+0x40>
 8001406:	2b08      	cmp	r3, #8
 8001408:	d003      	beq.n	8001412 <HAL_RCC_GetSysClockFreq+0x46>
 800140a:	e02b      	b.n	8001464 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_RCC_GetSysClockFreq+0xb4>)
 800140e:	623b      	str	r3, [r7, #32]
      break;
 8001410:	e02b      	b.n	800146a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	0c9b      	lsrs	r3, r3, #18
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3328      	adds	r3, #40	; 0x28
 800141c:	443b      	add	r3, r7
 800141e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001422:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d012      	beq.n	8001454 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	0c5b      	lsrs	r3, r3, #17
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	3328      	adds	r3, #40	; 0x28
 800143a:	443b      	add	r3, r7
 800143c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001440:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001446:	fb03 f202 	mul.w	r2, r3, r2
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	e004      	b.n	800145e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001458:	fb02 f303 	mul.w	r3, r2, r3
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	623b      	str	r3, [r7, #32]
      break;
 8001462:	e002      	b.n	800146a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001466:	623b      	str	r3, [r7, #32]
      break;
 8001468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800146a:	6a3b      	ldr	r3, [r7, #32]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bc90      	pop	{r4, r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	0800306c 	.word	0x0800306c
 800147c:	40021000 	.word	0x40021000
 8001480:	007a1200 	.word	0x007a1200
 8001484:	003d0900 	.word	0x003d0900

08001488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800148c:	4b02      	ldr	r3, [pc, #8]	; (8001498 <HAL_RCC_GetHCLKFreq+0x10>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	20000000 	.word	0x20000000

0800149c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014a0:	f7ff fff2 	bl	8001488 <HAL_RCC_GetHCLKFreq>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	4903      	ldr	r1, [pc, #12]	; (80014c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021000 	.word	0x40021000
 80014c0:	0800308c 	.word	0x0800308c

080014c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014c8:	f7ff ffde 	bl	8001488 <HAL_RCC_GetHCLKFreq>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	0adb      	lsrs	r3, r3, #11
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	4903      	ldr	r1, [pc, #12]	; (80014e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014da:	5ccb      	ldrb	r3, [r1, r3]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	0800308c 	.word	0x0800308c

080014ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <RCC_Delay+0x34>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <RCC_Delay+0x38>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0a5b      	lsrs	r3, r3, #9
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001508:	bf00      	nop
  }
  while (Delay --);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1e5a      	subs	r2, r3, #1
 800150e:	60fa      	str	r2, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f9      	bne.n	8001508 <RCC_Delay+0x1c>
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000000 	.word	0x20000000
 8001524:	10624dd3 	.word	0x10624dd3

08001528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e041      	b.n	80015be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d106      	bne.n	8001554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7fe ffb8 	bl	80004c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3304      	adds	r3, #4
 8001564:	4619      	mov	r1, r3
 8001566:	4610      	mov	r0, r2
 8001568:	f000 fc5a 	bl	8001e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d001      	beq.n	80015e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e03a      	b.n	8001656 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a18      	ldr	r2, [pc, #96]	; (8001660 <HAL_TIM_Base_Start_IT+0x98>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d00e      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x58>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800160a:	d009      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x58>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <HAL_TIM_Base_Start_IT+0x9c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d004      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x58>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a13      	ldr	r2, [pc, #76]	; (8001668 <HAL_TIM_Base_Start_IT+0xa0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d111      	bne.n	8001644 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b06      	cmp	r3, #6
 8001630:	d010      	beq.n	8001654 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0201 	orr.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001642:	e007      	b.n	8001654 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40012c00 	.word	0x40012c00
 8001664:	40000400 	.word	0x40000400
 8001668:	40000800 	.word	0x40000800

0800166c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e041      	b.n	8001702 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f839 	bl	800170a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3304      	adds	r3, #4
 80016a8:	4619      	mov	r1, r3
 80016aa:	4610      	mov	r0, r2
 80016ac:	f000 fbb8 	bl	8001e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d104      	bne.n	8001736 <HAL_TIM_IC_Start_IT+0x1a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001732:	b2db      	uxtb	r3, r3
 8001734:	e013      	b.n	800175e <HAL_TIM_IC_Start_IT+0x42>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2b04      	cmp	r3, #4
 800173a:	d104      	bne.n	8001746 <HAL_TIM_IC_Start_IT+0x2a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001742:	b2db      	uxtb	r3, r3
 8001744:	e00b      	b.n	800175e <HAL_TIM_IC_Start_IT+0x42>
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2b08      	cmp	r3, #8
 800174a:	d104      	bne.n	8001756 <HAL_TIM_IC_Start_IT+0x3a>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001752:	b2db      	uxtb	r3, r3
 8001754:	e003      	b.n	800175e <HAL_TIM_IC_Start_IT+0x42>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800175c:	b2db      	uxtb	r3, r3
 800175e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d104      	bne.n	8001770 <HAL_TIM_IC_Start_IT+0x54>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800176c:	b2db      	uxtb	r3, r3
 800176e:	e013      	b.n	8001798 <HAL_TIM_IC_Start_IT+0x7c>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	2b04      	cmp	r3, #4
 8001774:	d104      	bne.n	8001780 <HAL_TIM_IC_Start_IT+0x64>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800177c:	b2db      	uxtb	r3, r3
 800177e:	e00b      	b.n	8001798 <HAL_TIM_IC_Start_IT+0x7c>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2b08      	cmp	r3, #8
 8001784:	d104      	bne.n	8001790 <HAL_TIM_IC_Start_IT+0x74>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800178c:	b2db      	uxtb	r3, r3
 800178e:	e003      	b.n	8001798 <HAL_TIM_IC_Start_IT+0x7c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001796:	b2db      	uxtb	r3, r3
 8001798:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d102      	bne.n	80017a6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d001      	beq.n	80017aa <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0b3      	b.n	8001912 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d104      	bne.n	80017ba <HAL_TIM_IC_Start_IT+0x9e>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017b8:	e013      	b.n	80017e2 <HAL_TIM_IC_Start_IT+0xc6>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d104      	bne.n	80017ca <HAL_TIM_IC_Start_IT+0xae>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017c8:	e00b      	b.n	80017e2 <HAL_TIM_IC_Start_IT+0xc6>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d104      	bne.n	80017da <HAL_TIM_IC_Start_IT+0xbe>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2202      	movs	r2, #2
 80017d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017d8:	e003      	b.n	80017e2 <HAL_TIM_IC_Start_IT+0xc6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2202      	movs	r2, #2
 80017de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d104      	bne.n	80017f2 <HAL_TIM_IC_Start_IT+0xd6>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017f0:	e013      	b.n	800181a <HAL_TIM_IC_Start_IT+0xfe>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d104      	bne.n	8001802 <HAL_TIM_IC_Start_IT+0xe6>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001800:	e00b      	b.n	800181a <HAL_TIM_IC_Start_IT+0xfe>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b08      	cmp	r3, #8
 8001806:	d104      	bne.n	8001812 <HAL_TIM_IC_Start_IT+0xf6>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001810:	e003      	b.n	800181a <HAL_TIM_IC_Start_IT+0xfe>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2202      	movs	r2, #2
 8001816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b0c      	cmp	r3, #12
 800181e:	d841      	bhi.n	80018a4 <HAL_TIM_IC_Start_IT+0x188>
 8001820:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <HAL_TIM_IC_Start_IT+0x10c>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	0800185d 	.word	0x0800185d
 800182c:	080018a5 	.word	0x080018a5
 8001830:	080018a5 	.word	0x080018a5
 8001834:	080018a5 	.word	0x080018a5
 8001838:	0800186f 	.word	0x0800186f
 800183c:	080018a5 	.word	0x080018a5
 8001840:	080018a5 	.word	0x080018a5
 8001844:	080018a5 	.word	0x080018a5
 8001848:	08001881 	.word	0x08001881
 800184c:	080018a5 	.word	0x080018a5
 8001850:	080018a5 	.word	0x080018a5
 8001854:	080018a5 	.word	0x080018a5
 8001858:	08001893 	.word	0x08001893
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0202 	orr.w	r2, r2, #2
 800186a:	60da      	str	r2, [r3, #12]
      break;
 800186c:	e01b      	b.n	80018a6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0204 	orr.w	r2, r2, #4
 800187c:	60da      	str	r2, [r3, #12]
      break;
 800187e:	e012      	b.n	80018a6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0208 	orr.w	r2, r2, #8
 800188e:	60da      	str	r2, [r3, #12]
      break;
 8001890:	e009      	b.n	80018a6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f042 0210 	orr.w	r2, r2, #16
 80018a0:	60da      	str	r2, [r3, #12]
      break;
 80018a2:	e000      	b.n	80018a6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80018a4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2201      	movs	r2, #1
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fcbb 	bl	800222a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a18      	ldr	r2, [pc, #96]	; (800191c <HAL_TIM_IC_Start_IT+0x200>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00e      	beq.n	80018dc <HAL_TIM_IC_Start_IT+0x1c0>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c6:	d009      	beq.n	80018dc <HAL_TIM_IC_Start_IT+0x1c0>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <HAL_TIM_IC_Start_IT+0x204>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d004      	beq.n	80018dc <HAL_TIM_IC_Start_IT+0x1c0>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a13      	ldr	r2, [pc, #76]	; (8001924 <HAL_TIM_IC_Start_IT+0x208>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d111      	bne.n	8001900 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d010      	beq.n	8001910 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0201 	orr.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018fe:	e007      	b.n	8001910 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40012c00 	.word	0x40012c00
 8001920:	40000400 	.word	0x40000400
 8001924:	40000800 	.word	0x40000800

08001928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b02      	cmp	r3, #2
 800193c:	d122      	bne.n	8001984 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b02      	cmp	r3, #2
 800194a:	d11b      	bne.n	8001984 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f06f 0202 	mvn.w	r2, #2
 8001954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7fe fc06 	bl	800017c <HAL_TIM_IC_CaptureCallback>
 8001970:	e005      	b.n	800197e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 fa38 	bl	8001de8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 fa3e 	bl	8001dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b04      	cmp	r3, #4
 8001990:	d122      	bne.n	80019d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b04      	cmp	r3, #4
 800199e:	d11b      	bne.n	80019d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f06f 0204 	mvn.w	r2, #4
 80019a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2202      	movs	r2, #2
 80019ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe fbdc 	bl	800017c <HAL_TIM_IC_CaptureCallback>
 80019c4:	e005      	b.n	80019d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fa0e 	bl	8001de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fa14 	bl	8001dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d122      	bne.n	8001a2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d11b      	bne.n	8001a2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f06f 0208 	mvn.w	r2, #8
 80019fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2204      	movs	r2, #4
 8001a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7fe fbb2 	bl	800017c <HAL_TIM_IC_CaptureCallback>
 8001a18:	e005      	b.n	8001a26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f9e4 	bl	8001de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f9ea 	bl	8001dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	d122      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	2b10      	cmp	r3, #16
 8001a46:	d11b      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f06f 0210 	mvn.w	r2, #16
 8001a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2208      	movs	r2, #8
 8001a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7fe fb88 	bl	800017c <HAL_TIM_IC_CaptureCallback>
 8001a6c:	e005      	b.n	8001a7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f9ba 	bl	8001de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f9c0 	bl	8001dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d10e      	bne.n	8001aac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d107      	bne.n	8001aac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f06f 0201 	mvn.w	r2, #1
 8001aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe fb58 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab6:	2b80      	cmp	r3, #128	; 0x80
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac4:	2b80      	cmp	r3, #128	; 0x80
 8001ac6:	d107      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 fc35 	bl	8002342 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae2:	2b40      	cmp	r3, #64	; 0x40
 8001ae4:	d10e      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af0:	2b40      	cmp	r3, #64	; 0x40
 8001af2:	d107      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f984 	bl	8001e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d10e      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d107      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0220 	mvn.w	r2, #32
 8001b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 fc00 	bl	8002330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_TIM_IC_ConfigChannel+0x1a>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e082      	b.n	8001c58 <HAL_TIM_IC_ConfigChannel+0x120>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11b      	bne.n	8001b98 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	6819      	ldr	r1, [r3, #0]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f000 f9b8 	bl	8001ee4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 020c 	bic.w	r2, r2, #12
 8001b82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6999      	ldr	r1, [r3, #24]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	619a      	str	r2, [r3, #24]
 8001b96:	e05a      	b.n	8001c4e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d11c      	bne.n	8001bd8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	6819      	ldr	r1, [r3, #0]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f000 fa21 	bl	8001ff4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001bc0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6999      	ldr	r1, [r3, #24]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	021a      	lsls	r2, r3, #8
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	619a      	str	r2, [r3, #24]
 8001bd6:	e03a      	b.n	8001c4e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d11b      	bne.n	8001c16 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f000 fa6c 	bl	80020ca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69da      	ldr	r2, [r3, #28]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 020c 	bic.w	r2, r2, #12
 8001c00:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	69d9      	ldr	r1, [r3, #28]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	61da      	str	r2, [r3, #28]
 8001c14:	e01b      	b.n	8001c4e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	6819      	ldr	r1, [r3, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f000 fa8b 	bl	8002140 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69da      	ldr	r2, [r3, #28]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c38:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69d9      	ldr	r1, [r3, #28]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	021a      	lsls	r2, r3, #8
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_TIM_ConfigClockSource+0x18>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e0b3      	b.n	8001de0 <HAL_TIM_ConfigClockSource+0x180>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cb0:	d03e      	beq.n	8001d30 <HAL_TIM_ConfigClockSource+0xd0>
 8001cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cb6:	f200 8087 	bhi.w	8001dc8 <HAL_TIM_ConfigClockSource+0x168>
 8001cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cbe:	f000 8085 	beq.w	8001dcc <HAL_TIM_ConfigClockSource+0x16c>
 8001cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc6:	d87f      	bhi.n	8001dc8 <HAL_TIM_ConfigClockSource+0x168>
 8001cc8:	2b70      	cmp	r3, #112	; 0x70
 8001cca:	d01a      	beq.n	8001d02 <HAL_TIM_ConfigClockSource+0xa2>
 8001ccc:	2b70      	cmp	r3, #112	; 0x70
 8001cce:	d87b      	bhi.n	8001dc8 <HAL_TIM_ConfigClockSource+0x168>
 8001cd0:	2b60      	cmp	r3, #96	; 0x60
 8001cd2:	d050      	beq.n	8001d76 <HAL_TIM_ConfigClockSource+0x116>
 8001cd4:	2b60      	cmp	r3, #96	; 0x60
 8001cd6:	d877      	bhi.n	8001dc8 <HAL_TIM_ConfigClockSource+0x168>
 8001cd8:	2b50      	cmp	r3, #80	; 0x50
 8001cda:	d03c      	beq.n	8001d56 <HAL_TIM_ConfigClockSource+0xf6>
 8001cdc:	2b50      	cmp	r3, #80	; 0x50
 8001cde:	d873      	bhi.n	8001dc8 <HAL_TIM_ConfigClockSource+0x168>
 8001ce0:	2b40      	cmp	r3, #64	; 0x40
 8001ce2:	d058      	beq.n	8001d96 <HAL_TIM_ConfigClockSource+0x136>
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	d86f      	bhi.n	8001dc8 <HAL_TIM_ConfigClockSource+0x168>
 8001ce8:	2b30      	cmp	r3, #48	; 0x30
 8001cea:	d064      	beq.n	8001db6 <HAL_TIM_ConfigClockSource+0x156>
 8001cec:	2b30      	cmp	r3, #48	; 0x30
 8001cee:	d86b      	bhi.n	8001dc8 <HAL_TIM_ConfigClockSource+0x168>
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d060      	beq.n	8001db6 <HAL_TIM_ConfigClockSource+0x156>
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d867      	bhi.n	8001dc8 <HAL_TIM_ConfigClockSource+0x168>
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d05c      	beq.n	8001db6 <HAL_TIM_ConfigClockSource+0x156>
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d05a      	beq.n	8001db6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001d00:	e062      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6899      	ldr	r1, [r3, #8]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f000 fa6b 	bl	80021ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	609a      	str	r2, [r3, #8]
      break;
 8001d2e:	e04e      	b.n	8001dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6899      	ldr	r1, [r3, #8]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f000 fa54 	bl	80021ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d52:	609a      	str	r2, [r3, #8]
      break;
 8001d54:	e03b      	b.n	8001dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6859      	ldr	r1, [r3, #4]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f000 f918 	bl	8001f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2150      	movs	r1, #80	; 0x50
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fa22 	bl	80021b8 <TIM_ITRx_SetConfig>
      break;
 8001d74:	e02b      	b.n	8001dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6859      	ldr	r1, [r3, #4]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	461a      	mov	r2, r3
 8001d84:	f000 f972 	bl	800206c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2160      	movs	r1, #96	; 0x60
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 fa12 	bl	80021b8 <TIM_ITRx_SetConfig>
      break;
 8001d94:	e01b      	b.n	8001dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6859      	ldr	r1, [r3, #4]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f000 f8f8 	bl	8001f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2140      	movs	r1, #64	; 0x40
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 fa02 	bl	80021b8 <TIM_ITRx_SetConfig>
      break;
 8001db4:	e00b      	b.n	8001dce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f000 f9f9 	bl	80021b8 <TIM_ITRx_SetConfig>
        break;
 8001dc6:	e002      	b.n	8001dce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001dc8:	bf00      	nop
 8001dca:	e000      	b.n	8001dce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001dcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
	...

08001e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a29      	ldr	r2, [pc, #164]	; (8001ed8 <TIM_Base_SetConfig+0xb8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00b      	beq.n	8001e50 <TIM_Base_SetConfig+0x30>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3e:	d007      	beq.n	8001e50 <TIM_Base_SetConfig+0x30>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a26      	ldr	r2, [pc, #152]	; (8001edc <TIM_Base_SetConfig+0xbc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d003      	beq.n	8001e50 <TIM_Base_SetConfig+0x30>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <TIM_Base_SetConfig+0xc0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d108      	bne.n	8001e62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <TIM_Base_SetConfig+0xb8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00b      	beq.n	8001e82 <TIM_Base_SetConfig+0x62>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e70:	d007      	beq.n	8001e82 <TIM_Base_SetConfig+0x62>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a19      	ldr	r2, [pc, #100]	; (8001edc <TIM_Base_SetConfig+0xbc>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d003      	beq.n	8001e82 <TIM_Base_SetConfig+0x62>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <TIM_Base_SetConfig+0xc0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <TIM_Base_SetConfig+0xb8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d103      	bne.n	8001ec8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	615a      	str	r2, [r3, #20]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	40012c00 	.word	0x40012c00
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	40000800 	.word	0x40000800

08001ee4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	f023 0201 	bic.w	r2, r3, #1
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <TIM_TI1_SetConfig+0xa8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00b      	beq.n	8001f2a <TIM_TI1_SetConfig+0x46>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f18:	d007      	beq.n	8001f2a <TIM_TI1_SetConfig+0x46>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <TIM_TI1_SetConfig+0xac>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d003      	beq.n	8001f2a <TIM_TI1_SetConfig+0x46>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <TIM_TI1_SetConfig+0xb0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <TIM_TI1_SetConfig+0x4a>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <TIM_TI1_SetConfig+0x4c>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f023 0303 	bic.w	r3, r3, #3
 8001f3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e003      	b.n	8001f4e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f023 030a 	bic.w	r3, r3, #10
 8001f68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	f003 030a 	and.w	r3, r3, #10
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	621a      	str	r2, [r3, #32]
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40012c00 	.word	0x40012c00
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800

08001f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f023 0201 	bic.w	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f023 030a 	bic.w	r3, r3, #10
 8001fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	621a      	str	r2, [r3, #32]
}
 8001fea:	bf00      	nop
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	f023 0210 	bic.w	r2, r3, #16
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002032:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	031b      	lsls	r3, r3, #12
 8002038:	b29b      	uxth	r3, r3
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002046:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	621a      	str	r2, [r3, #32]
}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f023 0210 	bic.w	r2, r3, #16
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002096:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	031b      	lsls	r3, r3, #12
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	621a      	str	r2, [r3, #32]
}
 80020c0:	bf00      	nop
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b087      	sub	sp, #28
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f023 0303 	bic.w	r3, r3, #3
 80020f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002106:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	b2db      	uxtb	r3, r3
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800211a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	621a      	str	r2, [r3, #32]
}
 8002136:	bf00      	nop
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800217e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	031b      	lsls	r3, r3, #12
 8002184:	b29b      	uxth	r3, r3
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002192:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	031b      	lsls	r3, r3, #12
 8002198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	621a      	str	r2, [r3, #32]
}
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f043 0307 	orr.w	r3, r3, #7
 80021da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	609a      	str	r2, [r3, #8]
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	021a      	lsls	r2, r3, #8
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	431a      	orrs	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4313      	orrs	r3, r2
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	609a      	str	r2, [r3, #8]
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800222a:	b480      	push	{r7}
 800222c:	b087      	sub	sp, #28
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2201      	movs	r2, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	43db      	mvns	r3, r3
 800224c:	401a      	ands	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	431a      	orrs	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	621a      	str	r2, [r3, #32]
}
 8002268:	bf00      	nop
 800226a:	371c      	adds	r7, #28
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
	...

08002274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002288:	2302      	movs	r3, #2
 800228a:	e046      	b.n	800231a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a16      	ldr	r2, [pc, #88]	; (8002324 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00e      	beq.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d8:	d009      	beq.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d004      	beq.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10c      	bne.n	8002308 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800

08002330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e03f      	b.n	80023e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe f8e6 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f905 	bl	80025a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b08a      	sub	sp, #40	; 0x28
 80023f2:	af02      	add	r7, sp, #8
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	d17c      	bne.n	8002508 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_UART_Transmit+0x2c>
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e075      	b.n	800250a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_UART_Transmit+0x3e>
 8002428:	2302      	movs	r3, #2
 800242a:	e06e      	b.n	800250a <HAL_UART_Transmit+0x11c>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2221      	movs	r2, #33	; 0x21
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002442:	f7fe f9bb 	bl	80007bc <HAL_GetTick>
 8002446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	88fa      	ldrh	r2, [r7, #6]
 8002452:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245c:	d108      	bne.n	8002470 <HAL_UART_Transmit+0x82>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	e003      	b.n	8002478 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002480:	e02a      	b.n	80024d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f840 	bl	8002512 <UART_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e036      	b.n	800250a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10b      	bne.n	80024ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	3302      	adds	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	e007      	b.n	80024ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	781a      	ldrb	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	3301      	adds	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1cf      	bne.n	8002482 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	2140      	movs	r1, #64	; 0x40
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f810 	bl	8002512 <UART_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e006      	b.n	800250a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e000      	b.n	800250a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	3720      	adds	r7, #32
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	4613      	mov	r3, r2
 8002520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002522:	e02c      	b.n	800257e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d028      	beq.n	800257e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <UART_WaitOnFlagUntilTimeout+0x30>
 8002532:	f7fe f943 	bl	80007bc <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	429a      	cmp	r2, r3
 8002540:	d21d      	bcs.n	800257e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002550:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e00f      	b.n	800259e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4013      	ands	r3, r2
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	429a      	cmp	r2, r3
 800258c:	bf0c      	ite	eq
 800258e:	2301      	moveq	r3, #1
 8002590:	2300      	movne	r3, #0
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	429a      	cmp	r2, r3
 800259a:	d0c3      	beq.n	8002524 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025e2:	f023 030c 	bic.w	r3, r3, #12
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	430b      	orrs	r3, r1
 80025ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a2c      	ldr	r2, [pc, #176]	; (80026bc <UART_SetConfig+0x114>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d103      	bne.n	8002618 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002610:	f7fe ff58 	bl	80014c4 <HAL_RCC_GetPCLK2Freq>
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	e002      	b.n	800261e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002618:	f7fe ff40 	bl	800149c <HAL_RCC_GetPCLK1Freq>
 800261c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	009a      	lsls	r2, r3, #2
 8002628:	441a      	add	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	fbb2 f3f3 	udiv	r3, r2, r3
 8002634:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <UART_SetConfig+0x118>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	0119      	lsls	r1, r3, #4
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	009a      	lsls	r2, r3, #2
 8002648:	441a      	add	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	fbb2 f2f3 	udiv	r2, r2, r3
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <UART_SetConfig+0x118>)
 8002656:	fba3 0302 	umull	r0, r3, r3, r2
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2064      	movs	r0, #100	; 0x64
 800265e:	fb00 f303 	mul.w	r3, r0, r3
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	3332      	adds	r3, #50	; 0x32
 8002668:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <UART_SetConfig+0x118>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002674:	4419      	add	r1, r3
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	009a      	lsls	r2, r3, #2
 8002680:	441a      	add	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	fbb2 f2f3 	udiv	r2, r2, r3
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <UART_SetConfig+0x118>)
 800268e:	fba3 0302 	umull	r0, r3, r3, r2
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2064      	movs	r0, #100	; 0x64
 8002696:	fb00 f303 	mul.w	r3, r0, r3
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	3332      	adds	r3, #50	; 0x32
 80026a0:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <UART_SetConfig+0x118>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	f003 020f 	and.w	r2, r3, #15
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	440a      	add	r2, r1
 80026b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40013800 	.word	0x40013800
 80026c0:	51eb851f 	.word	0x51eb851f

080026c4 <__errno>:
 80026c4:	4b01      	ldr	r3, [pc, #4]	; (80026cc <__errno+0x8>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	2000000c 	.word	0x2000000c

080026d0 <__libc_init_array>:
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	2600      	movs	r6, #0
 80026d4:	4d0c      	ldr	r5, [pc, #48]	; (8002708 <__libc_init_array+0x38>)
 80026d6:	4c0d      	ldr	r4, [pc, #52]	; (800270c <__libc_init_array+0x3c>)
 80026d8:	1b64      	subs	r4, r4, r5
 80026da:	10a4      	asrs	r4, r4, #2
 80026dc:	42a6      	cmp	r6, r4
 80026de:	d109      	bne.n	80026f4 <__libc_init_array+0x24>
 80026e0:	f000 fcb0 	bl	8003044 <_init>
 80026e4:	2600      	movs	r6, #0
 80026e6:	4d0a      	ldr	r5, [pc, #40]	; (8002710 <__libc_init_array+0x40>)
 80026e8:	4c0a      	ldr	r4, [pc, #40]	; (8002714 <__libc_init_array+0x44>)
 80026ea:	1b64      	subs	r4, r4, r5
 80026ec:	10a4      	asrs	r4, r4, #2
 80026ee:	42a6      	cmp	r6, r4
 80026f0:	d105      	bne.n	80026fe <__libc_init_array+0x2e>
 80026f2:	bd70      	pop	{r4, r5, r6, pc}
 80026f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f8:	4798      	blx	r3
 80026fa:	3601      	adds	r6, #1
 80026fc:	e7ee      	b.n	80026dc <__libc_init_array+0xc>
 80026fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002702:	4798      	blx	r3
 8002704:	3601      	adds	r6, #1
 8002706:	e7f2      	b.n	80026ee <__libc_init_array+0x1e>
 8002708:	080030c8 	.word	0x080030c8
 800270c:	080030c8 	.word	0x080030c8
 8002710:	080030c8 	.word	0x080030c8
 8002714:	080030cc 	.word	0x080030cc

08002718 <memset>:
 8002718:	4603      	mov	r3, r0
 800271a:	4402      	add	r2, r0
 800271c:	4293      	cmp	r3, r2
 800271e:	d100      	bne.n	8002722 <memset+0xa>
 8002720:	4770      	bx	lr
 8002722:	f803 1b01 	strb.w	r1, [r3], #1
 8002726:	e7f9      	b.n	800271c <memset+0x4>

08002728 <sniprintf>:
 8002728:	b40c      	push	{r2, r3}
 800272a:	b530      	push	{r4, r5, lr}
 800272c:	4b17      	ldr	r3, [pc, #92]	; (800278c <sniprintf+0x64>)
 800272e:	1e0c      	subs	r4, r1, #0
 8002730:	681d      	ldr	r5, [r3, #0]
 8002732:	b09d      	sub	sp, #116	; 0x74
 8002734:	da08      	bge.n	8002748 <sniprintf+0x20>
 8002736:	238b      	movs	r3, #139	; 0x8b
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	602b      	str	r3, [r5, #0]
 800273e:	b01d      	add	sp, #116	; 0x74
 8002740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002744:	b002      	add	sp, #8
 8002746:	4770      	bx	lr
 8002748:	f44f 7302 	mov.w	r3, #520	; 0x208
 800274c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002750:	bf0c      	ite	eq
 8002752:	4623      	moveq	r3, r4
 8002754:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002758:	9304      	str	r3, [sp, #16]
 800275a:	9307      	str	r3, [sp, #28]
 800275c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002760:	9002      	str	r0, [sp, #8]
 8002762:	9006      	str	r0, [sp, #24]
 8002764:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002768:	4628      	mov	r0, r5
 800276a:	ab21      	add	r3, sp, #132	; 0x84
 800276c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800276e:	a902      	add	r1, sp, #8
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	f000 f869 	bl	8002848 <_svfiprintf_r>
 8002776:	1c43      	adds	r3, r0, #1
 8002778:	bfbc      	itt	lt
 800277a:	238b      	movlt	r3, #139	; 0x8b
 800277c:	602b      	strlt	r3, [r5, #0]
 800277e:	2c00      	cmp	r4, #0
 8002780:	d0dd      	beq.n	800273e <sniprintf+0x16>
 8002782:	2200      	movs	r2, #0
 8002784:	9b02      	ldr	r3, [sp, #8]
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e7d9      	b.n	800273e <sniprintf+0x16>
 800278a:	bf00      	nop
 800278c:	2000000c 	.word	0x2000000c

08002790 <__ssputs_r>:
 8002790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002794:	688e      	ldr	r6, [r1, #8]
 8002796:	4682      	mov	sl, r0
 8002798:	429e      	cmp	r6, r3
 800279a:	460c      	mov	r4, r1
 800279c:	4690      	mov	r8, r2
 800279e:	461f      	mov	r7, r3
 80027a0:	d838      	bhi.n	8002814 <__ssputs_r+0x84>
 80027a2:	898a      	ldrh	r2, [r1, #12]
 80027a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027a8:	d032      	beq.n	8002810 <__ssputs_r+0x80>
 80027aa:	6825      	ldr	r5, [r4, #0]
 80027ac:	6909      	ldr	r1, [r1, #16]
 80027ae:	3301      	adds	r3, #1
 80027b0:	eba5 0901 	sub.w	r9, r5, r1
 80027b4:	6965      	ldr	r5, [r4, #20]
 80027b6:	444b      	add	r3, r9
 80027b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027c0:	106d      	asrs	r5, r5, #1
 80027c2:	429d      	cmp	r5, r3
 80027c4:	bf38      	it	cc
 80027c6:	461d      	movcc	r5, r3
 80027c8:	0553      	lsls	r3, r2, #21
 80027ca:	d531      	bpl.n	8002830 <__ssputs_r+0xa0>
 80027cc:	4629      	mov	r1, r5
 80027ce:	f000 fb6f 	bl	8002eb0 <_malloc_r>
 80027d2:	4606      	mov	r6, r0
 80027d4:	b950      	cbnz	r0, 80027ec <__ssputs_r+0x5c>
 80027d6:	230c      	movs	r3, #12
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f8ca 3000 	str.w	r3, [sl]
 80027e0:	89a3      	ldrh	r3, [r4, #12]
 80027e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e6:	81a3      	strh	r3, [r4, #12]
 80027e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ec:	464a      	mov	r2, r9
 80027ee:	6921      	ldr	r1, [r4, #16]
 80027f0:	f000 face 	bl	8002d90 <memcpy>
 80027f4:	89a3      	ldrh	r3, [r4, #12]
 80027f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fe:	81a3      	strh	r3, [r4, #12]
 8002800:	6126      	str	r6, [r4, #16]
 8002802:	444e      	add	r6, r9
 8002804:	6026      	str	r6, [r4, #0]
 8002806:	463e      	mov	r6, r7
 8002808:	6165      	str	r5, [r4, #20]
 800280a:	eba5 0509 	sub.w	r5, r5, r9
 800280e:	60a5      	str	r5, [r4, #8]
 8002810:	42be      	cmp	r6, r7
 8002812:	d900      	bls.n	8002816 <__ssputs_r+0x86>
 8002814:	463e      	mov	r6, r7
 8002816:	4632      	mov	r2, r6
 8002818:	4641      	mov	r1, r8
 800281a:	6820      	ldr	r0, [r4, #0]
 800281c:	f000 fac6 	bl	8002dac <memmove>
 8002820:	68a3      	ldr	r3, [r4, #8]
 8002822:	2000      	movs	r0, #0
 8002824:	1b9b      	subs	r3, r3, r6
 8002826:	60a3      	str	r3, [r4, #8]
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	4433      	add	r3, r6
 800282c:	6023      	str	r3, [r4, #0]
 800282e:	e7db      	b.n	80027e8 <__ssputs_r+0x58>
 8002830:	462a      	mov	r2, r5
 8002832:	f000 fbb1 	bl	8002f98 <_realloc_r>
 8002836:	4606      	mov	r6, r0
 8002838:	2800      	cmp	r0, #0
 800283a:	d1e1      	bne.n	8002800 <__ssputs_r+0x70>
 800283c:	4650      	mov	r0, sl
 800283e:	6921      	ldr	r1, [r4, #16]
 8002840:	f000 face 	bl	8002de0 <_free_r>
 8002844:	e7c7      	b.n	80027d6 <__ssputs_r+0x46>
	...

08002848 <_svfiprintf_r>:
 8002848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284c:	4698      	mov	r8, r3
 800284e:	898b      	ldrh	r3, [r1, #12]
 8002850:	4607      	mov	r7, r0
 8002852:	061b      	lsls	r3, r3, #24
 8002854:	460d      	mov	r5, r1
 8002856:	4614      	mov	r4, r2
 8002858:	b09d      	sub	sp, #116	; 0x74
 800285a:	d50e      	bpl.n	800287a <_svfiprintf_r+0x32>
 800285c:	690b      	ldr	r3, [r1, #16]
 800285e:	b963      	cbnz	r3, 800287a <_svfiprintf_r+0x32>
 8002860:	2140      	movs	r1, #64	; 0x40
 8002862:	f000 fb25 	bl	8002eb0 <_malloc_r>
 8002866:	6028      	str	r0, [r5, #0]
 8002868:	6128      	str	r0, [r5, #16]
 800286a:	b920      	cbnz	r0, 8002876 <_svfiprintf_r+0x2e>
 800286c:	230c      	movs	r3, #12
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	e0d1      	b.n	8002a1a <_svfiprintf_r+0x1d2>
 8002876:	2340      	movs	r3, #64	; 0x40
 8002878:	616b      	str	r3, [r5, #20]
 800287a:	2300      	movs	r3, #0
 800287c:	9309      	str	r3, [sp, #36]	; 0x24
 800287e:	2320      	movs	r3, #32
 8002880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002884:	2330      	movs	r3, #48	; 0x30
 8002886:	f04f 0901 	mov.w	r9, #1
 800288a:	f8cd 800c 	str.w	r8, [sp, #12]
 800288e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002a34 <_svfiprintf_r+0x1ec>
 8002892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002896:	4623      	mov	r3, r4
 8002898:	469a      	mov	sl, r3
 800289a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800289e:	b10a      	cbz	r2, 80028a4 <_svfiprintf_r+0x5c>
 80028a0:	2a25      	cmp	r2, #37	; 0x25
 80028a2:	d1f9      	bne.n	8002898 <_svfiprintf_r+0x50>
 80028a4:	ebba 0b04 	subs.w	fp, sl, r4
 80028a8:	d00b      	beq.n	80028c2 <_svfiprintf_r+0x7a>
 80028aa:	465b      	mov	r3, fp
 80028ac:	4622      	mov	r2, r4
 80028ae:	4629      	mov	r1, r5
 80028b0:	4638      	mov	r0, r7
 80028b2:	f7ff ff6d 	bl	8002790 <__ssputs_r>
 80028b6:	3001      	adds	r0, #1
 80028b8:	f000 80aa 	beq.w	8002a10 <_svfiprintf_r+0x1c8>
 80028bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028be:	445a      	add	r2, fp
 80028c0:	9209      	str	r2, [sp, #36]	; 0x24
 80028c2:	f89a 3000 	ldrb.w	r3, [sl]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80a2 	beq.w	8002a10 <_svfiprintf_r+0x1c8>
 80028cc:	2300      	movs	r3, #0
 80028ce:	f04f 32ff 	mov.w	r2, #4294967295
 80028d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028d6:	f10a 0a01 	add.w	sl, sl, #1
 80028da:	9304      	str	r3, [sp, #16]
 80028dc:	9307      	str	r3, [sp, #28]
 80028de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028e2:	931a      	str	r3, [sp, #104]	; 0x68
 80028e4:	4654      	mov	r4, sl
 80028e6:	2205      	movs	r2, #5
 80028e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028ec:	4851      	ldr	r0, [pc, #324]	; (8002a34 <_svfiprintf_r+0x1ec>)
 80028ee:	f000 fa41 	bl	8002d74 <memchr>
 80028f2:	9a04      	ldr	r2, [sp, #16]
 80028f4:	b9d8      	cbnz	r0, 800292e <_svfiprintf_r+0xe6>
 80028f6:	06d0      	lsls	r0, r2, #27
 80028f8:	bf44      	itt	mi
 80028fa:	2320      	movmi	r3, #32
 80028fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002900:	0711      	lsls	r1, r2, #28
 8002902:	bf44      	itt	mi
 8002904:	232b      	movmi	r3, #43	; 0x2b
 8002906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800290a:	f89a 3000 	ldrb.w	r3, [sl]
 800290e:	2b2a      	cmp	r3, #42	; 0x2a
 8002910:	d015      	beq.n	800293e <_svfiprintf_r+0xf6>
 8002912:	4654      	mov	r4, sl
 8002914:	2000      	movs	r0, #0
 8002916:	f04f 0c0a 	mov.w	ip, #10
 800291a:	9a07      	ldr	r2, [sp, #28]
 800291c:	4621      	mov	r1, r4
 800291e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002922:	3b30      	subs	r3, #48	; 0x30
 8002924:	2b09      	cmp	r3, #9
 8002926:	d94e      	bls.n	80029c6 <_svfiprintf_r+0x17e>
 8002928:	b1b0      	cbz	r0, 8002958 <_svfiprintf_r+0x110>
 800292a:	9207      	str	r2, [sp, #28]
 800292c:	e014      	b.n	8002958 <_svfiprintf_r+0x110>
 800292e:	eba0 0308 	sub.w	r3, r0, r8
 8002932:	fa09 f303 	lsl.w	r3, r9, r3
 8002936:	4313      	orrs	r3, r2
 8002938:	46a2      	mov	sl, r4
 800293a:	9304      	str	r3, [sp, #16]
 800293c:	e7d2      	b.n	80028e4 <_svfiprintf_r+0x9c>
 800293e:	9b03      	ldr	r3, [sp, #12]
 8002940:	1d19      	adds	r1, r3, #4
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	9103      	str	r1, [sp, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	bfbb      	ittet	lt
 800294a:	425b      	neglt	r3, r3
 800294c:	f042 0202 	orrlt.w	r2, r2, #2
 8002950:	9307      	strge	r3, [sp, #28]
 8002952:	9307      	strlt	r3, [sp, #28]
 8002954:	bfb8      	it	lt
 8002956:	9204      	strlt	r2, [sp, #16]
 8002958:	7823      	ldrb	r3, [r4, #0]
 800295a:	2b2e      	cmp	r3, #46	; 0x2e
 800295c:	d10c      	bne.n	8002978 <_svfiprintf_r+0x130>
 800295e:	7863      	ldrb	r3, [r4, #1]
 8002960:	2b2a      	cmp	r3, #42	; 0x2a
 8002962:	d135      	bne.n	80029d0 <_svfiprintf_r+0x188>
 8002964:	9b03      	ldr	r3, [sp, #12]
 8002966:	3402      	adds	r4, #2
 8002968:	1d1a      	adds	r2, r3, #4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	9203      	str	r2, [sp, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	bfb8      	it	lt
 8002972:	f04f 33ff 	movlt.w	r3, #4294967295
 8002976:	9305      	str	r3, [sp, #20]
 8002978:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002a38 <_svfiprintf_r+0x1f0>
 800297c:	2203      	movs	r2, #3
 800297e:	4650      	mov	r0, sl
 8002980:	7821      	ldrb	r1, [r4, #0]
 8002982:	f000 f9f7 	bl	8002d74 <memchr>
 8002986:	b140      	cbz	r0, 800299a <_svfiprintf_r+0x152>
 8002988:	2340      	movs	r3, #64	; 0x40
 800298a:	eba0 000a 	sub.w	r0, r0, sl
 800298e:	fa03 f000 	lsl.w	r0, r3, r0
 8002992:	9b04      	ldr	r3, [sp, #16]
 8002994:	3401      	adds	r4, #1
 8002996:	4303      	orrs	r3, r0
 8002998:	9304      	str	r3, [sp, #16]
 800299a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800299e:	2206      	movs	r2, #6
 80029a0:	4826      	ldr	r0, [pc, #152]	; (8002a3c <_svfiprintf_r+0x1f4>)
 80029a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029a6:	f000 f9e5 	bl	8002d74 <memchr>
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d038      	beq.n	8002a20 <_svfiprintf_r+0x1d8>
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <_svfiprintf_r+0x1f8>)
 80029b0:	bb1b      	cbnz	r3, 80029fa <_svfiprintf_r+0x1b2>
 80029b2:	9b03      	ldr	r3, [sp, #12]
 80029b4:	3307      	adds	r3, #7
 80029b6:	f023 0307 	bic.w	r3, r3, #7
 80029ba:	3308      	adds	r3, #8
 80029bc:	9303      	str	r3, [sp, #12]
 80029be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029c0:	4433      	add	r3, r6
 80029c2:	9309      	str	r3, [sp, #36]	; 0x24
 80029c4:	e767      	b.n	8002896 <_svfiprintf_r+0x4e>
 80029c6:	460c      	mov	r4, r1
 80029c8:	2001      	movs	r0, #1
 80029ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80029ce:	e7a5      	b.n	800291c <_svfiprintf_r+0xd4>
 80029d0:	2300      	movs	r3, #0
 80029d2:	f04f 0c0a 	mov.w	ip, #10
 80029d6:	4619      	mov	r1, r3
 80029d8:	3401      	adds	r4, #1
 80029da:	9305      	str	r3, [sp, #20]
 80029dc:	4620      	mov	r0, r4
 80029de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029e2:	3a30      	subs	r2, #48	; 0x30
 80029e4:	2a09      	cmp	r2, #9
 80029e6:	d903      	bls.n	80029f0 <_svfiprintf_r+0x1a8>
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0c5      	beq.n	8002978 <_svfiprintf_r+0x130>
 80029ec:	9105      	str	r1, [sp, #20]
 80029ee:	e7c3      	b.n	8002978 <_svfiprintf_r+0x130>
 80029f0:	4604      	mov	r4, r0
 80029f2:	2301      	movs	r3, #1
 80029f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80029f8:	e7f0      	b.n	80029dc <_svfiprintf_r+0x194>
 80029fa:	ab03      	add	r3, sp, #12
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	462a      	mov	r2, r5
 8002a00:	4638      	mov	r0, r7
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <_svfiprintf_r+0x1fc>)
 8002a04:	a904      	add	r1, sp, #16
 8002a06:	f3af 8000 	nop.w
 8002a0a:	1c42      	adds	r2, r0, #1
 8002a0c:	4606      	mov	r6, r0
 8002a0e:	d1d6      	bne.n	80029be <_svfiprintf_r+0x176>
 8002a10:	89ab      	ldrh	r3, [r5, #12]
 8002a12:	065b      	lsls	r3, r3, #25
 8002a14:	f53f af2c 	bmi.w	8002870 <_svfiprintf_r+0x28>
 8002a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a1a:	b01d      	add	sp, #116	; 0x74
 8002a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a20:	ab03      	add	r3, sp, #12
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	462a      	mov	r2, r5
 8002a26:	4638      	mov	r0, r7
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <_svfiprintf_r+0x1fc>)
 8002a2a:	a904      	add	r1, sp, #16
 8002a2c:	f000 f87c 	bl	8002b28 <_printf_i>
 8002a30:	e7eb      	b.n	8002a0a <_svfiprintf_r+0x1c2>
 8002a32:	bf00      	nop
 8002a34:	08003094 	.word	0x08003094
 8002a38:	0800309a 	.word	0x0800309a
 8002a3c:	0800309e 	.word	0x0800309e
 8002a40:	00000000 	.word	0x00000000
 8002a44:	08002791 	.word	0x08002791

08002a48 <_printf_common>:
 8002a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a4c:	4616      	mov	r6, r2
 8002a4e:	4699      	mov	r9, r3
 8002a50:	688a      	ldr	r2, [r1, #8]
 8002a52:	690b      	ldr	r3, [r1, #16]
 8002a54:	4607      	mov	r7, r0
 8002a56:	4293      	cmp	r3, r2
 8002a58:	bfb8      	it	lt
 8002a5a:	4613      	movlt	r3, r2
 8002a5c:	6033      	str	r3, [r6, #0]
 8002a5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a62:	460c      	mov	r4, r1
 8002a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a68:	b10a      	cbz	r2, 8002a6e <_printf_common+0x26>
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	6033      	str	r3, [r6, #0]
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	0699      	lsls	r1, r3, #26
 8002a72:	bf42      	ittt	mi
 8002a74:	6833      	ldrmi	r3, [r6, #0]
 8002a76:	3302      	addmi	r3, #2
 8002a78:	6033      	strmi	r3, [r6, #0]
 8002a7a:	6825      	ldr	r5, [r4, #0]
 8002a7c:	f015 0506 	ands.w	r5, r5, #6
 8002a80:	d106      	bne.n	8002a90 <_printf_common+0x48>
 8002a82:	f104 0a19 	add.w	sl, r4, #25
 8002a86:	68e3      	ldr	r3, [r4, #12]
 8002a88:	6832      	ldr	r2, [r6, #0]
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	42ab      	cmp	r3, r5
 8002a8e:	dc28      	bgt.n	8002ae2 <_printf_common+0x9a>
 8002a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a94:	1e13      	subs	r3, r2, #0
 8002a96:	6822      	ldr	r2, [r4, #0]
 8002a98:	bf18      	it	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	0692      	lsls	r2, r2, #26
 8002a9e:	d42d      	bmi.n	8002afc <_printf_common+0xb4>
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	4638      	mov	r0, r7
 8002aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002aa8:	47c0      	blx	r8
 8002aaa:	3001      	adds	r0, #1
 8002aac:	d020      	beq.n	8002af0 <_printf_common+0xa8>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	68e5      	ldr	r5, [r4, #12]
 8002ab2:	f003 0306 	and.w	r3, r3, #6
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	bf18      	it	ne
 8002aba:	2500      	movne	r5, #0
 8002abc:	6832      	ldr	r2, [r6, #0]
 8002abe:	f04f 0600 	mov.w	r6, #0
 8002ac2:	68a3      	ldr	r3, [r4, #8]
 8002ac4:	bf08      	it	eq
 8002ac6:	1aad      	subeq	r5, r5, r2
 8002ac8:	6922      	ldr	r2, [r4, #16]
 8002aca:	bf08      	it	eq
 8002acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	bfc4      	itt	gt
 8002ad4:	1a9b      	subgt	r3, r3, r2
 8002ad6:	18ed      	addgt	r5, r5, r3
 8002ad8:	341a      	adds	r4, #26
 8002ada:	42b5      	cmp	r5, r6
 8002adc:	d11a      	bne.n	8002b14 <_printf_common+0xcc>
 8002ade:	2000      	movs	r0, #0
 8002ae0:	e008      	b.n	8002af4 <_printf_common+0xac>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	4652      	mov	r2, sl
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	4638      	mov	r0, r7
 8002aea:	47c0      	blx	r8
 8002aec:	3001      	adds	r0, #1
 8002aee:	d103      	bne.n	8002af8 <_printf_common+0xb0>
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af8:	3501      	adds	r5, #1
 8002afa:	e7c4      	b.n	8002a86 <_printf_common+0x3e>
 8002afc:	2030      	movs	r0, #48	; 0x30
 8002afe:	18e1      	adds	r1, r4, r3
 8002b00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b0a:	4422      	add	r2, r4
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b12:	e7c5      	b.n	8002aa0 <_printf_common+0x58>
 8002b14:	2301      	movs	r3, #1
 8002b16:	4622      	mov	r2, r4
 8002b18:	4649      	mov	r1, r9
 8002b1a:	4638      	mov	r0, r7
 8002b1c:	47c0      	blx	r8
 8002b1e:	3001      	adds	r0, #1
 8002b20:	d0e6      	beq.n	8002af0 <_printf_common+0xa8>
 8002b22:	3601      	adds	r6, #1
 8002b24:	e7d9      	b.n	8002ada <_printf_common+0x92>
	...

08002b28 <_printf_i>:
 8002b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b2c:	7e0f      	ldrb	r7, [r1, #24]
 8002b2e:	4691      	mov	r9, r2
 8002b30:	2f78      	cmp	r7, #120	; 0x78
 8002b32:	4680      	mov	r8, r0
 8002b34:	460c      	mov	r4, r1
 8002b36:	469a      	mov	sl, r3
 8002b38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b3e:	d807      	bhi.n	8002b50 <_printf_i+0x28>
 8002b40:	2f62      	cmp	r7, #98	; 0x62
 8002b42:	d80a      	bhi.n	8002b5a <_printf_i+0x32>
 8002b44:	2f00      	cmp	r7, #0
 8002b46:	f000 80d9 	beq.w	8002cfc <_printf_i+0x1d4>
 8002b4a:	2f58      	cmp	r7, #88	; 0x58
 8002b4c:	f000 80a4 	beq.w	8002c98 <_printf_i+0x170>
 8002b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b58:	e03a      	b.n	8002bd0 <_printf_i+0xa8>
 8002b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b5e:	2b15      	cmp	r3, #21
 8002b60:	d8f6      	bhi.n	8002b50 <_printf_i+0x28>
 8002b62:	a101      	add	r1, pc, #4	; (adr r1, 8002b68 <_printf_i+0x40>)
 8002b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b68:	08002bc1 	.word	0x08002bc1
 8002b6c:	08002bd5 	.word	0x08002bd5
 8002b70:	08002b51 	.word	0x08002b51
 8002b74:	08002b51 	.word	0x08002b51
 8002b78:	08002b51 	.word	0x08002b51
 8002b7c:	08002b51 	.word	0x08002b51
 8002b80:	08002bd5 	.word	0x08002bd5
 8002b84:	08002b51 	.word	0x08002b51
 8002b88:	08002b51 	.word	0x08002b51
 8002b8c:	08002b51 	.word	0x08002b51
 8002b90:	08002b51 	.word	0x08002b51
 8002b94:	08002ce3 	.word	0x08002ce3
 8002b98:	08002c05 	.word	0x08002c05
 8002b9c:	08002cc5 	.word	0x08002cc5
 8002ba0:	08002b51 	.word	0x08002b51
 8002ba4:	08002b51 	.word	0x08002b51
 8002ba8:	08002d05 	.word	0x08002d05
 8002bac:	08002b51 	.word	0x08002b51
 8002bb0:	08002c05 	.word	0x08002c05
 8002bb4:	08002b51 	.word	0x08002b51
 8002bb8:	08002b51 	.word	0x08002b51
 8002bbc:	08002ccd 	.word	0x08002ccd
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	1d1a      	adds	r2, r3, #4
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	602a      	str	r2, [r5, #0]
 8002bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0a4      	b.n	8002d1e <_printf_i+0x1f6>
 8002bd4:	6820      	ldr	r0, [r4, #0]
 8002bd6:	6829      	ldr	r1, [r5, #0]
 8002bd8:	0606      	lsls	r6, r0, #24
 8002bda:	f101 0304 	add.w	r3, r1, #4
 8002bde:	d50a      	bpl.n	8002bf6 <_printf_i+0xce>
 8002be0:	680e      	ldr	r6, [r1, #0]
 8002be2:	602b      	str	r3, [r5, #0]
 8002be4:	2e00      	cmp	r6, #0
 8002be6:	da03      	bge.n	8002bf0 <_printf_i+0xc8>
 8002be8:	232d      	movs	r3, #45	; 0x2d
 8002bea:	4276      	negs	r6, r6
 8002bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bf0:	230a      	movs	r3, #10
 8002bf2:	485e      	ldr	r0, [pc, #376]	; (8002d6c <_printf_i+0x244>)
 8002bf4:	e019      	b.n	8002c2a <_printf_i+0x102>
 8002bf6:	680e      	ldr	r6, [r1, #0]
 8002bf8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bfc:	602b      	str	r3, [r5, #0]
 8002bfe:	bf18      	it	ne
 8002c00:	b236      	sxthne	r6, r6
 8002c02:	e7ef      	b.n	8002be4 <_printf_i+0xbc>
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	6820      	ldr	r0, [r4, #0]
 8002c08:	1d19      	adds	r1, r3, #4
 8002c0a:	6029      	str	r1, [r5, #0]
 8002c0c:	0601      	lsls	r1, r0, #24
 8002c0e:	d501      	bpl.n	8002c14 <_printf_i+0xec>
 8002c10:	681e      	ldr	r6, [r3, #0]
 8002c12:	e002      	b.n	8002c1a <_printf_i+0xf2>
 8002c14:	0646      	lsls	r6, r0, #25
 8002c16:	d5fb      	bpl.n	8002c10 <_printf_i+0xe8>
 8002c18:	881e      	ldrh	r6, [r3, #0]
 8002c1a:	2f6f      	cmp	r7, #111	; 0x6f
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2308      	moveq	r3, #8
 8002c20:	230a      	movne	r3, #10
 8002c22:	4852      	ldr	r0, [pc, #328]	; (8002d6c <_printf_i+0x244>)
 8002c24:	2100      	movs	r1, #0
 8002c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c2a:	6865      	ldr	r5, [r4, #4]
 8002c2c:	2d00      	cmp	r5, #0
 8002c2e:	bfa8      	it	ge
 8002c30:	6821      	ldrge	r1, [r4, #0]
 8002c32:	60a5      	str	r5, [r4, #8]
 8002c34:	bfa4      	itt	ge
 8002c36:	f021 0104 	bicge.w	r1, r1, #4
 8002c3a:	6021      	strge	r1, [r4, #0]
 8002c3c:	b90e      	cbnz	r6, 8002c42 <_printf_i+0x11a>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d04d      	beq.n	8002cde <_printf_i+0x1b6>
 8002c42:	4615      	mov	r5, r2
 8002c44:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c48:	fb03 6711 	mls	r7, r3, r1, r6
 8002c4c:	5dc7      	ldrb	r7, [r0, r7]
 8002c4e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c52:	4637      	mov	r7, r6
 8002c54:	42bb      	cmp	r3, r7
 8002c56:	460e      	mov	r6, r1
 8002c58:	d9f4      	bls.n	8002c44 <_printf_i+0x11c>
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d10b      	bne.n	8002c76 <_printf_i+0x14e>
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	07de      	lsls	r6, r3, #31
 8002c62:	d508      	bpl.n	8002c76 <_printf_i+0x14e>
 8002c64:	6923      	ldr	r3, [r4, #16]
 8002c66:	6861      	ldr	r1, [r4, #4]
 8002c68:	4299      	cmp	r1, r3
 8002c6a:	bfde      	ittt	le
 8002c6c:	2330      	movle	r3, #48	; 0x30
 8002c6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c76:	1b52      	subs	r2, r2, r5
 8002c78:	6122      	str	r2, [r4, #16]
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	4640      	mov	r0, r8
 8002c80:	f8cd a000 	str.w	sl, [sp]
 8002c84:	aa03      	add	r2, sp, #12
 8002c86:	f7ff fedf 	bl	8002a48 <_printf_common>
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	d14c      	bne.n	8002d28 <_printf_i+0x200>
 8002c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c92:	b004      	add	sp, #16
 8002c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c98:	4834      	ldr	r0, [pc, #208]	; (8002d6c <_printf_i+0x244>)
 8002c9a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c9e:	6829      	ldr	r1, [r5, #0]
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ca6:	6029      	str	r1, [r5, #0]
 8002ca8:	061d      	lsls	r5, r3, #24
 8002caa:	d514      	bpl.n	8002cd6 <_printf_i+0x1ae>
 8002cac:	07df      	lsls	r7, r3, #31
 8002cae:	bf44      	itt	mi
 8002cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8002cb4:	6023      	strmi	r3, [r4, #0]
 8002cb6:	b91e      	cbnz	r6, 8002cc0 <_printf_i+0x198>
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	f023 0320 	bic.w	r3, r3, #32
 8002cbe:	6023      	str	r3, [r4, #0]
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	e7af      	b.n	8002c24 <_printf_i+0xfc>
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	f043 0320 	orr.w	r3, r3, #32
 8002cca:	6023      	str	r3, [r4, #0]
 8002ccc:	2378      	movs	r3, #120	; 0x78
 8002cce:	4828      	ldr	r0, [pc, #160]	; (8002d70 <_printf_i+0x248>)
 8002cd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002cd4:	e7e3      	b.n	8002c9e <_printf_i+0x176>
 8002cd6:	0659      	lsls	r1, r3, #25
 8002cd8:	bf48      	it	mi
 8002cda:	b2b6      	uxthmi	r6, r6
 8002cdc:	e7e6      	b.n	8002cac <_printf_i+0x184>
 8002cde:	4615      	mov	r5, r2
 8002ce0:	e7bb      	b.n	8002c5a <_printf_i+0x132>
 8002ce2:	682b      	ldr	r3, [r5, #0]
 8002ce4:	6826      	ldr	r6, [r4, #0]
 8002ce6:	1d18      	adds	r0, r3, #4
 8002ce8:	6961      	ldr	r1, [r4, #20]
 8002cea:	6028      	str	r0, [r5, #0]
 8002cec:	0635      	lsls	r5, r6, #24
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	d501      	bpl.n	8002cf6 <_printf_i+0x1ce>
 8002cf2:	6019      	str	r1, [r3, #0]
 8002cf4:	e002      	b.n	8002cfc <_printf_i+0x1d4>
 8002cf6:	0670      	lsls	r0, r6, #25
 8002cf8:	d5fb      	bpl.n	8002cf2 <_printf_i+0x1ca>
 8002cfa:	8019      	strh	r1, [r3, #0]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	4615      	mov	r5, r2
 8002d00:	6123      	str	r3, [r4, #16]
 8002d02:	e7ba      	b.n	8002c7a <_printf_i+0x152>
 8002d04:	682b      	ldr	r3, [r5, #0]
 8002d06:	2100      	movs	r1, #0
 8002d08:	1d1a      	adds	r2, r3, #4
 8002d0a:	602a      	str	r2, [r5, #0]
 8002d0c:	681d      	ldr	r5, [r3, #0]
 8002d0e:	6862      	ldr	r2, [r4, #4]
 8002d10:	4628      	mov	r0, r5
 8002d12:	f000 f82f 	bl	8002d74 <memchr>
 8002d16:	b108      	cbz	r0, 8002d1c <_printf_i+0x1f4>
 8002d18:	1b40      	subs	r0, r0, r5
 8002d1a:	6060      	str	r0, [r4, #4]
 8002d1c:	6863      	ldr	r3, [r4, #4]
 8002d1e:	6123      	str	r3, [r4, #16]
 8002d20:	2300      	movs	r3, #0
 8002d22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d26:	e7a8      	b.n	8002c7a <_printf_i+0x152>
 8002d28:	462a      	mov	r2, r5
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	4640      	mov	r0, r8
 8002d2e:	6923      	ldr	r3, [r4, #16]
 8002d30:	47d0      	blx	sl
 8002d32:	3001      	adds	r0, #1
 8002d34:	d0ab      	beq.n	8002c8e <_printf_i+0x166>
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	079b      	lsls	r3, r3, #30
 8002d3a:	d413      	bmi.n	8002d64 <_printf_i+0x23c>
 8002d3c:	68e0      	ldr	r0, [r4, #12]
 8002d3e:	9b03      	ldr	r3, [sp, #12]
 8002d40:	4298      	cmp	r0, r3
 8002d42:	bfb8      	it	lt
 8002d44:	4618      	movlt	r0, r3
 8002d46:	e7a4      	b.n	8002c92 <_printf_i+0x16a>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	4632      	mov	r2, r6
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	4640      	mov	r0, r8
 8002d50:	47d0      	blx	sl
 8002d52:	3001      	adds	r0, #1
 8002d54:	d09b      	beq.n	8002c8e <_printf_i+0x166>
 8002d56:	3501      	adds	r5, #1
 8002d58:	68e3      	ldr	r3, [r4, #12]
 8002d5a:	9903      	ldr	r1, [sp, #12]
 8002d5c:	1a5b      	subs	r3, r3, r1
 8002d5e:	42ab      	cmp	r3, r5
 8002d60:	dcf2      	bgt.n	8002d48 <_printf_i+0x220>
 8002d62:	e7eb      	b.n	8002d3c <_printf_i+0x214>
 8002d64:	2500      	movs	r5, #0
 8002d66:	f104 0619 	add.w	r6, r4, #25
 8002d6a:	e7f5      	b.n	8002d58 <_printf_i+0x230>
 8002d6c:	080030a5 	.word	0x080030a5
 8002d70:	080030b6 	.word	0x080030b6

08002d74 <memchr>:
 8002d74:	4603      	mov	r3, r0
 8002d76:	b510      	push	{r4, lr}
 8002d78:	b2c9      	uxtb	r1, r1
 8002d7a:	4402      	add	r2, r0
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	d101      	bne.n	8002d86 <memchr+0x12>
 8002d82:	2000      	movs	r0, #0
 8002d84:	e003      	b.n	8002d8e <memchr+0x1a>
 8002d86:	7804      	ldrb	r4, [r0, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	428c      	cmp	r4, r1
 8002d8c:	d1f6      	bne.n	8002d7c <memchr+0x8>
 8002d8e:	bd10      	pop	{r4, pc}

08002d90 <memcpy>:
 8002d90:	440a      	add	r2, r1
 8002d92:	4291      	cmp	r1, r2
 8002d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d98:	d100      	bne.n	8002d9c <memcpy+0xc>
 8002d9a:	4770      	bx	lr
 8002d9c:	b510      	push	{r4, lr}
 8002d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002da2:	4291      	cmp	r1, r2
 8002da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002da8:	d1f9      	bne.n	8002d9e <memcpy+0xe>
 8002daa:	bd10      	pop	{r4, pc}

08002dac <memmove>:
 8002dac:	4288      	cmp	r0, r1
 8002dae:	b510      	push	{r4, lr}
 8002db0:	eb01 0402 	add.w	r4, r1, r2
 8002db4:	d902      	bls.n	8002dbc <memmove+0x10>
 8002db6:	4284      	cmp	r4, r0
 8002db8:	4623      	mov	r3, r4
 8002dba:	d807      	bhi.n	8002dcc <memmove+0x20>
 8002dbc:	1e43      	subs	r3, r0, #1
 8002dbe:	42a1      	cmp	r1, r4
 8002dc0:	d008      	beq.n	8002dd4 <memmove+0x28>
 8002dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002dca:	e7f8      	b.n	8002dbe <memmove+0x12>
 8002dcc:	4601      	mov	r1, r0
 8002dce:	4402      	add	r2, r0
 8002dd0:	428a      	cmp	r2, r1
 8002dd2:	d100      	bne.n	8002dd6 <memmove+0x2a>
 8002dd4:	bd10      	pop	{r4, pc}
 8002dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002dde:	e7f7      	b.n	8002dd0 <memmove+0x24>

08002de0 <_free_r>:
 8002de0:	b538      	push	{r3, r4, r5, lr}
 8002de2:	4605      	mov	r5, r0
 8002de4:	2900      	cmp	r1, #0
 8002de6:	d040      	beq.n	8002e6a <_free_r+0x8a>
 8002de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dec:	1f0c      	subs	r4, r1, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bfb8      	it	lt
 8002df2:	18e4      	addlt	r4, r4, r3
 8002df4:	f000 f910 	bl	8003018 <__malloc_lock>
 8002df8:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <_free_r+0x8c>)
 8002dfa:	6813      	ldr	r3, [r2, #0]
 8002dfc:	b933      	cbnz	r3, 8002e0c <_free_r+0x2c>
 8002dfe:	6063      	str	r3, [r4, #4]
 8002e00:	6014      	str	r4, [r2, #0]
 8002e02:	4628      	mov	r0, r5
 8002e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e08:	f000 b90c 	b.w	8003024 <__malloc_unlock>
 8002e0c:	42a3      	cmp	r3, r4
 8002e0e:	d908      	bls.n	8002e22 <_free_r+0x42>
 8002e10:	6820      	ldr	r0, [r4, #0]
 8002e12:	1821      	adds	r1, r4, r0
 8002e14:	428b      	cmp	r3, r1
 8002e16:	bf01      	itttt	eq
 8002e18:	6819      	ldreq	r1, [r3, #0]
 8002e1a:	685b      	ldreq	r3, [r3, #4]
 8002e1c:	1809      	addeq	r1, r1, r0
 8002e1e:	6021      	streq	r1, [r4, #0]
 8002e20:	e7ed      	b.n	8002dfe <_free_r+0x1e>
 8002e22:	461a      	mov	r2, r3
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	b10b      	cbz	r3, 8002e2c <_free_r+0x4c>
 8002e28:	42a3      	cmp	r3, r4
 8002e2a:	d9fa      	bls.n	8002e22 <_free_r+0x42>
 8002e2c:	6811      	ldr	r1, [r2, #0]
 8002e2e:	1850      	adds	r0, r2, r1
 8002e30:	42a0      	cmp	r0, r4
 8002e32:	d10b      	bne.n	8002e4c <_free_r+0x6c>
 8002e34:	6820      	ldr	r0, [r4, #0]
 8002e36:	4401      	add	r1, r0
 8002e38:	1850      	adds	r0, r2, r1
 8002e3a:	4283      	cmp	r3, r0
 8002e3c:	6011      	str	r1, [r2, #0]
 8002e3e:	d1e0      	bne.n	8002e02 <_free_r+0x22>
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4401      	add	r1, r0
 8002e46:	6011      	str	r1, [r2, #0]
 8002e48:	6053      	str	r3, [r2, #4]
 8002e4a:	e7da      	b.n	8002e02 <_free_r+0x22>
 8002e4c:	d902      	bls.n	8002e54 <_free_r+0x74>
 8002e4e:	230c      	movs	r3, #12
 8002e50:	602b      	str	r3, [r5, #0]
 8002e52:	e7d6      	b.n	8002e02 <_free_r+0x22>
 8002e54:	6820      	ldr	r0, [r4, #0]
 8002e56:	1821      	adds	r1, r4, r0
 8002e58:	428b      	cmp	r3, r1
 8002e5a:	bf01      	itttt	eq
 8002e5c:	6819      	ldreq	r1, [r3, #0]
 8002e5e:	685b      	ldreq	r3, [r3, #4]
 8002e60:	1809      	addeq	r1, r1, r0
 8002e62:	6021      	streq	r1, [r4, #0]
 8002e64:	6063      	str	r3, [r4, #4]
 8002e66:	6054      	str	r4, [r2, #4]
 8002e68:	e7cb      	b.n	8002e02 <_free_r+0x22>
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
 8002e6c:	20000194 	.word	0x20000194

08002e70 <sbrk_aligned>:
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	4e0e      	ldr	r6, [pc, #56]	; (8002eac <sbrk_aligned+0x3c>)
 8002e74:	460c      	mov	r4, r1
 8002e76:	6831      	ldr	r1, [r6, #0]
 8002e78:	4605      	mov	r5, r0
 8002e7a:	b911      	cbnz	r1, 8002e82 <sbrk_aligned+0x12>
 8002e7c:	f000 f8bc 	bl	8002ff8 <_sbrk_r>
 8002e80:	6030      	str	r0, [r6, #0]
 8002e82:	4621      	mov	r1, r4
 8002e84:	4628      	mov	r0, r5
 8002e86:	f000 f8b7 	bl	8002ff8 <_sbrk_r>
 8002e8a:	1c43      	adds	r3, r0, #1
 8002e8c:	d00a      	beq.n	8002ea4 <sbrk_aligned+0x34>
 8002e8e:	1cc4      	adds	r4, r0, #3
 8002e90:	f024 0403 	bic.w	r4, r4, #3
 8002e94:	42a0      	cmp	r0, r4
 8002e96:	d007      	beq.n	8002ea8 <sbrk_aligned+0x38>
 8002e98:	1a21      	subs	r1, r4, r0
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	f000 f8ac 	bl	8002ff8 <_sbrk_r>
 8002ea0:	3001      	adds	r0, #1
 8002ea2:	d101      	bne.n	8002ea8 <sbrk_aligned+0x38>
 8002ea4:	f04f 34ff 	mov.w	r4, #4294967295
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	bd70      	pop	{r4, r5, r6, pc}
 8002eac:	20000198 	.word	0x20000198

08002eb0 <_malloc_r>:
 8002eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eb4:	1ccd      	adds	r5, r1, #3
 8002eb6:	f025 0503 	bic.w	r5, r5, #3
 8002eba:	3508      	adds	r5, #8
 8002ebc:	2d0c      	cmp	r5, #12
 8002ebe:	bf38      	it	cc
 8002ec0:	250c      	movcc	r5, #12
 8002ec2:	2d00      	cmp	r5, #0
 8002ec4:	4607      	mov	r7, r0
 8002ec6:	db01      	blt.n	8002ecc <_malloc_r+0x1c>
 8002ec8:	42a9      	cmp	r1, r5
 8002eca:	d905      	bls.n	8002ed8 <_malloc_r+0x28>
 8002ecc:	230c      	movs	r3, #12
 8002ece:	2600      	movs	r6, #0
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ed8:	4e2e      	ldr	r6, [pc, #184]	; (8002f94 <_malloc_r+0xe4>)
 8002eda:	f000 f89d 	bl	8003018 <__malloc_lock>
 8002ede:	6833      	ldr	r3, [r6, #0]
 8002ee0:	461c      	mov	r4, r3
 8002ee2:	bb34      	cbnz	r4, 8002f32 <_malloc_r+0x82>
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	4638      	mov	r0, r7
 8002ee8:	f7ff ffc2 	bl	8002e70 <sbrk_aligned>
 8002eec:	1c43      	adds	r3, r0, #1
 8002eee:	4604      	mov	r4, r0
 8002ef0:	d14d      	bne.n	8002f8e <_malloc_r+0xde>
 8002ef2:	6834      	ldr	r4, [r6, #0]
 8002ef4:	4626      	mov	r6, r4
 8002ef6:	2e00      	cmp	r6, #0
 8002ef8:	d140      	bne.n	8002f7c <_malloc_r+0xcc>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	4631      	mov	r1, r6
 8002efe:	4638      	mov	r0, r7
 8002f00:	eb04 0803 	add.w	r8, r4, r3
 8002f04:	f000 f878 	bl	8002ff8 <_sbrk_r>
 8002f08:	4580      	cmp	r8, r0
 8002f0a:	d13a      	bne.n	8002f82 <_malloc_r+0xd2>
 8002f0c:	6821      	ldr	r1, [r4, #0]
 8002f0e:	3503      	adds	r5, #3
 8002f10:	1a6d      	subs	r5, r5, r1
 8002f12:	f025 0503 	bic.w	r5, r5, #3
 8002f16:	3508      	adds	r5, #8
 8002f18:	2d0c      	cmp	r5, #12
 8002f1a:	bf38      	it	cc
 8002f1c:	250c      	movcc	r5, #12
 8002f1e:	4638      	mov	r0, r7
 8002f20:	4629      	mov	r1, r5
 8002f22:	f7ff ffa5 	bl	8002e70 <sbrk_aligned>
 8002f26:	3001      	adds	r0, #1
 8002f28:	d02b      	beq.n	8002f82 <_malloc_r+0xd2>
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	442b      	add	r3, r5
 8002f2e:	6023      	str	r3, [r4, #0]
 8002f30:	e00e      	b.n	8002f50 <_malloc_r+0xa0>
 8002f32:	6822      	ldr	r2, [r4, #0]
 8002f34:	1b52      	subs	r2, r2, r5
 8002f36:	d41e      	bmi.n	8002f76 <_malloc_r+0xc6>
 8002f38:	2a0b      	cmp	r2, #11
 8002f3a:	d916      	bls.n	8002f6a <_malloc_r+0xba>
 8002f3c:	1961      	adds	r1, r4, r5
 8002f3e:	42a3      	cmp	r3, r4
 8002f40:	6025      	str	r5, [r4, #0]
 8002f42:	bf18      	it	ne
 8002f44:	6059      	strne	r1, [r3, #4]
 8002f46:	6863      	ldr	r3, [r4, #4]
 8002f48:	bf08      	it	eq
 8002f4a:	6031      	streq	r1, [r6, #0]
 8002f4c:	5162      	str	r2, [r4, r5]
 8002f4e:	604b      	str	r3, [r1, #4]
 8002f50:	4638      	mov	r0, r7
 8002f52:	f104 060b 	add.w	r6, r4, #11
 8002f56:	f000 f865 	bl	8003024 <__malloc_unlock>
 8002f5a:	f026 0607 	bic.w	r6, r6, #7
 8002f5e:	1d23      	adds	r3, r4, #4
 8002f60:	1af2      	subs	r2, r6, r3
 8002f62:	d0b6      	beq.n	8002ed2 <_malloc_r+0x22>
 8002f64:	1b9b      	subs	r3, r3, r6
 8002f66:	50a3      	str	r3, [r4, r2]
 8002f68:	e7b3      	b.n	8002ed2 <_malloc_r+0x22>
 8002f6a:	6862      	ldr	r2, [r4, #4]
 8002f6c:	42a3      	cmp	r3, r4
 8002f6e:	bf0c      	ite	eq
 8002f70:	6032      	streq	r2, [r6, #0]
 8002f72:	605a      	strne	r2, [r3, #4]
 8002f74:	e7ec      	b.n	8002f50 <_malloc_r+0xa0>
 8002f76:	4623      	mov	r3, r4
 8002f78:	6864      	ldr	r4, [r4, #4]
 8002f7a:	e7b2      	b.n	8002ee2 <_malloc_r+0x32>
 8002f7c:	4634      	mov	r4, r6
 8002f7e:	6876      	ldr	r6, [r6, #4]
 8002f80:	e7b9      	b.n	8002ef6 <_malloc_r+0x46>
 8002f82:	230c      	movs	r3, #12
 8002f84:	4638      	mov	r0, r7
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	f000 f84c 	bl	8003024 <__malloc_unlock>
 8002f8c:	e7a1      	b.n	8002ed2 <_malloc_r+0x22>
 8002f8e:	6025      	str	r5, [r4, #0]
 8002f90:	e7de      	b.n	8002f50 <_malloc_r+0xa0>
 8002f92:	bf00      	nop
 8002f94:	20000194 	.word	0x20000194

08002f98 <_realloc_r>:
 8002f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f9c:	4680      	mov	r8, r0
 8002f9e:	4614      	mov	r4, r2
 8002fa0:	460e      	mov	r6, r1
 8002fa2:	b921      	cbnz	r1, 8002fae <_realloc_r+0x16>
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002faa:	f7ff bf81 	b.w	8002eb0 <_malloc_r>
 8002fae:	b92a      	cbnz	r2, 8002fbc <_realloc_r+0x24>
 8002fb0:	f7ff ff16 	bl	8002de0 <_free_r>
 8002fb4:	4625      	mov	r5, r4
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fbc:	f000 f838 	bl	8003030 <_malloc_usable_size_r>
 8002fc0:	4284      	cmp	r4, r0
 8002fc2:	4607      	mov	r7, r0
 8002fc4:	d802      	bhi.n	8002fcc <_realloc_r+0x34>
 8002fc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002fca:	d812      	bhi.n	8002ff2 <_realloc_r+0x5a>
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4640      	mov	r0, r8
 8002fd0:	f7ff ff6e 	bl	8002eb0 <_malloc_r>
 8002fd4:	4605      	mov	r5, r0
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d0ed      	beq.n	8002fb6 <_realloc_r+0x1e>
 8002fda:	42bc      	cmp	r4, r7
 8002fdc:	4622      	mov	r2, r4
 8002fde:	4631      	mov	r1, r6
 8002fe0:	bf28      	it	cs
 8002fe2:	463a      	movcs	r2, r7
 8002fe4:	f7ff fed4 	bl	8002d90 <memcpy>
 8002fe8:	4631      	mov	r1, r6
 8002fea:	4640      	mov	r0, r8
 8002fec:	f7ff fef8 	bl	8002de0 <_free_r>
 8002ff0:	e7e1      	b.n	8002fb6 <_realloc_r+0x1e>
 8002ff2:	4635      	mov	r5, r6
 8002ff4:	e7df      	b.n	8002fb6 <_realloc_r+0x1e>
	...

08002ff8 <_sbrk_r>:
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	4d05      	ldr	r5, [pc, #20]	; (8003014 <_sbrk_r+0x1c>)
 8002ffe:	4604      	mov	r4, r0
 8003000:	4608      	mov	r0, r1
 8003002:	602b      	str	r3, [r5, #0]
 8003004:	f7fd fb20 	bl	8000648 <_sbrk>
 8003008:	1c43      	adds	r3, r0, #1
 800300a:	d102      	bne.n	8003012 <_sbrk_r+0x1a>
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	b103      	cbz	r3, 8003012 <_sbrk_r+0x1a>
 8003010:	6023      	str	r3, [r4, #0]
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	2000019c 	.word	0x2000019c

08003018 <__malloc_lock>:
 8003018:	4801      	ldr	r0, [pc, #4]	; (8003020 <__malloc_lock+0x8>)
 800301a:	f000 b811 	b.w	8003040 <__retarget_lock_acquire_recursive>
 800301e:	bf00      	nop
 8003020:	200001a0 	.word	0x200001a0

08003024 <__malloc_unlock>:
 8003024:	4801      	ldr	r0, [pc, #4]	; (800302c <__malloc_unlock+0x8>)
 8003026:	f000 b80c 	b.w	8003042 <__retarget_lock_release_recursive>
 800302a:	bf00      	nop
 800302c:	200001a0 	.word	0x200001a0

08003030 <_malloc_usable_size_r>:
 8003030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003034:	1f18      	subs	r0, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	bfbc      	itt	lt
 800303a:	580b      	ldrlt	r3, [r1, r0]
 800303c:	18c0      	addlt	r0, r0, r3
 800303e:	4770      	bx	lr

08003040 <__retarget_lock_acquire_recursive>:
 8003040:	4770      	bx	lr

08003042 <__retarget_lock_release_recursive>:
 8003042:	4770      	bx	lr

08003044 <_init>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	bf00      	nop
 8003048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304a:	bc08      	pop	{r3}
 800304c:	469e      	mov	lr, r3
 800304e:	4770      	bx	lr

08003050 <_fini>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr
